<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 5.0 (Python 3.6.9 on linux)" generated="20220405 03:43:28.825" rpa="false" schemaversion="3">
<suite id="s1" name="ozones3-haproxy" source="/opt/hadoop/smoketest/basic/basic.robot">
<test id="s1-t1" name="Check webui static resources">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220405 03:43:04.048" endtime="20220405 03:43:04.048"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -s -I http://${SCM}:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220405 03:43:04.053" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20220405 03:43:04.146" level="INFO">${rc} = 0</msg>
<msg timestamp="20220405 03:43:04.146" level="INFO">${output} = HTTP/1.1 200 OK
Date: Tue, 05 Apr 2022 03:43:04 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Tue, 05 Apr 2022 03:18:36 GMT
Content-Typ...</msg>
<status status="PASS" starttime="20220405 03:43:04.049" endtime="20220405 03:43:04.146"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220405 03:43:04.147" level="INFO">HTTP/1.1 200 OK
Date: Tue, 05 Apr 2022 03:43:04 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Tue, 05 Apr 2022 03:18:36 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" starttime="20220405 03:43:04.146" endtime="20220405 03:43:04.147"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220405 03:43:04.148" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220405 03:43:04.147" endtime="20220405 03:43:04.148"/>
</kw>
<status status="PASS" starttime="20220405 03:43:04.049" endtime="20220405 03:43:04.148"/>
</kw>
<msg timestamp="20220405 03:43:04.148" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220405 03:43:04.049" endtime="20220405 03:43:04.149"/>
</kw>
<msg timestamp="20220405 03:43:04.150" level="INFO">${result} = HTTP/1.1 200 OK
Date: Tue, 05 Apr 2022 03:43:04 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Tue, 05 Apr 2022 03:18:36 GMT
Content-Typ...</msg>
<status status="PASS" starttime="20220405 03:43:04.048" endtime="20220405 03:43:04.150"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220405 03:43:04.150" endtime="20220405 03:43:04.150"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220405 03:43:04.047" endtime="20220405 03:43:04.150"/>
</test>
<test id="s1-t2" name="Basic Freon smoketest">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220405 03:43:04.153" endtime="20220405 03:43:04.154"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220405 03:43:04.154" level="INFO">${random} = pgjtrvkMva</msg>
<status status="PASS" starttime="20220405 03:43:04.154" endtime="20220405 03:43:04.154"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220405 03:43:04.159" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p pgjtrvkMva  2&gt;&amp;1'.</msg>
<msg timestamp="20220405 03:43:09.041" level="INFO">${rc} = 0</msg>
<msg timestamp="20220405 03:43:09.041" level="INFO">${output} = 2022-04-05 03:43:05,304 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2022-04-05 03:43:05,415 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20220405 03:43:04.158" endtime="20220405 03:43:09.041"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220405 03:43:09.042" level="INFO">2022-04-05 03:43:05,304 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2022-04-05 03:43:05,415 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2022-04-05 03:43:05,415 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2022-04-05 03:43:05,589 [main] INFO freon.BaseFreonGenerator: Executing test with prefix pgjtrvkMva
2022-04-05 03:43:05,656 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2022-04-05 03:43:06,390 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hadoop as owner and space quota set to -1 bytes, counts quota set to -1
2022-04-05 03:43:06,516 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with hadoop as owner and Versioning false and Storage Type set to DISK and Encryption set to false 
2022-04-05 03:43:06,667 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2022-04-05 03:43:07,135 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2022-04-05 03:43:07,318 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2022-04-05 03:43:07,668 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2022-04-05 03:43:08,668 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2022-04-05 03:43:08,695 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=1862.546373, max=1862.546373, mean=1862.546373, stddev=0.0, median=1862.546373, p75=1862.546373, p95=1862.546373, p98=1862.546373, p99=1862.546373, p999=1862.546373, mean_rate=0.4651712341830151, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2022-04-05 03:43:08,696 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2022-04-05 03:43:08,696 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2022-04-05 03:43:08,696 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20220405 03:43:09.041" endtime="20220405 03:43:09.042"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220405 03:43:09.043" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220405 03:43:09.042" endtime="20220405 03:43:09.043"/>
</kw>
<status status="PASS" starttime="20220405 03:43:04.157" endtime="20220405 03:43:09.044"/>
</kw>
<msg timestamp="20220405 03:43:09.044" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220405 03:43:04.157" endtime="20220405 03:43:09.044"/>
</kw>
<msg timestamp="20220405 03:43:09.045" level="INFO">${result} = 2022-04-05 03:43:05,304 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2022-04-05 03:43:05,415 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20220405 03:43:04.156" endtime="20220405 03:43:09.045"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220405 03:43:09.045" endtime="20220405 03:43:09.046"/>
</kw>
<status status="PASS" starttime="20220405 03:43:04.155" endtime="20220405 03:43:09.046"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220405 03:43:09.051" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p pgjtrvkMva  2&gt;&amp;1'.</msg>
<msg timestamp="20220405 03:43:13.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20220405 03:43:13.685" level="INFO">${output} = 2022-04-05 03:43:10,276 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2022-04-05 03:43:10,391 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20220405 03:43:09.049" endtime="20220405 03:43:13.685"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220405 03:43:13.686" level="INFO">2022-04-05 03:43:10,276 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2022-04-05 03:43:10,391 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2022-04-05 03:43:10,393 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2022-04-05 03:43:10,556 [main] INFO freon.BaseFreonGenerator: Executing test with prefix pgjtrvkMva
2022-04-05 03:43:10,631 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2022-04-05 03:43:11,635 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2022-04-05 03:43:11,716 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2022-04-05 03:43:12,636 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2022-04-05 03:43:13,328 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=34.807383, max=34.807383, mean=34.807383, stddev=0.0, median=34.807383, p75=34.807383, p95=34.807383, p98=34.807383, p99=34.807383, p999=34.807383, mean_rate=0.9890695950799223, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2022-04-05 03:43:13,329 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2022-04-05 03:43:13,329 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2022-04-05 03:43:13,329 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20220405 03:43:13.685" endtime="20220405 03:43:13.686"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220405 03:43:13.687" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220405 03:43:13.686" endtime="20220405 03:43:13.687"/>
</kw>
<status status="PASS" starttime="20220405 03:43:09.048" endtime="20220405 03:43:13.687"/>
</kw>
<msg timestamp="20220405 03:43:13.687" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220405 03:43:09.048" endtime="20220405 03:43:13.688"/>
</kw>
<msg timestamp="20220405 03:43:13.688" level="INFO">${result} = 2022-04-05 03:43:10,276 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2022-04-05 03:43:10,391 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20220405 03:43:09.047" endtime="20220405 03:43:13.688"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220405 03:43:13.688" endtime="20220405 03:43:13.689"/>
</kw>
<status status="PASS" starttime="20220405 03:43:09.046" endtime="20220405 03:43:13.689"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220405 03:43:04.151" endtime="20220405 03:43:13.689"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220405 03:43:03.988" endtime="20220405 03:43:13.690"/>
</suite>
<statistics>
<total>
<stat pass="2" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="0" skip="0" id="s1" name="ozones3-haproxy">ozones3-haproxy</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
