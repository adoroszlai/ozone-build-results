<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 4.1.3 (Python 3.6.9 on linux)" generated="20220203 06:01:24.789" rpa="false" schemaversion="2">
<suite id="s1" name="upgrade">
<suite id="s1-s1" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s1-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 05:52:24.799" level="INFO">${random} = 47721</msg>
<status status="PASS" starttime="20220203 05:52:24.798" endtime="20220203 05:52:24.799"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:52:24.804" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-47721 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:52:28.350" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:52:28.350" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:24.800" endtime="20220203 05:52:28.350"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:52:28.351" level="INFO"/>
<status status="PASS" starttime="20220203 05:52:28.350" endtime="20220203 05:52:28.351"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:52:28.352" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:52:28.351" endtime="20220203 05:52:28.352"/>
</kw>
<status status="PASS" starttime="20220203 05:52:24.800" endtime="20220203 05:52:28.352"/>
</kw>
<msg timestamp="20220203 05:52:28.352" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:52:24.800" endtime="20220203 05:52:28.352"/>
</kw>
<msg timestamp="20220203 05:52:28.352" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:24.799" endtime="20220203 05:52:28.352"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:52:28.352" endtime="20220203 05:52:28.353"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:52:24.797" endtime="20220203 05:52:28.353"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 05:52:24.752" endtime="20220203 05:52:28.354"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s2-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 05:56:10.990" level="INFO">${random} = 13465</msg>
<status status="PASS" starttime="20220203 05:56:10.989" endtime="20220203 05:56:10.990"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:56:10.995" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-13465 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:56:14.724" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:56:14.724" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:10.992" endtime="20220203 05:56:14.724"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:56:14.725" level="INFO"/>
<status status="PASS" starttime="20220203 05:56:14.725" endtime="20220203 05:56:14.725"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:56:14.726" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:56:14.726" endtime="20220203 05:56:14.726"/>
</kw>
<status status="PASS" starttime="20220203 05:56:10.991" endtime="20220203 05:56:14.727"/>
</kw>
<msg timestamp="20220203 05:56:14.727" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:56:10.991" endtime="20220203 05:56:14.727"/>
</kw>
<msg timestamp="20220203 05:56:14.727" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:10.990" endtime="20220203 05:56:14.727"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:56:14.727" endtime="20220203 05:56:14.728"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:56:10.988" endtime="20220203 05:56:14.728"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 05:56:10.933" endtime="20220203 05:56:14.729"/>
</suite>
<suite id="s1-s3" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:56:18.031" level="INFO">Running command 'ozone sh volume create old2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:56:20.169" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:56:20.169" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:18.027" endtime="20220203 05:56:20.169"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:56:20.175" level="INFO"/>
<status status="PASS" starttime="20220203 05:56:20.170" endtime="20220203 05:56:20.175"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:56:20.175" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:56:20.175" endtime="20220203 05:56:20.175"/>
</kw>
<status status="PASS" starttime="20220203 05:56:18.027" endtime="20220203 05:56:20.176"/>
</kw>
<msg timestamp="20220203 05:56:20.176" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:56:18.027" endtime="20220203 05:56:20.176"/>
</kw>
<msg timestamp="20220203 05:56:20.176" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:18.026" endtime="20220203 05:56:20.176"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:56:20.176" endtime="20220203 05:56:20.177"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:56:20.188" level="INFO">Running command 'ozone sh bucket create /old2-volume/old2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:56:22.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:56:22.285" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:20.183" endtime="20220203 05:56:22.285"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:56:22.287" level="INFO"/>
<status status="PASS" starttime="20220203 05:56:22.286" endtime="20220203 05:56:22.287"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:56:22.287" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:56:22.287" endtime="20220203 05:56:22.287"/>
</kw>
<status status="PASS" starttime="20220203 05:56:20.178" endtime="20220203 05:56:22.288"/>
</kw>
<msg timestamp="20220203 05:56:22.288" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:56:20.177" endtime="20220203 05:56:22.288"/>
</kw>
<msg timestamp="20220203 05:56:22.288" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:20.177" endtime="20220203 05:56:22.288"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:56:22.288" endtime="20220203 05:56:22.289"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:56:22.304" level="INFO">Running command 'ozone sh key put /old2-volume/old2-bucket/old2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:56:26.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:56:26.631" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:22.302" endtime="20220203 05:56:26.631"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:56:26.632" level="INFO"/>
<status status="PASS" starttime="20220203 05:56:26.632" endtime="20220203 05:56:26.632"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:56:26.633" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:56:26.632" endtime="20220203 05:56:26.633"/>
</kw>
<status status="PASS" starttime="20220203 05:56:22.299" endtime="20220203 05:56:26.633"/>
</kw>
<msg timestamp="20220203 05:56:26.633" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:56:22.298" endtime="20220203 05:56:26.633"/>
</kw>
<msg timestamp="20220203 05:56:26.634" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:22.297" endtime="20220203 05:56:26.634"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:56:26.634" endtime="20220203 05:56:26.634"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:56:18.025" endtime="20220203 05:56:26.634"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 05:56:17.979" endtime="20220203 05:56:26.636"/>
</suite>
<suite id="s1-s4" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 05:56:29.967" level="INFO">${random} = 51506</msg>
<status status="PASS" starttime="20220203 05:56:29.966" endtime="20220203 05:56:29.967"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:56:29.972" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-51506 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:56:33.728" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:56:33.728" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:29.968" endtime="20220203 05:56:33.728"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:56:33.729" level="INFO"/>
<status status="PASS" starttime="20220203 05:56:33.729" endtime="20220203 05:56:33.729"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:56:33.730" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:56:33.730" endtime="20220203 05:56:33.730"/>
</kw>
<status status="PASS" starttime="20220203 05:56:29.968" endtime="20220203 05:56:33.730"/>
</kw>
<msg timestamp="20220203 05:56:33.730" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:56:29.968" endtime="20220203 05:56:33.731"/>
</kw>
<msg timestamp="20220203 05:56:33.731" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:29.967" endtime="20220203 05:56:33.731"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:56:33.731" endtime="20220203 05:56:33.731"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:56:29.965" endtime="20220203 05:56:33.732"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 05:56:29.919" endtime="20220203 05:56:33.733"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 05:56:03.432" level="INFO">${random} = 92597</msg>
<status status="PASS" starttime="20220203 05:56:03.431" endtime="20220203 05:56:03.432"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:56:03.437" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-92597 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:56:07.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:56:07.515" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:03.433" endtime="20220203 05:56:07.515"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:56:07.516" level="INFO"/>
<status status="PASS" starttime="20220203 05:56:07.515" endtime="20220203 05:56:07.516"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:56:07.516" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:56:07.516" endtime="20220203 05:56:07.517"/>
</kw>
<status status="PASS" starttime="20220203 05:56:03.433" endtime="20220203 05:56:07.517"/>
</kw>
<msg timestamp="20220203 05:56:07.517" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:56:03.433" endtime="20220203 05:56:07.517"/>
</kw>
<msg timestamp="20220203 05:56:07.517" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:56:03.432" endtime="20220203 05:56:07.517"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:56:07.517" endtime="20220203 05:56:07.518"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:56:03.430" endtime="20220203 05:56:07.518"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 05:56:03.379" endtime="20220203 05:56:07.519"/>
</suite>
<suite id="s1-s6" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s6-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:52:11.166" level="INFO">Running command 'ozone sh volume create old1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:52:13.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:52:13.380" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:11.163" endtime="20220203 05:52:13.380"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:52:13.381" level="INFO"/>
<status status="PASS" starttime="20220203 05:52:13.380" endtime="20220203 05:52:13.381"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:52:13.381" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:52:13.381" endtime="20220203 05:52:13.382"/>
</kw>
<status status="PASS" starttime="20220203 05:52:11.162" endtime="20220203 05:52:13.382"/>
</kw>
<msg timestamp="20220203 05:52:13.382" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:52:11.162" endtime="20220203 05:52:13.384"/>
</kw>
<msg timestamp="20220203 05:52:13.386" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:11.161" endtime="20220203 05:52:13.386"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:52:13.386" endtime="20220203 05:52:13.386"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:52:13.396" level="INFO">Running command 'ozone sh bucket create /old1-volume/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:52:15.862" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:52:15.862" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:13.388" endtime="20220203 05:52:15.862"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:52:15.864" level="INFO"/>
<status status="PASS" starttime="20220203 05:52:15.863" endtime="20220203 05:52:15.864"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:52:15.865" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:52:15.864" endtime="20220203 05:52:15.865"/>
</kw>
<status status="PASS" starttime="20220203 05:52:13.387" endtime="20220203 05:52:15.865"/>
</kw>
<msg timestamp="20220203 05:52:15.865" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:52:13.387" endtime="20220203 05:52:15.865"/>
</kw>
<msg timestamp="20220203 05:52:15.865" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:13.386" endtime="20220203 05:52:15.865"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:52:15.867" endtime="20220203 05:52:15.868"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:52:15.875" level="INFO">Running command 'ozone sh key put /old1-volume/old1-bucket/old1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:52:21.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:52:21.358" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:15.869" endtime="20220203 05:52:21.358"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:52:21.359" level="INFO"/>
<status status="PASS" starttime="20220203 05:52:21.358" endtime="20220203 05:52:21.359"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:52:21.360" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:52:21.359" endtime="20220203 05:52:21.360"/>
</kw>
<status status="PASS" starttime="20220203 05:52:15.869" endtime="20220203 05:52:21.360"/>
</kw>
<msg timestamp="20220203 05:52:21.360" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:52:15.868" endtime="20220203 05:52:21.360"/>
</kw>
<msg timestamp="20220203 05:52:21.361" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:52:15.868" endtime="20220203 05:52:21.361"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:52:21.361" endtime="20220203 05:52:21.361"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:52:11.160" endtime="20220203 05:52:21.361"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 05:52:11.113" endtime="20220203 05:52:21.362"/>
</suite>
<suite id="s1-s7" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s7-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:08.921" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20220203 06:00:08.920" endtime="20220203 06:00:08.921"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:08.921" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:08.921" endtime="20220203 06:00:08.921"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:08.922" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:08.921" endtime="20220203 06:00:08.922"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:08.922" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:08.922" endtime="20220203 06:00:08.922"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:08.923" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:08.924" level="INFO">${version_file_contents} = #Thu Feb 03 05:57:57 UTC 2022
cTime=1643867480670
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
nodeType=SCM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c42
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 06:00:08.923" endtime="20220203 06:00:08.924"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:08.924" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 06:00:08.924" endtime="20220203 06:00:08.924"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:08.925" endtime="20220203 06:00:08.925"/>
</kw>
<status status="PASS" starttime="20220203 06:00:08.923" endtime="20220203 06:00:08.925"/>
</kw>
<status status="PASS" starttime="20220203 06:00:08.922" endtime="20220203 06:00:08.925"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:08.919" endtime="20220203 06:00:08.925"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:08.874" endtime="20220203 06:00:08.926"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s8-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 06:00:46.261" level="INFO">${random} = 00077</msg>
<status status="PASS" starttime="20220203 06:00:46.261" endtime="20220203 06:00:46.261"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:46.266" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-00077 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:50.086" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:50.086" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:46.263" endtime="20220203 06:00:50.086"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:50.087" level="INFO"/>
<status status="PASS" starttime="20220203 06:00:50.086" endtime="20220203 06:00:50.087"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:50.088" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:50.087" endtime="20220203 06:00:50.088"/>
</kw>
<status status="PASS" starttime="20220203 06:00:46.262" endtime="20220203 06:00:50.088"/>
</kw>
<msg timestamp="20220203 06:00:50.088" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:46.262" endtime="20220203 06:00:50.089"/>
</kw>
<msg timestamp="20220203 06:00:50.090" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:46.261" endtime="20220203 06:00:50.090"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:50.090" endtime="20220203 06:00:50.090"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:46.260" endtime="20220203 06:00:50.090"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 06:00:46.213" endtime="20220203 06:00:50.092"/>
</suite>
<suite id="s1-s9" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s9-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:53.382" level="INFO">Running command 'ozone sh volume create new2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:55.654" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:55.654" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:53.378" endtime="20220203 06:00:55.654"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:55.655" level="INFO"/>
<status status="PASS" starttime="20220203 06:00:55.654" endtime="20220203 06:00:55.655"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:55.656" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:55.655" endtime="20220203 06:00:55.656"/>
</kw>
<status status="PASS" starttime="20220203 06:00:53.378" endtime="20220203 06:00:55.656"/>
</kw>
<msg timestamp="20220203 06:00:55.656" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:53.378" endtime="20220203 06:00:55.657"/>
</kw>
<msg timestamp="20220203 06:00:55.659" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:53.377" endtime="20220203 06:00:55.659"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:55.659" endtime="20220203 06:00:55.659"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:55.664" level="INFO">Running command 'ozone sh bucket create /new2-volume/new2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:57.843" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:57.843" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:55.661" endtime="20220203 06:00:57.843"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:57.844" level="INFO"/>
<status status="PASS" starttime="20220203 06:00:57.844" endtime="20220203 06:00:57.844"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:57.845" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:57.845" endtime="20220203 06:00:57.845"/>
</kw>
<status status="PASS" starttime="20220203 06:00:55.660" endtime="20220203 06:00:57.845"/>
</kw>
<msg timestamp="20220203 06:00:57.845" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:55.660" endtime="20220203 06:00:57.846"/>
</kw>
<msg timestamp="20220203 06:00:57.846" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:55.660" endtime="20220203 06:00:57.846"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:57.846" endtime="20220203 06:00:57.847"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:57.850" level="INFO">Running command 'ozone sh key put /new2-volume/new2-bucket/new2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:01:02.597" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:01:02.597" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:57.848" endtime="20220203 06:01:02.597"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:01:02.598" level="INFO"/>
<status status="PASS" starttime="20220203 06:01:02.597" endtime="20220203 06:01:02.598"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:01:02.599" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:01:02.598" endtime="20220203 06:01:02.599"/>
</kw>
<status status="PASS" starttime="20220203 06:00:57.848" endtime="20220203 06:01:02.599"/>
</kw>
<msg timestamp="20220203 06:01:02.599" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:57.847" endtime="20220203 06:01:02.600"/>
</kw>
<msg timestamp="20220203 06:01:02.600" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:57.847" endtime="20220203 06:01:02.600"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:01:02.600" endtime="20220203 06:01:02.600"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:53.376" endtime="20220203 06:01:02.601"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 06:00:53.330" endtime="20220203 06:01:02.602"/>
</suite>
<suite id="s1-s10" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s10-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 06:01:05.879" level="INFO">${random} = 40809</msg>
<status status="PASS" starttime="20220203 06:01:05.879" endtime="20220203 06:01:05.879"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:01:05.885" level="INFO">Running command 'ozone sh key get /new2-volume/new2-bucket/new2-key /tmp/key-40809 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:01:09.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:01:09.661" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:01:05.881" endtime="20220203 06:01:09.661"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:01:09.662" level="INFO"/>
<status status="PASS" starttime="20220203 06:01:09.662" endtime="20220203 06:01:09.663"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:01:09.663" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:01:09.663" endtime="20220203 06:01:09.663"/>
</kw>
<status status="PASS" starttime="20220203 06:01:05.881" endtime="20220203 06:01:09.664"/>
</kw>
<msg timestamp="20220203 06:01:09.664" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:01:05.880" endtime="20220203 06:01:09.665"/>
</kw>
<msg timestamp="20220203 06:01:09.665" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:01:05.879" endtime="20220203 06:01:09.665"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:01:09.665" endtime="20220203 06:01:09.666"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:01:05.878" endtime="20220203 06:01:09.666"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 06:01:05.831" endtime="20220203 06:01:09.667"/>
</suite>
<suite id="s1-s11" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s11-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:12.219" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 06:00:12.219" endtime="20220203 06:00:12.219"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:12.220" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:12.220" endtime="20220203 06:00:12.220"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:12.220" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:12.220" endtime="20220203 06:00:12.220"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:12.221" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:12.221" endtime="20220203 06:00:12.221"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:12.222" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:12.222" level="INFO">${version_file_contents} = #Thu Feb 03 05:58:56 UTC 2022
cTime=1643867573456
clusterID=dd54ce2d-ffbe-4a10-9bcf-ff71046ae177
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 06:00:12.222" endtime="20220203 06:00:12.222"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:12.223" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 06:00:12.222" endtime="20220203 06:00:12.223"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:12.223" endtime="20220203 06:00:12.223"/>
</kw>
<status status="PASS" starttime="20220203 06:00:12.221" endtime="20220203 06:00:12.224"/>
</kw>
<status status="PASS" starttime="20220203 06:00:12.221" endtime="20220203 06:00:12.224"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:12.218" endtime="20220203 06:00:12.224"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:12.172" endtime="20220203 06:00:12.224"/>
</suite>
<suite id="s1-s12" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s12-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:15.488" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 06:00:15.488" endtime="20220203 06:00:15.488"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:15.489" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:15.488" endtime="20220203 06:00:15.489"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:15.489" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:15.489" endtime="20220203 06:00:15.489"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:15.490" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:15.489" endtime="20220203 06:00:15.490"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:15.491" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:15.491" level="INFO">${version_file_contents} = #Thu Feb 03 05:58:56 UTC 2022
cTime=1643867572859
clusterID=58c518d4-3e7a-4990-a45f-39a96c6fff18
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 06:00:15.490" endtime="20220203 06:00:15.491"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:15.492" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 06:00:15.491" endtime="20220203 06:00:15.492"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:15.492" endtime="20220203 06:00:15.492"/>
</kw>
<status status="PASS" starttime="20220203 06:00:15.490" endtime="20220203 06:00:15.492"/>
</kw>
<status status="PASS" starttime="20220203 06:00:15.490" endtime="20220203 06:00:15.492"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:15.487" endtime="20220203 06:00:15.493"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:15.441" endtime="20220203 06:00:15.493"/>
</suite>
<suite id="s1-s13" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s13-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:18.754" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 06:00:18.753" endtime="20220203 06:00:18.754"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:18.755" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:18.754" endtime="20220203 06:00:18.755"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:18.755" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:18.755" endtime="20220203 06:00:18.755"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:18.756" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:18.755" endtime="20220203 06:00:18.756"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:18.757" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:18.757" level="INFO">${version_file_contents} = #Thu Feb 03 05:58:56 UTC 2022
cTime=1643867569063
clusterID=06a98ddf-af60-40ca-8982-ee26cf66646d
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 06:00:18.757" endtime="20220203 06:00:18.757"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:18.758" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 06:00:18.757" endtime="20220203 06:00:18.758"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:18.758" endtime="20220203 06:00:18.758"/>
</kw>
<status status="PASS" starttime="20220203 06:00:18.756" endtime="20220203 06:00:18.759"/>
</kw>
<status status="PASS" starttime="20220203 06:00:18.756" endtime="20220203 06:00:18.759"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:18.753" endtime="20220203 06:00:18.759"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:18.708" endtime="20220203 06:00:18.760"/>
</suite>
<suite id="s1-s14" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s14-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:22.068" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 06:00:22.068" endtime="20220203 06:00:22.068"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:22.069" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:22.068" endtime="20220203 06:00:22.069"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:22.069" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:22.069" endtime="20220203 06:00:22.069"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:22.070" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:22.069" endtime="20220203 06:00:22.070"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:22.071" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:22.071" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:41 UTC 2022
cTime=1643867481926
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
omUuid=0c998e91-0537-483a-a9de-d2bd9487594f
nodeType=OM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c4...</msg>
<status status="PASS" starttime="20220203 06:00:22.071" endtime="20220203 06:00:22.071"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:22.072" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 06:00:22.071" endtime="20220203 06:00:22.072"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:22.072" endtime="20220203 06:00:22.072"/>
</kw>
<status status="PASS" starttime="20220203 06:00:22.070" endtime="20220203 06:00:22.072"/>
</kw>
<status status="PASS" starttime="20220203 06:00:22.070" endtime="20220203 06:00:22.073"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:22.067" endtime="20220203 06:00:22.073"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:22.023" endtime="20220203 06:00:22.073"/>
</suite>
<suite id="s1-s15" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s15-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:25.427" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 06:00:25.427" endtime="20220203 06:00:25.427"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:25.428" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:25.427" endtime="20220203 06:00:25.428"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:25.428" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:25.428" endtime="20220203 06:00:25.428"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:25.429" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:25.428" endtime="20220203 06:00:25.429"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:25.430" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:25.431" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:41 UTC 2022
cTime=1643867481240
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
omUuid=97620a64-abce-40d2-aa60-2ef2e1222375
nodeType=OM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c4...</msg>
<status status="PASS" starttime="20220203 06:00:25.430" endtime="20220203 06:00:25.431"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:25.431" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 06:00:25.431" endtime="20220203 06:00:25.431"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:25.431" endtime="20220203 06:00:25.432"/>
</kw>
<status status="PASS" starttime="20220203 06:00:25.430" endtime="20220203 06:00:25.432"/>
</kw>
<status status="PASS" starttime="20220203 06:00:25.429" endtime="20220203 06:00:25.432"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:25.426" endtime="20220203 06:00:25.432"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:25.380" endtime="20220203 06:00:25.433"/>
</suite>
<suite id="s1-s16" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s16-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:28.700" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 06:00:28.699" endtime="20220203 06:00:28.700"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 06:00:28.700" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 06:00:28.700" endtime="20220203 06:00:28.700"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 06:00:28.701" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 06:00:28.700" endtime="20220203 06:00:28.701"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 06:00:28.701" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 06:00:28.701" endtime="20220203 06:00:28.701"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 06:00:28.703" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 06:00:28.703" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:41 UTC 2022
cTime=1643867483456
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
omUuid=578b449a-0c1d-4798-815a-59212a5f5c6c
nodeType=OM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c4...</msg>
<status status="PASS" starttime="20220203 06:00:28.702" endtime="20220203 06:00:28.703"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 06:00:28.703" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 06:00:28.703" endtime="20220203 06:00:28.704"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:28.704" endtime="20220203 06:00:28.704"/>
</kw>
<status status="PASS" starttime="20220203 06:00:28.702" endtime="20220203 06:00:28.704"/>
</kw>
<status status="PASS" starttime="20220203 06:00:28.702" endtime="20220203 06:00:28.704"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:28.699" endtime="20220203 06:00:28.704"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 06:00:28.653" endtime="20220203 06:00:28.705"/>
</suite>
<suite id="s1-s17" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s17-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 06:00:31.988" level="INFO">${random} = 23049</msg>
<status status="PASS" starttime="20220203 06:00:31.988" endtime="20220203 06:00:31.988"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:31.993" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-23049 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:35.793" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:35.794" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:31.990" endtime="20220203 06:00:35.794"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:35.795" level="INFO"/>
<status status="PASS" starttime="20220203 06:00:35.794" endtime="20220203 06:00:35.795"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:35.795" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:35.795" endtime="20220203 06:00:35.796"/>
</kw>
<status status="PASS" starttime="20220203 06:00:31.989" endtime="20220203 06:00:35.796"/>
</kw>
<msg timestamp="20220203 06:00:35.796" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:31.989" endtime="20220203 06:00:35.797"/>
</kw>
<msg timestamp="20220203 06:00:35.797" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:31.988" endtime="20220203 06:00:35.797"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:35.798" endtime="20220203 06:00:35.798"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:31.987" endtime="20220203 06:00:35.798"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 06:00:31.941" endtime="20220203 06:00:35.799"/>
</suite>
<suite id="s1-s18" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s18-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 06:00:39.079" level="INFO">${random} = 26664</msg>
<status status="PASS" starttime="20220203 06:00:39.079" endtime="20220203 06:00:39.079"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:39.085" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-26664 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:42.950" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:42.951" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:39.081" endtime="20220203 06:00:42.951"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:42.952" level="INFO"/>
<status status="PASS" starttime="20220203 06:00:42.951" endtime="20220203 06:00:42.952"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:42.953" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:42.952" endtime="20220203 06:00:42.953"/>
</kw>
<status status="PASS" starttime="20220203 06:00:39.080" endtime="20220203 06:00:42.953"/>
</kw>
<msg timestamp="20220203 06:00:42.953" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:39.080" endtime="20220203 06:00:42.955"/>
</kw>
<msg timestamp="20220203 06:00:42.955" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 06:00:39.079" endtime="20220203 06:00:42.955"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 06:00:42.955" endtime="20220203 06:00:42.955"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:39.078" endtime="20220203 06:00:42.956"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 06:00:39.028" endtime="20220203 06:00:42.957"/>
</suite>
<suite id="s1-s19" name="Finalize" source="/opt/hadoop/smoketest/upgrade/finalize.robot">
<test id="s1-s19-t1" name="Finalize SCM">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220203 05:57:50.094" endtime="20220203 05:57:50.094"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm finalizeupgrade</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:57:50.099" level="INFO">Running command 'ozone admin scm finalizeupgrade 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:03.054" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:03.054" level="INFO">${output} = Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature:...</msg>
<status status="PASS" starttime="20220203 05:57:50.095" endtime="20220203 06:00:03.054"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:03.055" level="INFO">Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20220203 06:00:03.055" endtime="20220203 06:00:03.055"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:03.056" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:03.055" endtime="20220203 06:00:03.056"/>
</kw>
<status status="PASS" starttime="20220203 05:57:50.095" endtime="20220203 06:00:03.056"/>
</kw>
<msg timestamp="20220203 06:00:03.056" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:57:50.095" endtime="20220203 06:00:03.057"/>
</kw>
<msg timestamp="20220203 06:00:03.058" level="INFO">${result} = Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature:...</msg>
<status status="PASS" starttime="20220203 05:57:50.094" endtime="20220203 06:00:03.058"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:03.058" level="INFO">Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20220203 06:00:03.058" endtime="20220203 06:00:03.058"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:57:50.093" endtime="20220203 06:00:03.059"/>
</test>
<test id="s1-s19-t2" name="Finalize OMs">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220203 06:00:03.061" endtime="20220203 06:00:03.061"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om finalizeupgrade -id %{OM_SERVICE_ID}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 06:00:03.064" level="INFO">Running command 'ozone admin om finalizeupgrade -id omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 06:00:05.674" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 06:00:05.675" level="INFO">${output} = com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
...</msg>
<status status="PASS" starttime="20220203 06:00:03.062" endtime="20220203 06:00:05.675"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:05.676" level="INFO">com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.createNotLeaderException(OzoneManagerRatisUtils.java:360)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:346)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.checkLeaderStatus(OzoneManagerProtocolServerSideTranslatorPB.java:279)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:158)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:87)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:124)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:466)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:574)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:552)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1093)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1035)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:963)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1878)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2966)
, while invoking $Proxy20.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20220203 06:00:05.675" endtime="20220203 06:00:05.676"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 06:00:05.677" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 06:00:05.676" endtime="20220203 06:00:05.677"/>
</kw>
<status status="PASS" starttime="20220203 06:00:03.062" endtime="20220203 06:00:05.677"/>
</kw>
<msg timestamp="20220203 06:00:05.677" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 06:00:03.062" endtime="20220203 06:00:05.678"/>
</kw>
<msg timestamp="20220203 06:00:05.678" level="INFO">${result} = com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
...</msg>
<status status="PASS" starttime="20220203 06:00:03.061" endtime="20220203 06:00:05.678"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 06:00:05.679" level="INFO">com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.createNotLeaderException(OzoneManagerRatisUtils.java:360)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:346)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.checkLeaderStatus(OzoneManagerProtocolServerSideTranslatorPB.java:279)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:158)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:87)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:124)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:466)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:574)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:552)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1093)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1035)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:963)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1878)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2966)
, while invoking $Proxy20.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20220203 06:00:05.678" endtime="20220203 06:00:05.679"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 06:00:03.060" endtime="20220203 06:00:05.679"/>
</test>
<doc>Finalize Upgrade of OMs and SCM</doc>
<status status="PASS" starttime="20220203 05:57:50.047" endtime="20220203 06:00:05.680"/>
</suite>
<suite id="s1-s20" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s20-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:53:54.633" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 05:53:54.632" endtime="20220203 05:53:54.633"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:53:54.633" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:53:54.633" endtime="20220203 05:53:54.633"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:53:54.634" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:53:54.634" endtime="20220203 05:53:54.634"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:53:54.634" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 05:53:54.634" endtime="20220203 05:53:54.635"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:53:54.636" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:53:54.636" level="INFO">${version_file_contents} = #Thu Feb 03 05:52:53 UTC 2022
cTime=1643867573456
clusterID=dd54ce2d-ffbe-4a10-9bcf-ff71046ae177
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 05:53:54.635" endtime="20220203 05:53:54.636"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:53:54.637" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:53:54.636" endtime="20220203 05:53:54.637"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:53:54.637" endtime="20220203 05:53:54.637"/>
</kw>
<status status="PASS" starttime="20220203 05:53:54.635" endtime="20220203 05:53:54.637"/>
</kw>
<status status="PASS" starttime="20220203 05:53:54.635" endtime="20220203 05:53:54.637"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:53:54.632" endtime="20220203 05:53:54.637"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:53:54.580" endtime="20220203 05:53:54.638"/>
</suite>
<suite id="s1-s21" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s21-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:53:58.106" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 05:53:58.105" endtime="20220203 05:53:58.106"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:53:58.106" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:53:58.106" endtime="20220203 05:53:58.106"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:53:58.107" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:53:58.106" endtime="20220203 05:53:58.107"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:53:58.107" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 05:53:58.107" endtime="20220203 05:53:58.107"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:53:58.108" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:53:58.109" level="INFO">${version_file_contents} = #Thu Feb 03 05:52:52 UTC 2022
cTime=1643867572859
clusterID=58c518d4-3e7a-4990-a45f-39a96c6fff18
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 05:53:58.108" endtime="20220203 05:53:58.109"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:53:58.109" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:53:58.109" endtime="20220203 05:53:58.109"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:53:58.109" endtime="20220203 05:53:58.110"/>
</kw>
<status status="PASS" starttime="20220203 05:53:58.108" endtime="20220203 05:53:58.110"/>
</kw>
<status status="PASS" starttime="20220203 05:53:58.107" endtime="20220203 05:53:58.110"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:53:58.104" endtime="20220203 05:53:58.110"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:53:58.056" endtime="20220203 05:53:58.111"/>
</suite>
<suite id="s1-s22" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s22-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:01.536" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 05:54:01.536" endtime="20220203 05:54:01.536"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:01.537" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:54:01.537" endtime="20220203 05:54:01.537"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:54:01.537" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:54:01.537" endtime="20220203 05:54:01.537"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:54:01.538" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 05:54:01.538" endtime="20220203 05:54:01.538"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:54:01.539" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:54:01.539" level="INFO">${version_file_contents} = #Thu Feb 03 05:52:49 UTC 2022
cTime=1643867569063
clusterID=06a98ddf-af60-40ca-8982-ee26cf66646d
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 05:54:01.539" endtime="20220203 05:54:01.539"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:54:01.540" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:54:01.540" endtime="20220203 05:54:01.540"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:01.540" endtime="20220203 05:54:01.540"/>
</kw>
<status status="PASS" starttime="20220203 05:54:01.538" endtime="20220203 05:54:01.541"/>
</kw>
<status status="PASS" starttime="20220203 05:54:01.538" endtime="20220203 05:54:01.541"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:01.535" endtime="20220203 05:54:01.541"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:54:01.488" endtime="20220203 05:54:01.542"/>
</suite>
<suite id="s1-s23" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s23-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:04.959" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 05:54:04.958" endtime="20220203 05:54:04.959"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:04.959" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:54:04.959" endtime="20220203 05:54:04.960"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:54:04.960" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:54:04.960" endtime="20220203 05:54:04.960"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:54:04.961" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 05:54:04.960" endtime="20220203 05:54:04.961"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:54:04.962" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:54:04.962" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:41 UTC 2022
cTime=1643867481926
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
omUuid=0c998e91-0537-483a-a9de-d2bd9487594f
nodeType=OM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c4...</msg>
<status status="PASS" starttime="20220203 05:54:04.961" endtime="20220203 05:54:04.962"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:54:04.963" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:54:04.962" endtime="20220203 05:54:04.963"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:04.963" endtime="20220203 05:54:04.963"/>
</kw>
<status status="PASS" starttime="20220203 05:54:04.961" endtime="20220203 05:54:04.963"/>
</kw>
<status status="PASS" starttime="20220203 05:54:04.961" endtime="20220203 05:54:04.963"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:04.958" endtime="20220203 05:54:04.964"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:54:04.910" endtime="20220203 05:54:04.964"/>
</suite>
<suite id="s1-s24" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s24-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:08.425" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 05:54:08.425" endtime="20220203 05:54:08.425"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:08.426" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:54:08.426" endtime="20220203 05:54:08.426"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:54:08.426" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:54:08.426" endtime="20220203 05:54:08.427"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:54:08.427" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 05:54:08.427" endtime="20220203 05:54:08.427"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:54:08.428" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:54:08.429" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:41 UTC 2022
cTime=1643867481240
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
omUuid=97620a64-abce-40d2-aa60-2ef2e1222375
nodeType=OM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c4...</msg>
<status status="PASS" starttime="20220203 05:54:08.428" endtime="20220203 05:54:08.429"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:54:08.429" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:54:08.429" endtime="20220203 05:54:08.429"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:08.429" endtime="20220203 05:54:08.430"/>
</kw>
<status status="PASS" starttime="20220203 05:54:08.428" endtime="20220203 05:54:08.430"/>
</kw>
<status status="PASS" starttime="20220203 05:54:08.427" endtime="20220203 05:54:08.430"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:08.424" endtime="20220203 05:54:08.430"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:54:08.377" endtime="20220203 05:54:08.431"/>
</suite>
<suite id="s1-s25" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s25-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:11.888" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 05:54:11.887" endtime="20220203 05:54:11.888"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:54:11.888" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:54:11.888" endtime="20220203 05:54:11.888"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:54:11.889" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:54:11.888" endtime="20220203 05:54:11.889"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:54:11.889" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 05:54:11.889" endtime="20220203 05:54:11.889"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:54:11.891" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:54:11.891" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:41 UTC 2022
cTime=1643867483456
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
omUuid=578b449a-0c1d-4798-815a-59212a5f5c6c
nodeType=OM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c4...</msg>
<status status="PASS" starttime="20220203 05:54:11.890" endtime="20220203 05:54:11.891"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:54:11.891" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:54:11.891" endtime="20220203 05:54:11.892"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:11.892" endtime="20220203 05:54:11.892"/>
</kw>
<status status="PASS" starttime="20220203 05:54:11.890" endtime="20220203 05:54:11.892"/>
</kw>
<status status="PASS" starttime="20220203 05:54:11.890" endtime="20220203 05:54:11.892"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:11.886" endtime="20220203 05:54:11.892"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:54:11.839" endtime="20220203 05:54:11.893"/>
</suite>
<suite id="s1-s26" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s26-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 05:54:15.250" level="INFO">${random} = 14129</msg>
<status status="PASS" starttime="20220203 05:54:15.250" endtime="20220203 05:54:15.250"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:54:15.258" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-14129 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:54:19.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:54:19.495" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:15.252" endtime="20220203 05:54:19.495"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:54:19.496" level="INFO"/>
<status status="PASS" starttime="20220203 05:54:19.495" endtime="20220203 05:54:19.496"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:54:19.497" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:54:19.496" endtime="20220203 05:54:19.497"/>
</kw>
<status status="PASS" starttime="20220203 05:54:15.251" endtime="20220203 05:54:19.497"/>
</kw>
<msg timestamp="20220203 05:54:19.497" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:54:15.251" endtime="20220203 05:54:19.498"/>
</kw>
<msg timestamp="20220203 05:54:19.498" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:15.250" endtime="20220203 05:54:19.499"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:19.499" endtime="20220203 05:54:19.499"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:15.249" endtime="20220203 05:54:19.499"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 05:54:15.203" endtime="20220203 05:54:19.500"/>
</suite>
<suite id="s1-s27" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s27-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:54:23.091" level="INFO">Running command 'ozone sh volume create new1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:54:25.652" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:54:25.653" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:23.087" endtime="20220203 05:54:25.653"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:54:25.654" level="INFO"/>
<status status="PASS" starttime="20220203 05:54:25.653" endtime="20220203 05:54:25.654"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:54:25.656" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:54:25.656" endtime="20220203 05:54:25.656"/>
</kw>
<status status="PASS" starttime="20220203 05:54:23.087" endtime="20220203 05:54:25.657"/>
</kw>
<msg timestamp="20220203 05:54:25.657" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:54:23.087" endtime="20220203 05:54:25.658"/>
</kw>
<msg timestamp="20220203 05:54:25.658" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:23.086" endtime="20220203 05:54:25.658"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:25.666" endtime="20220203 05:54:25.666"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:54:25.676" level="INFO">Running command 'ozone sh bucket create /new1-volume/new1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:54:28.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:54:28.391" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:25.668" endtime="20220203 05:54:28.391"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:54:28.392" level="INFO"/>
<status status="PASS" starttime="20220203 05:54:28.392" endtime="20220203 05:54:28.393"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:54:28.393" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:54:28.393" endtime="20220203 05:54:28.393"/>
</kw>
<status status="PASS" starttime="20220203 05:54:25.667" endtime="20220203 05:54:28.394"/>
</kw>
<msg timestamp="20220203 05:54:28.394" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:54:25.667" endtime="20220203 05:54:28.394"/>
</kw>
<msg timestamp="20220203 05:54:28.394" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:25.666" endtime="20220203 05:54:28.394"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:28.394" endtime="20220203 05:54:28.395"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:54:28.398" level="INFO">Running command 'ozone sh key put /new1-volume/new1-bucket/new1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:54:33.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:54:33.111" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:28.396" endtime="20220203 05:54:33.111"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:54:33.113" level="INFO"/>
<status status="PASS" starttime="20220203 05:54:33.112" endtime="20220203 05:54:33.113"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:54:33.113" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:54:33.113" endtime="20220203 05:54:33.113"/>
</kw>
<status status="PASS" starttime="20220203 05:54:28.396" endtime="20220203 05:54:33.114"/>
</kw>
<msg timestamp="20220203 05:54:33.114" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:54:28.396" endtime="20220203 05:54:33.114"/>
</kw>
<msg timestamp="20220203 05:54:33.114" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:28.395" endtime="20220203 05:54:33.114"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:33.115" endtime="20220203 05:54:33.115"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:23.085" endtime="20220203 05:54:33.115"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 05:54:23.038" endtime="20220203 05:54:33.117"/>
</suite>
<suite id="s1-s28" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s28-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 05:54:36.566" level="INFO">${random} = 56716</msg>
<status status="PASS" starttime="20220203 05:54:36.566" endtime="20220203 05:54:36.566"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 05:54:36.572" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-56716 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 05:54:40.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 05:54:40.556" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:36.568" endtime="20220203 05:54:40.556"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 05:54:40.557" level="INFO"/>
<status status="PASS" starttime="20220203 05:54:40.557" endtime="20220203 05:54:40.557"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 05:54:40.558" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 05:54:40.558" endtime="20220203 05:54:40.558"/>
</kw>
<status status="PASS" starttime="20220203 05:54:36.568" endtime="20220203 05:54:40.558"/>
</kw>
<msg timestamp="20220203 05:54:40.559" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 05:54:36.567" endtime="20220203 05:54:40.560"/>
</kw>
<msg timestamp="20220203 05:54:40.560" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 05:54:36.566" endtime="20220203 05:54:40.560"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:54:40.560" endtime="20220203 05:54:40.561"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:54:36.565" endtime="20220203 05:54:40.561"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 05:54:36.518" endtime="20220203 05:54:40.562"/>
</suite>
<suite id="s1-s29" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s29-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:53:51.105" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20220203 05:53:51.104" endtime="20220203 05:53:51.105"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 05:53:51.105" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 05:53:51.105" endtime="20220203 05:53:51.105"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 05:53:51.106" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 05:53:51.105" endtime="20220203 05:53:51.106"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 05:53:51.106" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20220203 05:53:51.106" endtime="20220203 05:53:51.106"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 05:53:51.107" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 05:53:51.108" level="INFO">${version_file_contents} = #Thu Feb 03 05:51:20 UTC 2022
cTime=1643867480670
clusterID=CID-7bcb5721-a070-4334-be2d-67b465ebb556
nodeType=SCM
scmUuid=a3a895be-d6d8-47b2-a860-b34cb3f37c42
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 05:53:51.107" endtime="20220203 05:53:51.108"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 05:53:51.108" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 05:53:51.108" endtime="20220203 05:53:51.108"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 05:53:51.108" endtime="20220203 05:53:51.109"/>
</kw>
<status status="PASS" starttime="20220203 05:53:51.107" endtime="20220203 05:53:51.109"/>
</kw>
<status status="PASS" starttime="20220203 05:53:51.106" endtime="20220203 05:53:51.109"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 05:53:51.103" endtime="20220203 05:53:51.109"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 05:53:51.057" endtime="20220203 05:53:51.110"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="213830"/>
</suite>
<statistics>
<total>
<stat pass="30" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="30" fail="0" skip="0" id="s1" name="upgrade">upgrade</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s11" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s12" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s13" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s14" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s15" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s16" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s17" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s18" name="Validate">upgrade.Validate</stat>
<stat pass="2" fail="0" skip="0" id="s1-s19" name="Finalize">upgrade.Finalize</stat>
<stat pass="1" fail="0" skip="0" id="s1-s20" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s21" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s22" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s23" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s24" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s25" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s26" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s27" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s28" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s29" name="Check-Mlv">upgrade.Check-Mlv</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
