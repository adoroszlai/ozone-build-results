<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 4.1.3 (Python 3.6.9 on linux)" generated="20220203 13:31:01.429" rpa="false" schemaversion="2">
<suite id="s1" name="upgrade">
<suite id="s1-s1" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s1-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:22:40.632" level="INFO">${random} = 27687</msg>
<status status="PASS" starttime="20220203 13:22:40.631" endtime="20220203 13:22:40.632"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:22:40.638" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-27687 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:22:44.619" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:22:44.619" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:40.634" endtime="20220203 13:22:44.619"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:22:44.620" level="INFO"/>
<status status="PASS" starttime="20220203 13:22:44.619" endtime="20220203 13:22:44.620"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:22:44.621" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:22:44.620" endtime="20220203 13:22:44.621"/>
</kw>
<status status="PASS" starttime="20220203 13:22:40.633" endtime="20220203 13:22:44.621"/>
</kw>
<msg timestamp="20220203 13:22:44.621" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:22:40.633" endtime="20220203 13:22:44.621"/>
</kw>
<msg timestamp="20220203 13:22:44.622" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:40.632" endtime="20220203 13:22:44.622"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:22:44.622" endtime="20220203 13:22:44.623"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:22:40.631" endtime="20220203 13:22:44.623"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:22:40.578" endtime="20220203 13:22:44.624"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s2-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:26:25.341" level="INFO">${random} = 90341</msg>
<status status="PASS" starttime="20220203 13:26:25.341" endtime="20220203 13:26:25.341"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:26:25.347" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-90341 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:26:29.315" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:26:29.315" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:25.343" endtime="20220203 13:26:29.315"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:26:29.317" level="INFO"/>
<status status="PASS" starttime="20220203 13:26:29.316" endtime="20220203 13:26:29.317"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:26:29.317" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:26:29.317" endtime="20220203 13:26:29.318"/>
</kw>
<status status="PASS" starttime="20220203 13:26:25.343" endtime="20220203 13:26:29.318"/>
</kw>
<msg timestamp="20220203 13:26:29.318" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:26:25.342" endtime="20220203 13:26:29.318"/>
</kw>
<msg timestamp="20220203 13:26:29.318" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:25.342" endtime="20220203 13:26:29.318"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:26:29.319" endtime="20220203 13:26:29.319"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:26:25.340" endtime="20220203 13:26:29.319"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:26:25.285" endtime="20220203 13:26:29.321"/>
</suite>
<suite id="s1-s3" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:26:33.136" level="INFO">Running command 'ozone sh volume create old2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:26:35.590" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:26:35.590" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:33.130" endtime="20220203 13:26:35.590"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:26:35.595" level="INFO"/>
<status status="PASS" starttime="20220203 13:26:35.590" endtime="20220203 13:26:35.595"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:26:35.596" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:26:35.595" endtime="20220203 13:26:35.596"/>
</kw>
<status status="PASS" starttime="20220203 13:26:33.129" endtime="20220203 13:26:35.598"/>
</kw>
<msg timestamp="20220203 13:26:35.598" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:26:33.129" endtime="20220203 13:26:35.598"/>
</kw>
<msg timestamp="20220203 13:26:35.598" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:33.128" endtime="20220203 13:26:35.598"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:26:35.598" endtime="20220203 13:26:35.599"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:26:35.613" level="INFO">Running command 'ozone sh bucket create /old2-volume/old2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:26:37.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:26:37.975" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:35.605" endtime="20220203 13:26:37.975"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:26:37.976" level="INFO"/>
<status status="PASS" starttime="20220203 13:26:37.975" endtime="20220203 13:26:37.976"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:26:37.984" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:26:37.976" endtime="20220203 13:26:37.984"/>
</kw>
<status status="PASS" starttime="20220203 13:26:35.604" endtime="20220203 13:26:37.984"/>
</kw>
<msg timestamp="20220203 13:26:37.984" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:26:35.601" endtime="20220203 13:26:37.985"/>
</kw>
<msg timestamp="20220203 13:26:37.985" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:35.600" endtime="20220203 13:26:37.985"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:26:37.985" endtime="20220203 13:26:37.991"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:26:37.996" level="INFO">Running command 'ozone sh key put /old2-volume/old2-bucket/old2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:26:43.157" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:26:43.157" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:37.993" endtime="20220203 13:26:43.157"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:26:43.158" level="INFO"/>
<status status="PASS" starttime="20220203 13:26:43.157" endtime="20220203 13:26:43.158"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:26:43.159" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:26:43.158" endtime="20220203 13:26:43.159"/>
</kw>
<status status="PASS" starttime="20220203 13:26:37.992" endtime="20220203 13:26:43.159"/>
</kw>
<msg timestamp="20220203 13:26:43.159" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:26:37.992" endtime="20220203 13:26:43.160"/>
</kw>
<msg timestamp="20220203 13:26:43.160" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:37.991" endtime="20220203 13:26:43.160"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:26:43.160" endtime="20220203 13:26:43.160"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:26:33.127" endtime="20220203 13:26:43.161"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 13:26:33.074" endtime="20220203 13:26:43.162"/>
</suite>
<suite id="s1-s4" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:26:46.972" level="INFO">${random} = 06653</msg>
<status status="PASS" starttime="20220203 13:26:46.971" endtime="20220203 13:26:46.972"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:26:46.977" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-06653 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:26:50.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:26:50.836" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:46.974" endtime="20220203 13:26:50.836"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:26:50.837" level="INFO"/>
<status status="PASS" starttime="20220203 13:26:50.837" endtime="20220203 13:26:50.838"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:26:50.838" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:26:50.838" endtime="20220203 13:26:50.838"/>
</kw>
<status status="PASS" starttime="20220203 13:26:46.973" endtime="20220203 13:26:50.839"/>
</kw>
<msg timestamp="20220203 13:26:50.839" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:26:46.973" endtime="20220203 13:26:50.839"/>
</kw>
<msg timestamp="20220203 13:26:50.839" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:46.972" endtime="20220203 13:26:50.839"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:26:50.839" endtime="20220203 13:26:50.840"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:26:46.971" endtime="20220203 13:26:50.840"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:26:46.919" endtime="20220203 13:26:50.841"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:26:17.147" level="INFO">${random} = 91689</msg>
<status status="PASS" starttime="20220203 13:26:17.147" endtime="20220203 13:26:17.148"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:26:17.153" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-91689 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:26:21.461" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:26:21.461" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:17.149" endtime="20220203 13:26:21.461"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:26:21.463" level="INFO"/>
<status status="PASS" starttime="20220203 13:26:21.462" endtime="20220203 13:26:21.463"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:26:21.464" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:26:21.464" endtime="20220203 13:26:21.464"/>
</kw>
<status status="PASS" starttime="20220203 13:26:17.149" endtime="20220203 13:26:21.465"/>
</kw>
<msg timestamp="20220203 13:26:21.465" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:26:17.149" endtime="20220203 13:26:21.465"/>
</kw>
<msg timestamp="20220203 13:26:21.466" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:26:17.148" endtime="20220203 13:26:21.466"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:26:21.466" endtime="20220203 13:26:21.466"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:26:17.146" endtime="20220203 13:26:21.467"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:26:17.094" endtime="20220203 13:26:21.469"/>
</suite>
<suite id="s1-s6" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s6-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:22:26.380" level="INFO">Running command 'ozone sh volume create old1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:22:28.772" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:22:28.772" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:26.376" endtime="20220203 13:22:28.772"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:22:28.773" level="INFO"/>
<status status="PASS" starttime="20220203 13:22:28.773" endtime="20220203 13:22:28.773"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:22:28.774" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:22:28.774" endtime="20220203 13:22:28.774"/>
</kw>
<status status="PASS" starttime="20220203 13:22:26.376" endtime="20220203 13:22:28.775"/>
</kw>
<msg timestamp="20220203 13:22:28.775" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:22:26.376" endtime="20220203 13:22:28.775"/>
</kw>
<msg timestamp="20220203 13:22:28.775" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:26.375" endtime="20220203 13:22:28.775"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:22:28.775" endtime="20220203 13:22:28.776"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:22:28.780" level="INFO">Running command 'ozone sh bucket create /old1-volume/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:22:31.226" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:22:31.226" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:28.778" endtime="20220203 13:22:31.226"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:22:31.229" level="INFO"/>
<status status="PASS" starttime="20220203 13:22:31.227" endtime="20220203 13:22:31.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:22:31.229" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:22:31.229" endtime="20220203 13:22:31.230"/>
</kw>
<status status="PASS" starttime="20220203 13:22:28.777" endtime="20220203 13:22:31.230"/>
</kw>
<msg timestamp="20220203 13:22:31.230" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:22:28.777" endtime="20220203 13:22:31.230"/>
</kw>
<msg timestamp="20220203 13:22:31.230" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:28.776" endtime="20220203 13:22:31.230"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:22:31.230" endtime="20220203 13:22:31.231"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:22:31.238" level="INFO">Running command 'ozone sh key put /old1-volume/old1-bucket/old1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:22:36.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:22:36.834" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:31.233" endtime="20220203 13:22:36.834"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:22:36.835" level="INFO"/>
<status status="PASS" starttime="20220203 13:22:36.834" endtime="20220203 13:22:36.835"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:22:36.836" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:22:36.835" endtime="20220203 13:22:36.836"/>
</kw>
<status status="PASS" starttime="20220203 13:22:31.232" endtime="20220203 13:22:36.836"/>
</kw>
<msg timestamp="20220203 13:22:36.836" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:22:31.232" endtime="20220203 13:22:36.836"/>
</kw>
<msg timestamp="20220203 13:22:36.837" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:22:31.231" endtime="20220203 13:22:36.837"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:22:36.837" endtime="20220203 13:22:36.837"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:22:26.374" endtime="20220203 13:22:36.837"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 13:22:26.320" endtime="20220203 13:22:36.839"/>
</suite>
<suite id="s1-s7" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s7-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:35.453" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20220203 13:29:35.452" endtime="20220203 13:29:35.453"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:35.453" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:35.453" endtime="20220203 13:29:35.454"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:35.454" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:35.454" endtime="20220203 13:29:35.454"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:35.455" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:35.454" endtime="20220203 13:29:35.455"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:35.456" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:35.457" level="INFO">${version_file_contents} = #Thu Feb 03 13:28:17 UTC 2022
cTime=1643894476979
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
nodeType=SCM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749a
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 13:29:35.456" endtime="20220203 13:29:35.457"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:35.457" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 13:29:35.457" endtime="20220203 13:29:35.457"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:35.457" endtime="20220203 13:29:35.458"/>
</kw>
<status status="PASS" starttime="20220203 13:29:35.455" endtime="20220203 13:29:35.458"/>
</kw>
<status status="PASS" starttime="20220203 13:29:35.455" endtime="20220203 13:29:35.458"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:35.452" endtime="20220203 13:29:35.458"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:35.400" endtime="20220203 13:29:35.459"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s8-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:30:18.909" level="INFO">${random} = 25346</msg>
<status status="PASS" starttime="20220203 13:30:18.908" endtime="20220203 13:30:18.909"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:18.914" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-25346 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:23.183" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:23.183" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:18.911" endtime="20220203 13:30:23.183"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:23.184" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:23.183" endtime="20220203 13:30:23.184"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:23.185" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:23.184" endtime="20220203 13:30:23.185"/>
</kw>
<status status="PASS" starttime="20220203 13:30:18.910" endtime="20220203 13:30:23.185"/>
</kw>
<msg timestamp="20220203 13:30:23.185" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:18.910" endtime="20220203 13:30:23.187"/>
</kw>
<msg timestamp="20220203 13:30:23.187" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:18.909" endtime="20220203 13:30:23.187"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:23.187" endtime="20220203 13:30:23.188"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:30:18.907" endtime="20220203 13:30:23.188"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:30:18.846" endtime="20220203 13:30:23.189"/>
</suite>
<suite id="s1-s9" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s9-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:26.969" level="INFO">Running command 'ozone sh volume create new2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:29.363" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:29.363" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:26.964" endtime="20220203 13:30:29.363"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:29.364" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:29.364" endtime="20220203 13:30:29.365"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:29.365" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:29.365" endtime="20220203 13:30:29.366"/>
</kw>
<status status="PASS" starttime="20220203 13:30:26.964" endtime="20220203 13:30:29.366"/>
</kw>
<msg timestamp="20220203 13:30:29.366" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:26.963" endtime="20220203 13:30:29.367"/>
</kw>
<msg timestamp="20220203 13:30:29.368" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:26.962" endtime="20220203 13:30:29.368"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:29.368" endtime="20220203 13:30:29.369"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:29.373" level="INFO">Running command 'ozone sh bucket create /new2-volume/new2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:31.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:31.971" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:29.370" endtime="20220203 13:30:31.971"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:31.972" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:31.972" endtime="20220203 13:30:31.972"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:31.973" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:31.973" endtime="20220203 13:30:31.973"/>
</kw>
<status status="PASS" starttime="20220203 13:30:29.370" endtime="20220203 13:30:31.974"/>
</kw>
<msg timestamp="20220203 13:30:31.974" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:29.369" endtime="20220203 13:30:31.974"/>
</kw>
<msg timestamp="20220203 13:30:31.974" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:29.369" endtime="20220203 13:30:31.974"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:31.975" endtime="20220203 13:30:31.975"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:31.979" level="INFO">Running command 'ozone sh key put /new2-volume/new2-bucket/new2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:37.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:37.428" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:31.977" endtime="20220203 13:30:37.428"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:37.429" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:37.429" endtime="20220203 13:30:37.429"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:37.430" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:37.430" endtime="20220203 13:30:37.430"/>
</kw>
<status status="PASS" starttime="20220203 13:30:31.976" endtime="20220203 13:30:37.430"/>
</kw>
<msg timestamp="20220203 13:30:37.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:31.976" endtime="20220203 13:30:37.431"/>
</kw>
<msg timestamp="20220203 13:30:37.432" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:31.975" endtime="20220203 13:30:37.432"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:37.432" endtime="20220203 13:30:37.432"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:30:26.962" endtime="20220203 13:30:37.433"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 13:30:26.909" endtime="20220203 13:30:37.434"/>
</suite>
<suite id="s1-s10" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s10-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:30:41.225" level="INFO">${random} = 06465</msg>
<status status="PASS" starttime="20220203 13:30:41.225" endtime="20220203 13:30:41.225"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:41.231" level="INFO">Running command 'ozone sh key get /new2-volume/new2-bucket/new2-key /tmp/key-06465 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:45.529" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:45.529" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:41.227" endtime="20220203 13:30:45.530"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:45.531" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:45.530" endtime="20220203 13:30:45.531"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:45.532" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:45.531" endtime="20220203 13:30:45.532"/>
</kw>
<status status="PASS" starttime="20220203 13:30:41.226" endtime="20220203 13:30:45.532"/>
</kw>
<msg timestamp="20220203 13:30:45.532" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:41.226" endtime="20220203 13:30:45.534"/>
</kw>
<msg timestamp="20220203 13:30:45.534" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:41.225" endtime="20220203 13:30:45.534"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:45.534" endtime="20220203 13:30:45.534"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:30:41.224" endtime="20220203 13:30:45.535"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:30:41.172" endtime="20220203 13:30:45.536"/>
</suite>
<suite id="s1-s11" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s11-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:39.253" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 13:29:39.252" endtime="20220203 13:29:39.253"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:39.253" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:39.253" endtime="20220203 13:29:39.254"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:39.254" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:39.254" endtime="20220203 13:29:39.254"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:39.255" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:39.254" endtime="20220203 13:29:39.255"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:39.256" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:39.257" level="INFO">${version_file_contents} = #Thu Feb 03 13:28:18 UTC 2022
cTime=1643894588539
clusterID=e6de0c57-bb2d-4d87-a082-5b34417cca04
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 13:29:39.256" endtime="20220203 13:29:39.257"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:39.257" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 13:29:39.257" endtime="20220203 13:29:39.257"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:39.258" endtime="20220203 13:29:39.258"/>
</kw>
<status status="PASS" starttime="20220203 13:29:39.255" endtime="20220203 13:29:39.258"/>
</kw>
<status status="PASS" starttime="20220203 13:29:39.255" endtime="20220203 13:29:39.258"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:39.251" endtime="20220203 13:29:39.259"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:39.196" endtime="20220203 13:29:39.259"/>
</suite>
<suite id="s1-s12" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s12-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:43.133" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 13:29:43.132" endtime="20220203 13:29:43.133"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:43.133" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:43.133" endtime="20220203 13:29:43.133"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:43.134" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:43.133" endtime="20220203 13:29:43.134"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:43.135" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:43.134" endtime="20220203 13:29:43.135"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:43.136" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:43.136" level="INFO">${version_file_contents} = #Thu Feb 03 13:28:18 UTC 2022
cTime=1643894591893
clusterID=4ee57c25-683e-4946-a531-97be3f1f4c85
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 13:29:43.136" endtime="20220203 13:29:43.136"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:43.137" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 13:29:43.136" endtime="20220203 13:29:43.137"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:43.137" endtime="20220203 13:29:43.138"/>
</kw>
<status status="PASS" starttime="20220203 13:29:43.135" endtime="20220203 13:29:43.138"/>
</kw>
<status status="PASS" starttime="20220203 13:29:43.135" endtime="20220203 13:29:43.138"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:43.131" endtime="20220203 13:29:43.138"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:43.075" endtime="20220203 13:29:43.139"/>
</suite>
<suite id="s1-s13" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s13-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:47.061" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 13:29:47.060" endtime="20220203 13:29:47.061"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:47.062" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:47.061" endtime="20220203 13:29:47.062"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:47.062" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:47.062" endtime="20220203 13:29:47.063"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:47.063" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:47.063" endtime="20220203 13:29:47.063"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:47.064" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:47.065" level="INFO">${version_file_contents} = #Thu Feb 03 13:28:29 UTC 2022
cTime=1643894589868
clusterID=f9181420-45a3-443f-8c2d-d07813566d79
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20220203 13:29:47.064" endtime="20220203 13:29:47.065"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:47.065" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20220203 13:29:47.065" endtime="20220203 13:29:47.065"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:47.066" endtime="20220203 13:29:47.066"/>
</kw>
<status status="PASS" starttime="20220203 13:29:47.064" endtime="20220203 13:29:47.066"/>
</kw>
<status status="PASS" starttime="20220203 13:29:47.063" endtime="20220203 13:29:47.066"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:47.060" endtime="20220203 13:29:47.066"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:47.009" endtime="20220203 13:29:47.067"/>
</suite>
<suite id="s1-s14" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s14-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:50.907" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 13:29:50.906" endtime="20220203 13:29:50.907"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:50.908" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:50.907" endtime="20220203 13:29:50.908"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:50.908" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:50.908" endtime="20220203 13:29:50.908"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:50.909" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:50.908" endtime="20220203 13:29:50.909"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:50.910" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:50.911" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:48 UTC 2022
cTime=1643894489557
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
omUuid=3be0bcc4-0ec6-48ae-917f-5bc3ece92b72
nodeType=OM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749...</msg>
<status status="PASS" starttime="20220203 13:29:50.910" endtime="20220203 13:29:50.911"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:50.911" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:29:50.911" endtime="20220203 13:29:50.911"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:50.911" endtime="20220203 13:29:50.912"/>
</kw>
<status status="PASS" starttime="20220203 13:29:50.909" endtime="20220203 13:29:50.912"/>
</kw>
<status status="PASS" starttime="20220203 13:29:50.909" endtime="20220203 13:29:50.912"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:50.906" endtime="20220203 13:29:50.912"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:50.851" endtime="20220203 13:29:50.913"/>
</suite>
<suite id="s1-s15" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s15-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:54.757" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 13:29:54.757" endtime="20220203 13:29:54.757"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:54.758" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:54.758" endtime="20220203 13:29:54.758"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:54.758" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:54.758" endtime="20220203 13:29:54.759"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:54.759" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:54.759" endtime="20220203 13:29:54.759"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:54.761" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:54.761" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:48 UTC 2022
cTime=1643894488538
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
omUuid=97133ae2-acc4-403e-a57c-645a6a43e9f9
nodeType=OM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749...</msg>
<status status="PASS" starttime="20220203 13:29:54.760" endtime="20220203 13:29:54.761"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:54.761" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:29:54.761" endtime="20220203 13:29:54.762"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:54.762" endtime="20220203 13:29:54.762"/>
</kw>
<status status="PASS" starttime="20220203 13:29:54.760" endtime="20220203 13:29:54.762"/>
</kw>
<status status="PASS" starttime="20220203 13:29:54.759" endtime="20220203 13:29:54.762"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:54.756" endtime="20220203 13:29:54.763"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:54.704" endtime="20220203 13:29:54.763"/>
</suite>
<suite id="s1-s16" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s16-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:58.583" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 13:29:58.583" endtime="20220203 13:29:58.583"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:29:58.584" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:29:58.583" endtime="20220203 13:29:58.584"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:29:58.584" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:29:58.584" endtime="20220203 13:29:58.585"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:29:58.585" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 13:29:58.585" endtime="20220203 13:29:58.585"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:29:58.587" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:29:58.587" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:48 UTC 2022
cTime=1643894483643
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
omUuid=30c25f05-e2e4-4335-b839-d90fadb6ceea
nodeType=OM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749...</msg>
<status status="PASS" starttime="20220203 13:29:58.586" endtime="20220203 13:29:58.587"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:29:58.587" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:29:58.587" endtime="20220203 13:29:58.588"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:29:58.588" endtime="20220203 13:29:58.588"/>
</kw>
<status status="PASS" starttime="20220203 13:29:58.586" endtime="20220203 13:29:58.588"/>
</kw>
<status status="PASS" starttime="20220203 13:29:58.585" endtime="20220203 13:29:58.588"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:58.582" endtime="20220203 13:29:58.588"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:29:58.529" endtime="20220203 13:29:58.589"/>
</suite>
<suite id="s1-s17" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s17-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:30:02.366" level="INFO">${random} = 46556</msg>
<status status="PASS" starttime="20220203 13:30:02.366" endtime="20220203 13:30:02.366"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:02.372" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-46556 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:06.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:06.815" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:02.368" endtime="20220203 13:30:06.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:06.816" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:06.815" endtime="20220203 13:30:06.816"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:06.817" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:06.817" endtime="20220203 13:30:06.817"/>
</kw>
<status status="PASS" starttime="20220203 13:30:02.368" endtime="20220203 13:30:06.818"/>
</kw>
<msg timestamp="20220203 13:30:06.818" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:02.367" endtime="20220203 13:30:06.819"/>
</kw>
<msg timestamp="20220203 13:30:06.819" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:02.366" endtime="20220203 13:30:06.819"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:06.819" endtime="20220203 13:30:06.820"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:30:02.365" endtime="20220203 13:30:06.820"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:30:02.311" endtime="20220203 13:30:06.821"/>
</suite>
<suite id="s1-s18" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s18-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:30:10.715" level="INFO">${random} = 16749</msg>
<status status="PASS" starttime="20220203 13:30:10.714" endtime="20220203 13:30:10.715"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:30:10.722" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-16749 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:30:15.144" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:30:15.144" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:10.717" endtime="20220203 13:30:15.144"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:30:15.145" level="INFO"/>
<status status="PASS" starttime="20220203 13:30:15.144" endtime="20220203 13:30:15.145"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:30:15.146" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:30:15.145" endtime="20220203 13:30:15.146"/>
</kw>
<status status="PASS" starttime="20220203 13:30:10.716" endtime="20220203 13:30:15.146"/>
</kw>
<msg timestamp="20220203 13:30:15.146" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:30:10.716" endtime="20220203 13:30:15.148"/>
</kw>
<msg timestamp="20220203 13:30:15.148" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:30:10.715" endtime="20220203 13:30:15.148"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:30:15.148" endtime="20220203 13:30:15.149"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:30:10.713" endtime="20220203 13:30:15.149"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:30:10.662" endtime="20220203 13:30:15.150"/>
</suite>
<suite id="s1-s19" name="Finalize" source="/opt/hadoop/smoketest/upgrade/finalize.robot">
<test id="s1-s19-t1" name="Finalize SCM">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220203 13:28:09.780" endtime="20220203 13:28:09.781"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm finalizeupgrade</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:28:09.786" level="INFO">Running command 'ozone admin scm finalizeupgrade 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:29:28.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:29:28.058" level="INFO">${output} = Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature:...</msg>
<status status="PASS" starttime="20220203 13:28:09.783" endtime="20220203 13:29:28.058"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:29:28.059" level="INFO">Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20220203 13:29:28.058" endtime="20220203 13:29:28.059"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:29:28.060" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:29:28.059" endtime="20220203 13:29:28.060"/>
</kw>
<status status="PASS" starttime="20220203 13:28:09.782" endtime="20220203 13:29:28.061"/>
</kw>
<msg timestamp="20220203 13:29:28.061" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:28:09.782" endtime="20220203 13:29:28.062"/>
</kw>
<msg timestamp="20220203 13:29:28.063" level="INFO">${result} = Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature:...</msg>
<status status="PASS" starttime="20220203 13:28:09.781" endtime="20220203 13:29:28.063"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:29:28.063" level="INFO">Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20220203 13:29:28.063" endtime="20220203 13:29:28.063"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:28:09.780" endtime="20220203 13:29:28.063"/>
</test>
<test id="s1-s19-t2" name="Finalize OMs">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220203 13:29:28.066" endtime="20220203 13:29:28.067"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om finalizeupgrade -id %{OM_SERVICE_ID}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:29:28.070" level="INFO">Running command 'ozone admin om finalizeupgrade -id omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:29:31.584" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:29:31.584" level="INFO">${output} = com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
...</msg>
<status status="PASS" starttime="20220203 13:29:28.068" endtime="20220203 13:29:31.584"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:29:31.585" level="INFO">com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.createNotLeaderException(OzoneManagerRatisUtils.java:360)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:346)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.checkLeaderStatus(OzoneManagerProtocolServerSideTranslatorPB.java:279)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:158)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:87)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:124)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:466)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:574)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:552)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1093)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1035)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:963)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1878)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2966)
, while invoking $Proxy20.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20220203 13:29:31.584" endtime="20220203 13:29:31.588"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:29:31.594" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:29:31.588" endtime="20220203 13:29:31.594"/>
</kw>
<status status="PASS" starttime="20220203 13:29:28.068" endtime="20220203 13:29:31.594"/>
</kw>
<msg timestamp="20220203 13:29:31.594" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:29:28.067" endtime="20220203 13:29:31.595"/>
</kw>
<msg timestamp="20220203 13:29:31.595" level="INFO">${result} = com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
...</msg>
<status status="PASS" starttime="20220203 13:29:28.067" endtime="20220203 13:29:31.595"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:29:31.596" level="INFO">com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om2 is not the leader. Could not determine the leader node.
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.createNotLeaderException(OzoneManagerRatisUtils.java:360)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:346)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.checkLeaderStatus(OzoneManagerProtocolServerSideTranslatorPB.java:279)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:158)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:87)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:124)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:466)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:574)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:552)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1093)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1035)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:963)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:423)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1878)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:2966)
, while invoking $Proxy20.submitRequest over nodeId=om2,nodeAddress=om2:9862 after 1 failover attempts. Trying to failover immediately.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20220203 13:29:31.595" endtime="20220203 13:29:31.596"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:29:28.065" endtime="20220203 13:29:31.596"/>
</test>
<doc>Finalize Upgrade of OMs and SCM</doc>
<status status="PASS" starttime="20220203 13:28:09.727" endtime="20220203 13:29:31.599"/>
</suite>
<suite id="s1-s20" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s20-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:05.162" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 13:24:05.161" endtime="20220203 13:24:05.162"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:05.163" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:05.162" endtime="20220203 13:24:05.163"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:05.163" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:05.163" endtime="20220203 13:24:05.163"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:05.164" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:05.163" endtime="20220203 13:24:05.164"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:05.165" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:05.166" level="INFO">${version_file_contents} = #Thu Feb 03 13:23:08 UTC 2022
cTime=1643894588539
clusterID=e6de0c57-bb2d-4d87-a082-5b34417cca04
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 13:24:05.165" endtime="20220203 13:24:05.166"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:05.166" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:05.166" endtime="20220203 13:24:05.166"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:05.166" endtime="20220203 13:24:05.167"/>
</kw>
<status status="PASS" starttime="20220203 13:24:05.164" endtime="20220203 13:24:05.167"/>
</kw>
<status status="PASS" starttime="20220203 13:24:05.164" endtime="20220203 13:24:05.167"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:05.160" endtime="20220203 13:24:05.167"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:05.108" endtime="20220203 13:24:05.168"/>
</suite>
<suite id="s1-s21" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s21-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:09.063" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 13:24:09.063" endtime="20220203 13:24:09.063"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:09.064" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:09.064" endtime="20220203 13:24:09.064"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:09.064" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:09.064" endtime="20220203 13:24:09.065"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:09.065" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:09.065" endtime="20220203 13:24:09.065"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:09.066" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:09.067" level="INFO">${version_file_contents} = #Thu Feb 03 13:23:11 UTC 2022
cTime=1643894591893
clusterID=4ee57c25-683e-4946-a531-97be3f1f4c85
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 13:24:09.066" endtime="20220203 13:24:09.067"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:09.067" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:09.067" endtime="20220203 13:24:09.067"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:09.068" endtime="20220203 13:24:09.068"/>
</kw>
<status status="PASS" starttime="20220203 13:24:09.066" endtime="20220203 13:24:09.068"/>
</kw>
<status status="PASS" starttime="20220203 13:24:09.065" endtime="20220203 13:24:09.068"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:09.062" endtime="20220203 13:24:09.068"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:09.010" endtime="20220203 13:24:09.069"/>
</suite>
<suite id="s1-s22" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s22-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:12.870" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20220203 13:24:12.870" endtime="20220203 13:24:12.870"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:12.871" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:12.870" endtime="20220203 13:24:12.871"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:12.871" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:12.871" endtime="20220203 13:24:12.871"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:12.872" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:12.872" endtime="20220203 13:24:12.872"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:12.874" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:12.874" level="INFO">${version_file_contents} = #Thu Feb 03 13:23:09 UTC 2022
cTime=1643894589868
clusterID=f9181420-45a3-443f-8c2d-d07813566d79
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 13:24:12.873" endtime="20220203 13:24:12.874"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:12.875" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:12.874" endtime="20220203 13:24:12.875"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:12.875" endtime="20220203 13:24:12.876"/>
</kw>
<status status="PASS" starttime="20220203 13:24:12.873" endtime="20220203 13:24:12.876"/>
</kw>
<status status="PASS" starttime="20220203 13:24:12.872" endtime="20220203 13:24:12.876"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:12.869" endtime="20220203 13:24:12.876"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:12.817" endtime="20220203 13:24:12.877"/>
</suite>
<suite id="s1-s23" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s23-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:16.694" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 13:24:16.693" endtime="20220203 13:24:16.694"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:16.694" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:16.694" endtime="20220203 13:24:16.694"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:16.695" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:16.694" endtime="20220203 13:24:16.695"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:16.696" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:16.695" endtime="20220203 13:24:16.696"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:16.697" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:16.697" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:48 UTC 2022
cTime=1643894489557
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
omUuid=3be0bcc4-0ec6-48ae-917f-5bc3ece92b72
nodeType=OM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749...</msg>
<status status="PASS" starttime="20220203 13:24:16.697" endtime="20220203 13:24:16.697"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:16.698" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:16.698" endtime="20220203 13:24:16.698"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:16.698" endtime="20220203 13:24:16.699"/>
</kw>
<status status="PASS" starttime="20220203 13:24:16.696" endtime="20220203 13:24:16.699"/>
</kw>
<status status="PASS" starttime="20220203 13:24:16.696" endtime="20220203 13:24:16.699"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:16.692" endtime="20220203 13:24:16.699"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:16.640" endtime="20220203 13:24:16.700"/>
</suite>
<suite id="s1-s24" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s24-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:20.607" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 13:24:20.606" endtime="20220203 13:24:20.607"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:20.607" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:20.607" endtime="20220203 13:24:20.607"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:20.608" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:20.608" endtime="20220203 13:24:20.608"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:20.609" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:20.608" endtime="20220203 13:24:20.609"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:20.610" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:20.610" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:48 UTC 2022
cTime=1643894488538
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
omUuid=97133ae2-acc4-403e-a57c-645a6a43e9f9
nodeType=OM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749...</msg>
<status status="PASS" starttime="20220203 13:24:20.609" endtime="20220203 13:24:20.610"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:20.611" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:20.610" endtime="20220203 13:24:20.611"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:20.611" endtime="20220203 13:24:20.612"/>
</kw>
<status status="PASS" starttime="20220203 13:24:20.609" endtime="20220203 13:24:20.612"/>
</kw>
<status status="PASS" starttime="20220203 13:24:20.609" endtime="20220203 13:24:20.612"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:20.605" endtime="20220203 13:24:20.612"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:20.553" endtime="20220203 13:24:20.613"/>
</suite>
<suite id="s1-s25" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s25-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:24.468" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20220203 13:24:24.467" endtime="20220203 13:24:24.468"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:24.469" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:24.468" endtime="20220203 13:24:24.469"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:24.469" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:24.469" endtime="20220203 13:24:24.469"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:24.470" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:24.469" endtime="20220203 13:24:24.470"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:24.471" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:24.472" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:48 UTC 2022
cTime=1643894483643
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
omUuid=30c25f05-e2e4-4335-b839-d90fadb6ceea
nodeType=OM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749...</msg>
<status status="PASS" starttime="20220203 13:24:24.471" endtime="20220203 13:24:24.472"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:24.472" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:24.472" endtime="20220203 13:24:24.472"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:24.472" endtime="20220203 13:24:24.473"/>
</kw>
<status status="PASS" starttime="20220203 13:24:24.470" endtime="20220203 13:24:24.473"/>
</kw>
<status status="PASS" starttime="20220203 13:24:24.470" endtime="20220203 13:24:24.473"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:24.467" endtime="20220203 13:24:24.473"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:24.411" endtime="20220203 13:24:24.474"/>
</suite>
<suite id="s1-s26" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s26-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:24:28.290" level="INFO">${random} = 98711</msg>
<status status="PASS" starttime="20220203 13:24:28.289" endtime="20220203 13:24:28.290"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:24:28.295" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-98711 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:24:32.694" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:24:32.694" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:28.291" endtime="20220203 13:24:32.695"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:24:32.696" level="INFO"/>
<status status="PASS" starttime="20220203 13:24:32.695" endtime="20220203 13:24:32.696"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:24:32.696" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:24:32.696" endtime="20220203 13:24:32.697"/>
</kw>
<status status="PASS" starttime="20220203 13:24:28.291" endtime="20220203 13:24:32.697"/>
</kw>
<msg timestamp="20220203 13:24:32.697" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:24:28.291" endtime="20220203 13:24:32.698"/>
</kw>
<msg timestamp="20220203 13:24:32.699" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:28.290" endtime="20220203 13:24:32.699"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:32.699" endtime="20220203 13:24:32.699"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:28.288" endtime="20220203 13:24:32.700"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:24:28.236" endtime="20220203 13:24:32.701"/>
</suite>
<suite id="s1-s27" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s27-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:24:36.484" level="INFO">Running command 'ozone sh volume create new1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:24:39.609" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:24:39.609" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:36.480" endtime="20220203 13:24:39.609"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:24:39.612" level="INFO"/>
<status status="PASS" starttime="20220203 13:24:39.610" endtime="20220203 13:24:39.612"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:24:39.613" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:24:39.612" endtime="20220203 13:24:39.616"/>
</kw>
<status status="PASS" starttime="20220203 13:24:36.480" endtime="20220203 13:24:39.616"/>
</kw>
<msg timestamp="20220203 13:24:39.616" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:24:36.479" endtime="20220203 13:24:39.619"/>
</kw>
<msg timestamp="20220203 13:24:39.619" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:36.479" endtime="20220203 13:24:39.619"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:39.620" endtime="20220203 13:24:39.620"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:24:39.637" level="INFO">Running command 'ozone sh bucket create /new1-volume/new1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:24:42.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:24:42.713" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:39.624" endtime="20220203 13:24:42.713"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:24:42.714" level="INFO"/>
<status status="PASS" starttime="20220203 13:24:42.713" endtime="20220203 13:24:42.714"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:24:42.715" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:24:42.715" endtime="20220203 13:24:42.715"/>
</kw>
<status status="PASS" starttime="20220203 13:24:39.623" endtime="20220203 13:24:42.715"/>
</kw>
<msg timestamp="20220203 13:24:42.716" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:24:39.621" endtime="20220203 13:24:42.716"/>
</kw>
<msg timestamp="20220203 13:24:42.716" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:39.620" endtime="20220203 13:24:42.716"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:42.716" endtime="20220203 13:24:42.717"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:24:42.721" level="INFO">Running command 'ozone sh key put /new1-volume/new1-bucket/new1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:24:48.201" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:24:48.201" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:42.719" endtime="20220203 13:24:48.201"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:24:48.202" level="INFO"/>
<status status="PASS" starttime="20220203 13:24:48.202" endtime="20220203 13:24:48.202"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:24:48.203" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:24:48.203" endtime="20220203 13:24:48.203"/>
</kw>
<status status="PASS" starttime="20220203 13:24:42.718" endtime="20220203 13:24:48.204"/>
</kw>
<msg timestamp="20220203 13:24:48.204" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:24:42.718" endtime="20220203 13:24:48.204"/>
</kw>
<msg timestamp="20220203 13:24:48.204" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:42.717" endtime="20220203 13:24:48.205"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:48.205" endtime="20220203 13:24:48.205"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:36.478" endtime="20220203 13:24:48.205"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20220203 13:24:36.426" endtime="20220203 13:24:48.207"/>
</suite>
<suite id="s1-s28" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s28-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20220203 13:24:52.025" level="INFO">${random} = 72460</msg>
<status status="PASS" starttime="20220203 13:24:52.025" endtime="20220203 13:24:52.025"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20220203 13:24:52.032" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-72460 2&gt;&amp;1'.</msg>
<msg timestamp="20220203 13:24:56.374" level="INFO">${rc} = 0</msg>
<msg timestamp="20220203 13:24:56.375" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:52.028" endtime="20220203 13:24:56.375"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220203 13:24:56.376" level="INFO"/>
<status status="PASS" starttime="20220203 13:24:56.375" endtime="20220203 13:24:56.376"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220203 13:24:56.377" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220203 13:24:56.376" endtime="20220203 13:24:56.377"/>
</kw>
<status status="PASS" starttime="20220203 13:24:52.027" endtime="20220203 13:24:56.377"/>
</kw>
<msg timestamp="20220203 13:24:56.377" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220203 13:24:52.027" endtime="20220203 13:24:56.379"/>
</kw>
<msg timestamp="20220203 13:24:56.379" level="INFO">${output} = </msg>
<status status="PASS" starttime="20220203 13:24:52.026" endtime="20220203 13:24:56.379"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:56.379" endtime="20220203 13:24:56.379"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:52.024" endtime="20220203 13:24:56.380"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20220203 13:24:51.968" endtime="20220203 13:24:56.381"/>
</suite>
<suite id="s1-s29" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s29-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:01.298" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20220203 13:24:01.298" endtime="20220203 13:24:01.298"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220203 13:24:01.299" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20220203 13:24:01.299" endtime="20220203 13:24:01.299"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20220203 13:24:01.299" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20220203 13:24:01.299" endtime="20220203 13:24:01.300"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20220203 13:24:01.300" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20220203 13:24:01.300" endtime="20220203 13:24:01.300"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20220203 13:24:01.301" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20220203 13:24:01.302" level="INFO">${version_file_contents} = #Thu Feb 03 13:21:16 UTC 2022
cTime=1643894476979
clusterID=CID-7c690ebd-edb6-46ec-a290-410addbf601d
nodeType=SCM
scmUuid=5d6312a8-277d-4a15-a6bd-7fd38e79749a
layoutVersion=0
</msg>
<status status="PASS" starttime="20220203 13:24:01.301" endtime="20220203 13:24:01.302"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20220203 13:24:01.302" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20220203 13:24:01.302" endtime="20220203 13:24:01.302"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220203 13:24:01.303" endtime="20220203 13:24:01.303"/>
</kw>
<status status="PASS" starttime="20220203 13:24:01.301" endtime="20220203 13:24:01.303"/>
</kw>
<status status="PASS" starttime="20220203 13:24:01.300" endtime="20220203 13:24:01.303"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20220203 13:24:01.297" endtime="20220203 13:24:01.303"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20220203 13:24:01.245" endtime="20220203 13:24:01.304"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="168593"/>
</suite>
<statistics>
<total>
<stat pass="30" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="30" fail="0" skip="0" id="s1" name="upgrade">upgrade</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s11" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s12" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s13" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s14" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s15" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s16" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s17" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s18" name="Validate">upgrade.Validate</stat>
<stat pass="2" fail="0" skip="0" id="s1-s19" name="Finalize">upgrade.Finalize</stat>
<stat pass="1" fail="0" skip="0" id="s1-s20" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s21" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s22" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s23" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s24" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s25" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s26" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s27" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s28" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s29" name="Check-Mlv">upgrade.Check-Mlv</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
