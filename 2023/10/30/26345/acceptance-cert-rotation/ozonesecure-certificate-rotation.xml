<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20231030 20:58:17.894" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:14.890" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:14.914" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:14.914" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20231030 20:56:14.875" endtime="20231030 20:56:14.914"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:14.916" level="INFO">scm</msg>
<status status="PASS" starttime="20231030 20:56:14.914" endtime="20231030 20:56:14.916"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:14.922" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:14.920" endtime="20231030 20:56:14.922"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.873" endtime="20231030 20:56:14.922"/>
</kw>
<msg timestamp="20231030 20:56:14.922" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:14.871" endtime="20231030 20:56:14.923"/>
</kw>
<msg timestamp="20231030 20:56:14.923" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20231030 20:56:14.871" endtime="20231030 20:56:14.923"/>
</kw>
<msg timestamp="20231030 20:56:14.923" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231030 20:56:14.869" endtime="20231030 20:56:14.923"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231030 20:56:14.924" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231030 20:56:14.924" endtime="20231030 20:56:14.925"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:14.938" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:15.015" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:15.015" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:56:14.933" endtime="20231030 20:56:15.015"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:15.017" level="INFO"/>
<status status="PASS" starttime="20231030 20:56:15.016" endtime="20231030 20:56:15.017"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:15.030" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:15.017" endtime="20231030 20:56:15.030"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.931" endtime="20231030 20:56:15.031"/>
</kw>
<msg timestamp="20231030 20:56:15.031" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:14.928" endtime="20231030 20:56:15.031"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.927" endtime="20231030 20:56:15.031"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.925" endtime="20231030 20:56:15.031"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.868" endtime="20231030 20:56:15.031"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.866" endtime="20231030 20:56:15.031"/>
</kw>
<status status="PASS" starttime="20231030 20:56:14.857" endtime="20231030 20:56:15.031"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20231030 20:56:15.042" level="INFO">${random} = KCmwvZvjET</msg>
<status status="PASS" starttime="20231030 20:56:15.039" endtime="20231030 20:56:15.042"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:15.055" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p KCmwvZvjET  2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:33.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:33.863" level="INFO">${output} = 2023-10-30 20:56:20,477 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:20,848 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:56:15.048" endtime="20231030 20:56:33.863"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:33.865" level="INFO">2023-10-30 20:56:20,477 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:20,848 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-10-30 20:56:20,849 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-10-30 20:56:21,008 [main] INFO freon.BaseFreonGenerator: Executing test with prefix KCmwvZvjET and number-of-tests 1
2023-10-30 20:56:21,164 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:22,170 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:23,170 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:24,171 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:24,630 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-10-30 20:56:24,985 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-10-30 20:56:25,171 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:25,925 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-10-30 20:56:26,010 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-10-30 20:56:26,173 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:26,502 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-10-30 20:56:27,181 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:28,182 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:29,182 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:30,183 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:31,186 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:32,194 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-10-30 20:56:33,642 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=6463.440737, max=6463.440737, mean=6463.440737, stddev=0.0, median=6463.440737, p75=6463.440737, p95=6463.440737, p98=6463.440737, p99=6463.440737, p999=6463.440737, mean_rate=0.11756454997535044, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-10-30 20:56:33,653 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 12
2023-10-30 20:56:33,658 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-10-30 20:56:33,658 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231030 20:56:33.864" endtime="20231030 20:56:33.865"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:33.866" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:33.865" endtime="20231030 20:56:33.866"/>
</kw>
<status status="PASS" starttime="20231030 20:56:15.048" endtime="20231030 20:56:33.866"/>
</kw>
<msg timestamp="20231030 20:56:33.867" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:15.044" endtime="20231030 20:56:33.867"/>
</kw>
<msg timestamp="20231030 20:56:33.867" level="INFO">${result} = 2023-10-30 20:56:20,477 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:20,848 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:56:15.044" endtime="20231030 20:56:33.867"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:56:33.867" endtime="20231030 20:56:33.869"/>
</kw>
<status status="PASS" starttime="20231030 20:56:15.042" endtime="20231030 20:56:33.869"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:33.877" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p KCmwvZvjET  2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:47.078" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:47.078" level="INFO">${output} = 2023-10-30 20:56:38,802 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:39,041 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:56:33.873" endtime="20231030 20:56:47.078"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:47.080" level="INFO">2023-10-30 20:56:38,802 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:39,041 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-10-30 20:56:39,042 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-10-30 20:56:39,153 [main] INFO freon.BaseFreonGenerator: Executing test with prefix KCmwvZvjET and number-of-tests 1
2023-10-30 20:56:39,225 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:40,227 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:41,228 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:42,229 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:43,229 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:43,537 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-10-30 20:56:44,230 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:45,231 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:46,232 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-10-30 20:56:46,643 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=91.429762, max=91.429762, mean=91.429762, stddev=0.0, median=91.429762, p75=91.429762, p95=91.429762, p98=91.429762, p99=91.429762, p999=91.429762, mean_rate=0.7178914672454685, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-10-30 20:56:46,644 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-10-30 20:56:46,646 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-10-30 20:56:46,646 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231030 20:56:47.079" endtime="20231030 20:56:47.080"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:47.081" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:47.080" endtime="20231030 20:56:47.081"/>
</kw>
<status status="PASS" starttime="20231030 20:56:33.873" endtime="20231030 20:56:47.081"/>
</kw>
<msg timestamp="20231030 20:56:47.081" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:33.872" endtime="20231030 20:56:47.081"/>
</kw>
<msg timestamp="20231030 20:56:47.082" level="INFO">${result} = 2023-10-30 20:56:38,802 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:39,041 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:56:33.871" endtime="20231030 20:56:47.082"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:56:47.082" endtime="20231030 20:56:47.083"/>
</kw>
<status status="PASS" starttime="20231030 20:56:33.869" endtime="20231030 20:56:47.083"/>
</kw>
<status status="PASS" starttime="20231030 20:56:15.038" endtime="20231030 20:56:47.083"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:47.093" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:49.771" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:49.771" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20231030 20:56:47.085" endtime="20231030 20:56:49.771"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:49.774" level="INFO">40s</msg>
<status status="PASS" starttime="20231030 20:56:49.773" endtime="20231030 20:56:49.774"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:49.775" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:49.775" endtime="20231030 20:56:49.775"/>
</kw>
<status status="PASS" starttime="20231030 20:56:47.085" endtime="20231030 20:56:49.776"/>
</kw>
<msg timestamp="20231030 20:56:49.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:47.084" endtime="20231030 20:56:49.776"/>
</kw>
<msg timestamp="20231030 20:56:49.777" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20231030 20:56:47.084" endtime="20231030 20:56:49.777"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20231030 20:56:49.781" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20231030 20:56:49.779" endtime="20231030 20:56:49.782"/>
</kw>
<msg timestamp="20231030 20:56:49.782" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20231030 20:56:47.083" endtime="20231030 20:56:49.782"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20231030 20:56:49.784" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20231030 20:56:49.783" endtime="20231030 20:56:49.784"/>
</kw>
<msg timestamp="20231030 20:56:49.784" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20231030 20:56:49.782" endtime="20231030 20:56:49.784"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:49.790" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:49.930" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:49.930" level="INFO">${output} = 18</msg>
<status status="PASS" starttime="20231030 20:56:49.787" endtime="20231030 20:56:49.930"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:49.931" level="INFO">18</msg>
<status status="PASS" starttime="20231030 20:56:49.930" endtime="20231030 20:56:49.932"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:49.932" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:49.932" endtime="20231030 20:56:49.933"/>
</kw>
<status status="PASS" starttime="20231030 20:56:49.786" endtime="20231030 20:56:49.933"/>
</kw>
<msg timestamp="20231030 20:56:49.933" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:49.786" endtime="20231030 20:56:49.933"/>
</kw>
<msg timestamp="20231030 20:56:49.933" level="INFO">${certSerial} = 18</msg>
<status status="PASS" starttime="20231030 20:56:49.785" endtime="20231030 20:56:49.933"/>
</kw>
<msg timestamp="20231030 20:56:49.934" level="INFO">${certId1} = 18</msg>
<status status="PASS" starttime="20231030 20:56:49.785" endtime="20231030 20:56:49.934"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:49.943" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:56:50.052" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:56:50.052" level="INFO">${output} = 19</msg>
<status status="PASS" starttime="20231030 20:56:49.939" endtime="20231030 20:56:50.052"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:56:50.054" level="INFO">19</msg>
<status status="PASS" starttime="20231030 20:56:50.053" endtime="20231030 20:56:50.054"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:56:50.055" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:56:50.054" endtime="20231030 20:56:50.055"/>
</kw>
<status status="PASS" starttime="20231030 20:56:49.938" endtime="20231030 20:56:50.056"/>
</kw>
<msg timestamp="20231030 20:56:50.056" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:49.937" endtime="20231030 20:56:50.056"/>
</kw>
<msg timestamp="20231030 20:56:50.056" level="INFO">${certSerial} = 19</msg>
<status status="PASS" starttime="20231030 20:56:49.936" endtime="20231030 20:56:50.056"/>
</kw>
<msg timestamp="20231030 20:56:50.057" level="INFO">${newCertId} = 19</msg>
<status status="PASS" starttime="20231030 20:56:49.936" endtime="20231030 20:56:50.057"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231030 20:56:50.057" endtime="20231030 20:56:50.058"/>
</kw>
<status status="PASS" starttime="20231030 20:56:49.935" endtime="20231030 20:56:50.058"/>
</kw>
<status status="PASS" starttime="20231030 20:56:49.934" endtime="20231030 20:56:50.058"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20231030 20:56:50.059" level="INFO">${random} = Y7nH4RAmEW</msg>
<status status="PASS" starttime="20231030 20:56:50.059" endtime="20231030 20:56:50.059"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:56:50.066" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p Y7nH4RAmEW  2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:05.018" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:05.018" level="INFO">${output} = 2023-10-30 20:56:55,351 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:55,598 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:56:50.063" endtime="20231030 20:57:05.018"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:05.020" level="INFO">2023-10-30 20:56:55,351 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:55,598 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-10-30 20:56:55,598 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-10-30 20:56:55,729 [main] INFO freon.BaseFreonGenerator: Executing test with prefix Y7nH4RAmEW and number-of-tests 1
2023-10-30 20:56:55,820 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:56,824 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:57,824 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:58,825 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:59,811 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-10-30 20:56:59,825 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:56:59,942 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-10-30 20:57:00,369 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-10-30 20:57:00,826 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:01,828 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:02,842 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:03,843 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-10-30 20:57:04,621 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4513.353979, max=4513.353979, mean=4513.353979, stddev=0.0, median=4513.353979, p75=4513.353979, p95=4513.353979, p98=4513.353979, p99=4513.353979, p999=4513.353979, mean_rate=0.18466187231558975, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-10-30 20:57:04,622 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-10-30 20:57:04,622 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-10-30 20:57:04,622 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231030 20:57:05.019" endtime="20231030 20:57:05.020"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:05.021" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:05.020" endtime="20231030 20:57:05.021"/>
</kw>
<status status="PASS" starttime="20231030 20:56:50.063" endtime="20231030 20:57:05.022"/>
</kw>
<msg timestamp="20231030 20:57:05.022" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:56:50.062" endtime="20231030 20:57:05.022"/>
</kw>
<msg timestamp="20231030 20:57:05.023" level="INFO">${result} = 2023-10-30 20:56:55,351 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:56:55,598 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:56:50.061" endtime="20231030 20:57:05.023"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:05.023" endtime="20231030 20:57:05.024"/>
</kw>
<status status="PASS" starttime="20231030 20:56:50.059" endtime="20231030 20:57:05.024"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:05.032" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p Y7nH4RAmEW  2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:18.126" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:18.127" level="INFO">${output} = 2023-10-30 20:57:08,949 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:57:09,302 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:57:05.028" endtime="20231030 20:57:18.127"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:18.128" level="INFO">2023-10-30 20:57:08,949 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:57:09,302 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-10-30 20:57:09,302 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-10-30 20:57:09,436 [main] INFO freon.BaseFreonGenerator: Executing test with prefix Y7nH4RAmEW and number-of-tests 1
2023-10-30 20:57:09,532 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:10,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:11,539 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:12,540 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:13,541 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:14,542 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:14,789 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-10-30 20:57:15,544 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:16,545 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-10-30 20:57:17,545 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-10-30 20:57:17,719 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=78.567673, max=78.567673, mean=78.567673, stddev=0.0, median=78.567673, p75=78.567673, p95=78.567673, p98=78.567673, p99=78.567673, p999=78.567673, mean_rate=0.8974600487761639, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-10-30 20:57:17,720 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-10-30 20:57:17,720 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-10-30 20:57:17,720 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231030 20:57:18.127" endtime="20231030 20:57:18.129"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:18.129" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:18.129" endtime="20231030 20:57:18.129"/>
</kw>
<status status="PASS" starttime="20231030 20:57:05.028" endtime="20231030 20:57:18.130"/>
</kw>
<msg timestamp="20231030 20:57:18.130" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:57:05.027" endtime="20231030 20:57:18.130"/>
</kw>
<msg timestamp="20231030 20:57:18.130" level="INFO">${result} = 2023-10-30 20:57:08,949 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-10-30 20:57:09,302 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231030 20:57:05.026" endtime="20231030 20:57:18.130"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:18.130" endtime="20231030 20:57:18.131"/>
</kw>
<status status="PASS" starttime="20231030 20:57:05.025" endtime="20231030 20:57:18.131"/>
</kw>
<status status="PASS" starttime="20231030 20:56:50.058" endtime="20231030 20:57:18.131"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231030 20:56:15.032" endtime="20231030 20:57:18.131"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20231030 20:56:14.723" endtime="20231030 20:57:18.133"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:18.151" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:27.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:27.085" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:18.148" endtime="20231030 20:57:27.085"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:27.086" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:27.085" endtime="20231030 20:57:27.086"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:27.087" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:27.087" endtime="20231030 20:57:27.087"/>
</kw>
<status status="PASS" starttime="20231030 20:57:18.147" endtime="20231030 20:57:27.088"/>
</kw>
<msg timestamp="20231030 20:57:27.088" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:57:18.146" endtime="20231030 20:57:27.088"/>
</kw>
<msg timestamp="20231030 20:57:27.088" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:18.146" endtime="20231030 20:57:27.088"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:27.088" endtime="20231030 20:57:27.089"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:27.095" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:35.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:35.775" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:27.092" endtime="20231030 20:57:35.776"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:35.778" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:35.777" endtime="20231030 20:57:35.778"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:35.779" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:35.778" endtime="20231030 20:57:35.779"/>
</kw>
<status status="PASS" starttime="20231030 20:57:27.091" endtime="20231030 20:57:35.779"/>
</kw>
<msg timestamp="20231030 20:57:35.779" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:57:27.090" endtime="20231030 20:57:35.780"/>
</kw>
<msg timestamp="20231030 20:57:35.780" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:27.089" endtime="20231030 20:57:35.780"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:35.780" endtime="20231030 20:57:35.781"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231030 20:57:18.145" endtime="20231030 20:57:35.781"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:35.789" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20231030 20:57:35.791" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:35.791" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:35.785" endtime="20231030 20:57:35.791"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:35.793" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:35.792" endtime="20231030 20:57:35.793"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:35.793" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:35.793" endtime="20231030 20:57:35.794"/>
</kw>
<status status="PASS" starttime="20231030 20:57:35.784" endtime="20231030 20:57:35.794"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:35.801" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:47.791" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:47.791" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:35.798" endtime="20231030 20:57:47.791"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:47.793" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:47.792" endtime="20231030 20:57:47.793"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:47.794" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:47.793" endtime="20231030 20:57:47.794"/>
</kw>
<status status="PASS" starttime="20231030 20:57:35.797" endtime="20231030 20:57:47.794"/>
</kw>
<msg timestamp="20231030 20:57:47.794" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:57:35.796" endtime="20231030 20:57:47.794"/>
</kw>
<msg timestamp="20231030 20:57:47.795" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:35.794" endtime="20231030 20:57:47.795"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:47.795" endtime="20231030 20:57:47.795"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:47.799" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:47.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:47.803" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:47.796" endtime="20231030 20:57:47.803"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:47.805" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:47.804" endtime="20231030 20:57:47.805"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:47.806" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:47.806" endtime="20231030 20:57:47.806"/>
</kw>
<status status="PASS" starttime="20231030 20:57:47.796" endtime="20231030 20:57:47.807"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231030 20:57:35.783" endtime="20231030 20:57:47.807"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20231030 20:57:47.810" level="INFO">${random} = 55386</msg>
<status status="PASS" starttime="20231030 20:57:47.809" endtime="20231030 20:57:47.810"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:47.815" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-55386 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:59.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:59.611" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:47.813" endtime="20231030 20:57:59.611"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:59.612" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:59.611" endtime="20231030 20:57:59.612"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:59.613" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:59.613" endtime="20231030 20:57:59.613"/>
</kw>
<status status="PASS" starttime="20231030 20:57:47.812" endtime="20231030 20:57:59.614"/>
</kw>
<msg timestamp="20231030 20:57:59.614" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231030 20:57:47.811" endtime="20231030 20:57:59.614"/>
</kw>
<msg timestamp="20231030 20:57:59.614" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:47.811" endtime="20231030 20:57:59.614"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:59.614" endtime="20231030 20:57:59.615"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:59.627" level="INFO">Running command 'cat /tmp/key-55386 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:59.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:59.629" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20231030 20:57:59.623" endtime="20231030 20:57:59.629"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:59.631" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20231030 20:57:59.630" endtime="20231030 20:57:59.631"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:59.632" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:59.631" endtime="20231030 20:57:59.632"/>
</kw>
<msg timestamp="20231030 20:57:59.633" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20231030 20:57:59.615" endtime="20231030 20:57:59.633"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231030 20:57:59.633" endtime="20231030 20:57:59.634"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231030 20:57:59.640" level="INFO">Running command 'rm /tmp/key-55386 2&gt;&amp;1'.</msg>
<msg timestamp="20231030 20:57:59.644" level="INFO">${rc} = 0</msg>
<msg timestamp="20231030 20:57:59.644" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231030 20:57:59.635" endtime="20231030 20:57:59.644"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231030 20:57:59.646" level="INFO"/>
<status status="PASS" starttime="20231030 20:57:59.645" endtime="20231030 20:57:59.646"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231030 20:57:59.647" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231030 20:57:59.646" endtime="20231030 20:57:59.647"/>
</kw>
<status status="PASS" starttime="20231030 20:57:59.634" endtime="20231030 20:57:59.647"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231030 20:57:47.808" endtime="20231030 20:57:59.648"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20231030 20:57:18.136" endtime="20231030 20:57:59.650"/>
</suite>
<status status="PASS" starttime="20231030 20:56:14.601" endtime="20231030 20:57:59.658"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
