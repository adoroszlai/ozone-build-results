<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230831 13:42:22.684" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:40:25.975" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:40:25.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:40:25.989" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230831 13:40:25.972" endtime="20230831 13:40:25.989"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:40:25.990" level="INFO">scm</msg>
<status status="PASS" starttime="20230831 13:40:25.989" endtime="20230831 13:40:25.990"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:40:25.991" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:40:25.990" endtime="20230831 13:40:25.991"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.967" endtime="20230831 13:40:25.991"/>
</kw>
<msg timestamp="20230831 13:40:25.991" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:40:25.966" endtime="20230831 13:40:25.991"/>
</kw>
<msg timestamp="20230831 13:40:25.991" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230831 13:40:25.966" endtime="20230831 13:40:25.991"/>
</kw>
<msg timestamp="20230831 13:40:25.993" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230831 13:40:25.965" endtime="20230831 13:40:25.993"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230831 13:40:25.994" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230831 13:40:25.993" endtime="20230831 13:40:25.994"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:40:26.038" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:40:26.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:40:26.211" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:40:25.996" endtime="20230831 13:40:26.211"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:40:26.219" level="INFO"/>
<status status="PASS" starttime="20230831 13:40:26.215" endtime="20230831 13:40:26.219"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:40:26.245" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:40:26.244" endtime="20230831 13:40:26.245"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.996" endtime="20230831 13:40:26.256"/>
</kw>
<msg timestamp="20230831 13:40:26.256" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:40:25.995" endtime="20230831 13:40:26.256"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.994" endtime="20230831 13:40:26.257"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.994" endtime="20230831 13:40:26.257"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.965" endtime="20230831 13:40:26.257"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.964" endtime="20230831 13:40:26.260"/>
</kw>
<status status="PASS" starttime="20230831 13:40:25.961" endtime="20230831 13:40:26.260"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230831 13:40:26.280" level="INFO">${random} = H42RiwgB4Z</msg>
<status status="PASS" starttime="20230831 13:40:26.277" endtime="20230831 13:40:26.280"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:40:26.325" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p H42RiwgB4Z  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:40:46.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:40:46.952" level="INFO">${output} = 2023-08-31 13:40:35,813 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:40:36,055 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:40:26.287" endtime="20230831 13:40:46.952"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:40:46.954" level="INFO">2023-08-31 13:40:35,813 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:40:36,055 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 13:40:36,055 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 13:40:36,173 [main] INFO freon.BaseFreonGenerator: Executing test with prefix H42RiwgB4Z and number-of-tests 1
2023-08-31 13:40:36,271 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:37,279 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:38,286 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:39,286 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:39,691 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-31 13:40:39,889 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-31 13:40:40,288 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:40,798 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 13:40:40,880 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-31 13:40:41,288 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:41,512 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-31 13:40:42,289 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:43,289 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:44,307 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:45,308 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:46,308 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 13:40:46,547 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5389.301926, max=5389.301926, mean=5389.301926, stddev=0.0, median=5389.301926, p75=5389.301926, p95=5389.301926, p98=5389.301926, p99=5389.301926, p999=5389.301926, mean_rate=0.15345058802325176, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 13:40:46,548 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-08-31 13:40:46,548 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 13:40:46,548 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 13:40:46.953" endtime="20230831 13:40:46.955"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:40:46.956" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:40:46.955" endtime="20230831 13:40:46.956"/>
</kw>
<status status="PASS" starttime="20230831 13:40:26.286" endtime="20230831 13:40:46.956"/>
</kw>
<msg timestamp="20230831 13:40:46.956" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:40:26.286" endtime="20230831 13:40:46.956"/>
</kw>
<msg timestamp="20230831 13:40:46.957" level="INFO">${result} = 2023-08-31 13:40:35,813 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:40:36,055 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:40:26.284" endtime="20230831 13:40:46.957"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:40:46.958" endtime="20230831 13:40:46.958"/>
</kw>
<status status="PASS" starttime="20230831 13:40:26.281" endtime="20230831 13:40:46.958"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:40:46.967" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p H42RiwgB4Z  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:40:59.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:40:59.999" level="INFO">${output} = 2023-08-31 13:40:52,095 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:40:52,436 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:40:46.963" endtime="20230831 13:40:59.999"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:00.000" level="INFO">2023-08-31 13:40:52,095 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:40:52,436 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 13:40:52,436 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 13:40:52,624 [main] INFO freon.BaseFreonGenerator: Executing test with prefix H42RiwgB4Z and number-of-tests 1
2023-08-31 13:40:52,780 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:53,791 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:54,792 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:55,793 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:56,347 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 13:40:56,794 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:57,794 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:40:58,795 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 13:40:59,627 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=96.154437, max=96.154437, mean=96.154437, stddev=0.0, median=96.154437, p75=96.154437, p95=96.154437, p98=96.154437, p99=96.154437, p999=96.154437, mean_rate=0.7270279192592688, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 13:40:59,628 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-31 13:40:59,628 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 13:40:59,628 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 13:40:59.999" endtime="20230831 13:41:00.001"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:00.001" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:00.001" endtime="20230831 13:41:00.002"/>
</kw>
<status status="PASS" starttime="20230831 13:40:46.962" endtime="20230831 13:41:00.002"/>
</kw>
<msg timestamp="20230831 13:41:00.002" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:40:46.962" endtime="20230831 13:41:00.003"/>
</kw>
<msg timestamp="20230831 13:41:00.003" level="INFO">${result} = 2023-08-31 13:40:52,095 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:40:52,436 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:40:46.961" endtime="20230831 13:41:00.003"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:41:00.003" endtime="20230831 13:41:00.004"/>
</kw>
<status status="PASS" starttime="20230831 13:40:46.959" endtime="20230831 13:41:00.004"/>
</kw>
<status status="PASS" starttime="20230831 13:40:26.266" endtime="20230831 13:41:00.004"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:00.012" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:01.872" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:01.872" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230831 13:41:00.007" endtime="20230831 13:41:01.873"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:01.874" level="INFO">40s</msg>
<status status="PASS" starttime="20230831 13:41:01.873" endtime="20230831 13:41:01.874"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:01.875" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:01.874" endtime="20230831 13:41:01.875"/>
</kw>
<status status="PASS" starttime="20230831 13:41:00.006" endtime="20230831 13:41:01.875"/>
</kw>
<msg timestamp="20230831 13:41:01.875" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:00.006" endtime="20230831 13:41:01.876"/>
</kw>
<msg timestamp="20230831 13:41:01.876" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230831 13:41:00.005" endtime="20230831 13:41:01.876"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230831 13:41:01.877" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230831 13:41:01.876" endtime="20230831 13:41:01.877"/>
</kw>
<msg timestamp="20230831 13:41:01.878" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230831 13:41:00.004" endtime="20230831 13:41:01.878"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230831 13:41:01.879" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230831 13:41:01.878" endtime="20230831 13:41:01.879"/>
</kw>
<msg timestamp="20230831 13:41:01.879" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230831 13:41:01.878" endtime="20230831 13:41:01.879"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:01.885" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:02.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:02.211" level="INFO">${output} = 01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:01.882" endtime="20230831 13:41:02.211"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:02.213" level="INFO">01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:02.212" endtime="20230831 13:41:02.213"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:02.214" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:02.213" endtime="20230831 13:41:02.214"/>
</kw>
<status status="PASS" starttime="20230831 13:41:01.881" endtime="20230831 13:41:02.214"/>
</kw>
<msg timestamp="20230831 13:41:02.214" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:01.881" endtime="20230831 13:41:02.214"/>
</kw>
<msg timestamp="20230831 13:41:02.214" level="INFO">${certSerial} = 01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:01.880" endtime="20230831 13:41:02.214"/>
</kw>
<msg timestamp="20230831 13:41:02.215" level="INFO">${certId1} = 01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:01.880" endtime="20230831 13:41:02.215"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:02.221" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:02.395" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:02.395" level="INFO">${output} = 01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:02.218" endtime="20230831 13:41:02.395"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:02.396" level="INFO">01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:02.395" endtime="20230831 13:41:02.396"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:02.397" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:02.397" endtime="20230831 13:41:02.397"/>
</kw>
<status status="PASS" starttime="20230831 13:41:02.217" endtime="20230831 13:41:02.397"/>
</kw>
<msg timestamp="20230831 13:41:02.397" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:02.217" endtime="20230831 13:41:02.398"/>
</kw>
<msg timestamp="20230831 13:41:02.398" level="INFO">${certSerial} = 01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:02.216" endtime="20230831 13:41:02.398"/>
</kw>
<msg timestamp="20230831 13:41:02.398" level="INFO">${newCertId} = 01191E5D3DC6</msg>
<status status="PASS" starttime="20230831 13:41:02.216" endtime="20230831 13:41:02.398"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230831 13:41:02.399" level="FAIL">01191E5D3DC6 == 01191E5D3DC6</msg>
<status status="FAIL" starttime="20230831 13:41:02.398" endtime="20230831 13:41:02.399"/>
</kw>
<status status="FAIL" starttime="20230831 13:41:02.215" endtime="20230831 13:41:02.399"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:07.407" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:07.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:07.548" level="INFO">${output} = 01192CA35B47</msg>
<status status="PASS" starttime="20230831 13:41:07.403" endtime="20230831 13:41:07.548"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:07.550" level="INFO">01192CA35B47</msg>
<status status="PASS" starttime="20230831 13:41:07.549" endtime="20230831 13:41:07.550"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:07.551" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:07.551" endtime="20230831 13:41:07.552"/>
</kw>
<status status="PASS" starttime="20230831 13:41:07.403" endtime="20230831 13:41:07.552"/>
</kw>
<msg timestamp="20230831 13:41:07.552" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:07.402" endtime="20230831 13:41:07.552"/>
</kw>
<msg timestamp="20230831 13:41:07.552" level="INFO">${certSerial} = 01192CA35B47</msg>
<status status="PASS" starttime="20230831 13:41:07.402" endtime="20230831 13:41:07.552"/>
</kw>
<msg timestamp="20230831 13:41:07.553" level="INFO">${newCertId} = 01192CA35B47</msg>
<status status="PASS" starttime="20230831 13:41:07.401" endtime="20230831 13:41:07.553"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230831 13:41:07.553" endtime="20230831 13:41:07.554"/>
</kw>
<status status="PASS" starttime="20230831 13:41:07.400" endtime="20230831 13:41:07.554"/>
</kw>
<status status="PASS" starttime="20230831 13:41:02.215" endtime="20230831 13:41:07.554"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230831 13:41:07.555" level="INFO">${random} = jnRGGS8scx</msg>
<status status="PASS" starttime="20230831 13:41:07.555" endtime="20230831 13:41:07.556"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:07.563" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p jnRGGS8scx  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:19.625" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:19.625" level="INFO">${output} = 2023-08-31 13:41:12,041 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:41:12,233 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:41:07.560" endtime="20230831 13:41:19.626"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:19.627" level="INFO">2023-08-31 13:41:12,041 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:41:12,233 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 13:41:12,233 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 13:41:12,342 [main] INFO freon.BaseFreonGenerator: Executing test with prefix jnRGGS8scx and number-of-tests 1
2023-08-31 13:41:12,416 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:13,421 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:14,421 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:15,422 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:15,982 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 13:41:16,053 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-31 13:41:16,423 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:16,425 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-31 13:41:17,423 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:18,424 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 13:41:19,266 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2558.432018, max=2558.432018, mean=2558.432018, stddev=0.0, median=2558.432018, p75=2558.432018, p95=2558.432018, p98=2558.432018, p99=2558.432018, p999=2558.432018, mean_rate=0.25185331652626824, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 13:41:19,267 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-31 13:41:19,269 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 13:41:19,269 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 13:41:19.626" endtime="20230831 13:41:19.627"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:19.628" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:19.627" endtime="20230831 13:41:19.628"/>
</kw>
<status status="PASS" starttime="20230831 13:41:07.559" endtime="20230831 13:41:19.628"/>
</kw>
<msg timestamp="20230831 13:41:19.628" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:07.559" endtime="20230831 13:41:19.628"/>
</kw>
<msg timestamp="20230831 13:41:19.629" level="INFO">${result} = 2023-08-31 13:41:12,041 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:41:12,233 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:41:07.558" endtime="20230831 13:41:19.629"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:41:19.629" endtime="20230831 13:41:19.629"/>
</kw>
<status status="PASS" starttime="20230831 13:41:07.556" endtime="20230831 13:41:19.629"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:19.644" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p jnRGGS8scx  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:29.765" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:29.765" level="INFO">${output} = 2023-08-31 13:41:22,747 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:41:22,901 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:41:19.633" endtime="20230831 13:41:29.765"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:29.770" level="INFO">2023-08-31 13:41:22,747 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:41:22,901 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 13:41:22,901 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 13:41:23,019 [main] INFO freon.BaseFreonGenerator: Executing test with prefix jnRGGS8scx and number-of-tests 1
2023-08-31 13:41:23,097 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:24,098 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:25,103 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:26,104 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:26,136 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 13:41:27,105 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 13:41:28,106 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 13:41:29,173 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=73.729909, max=73.729909, mean=73.729909, stddev=0.0, median=73.729909, p75=73.729909, p95=73.729909, p98=73.729909, p99=73.729909, p999=73.729909, mean_rate=0.6627424655819596, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 13:41:29,174 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-31 13:41:29,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 13:41:29,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 13:41:29.766" endtime="20230831 13:41:29.770"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:29.774" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:29.773" endtime="20230831 13:41:29.774"/>
</kw>
<status status="PASS" starttime="20230831 13:41:19.632" endtime="20230831 13:41:29.778"/>
</kw>
<msg timestamp="20230831 13:41:29.778" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:19.632" endtime="20230831 13:41:29.780"/>
</kw>
<msg timestamp="20230831 13:41:29.781" level="INFO">${result} = 2023-08-31 13:41:22,747 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 13:41:22,901 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 13:41:19.631" endtime="20230831 13:41:29.781"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:41:29.781" endtime="20230831 13:41:29.785"/>
</kw>
<status status="PASS" starttime="20230831 13:41:19.629" endtime="20230831 13:41:29.785"/>
</kw>
<status status="PASS" starttime="20230831 13:41:07.554" endtime="20230831 13:41:29.785"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 13:40:26.265" endtime="20230831 13:41:29.785"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230831 13:40:25.833" endtime="20230831 13:41:29.792"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:29.843" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:36.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:36.392" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:29.832" endtime="20230831 13:41:36.392"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:36.394" level="INFO"/>
<status status="PASS" starttime="20230831 13:41:36.393" endtime="20230831 13:41:36.394"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:36.395" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:36.394" endtime="20230831 13:41:36.395"/>
</kw>
<status status="PASS" starttime="20230831 13:41:29.829" endtime="20230831 13:41:36.395"/>
</kw>
<msg timestamp="20230831 13:41:36.395" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:29.826" endtime="20230831 13:41:36.396"/>
</kw>
<msg timestamp="20230831 13:41:36.396" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:29.826" endtime="20230831 13:41:36.396"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:41:36.396" endtime="20230831 13:41:36.396"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:36.403" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:43.447" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:43.448" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:36.398" endtime="20230831 13:41:43.448"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:43.449" level="INFO"/>
<status status="PASS" starttime="20230831 13:41:43.448" endtime="20230831 13:41:43.449"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:43.450" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:43.449" endtime="20230831 13:41:43.450"/>
</kw>
<status status="PASS" starttime="20230831 13:41:36.398" endtime="20230831 13:41:43.450"/>
</kw>
<msg timestamp="20230831 13:41:43.450" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:36.397" endtime="20230831 13:41:43.450"/>
</kw>
<msg timestamp="20230831 13:41:43.451" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:36.397" endtime="20230831 13:41:43.451"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:41:43.451" endtime="20230831 13:41:43.451"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 13:41:29.823" endtime="20230831 13:41:43.451"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:43.457" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230831 13:41:43.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:43.459" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:43.454" endtime="20230831 13:41:43.459"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:43.461" level="INFO"/>
<status status="PASS" starttime="20230831 13:41:43.460" endtime="20230831 13:41:43.461"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:43.461" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:43.461" endtime="20230831 13:41:43.461"/>
</kw>
<status status="PASS" starttime="20230831 13:41:43.453" endtime="20230831 13:41:43.462"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:43.466" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:54.883" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:54.883" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:43.463" endtime="20230831 13:41:54.883"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:54.885" level="INFO"/>
<status status="PASS" starttime="20230831 13:41:54.884" endtime="20230831 13:41:54.885"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:54.886" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:54.885" endtime="20230831 13:41:54.886"/>
</kw>
<status status="PASS" starttime="20230831 13:41:43.463" endtime="20230831 13:41:54.886"/>
</kw>
<msg timestamp="20230831 13:41:54.886" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:43.462" endtime="20230831 13:41:54.886"/>
</kw>
<msg timestamp="20230831 13:41:54.886" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:43.462" endtime="20230831 13:41:54.886"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:41:54.887" endtime="20230831 13:41:54.887"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:54.891" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:41:54.894" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:41:54.894" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:54.888" endtime="20230831 13:41:54.894"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:41:54.897" level="INFO"/>
<status status="PASS" starttime="20230831 13:41:54.896" endtime="20230831 13:41:54.897"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:41:54.898" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:41:54.897" endtime="20230831 13:41:54.898"/>
</kw>
<status status="PASS" starttime="20230831 13:41:54.887" endtime="20230831 13:41:54.898"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 13:41:43.452" endtime="20230831 13:41:54.899"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230831 13:41:54.901" level="INFO">${random} = 02967</msg>
<status status="PASS" starttime="20230831 13:41:54.901" endtime="20230831 13:41:54.901"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:41:54.906" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-02967 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:42:04.756" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:42:04.756" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:54.903" endtime="20230831 13:42:04.756"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:42:04.757" level="INFO"/>
<status status="PASS" starttime="20230831 13:42:04.756" endtime="20230831 13:42:04.758"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:42:04.758" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:42:04.758" endtime="20230831 13:42:04.758"/>
</kw>
<status status="PASS" starttime="20230831 13:41:54.902" endtime="20230831 13:42:04.759"/>
</kw>
<msg timestamp="20230831 13:42:04.759" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 13:41:54.902" endtime="20230831 13:42:04.759"/>
</kw>
<msg timestamp="20230831 13:42:04.759" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:41:54.901" endtime="20230831 13:42:04.759"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:42:04.759" endtime="20230831 13:42:04.760"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:42:04.763" level="INFO">Running command 'cat /tmp/key-02967 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:42:04.767" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:42:04.767" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230831 13:42:04.761" endtime="20230831 13:42:04.767"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:42:04.768" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230831 13:42:04.767" endtime="20230831 13:42:04.768"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:42:04.769" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:42:04.769" endtime="20230831 13:42:04.769"/>
</kw>
<msg timestamp="20230831 13:42:04.769" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230831 13:42:04.760" endtime="20230831 13:42:04.770"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 13:42:04.770" endtime="20230831 13:42:04.770"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 13:42:04.774" level="INFO">Running command 'rm /tmp/key-02967 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 13:42:04.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 13:42:04.777" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 13:42:04.771" endtime="20230831 13:42:04.777"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 13:42:04.778" level="INFO"/>
<status status="PASS" starttime="20230831 13:42:04.778" endtime="20230831 13:42:04.778"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 13:42:04.779" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 13:42:04.779" endtime="20230831 13:42:04.779"/>
</kw>
<status status="PASS" starttime="20230831 13:42:04.770" endtime="20230831 13:42:04.780"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 13:41:54.900" endtime="20230831 13:42:04.780"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230831 13:41:29.798" endtime="20230831 13:42:04.781"/>
</suite>
<status status="PASS" starttime="20230831 13:40:25.755" endtime="20230831 13:42:04.784"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
