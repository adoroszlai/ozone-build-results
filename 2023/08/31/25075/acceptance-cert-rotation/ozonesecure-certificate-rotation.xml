<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230831 10:45:05.862" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:24.571" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:24.577" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:24.577" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230831 10:43:24.567" endtime="20230831 10:43:24.577"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:24.579" level="INFO">scm</msg>
<status status="PASS" starttime="20230831 10:43:24.578" endtime="20230831 10:43:24.579"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:24.580" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:24.580" endtime="20230831 10:43:24.580"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.566" endtime="20230831 10:43:24.580"/>
</kw>
<msg timestamp="20230831 10:43:24.580" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:24.565" endtime="20230831 10:43:24.581"/>
</kw>
<msg timestamp="20230831 10:43:24.581" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230831 10:43:24.565" endtime="20230831 10:43:24.581"/>
</kw>
<msg timestamp="20230831 10:43:24.581" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230831 10:43:24.564" endtime="20230831 10:43:24.581"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230831 10:43:24.583" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230831 10:43:24.581" endtime="20230831 10:43:24.583"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:24.591" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:24.725" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:24.725" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:43:24.586" endtime="20230831 10:43:24.725"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:24.726" level="INFO"/>
<status status="PASS" starttime="20230831 10:43:24.726" endtime="20230831 10:43:24.726"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:24.727" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:24.726" endtime="20230831 10:43:24.727"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.586" endtime="20230831 10:43:24.727"/>
</kw>
<msg timestamp="20230831 10:43:24.728" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:24.585" endtime="20230831 10:43:24.728"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.585" endtime="20230831 10:43:24.728"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.583" endtime="20230831 10:43:24.728"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.563" endtime="20230831 10:43:24.729"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.561" endtime="20230831 10:43:24.729"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.560" endtime="20230831 10:43:24.729"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230831 10:43:24.735" level="INFO">${random} = ylS4SL8qrE</msg>
<status status="PASS" starttime="20230831 10:43:24.734" endtime="20230831 10:43:24.735"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:24.743" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ylS4SL8qrE  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:39.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:39.812" level="INFO">${output} = 2023-08-31 10:43:29,018 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:29,147 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:43:24.740" endtime="20230831 10:43:39.812"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:39.814" level="INFO">2023-08-31 10:43:29,018 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:29,147 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 10:43:29,147 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 10:43:29,237 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ylS4SL8qrE and number-of-tests 1
2023-08-31 10:43:29,295 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:30,304 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:31,304 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:32,305 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:33,305 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:33,658 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-31 10:43:33,842 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-31 10:43:34,306 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:34,506 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 10:43:34,579 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-31 10:43:34,973 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-31 10:43:35,306 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:36,306 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:37,307 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:38,307 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:39,309 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 10:43:39,435 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4839.798442, max=4839.798442, mean=4839.798442, stddev=0.0, median=4839.798442, p75=4839.798442, p95=4839.798442, p98=4839.798442, p99=4839.798442, p999=4839.798442, mean_rate=0.18067157332959694, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 10:43:39,436 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-08-31 10:43:39,436 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 10:43:39,436 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 10:43:39.813" endtime="20230831 10:43:39.814"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:39.815" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:39.814" endtime="20230831 10:43:39.815"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.739" endtime="20230831 10:43:39.815"/>
</kw>
<msg timestamp="20230831 10:43:39.815" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:24.738" endtime="20230831 10:43:39.816"/>
</kw>
<msg timestamp="20230831 10:43:39.816" level="INFO">${result} = 2023-08-31 10:43:29,018 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:29,147 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:43:24.738" endtime="20230831 10:43:39.816"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:43:39.816" endtime="20230831 10:43:39.817"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.735" endtime="20230831 10:43:39.817"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:39.825" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ylS4SL8qrE  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:52.571" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:52.571" level="INFO">${output} = 2023-08-31 10:43:45,599 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:45,924 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:43:39.821" endtime="20230831 10:43:52.571"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:52.572" level="INFO">2023-08-31 10:43:45,599 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:45,924 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 10:43:45,924 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 10:43:46,096 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ylS4SL8qrE and number-of-tests 1
2023-08-31 10:43:46,386 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:47,400 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:48,401 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:48,939 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 10:43:49,401 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:50,402 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:51,403 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 10:43:52,200 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=118.860497, max=118.860497, mean=118.860497, stddev=0.0, median=118.860497, p75=118.860497, p95=118.860497, p98=118.860497, p99=118.860497, p999=118.860497, mean_rate=0.9172688318696544, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 10:43:52,201 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-31 10:43:52,201 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 10:43:52,201 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 10:43:52.571" endtime="20230831 10:43:52.572"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:52.573" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:52.573" endtime="20230831 10:43:52.573"/>
</kw>
<status status="PASS" starttime="20230831 10:43:39.820" endtime="20230831 10:43:52.574"/>
</kw>
<msg timestamp="20230831 10:43:52.574" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:39.820" endtime="20230831 10:43:52.574"/>
</kw>
<msg timestamp="20230831 10:43:52.574" level="INFO">${result} = 2023-08-31 10:43:45,599 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:45,924 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:43:39.819" endtime="20230831 10:43:52.574"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:43:52.574" endtime="20230831 10:43:52.575"/>
</kw>
<status status="PASS" starttime="20230831 10:43:39.817" endtime="20230831 10:43:52.575"/>
</kw>
<status status="PASS" starttime="20230831 10:43:24.732" endtime="20230831 10:43:52.575"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:52.581" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:54.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:54.440" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230831 10:43:52.577" endtime="20230831 10:43:54.440"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:54.442" level="INFO">40s</msg>
<status status="PASS" starttime="20230831 10:43:54.441" endtime="20230831 10:43:54.442"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:54.443" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:54.442" endtime="20230831 10:43:54.443"/>
</kw>
<status status="PASS" starttime="20230831 10:43:52.577" endtime="20230831 10:43:54.443"/>
</kw>
<msg timestamp="20230831 10:43:54.443" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:52.576" endtime="20230831 10:43:54.444"/>
</kw>
<msg timestamp="20230831 10:43:54.444" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230831 10:43:52.576" endtime="20230831 10:43:54.444"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230831 10:43:54.446" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230831 10:43:54.444" endtime="20230831 10:43:54.446"/>
</kw>
<msg timestamp="20230831 10:43:54.446" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230831 10:43:52.575" endtime="20230831 10:43:54.446"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230831 10:43:54.448" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230831 10:43:54.447" endtime="20230831 10:43:54.448"/>
</kw>
<msg timestamp="20230831 10:43:54.448" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230831 10:43:54.446" endtime="20230831 10:43:54.448"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:54.453" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:54.625" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:54.625" level="INFO">${output} = 0152D19907F3</msg>
<status status="PASS" starttime="20230831 10:43:54.450" endtime="20230831 10:43:54.625"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:54.626" level="INFO">0152D19907F3</msg>
<status status="PASS" starttime="20230831 10:43:54.626" endtime="20230831 10:43:54.626"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:54.628" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:54.627" endtime="20230831 10:43:54.628"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.450" endtime="20230831 10:43:54.628"/>
</kw>
<msg timestamp="20230831 10:43:54.629" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:54.449" endtime="20230831 10:43:54.629"/>
</kw>
<msg timestamp="20230831 10:43:54.629" level="INFO">${certSerial} = 0152D19907F3</msg>
<status status="PASS" starttime="20230831 10:43:54.448" endtime="20230831 10:43:54.629"/>
</kw>
<msg timestamp="20230831 10:43:54.629" level="INFO">${certId1} = 0152D19907F3</msg>
<status status="PASS" starttime="20230831 10:43:54.448" endtime="20230831 10:43:54.629"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:54.635" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:43:54.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:43:54.781" level="INFO">${output} = 015516710BF3</msg>
<status status="PASS" starttime="20230831 10:43:54.632" endtime="20230831 10:43:54.781"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:43:54.783" level="INFO">015516710BF3</msg>
<status status="PASS" starttime="20230831 10:43:54.782" endtime="20230831 10:43:54.783"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:43:54.784" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:43:54.783" endtime="20230831 10:43:54.784"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.632" endtime="20230831 10:43:54.784"/>
</kw>
<msg timestamp="20230831 10:43:54.785" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:54.632" endtime="20230831 10:43:54.785"/>
</kw>
<msg timestamp="20230831 10:43:54.785" level="INFO">${certSerial} = 015516710BF3</msg>
<status status="PASS" starttime="20230831 10:43:54.631" endtime="20230831 10:43:54.785"/>
</kw>
<msg timestamp="20230831 10:43:54.786" level="INFO">${newCertId} = 015516710BF3</msg>
<status status="PASS" starttime="20230831 10:43:54.631" endtime="20230831 10:43:54.786"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230831 10:43:54.786" endtime="20230831 10:43:54.787"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.630" endtime="20230831 10:43:54.787"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.629" endtime="20230831 10:43:54.787"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230831 10:43:54.789" level="INFO">${random} = dTehB3HaUC</msg>
<status status="PASS" starttime="20230831 10:43:54.788" endtime="20230831 10:43:54.789"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:43:54.796" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p dTehB3HaUC  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:05.488" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:05.488" level="INFO">${output} = 2023-08-31 10:43:57,862 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:58,120 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:43:54.793" endtime="20230831 10:44:05.488"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:05.490" level="INFO">2023-08-31 10:43:57,862 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:58,120 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 10:43:58,120 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 10:43:58,353 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dTehB3HaUC and number-of-tests 1
2023-08-31 10:43:58,451 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:43:59,460 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:00,464 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:01,465 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:02,337 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 10:44:02,390 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-31 10:44:02,479 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:02,794 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-31 10:44:03,480 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:04,480 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 10:44:05,104 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2257.579408, max=2257.579408, mean=2257.579408, stddev=0.0, median=2257.579408, p75=2257.579408, p95=2257.579408, p98=2257.579408, p99=2257.579408, p999=2257.579408, mean_rate=0.32163420538605103, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 10:44:05,105 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-31 10:44:05,105 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 10:44:05,105 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 10:44:05.489" endtime="20230831 10:44:05.490"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:05.491" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:05.491" endtime="20230831 10:44:05.491"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.792" endtime="20230831 10:44:05.492"/>
</kw>
<msg timestamp="20230831 10:44:05.492" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:43:54.791" endtime="20230831 10:44:05.492"/>
</kw>
<msg timestamp="20230831 10:44:05.493" level="INFO">${result} = 2023-08-31 10:43:57,862 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:43:58,120 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:43:54.791" endtime="20230831 10:44:05.493"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:05.493" endtime="20230831 10:44:05.493"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.789" endtime="20230831 10:44:05.493"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:05.501" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p dTehB3HaUC  2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:15.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:15.414" level="INFO">${output} = 2023-08-31 10:44:08,785 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:44:08,937 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:44:05.498" endtime="20230831 10:44:15.414"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:15.416" level="INFO">2023-08-31 10:44:08,785 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:44:08,937 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-31 10:44:08,937 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-31 10:44:09,054 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dTehB3HaUC and number-of-tests 1
2023-08-31 10:44:09,139 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:10,141 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:11,142 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:12,142 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:12,575 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-31 10:44:13,142 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-31 10:44:14,145 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-31 10:44:15,044 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=56.627623, max=56.627623, mean=56.627623, stddev=0.0, median=56.627623, p75=56.627623, p95=56.627623, p98=56.627623, p99=56.627623, p999=56.627623, mean_rate=0.9161579533195499, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-31 10:44:15,046 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-31 10:44:15,047 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-31 10:44:15,047 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230831 10:44:15.415" endtime="20230831 10:44:15.416"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:15.417" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:15.417" endtime="20230831 10:44:15.417"/>
</kw>
<status status="PASS" starttime="20230831 10:44:05.497" endtime="20230831 10:44:15.417"/>
</kw>
<msg timestamp="20230831 10:44:15.418" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:44:05.496" endtime="20230831 10:44:15.418"/>
</kw>
<msg timestamp="20230831 10:44:15.418" level="INFO">${result} = 2023-08-31 10:44:08,785 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-31 10:44:08,937 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230831 10:44:05.496" endtime="20230831 10:44:15.418"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:15.418" endtime="20230831 10:44:15.419"/>
</kw>
<status status="PASS" starttime="20230831 10:44:05.494" endtime="20230831 10:44:15.419"/>
</kw>
<status status="PASS" starttime="20230831 10:43:54.787" endtime="20230831 10:44:15.419"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 10:43:24.730" endtime="20230831 10:44:15.419"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230831 10:43:24.487" endtime="20230831 10:44:15.421"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:15.439" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:22.883" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:22.883" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:15.435" endtime="20230831 10:44:22.883"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:22.885" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:22.884" endtime="20230831 10:44:22.885"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:22.885" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:22.885" endtime="20230831 10:44:22.885"/>
</kw>
<status status="PASS" starttime="20230831 10:44:15.435" endtime="20230831 10:44:22.886"/>
</kw>
<msg timestamp="20230831 10:44:22.886" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:44:15.434" endtime="20230831 10:44:22.886"/>
</kw>
<msg timestamp="20230831 10:44:22.886" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:15.434" endtime="20230831 10:44:22.886"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:22.886" endtime="20230831 10:44:22.887"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:22.891" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:29.046" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:29.046" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:22.888" endtime="20230831 10:44:29.046"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:29.048" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:29.047" endtime="20230831 10:44:29.048"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:29.049" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:29.048" endtime="20230831 10:44:29.049"/>
</kw>
<status status="PASS" starttime="20230831 10:44:22.888" endtime="20230831 10:44:29.049"/>
</kw>
<msg timestamp="20230831 10:44:29.049" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:44:22.888" endtime="20230831 10:44:29.049"/>
</kw>
<msg timestamp="20230831 10:44:29.049" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:22.887" endtime="20230831 10:44:29.049"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:29.049" endtime="20230831 10:44:29.050"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 10:44:15.433" endtime="20230831 10:44:29.050"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:29.056" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230831 10:44:29.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:29.058" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:29.053" endtime="20230831 10:44:29.058"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:29.059" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:29.058" endtime="20230831 10:44:29.060"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:29.060" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:29.060" endtime="20230831 10:44:29.060"/>
</kw>
<status status="PASS" starttime="20230831 10:44:29.052" endtime="20230831 10:44:29.061"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:29.066" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:38.467" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:38.467" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:29.063" endtime="20230831 10:44:38.467"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:38.468" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:38.467" endtime="20230831 10:44:38.468"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:38.469" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:38.468" endtime="20230831 10:44:38.469"/>
</kw>
<status status="PASS" starttime="20230831 10:44:29.062" endtime="20230831 10:44:38.469"/>
</kw>
<msg timestamp="20230831 10:44:38.469" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:44:29.061" endtime="20230831 10:44:38.469"/>
</kw>
<msg timestamp="20230831 10:44:38.469" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:29.061" endtime="20230831 10:44:38.469"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:38.469" endtime="20230831 10:44:38.470"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:38.473" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:38.476" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:38.476" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:38.470" endtime="20230831 10:44:38.476"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:38.477" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:38.477" endtime="20230831 10:44:38.478"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:38.478" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:38.478" endtime="20230831 10:44:38.478"/>
</kw>
<status status="PASS" starttime="20230831 10:44:38.470" endtime="20230831 10:44:38.478"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 10:44:29.051" endtime="20230831 10:44:38.479"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230831 10:44:38.481" level="INFO">${random} = 85142</msg>
<status status="PASS" starttime="20230831 10:44:38.480" endtime="20230831 10:44:38.481"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:38.485" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-85142 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:48.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:48.502" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:38.483" endtime="20230831 10:44:48.502"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:48.504" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:48.503" endtime="20230831 10:44:48.504"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:48.505" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:48.504" endtime="20230831 10:44:48.505"/>
</kw>
<status status="PASS" starttime="20230831 10:44:38.482" endtime="20230831 10:44:48.505"/>
</kw>
<msg timestamp="20230831 10:44:48.505" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230831 10:44:38.482" endtime="20230831 10:44:48.505"/>
</kw>
<msg timestamp="20230831 10:44:48.505" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:38.481" endtime="20230831 10:44:48.505"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:48.506" endtime="20230831 10:44:48.506"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:48.512" level="INFO">Running command 'cat /tmp/key-85142 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:48.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:48.516" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230831 10:44:48.507" endtime="20230831 10:44:48.516"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:48.518" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230831 10:44:48.517" endtime="20230831 10:44:48.518"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:48.518" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:48.518" endtime="20230831 10:44:48.518"/>
</kw>
<msg timestamp="20230831 10:44:48.519" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230831 10:44:48.506" endtime="20230831 10:44:48.519"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230831 10:44:48.519" endtime="20230831 10:44:48.520"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230831 10:44:48.523" level="INFO">Running command 'rm /tmp/key-85142 2&gt;&amp;1'.</msg>
<msg timestamp="20230831 10:44:48.526" level="INFO">${rc} = 0</msg>
<msg timestamp="20230831 10:44:48.526" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230831 10:44:48.520" endtime="20230831 10:44:48.526"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230831 10:44:48.527" level="INFO"/>
<status status="PASS" starttime="20230831 10:44:48.526" endtime="20230831 10:44:48.527"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230831 10:44:48.528" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230831 10:44:48.527" endtime="20230831 10:44:48.528"/>
</kw>
<status status="PASS" starttime="20230831 10:44:48.520" endtime="20230831 10:44:48.528"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230831 10:44:38.480" endtime="20230831 10:44:48.529"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230831 10:44:15.423" endtime="20230831 10:44:48.530"/>
</suite>
<status status="PASS" starttime="20230831 10:43:24.422" endtime="20230831 10:44:48.533"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
