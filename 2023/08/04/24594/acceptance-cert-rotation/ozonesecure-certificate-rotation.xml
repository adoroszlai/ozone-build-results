<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230804 02:25:00.232" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:28.333" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:28.340" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:28.340" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230804 02:23:28.329" endtime="20230804 02:23:28.340"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:28.343" level="INFO">scm</msg>
<status status="PASS" starttime="20230804 02:23:28.341" endtime="20230804 02:23:28.343"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:28.343" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:28.343" endtime="20230804 02:23:28.344"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.329" endtime="20230804 02:23:28.344"/>
</kw>
<msg timestamp="20230804 02:23:28.344" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:28.328" endtime="20230804 02:23:28.344"/>
</kw>
<msg timestamp="20230804 02:23:28.344" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230804 02:23:28.328" endtime="20230804 02:23:28.344"/>
</kw>
<msg timestamp="20230804 02:23:28.345" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230804 02:23:28.326" endtime="20230804 02:23:28.345"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230804 02:23:28.345" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230804 02:23:28.345" endtime="20230804 02:23:28.346"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:28.353" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:28.601" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:28.601" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:23:28.349" endtime="20230804 02:23:28.601"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:28.603" level="INFO"/>
<status status="PASS" starttime="20230804 02:23:28.602" endtime="20230804 02:23:28.603"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:28.603" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:28.603" endtime="20230804 02:23:28.603"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.348" endtime="20230804 02:23:28.604"/>
</kw>
<msg timestamp="20230804 02:23:28.604" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:28.348" endtime="20230804 02:23:28.604"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.347" endtime="20230804 02:23:28.604"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.347" endtime="20230804 02:23:28.604"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.326" endtime="20230804 02:23:28.604"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.325" endtime="20230804 02:23:28.604"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.324" endtime="20230804 02:23:28.604"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230804 02:23:28.608" level="INFO">${random} = bezXFeengL</msg>
<status status="PASS" starttime="20230804 02:23:28.607" endtime="20230804 02:23:28.608"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:28.628" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p bezXFeengL  2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:41.590" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:41.590" level="INFO">${output} = 2023-08-04 02:23:31,786 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:31,981 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:23:28.614" endtime="20230804 02:23:41.591"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:41.592" level="INFO">2023-08-04 02:23:31,786 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:31,981 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-04 02:23:31,981 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-04 02:23:32,407 [main] INFO freon.BaseFreonGenerator: Executing test with prefix bezXFeengL and number-of-tests 1
2023-08-04 02:23:32,653 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:33,671 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:34,696 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:35,697 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:35,995 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-04 02:23:36,210 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-04 02:23:36,717 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:36,843 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-04 02:23:36,899 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-04 02:23:37,150 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-04 02:23:37,717 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:38,718 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:39,723 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:40,724 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-04 02:23:41,174 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3857.652231, max=3857.652231, mean=3857.652231, stddev=0.0, median=3857.652231, p75=3857.652231, p95=3857.652231, p98=3857.652231, p99=3857.652231, p999=3857.652231, mean_rate=0.2048725552358489, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-04 02:23:41,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-08-04 02:23:41,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-04 02:23:41,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230804 02:23:41.591" endtime="20230804 02:23:41.592"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:41.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:41.592" endtime="20230804 02:23:41.593"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.611" endtime="20230804 02:23:41.593"/>
</kw>
<msg timestamp="20230804 02:23:41.593" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:28.611" endtime="20230804 02:23:41.593"/>
</kw>
<msg timestamp="20230804 02:23:41.594" level="INFO">${result} = 2023-08-04 02:23:31,786 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:31,981 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:23:28.609" endtime="20230804 02:23:41.594"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:23:41.594" endtime="20230804 02:23:41.594"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.608" endtime="20230804 02:23:41.594"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:41.601" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p bezXFeengL  2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:52.930" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:52.930" level="INFO">${output} = 2023-08-04 02:23:45,909 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:46,105 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:23:41.598" endtime="20230804 02:23:52.930"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:52.932" level="INFO">2023-08-04 02:23:45,909 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:46,105 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-04 02:23:46,105 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-04 02:23:46,188 [main] INFO freon.BaseFreonGenerator: Executing test with prefix bezXFeengL and number-of-tests 1
2023-08-04 02:23:46,251 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:47,255 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:48,255 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:49,255 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:49,311 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-04 02:23:50,256 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:51,256 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-04 02:23:52,475 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=85.160547, max=85.160547, mean=85.160547, stddev=0.0, median=85.160547, p75=85.160547, p95=85.160547, p98=85.160547, p99=85.160547, p999=85.160547, mean_rate=0.6809932097738027, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-04 02:23:52,484 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-04 02:23:52,484 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-04 02:23:52,484 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230804 02:23:52.931" endtime="20230804 02:23:52.932"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:52.933" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:52.932" endtime="20230804 02:23:52.933"/>
</kw>
<status status="PASS" starttime="20230804 02:23:41.597" endtime="20230804 02:23:52.933"/>
</kw>
<msg timestamp="20230804 02:23:52.933" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:41.597" endtime="20230804 02:23:52.933"/>
</kw>
<msg timestamp="20230804 02:23:52.934" level="INFO">${result} = 2023-08-04 02:23:45,909 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:46,105 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:23:41.596" endtime="20230804 02:23:52.934"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:23:52.934" endtime="20230804 02:23:52.934"/>
</kw>
<status status="PASS" starttime="20230804 02:23:41.594" endtime="20230804 02:23:52.934"/>
</kw>
<status status="PASS" starttime="20230804 02:23:28.606" endtime="20230804 02:23:52.935"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:52.942" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:55.049" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:55.049" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230804 02:23:52.937" endtime="20230804 02:23:55.049"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:55.051" level="INFO">40s</msg>
<status status="PASS" starttime="20230804 02:23:55.050" endtime="20230804 02:23:55.051"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:55.052" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:55.051" endtime="20230804 02:23:55.052"/>
</kw>
<status status="PASS" starttime="20230804 02:23:52.936" endtime="20230804 02:23:55.052"/>
</kw>
<msg timestamp="20230804 02:23:55.052" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:52.936" endtime="20230804 02:23:55.053"/>
</kw>
<msg timestamp="20230804 02:23:55.053" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230804 02:23:52.935" endtime="20230804 02:23:55.053"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230804 02:23:55.054" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230804 02:23:55.053" endtime="20230804 02:23:55.054"/>
</kw>
<msg timestamp="20230804 02:23:55.055" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230804 02:23:52.935" endtime="20230804 02:23:55.055"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230804 02:23:55.056" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230804 02:23:55.055" endtime="20230804 02:23:55.056"/>
</kw>
<msg timestamp="20230804 02:23:55.056" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230804 02:23:55.055" endtime="20230804 02:23:55.056"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:55.061" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:55.365" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:55.365" level="INFO">${output} = 012D55B8E5A6</msg>
<status status="PASS" starttime="20230804 02:23:55.058" endtime="20230804 02:23:55.365"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:55.366" level="INFO">012D55B8E5A6</msg>
<status status="PASS" starttime="20230804 02:23:55.365" endtime="20230804 02:23:55.366"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:55.367" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:55.367" endtime="20230804 02:23:55.367"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.058" endtime="20230804 02:23:55.368"/>
</kw>
<msg timestamp="20230804 02:23:55.368" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:55.057" endtime="20230804 02:23:55.368"/>
</kw>
<msg timestamp="20230804 02:23:55.368" level="INFO">${certSerial} = 012D55B8E5A6</msg>
<status status="PASS" starttime="20230804 02:23:55.057" endtime="20230804 02:23:55.368"/>
</kw>
<msg timestamp="20230804 02:23:55.368" level="INFO">${certId1} = 012D55B8E5A6</msg>
<status status="PASS" starttime="20230804 02:23:55.056" endtime="20230804 02:23:55.368"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:55.374" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:23:55.791" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:23:55.792" level="INFO">${output} = 012CC96541B4</msg>
<status status="PASS" starttime="20230804 02:23:55.372" endtime="20230804 02:23:55.792"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:23:55.793" level="INFO">012CC96541B4</msg>
<status status="PASS" starttime="20230804 02:23:55.792" endtime="20230804 02:23:55.793"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:23:55.794" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:23:55.793" endtime="20230804 02:23:55.794"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.371" endtime="20230804 02:23:55.794"/>
</kw>
<msg timestamp="20230804 02:23:55.794" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:55.371" endtime="20230804 02:23:55.794"/>
</kw>
<msg timestamp="20230804 02:23:55.794" level="INFO">${certSerial} = 012CC96541B4</msg>
<status status="PASS" starttime="20230804 02:23:55.370" endtime="20230804 02:23:55.794"/>
</kw>
<msg timestamp="20230804 02:23:55.795" level="INFO">${newCertId} = 012CC96541B4</msg>
<status status="PASS" starttime="20230804 02:23:55.370" endtime="20230804 02:23:55.795"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230804 02:23:55.795" endtime="20230804 02:23:55.795"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.369" endtime="20230804 02:23:55.795"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.369" endtime="20230804 02:23:55.795"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230804 02:23:55.797" level="INFO">${random} = JMftEJB828</msg>
<status status="PASS" starttime="20230804 02:23:55.796" endtime="20230804 02:23:55.797"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:23:55.802" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p JMftEJB828  2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:04.711" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:04.711" level="INFO">${output} = 2023-08-04 02:23:58,470 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:58,624 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:23:55.800" endtime="20230804 02:24:04.712"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:04.713" level="INFO">2023-08-04 02:23:58,470 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:58,624 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-04 02:23:58,625 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-04 02:23:58,709 [main] INFO freon.BaseFreonGenerator: Executing test with prefix JMftEJB828 and number-of-tests 1
2023-08-04 02:23:58,771 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:23:59,777 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:00,779 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:01,497 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-04 02:24:01,567 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-04 02:24:01,779 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:01,867 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-04 02:24:02,781 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:03,783 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-04 02:24:04,339 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2542.261567, max=2542.261567, mean=2542.261567, stddev=0.0, median=2542.261567, p75=2542.261567, p95=2542.261567, p98=2542.261567, p99=2542.261567, p999=2542.261567, mean_rate=0.31319864723077423, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-04 02:24:04,340 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-04 02:24:04,341 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-04 02:24:04,341 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230804 02:24:04.712" endtime="20230804 02:24:04.713"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:04.714" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:04.713" endtime="20230804 02:24:04.714"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.799" endtime="20230804 02:24:04.714"/>
</kw>
<msg timestamp="20230804 02:24:04.714" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:23:55.799" endtime="20230804 02:24:04.714"/>
</kw>
<msg timestamp="20230804 02:24:04.715" level="INFO">${result} = 2023-08-04 02:23:58,470 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:23:58,624 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:23:55.798" endtime="20230804 02:24:04.715"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:04.715" endtime="20230804 02:24:04.715"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.797" endtime="20230804 02:24:04.715"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:04.722" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p JMftEJB828  2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:13.532" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:13.532" level="INFO">${output} = 2023-08-04 02:24:07,111 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:24:07,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:24:04.719" endtime="20230804 02:24:13.532"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:13.534" level="INFO">2023-08-04 02:24:07,111 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:24:07,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-04 02:24:07,244 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-04 02:24:07,406 [main] INFO freon.BaseFreonGenerator: Executing test with prefix JMftEJB828 and number-of-tests 1
2023-08-04 02:24:07,534 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:08,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:09,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:10,183 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-04 02:24:10,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:11,537 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-04 02:24:12,537 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-04 02:24:13,143 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=72.288398, max=72.288398, mean=72.288398, stddev=0.0, median=72.288398, p75=72.288398, p95=72.288398, p98=72.288398, p99=72.288398, p999=72.288398, mean_rate=0.7584350576011555, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-04 02:24:13,145 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-04 02:24:13,146 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-04 02:24:13,146 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230804 02:24:13.533" endtime="20230804 02:24:13.534"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:13.535" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:13.534" endtime="20230804 02:24:13.535"/>
</kw>
<status status="PASS" starttime="20230804 02:24:04.718" endtime="20230804 02:24:13.535"/>
</kw>
<msg timestamp="20230804 02:24:13.535" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:24:04.718" endtime="20230804 02:24:13.535"/>
</kw>
<msg timestamp="20230804 02:24:13.535" level="INFO">${result} = 2023-08-04 02:24:07,111 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-04 02:24:07,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230804 02:24:04.717" endtime="20230804 02:24:13.535"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:13.536" endtime="20230804 02:24:13.536"/>
</kw>
<status status="PASS" starttime="20230804 02:24:04.716" endtime="20230804 02:24:13.536"/>
</kw>
<status status="PASS" starttime="20230804 02:23:55.796" endtime="20230804 02:24:13.536"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230804 02:23:28.605" endtime="20230804 02:24:13.536"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230804 02:23:28.225" endtime="20230804 02:24:13.538"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:13.552" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:18.993" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:18.993" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:13.549" endtime="20230804 02:24:18.993"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:18.994" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:18.994" endtime="20230804 02:24:18.995"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:18.995" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:18.995" endtime="20230804 02:24:18.995"/>
</kw>
<status status="PASS" starttime="20230804 02:24:13.548" endtime="20230804 02:24:18.996"/>
</kw>
<msg timestamp="20230804 02:24:18.996" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:24:13.548" endtime="20230804 02:24:18.996"/>
</kw>
<msg timestamp="20230804 02:24:18.996" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:13.548" endtime="20230804 02:24:18.996"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:18.996" endtime="20230804 02:24:18.997"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:19.002" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:25.087" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:25.087" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:18.998" endtime="20230804 02:24:25.087"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:25.089" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:25.088" endtime="20230804 02:24:25.089"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:25.089" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:25.089" endtime="20230804 02:24:25.090"/>
</kw>
<status status="PASS" starttime="20230804 02:24:18.998" endtime="20230804 02:24:25.090"/>
</kw>
<msg timestamp="20230804 02:24:25.090" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:24:18.997" endtime="20230804 02:24:25.090"/>
</kw>
<msg timestamp="20230804 02:24:25.090" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:18.997" endtime="20230804 02:24:25.090"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:25.090" endtime="20230804 02:24:25.091"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230804 02:24:13.547" endtime="20230804 02:24:25.091"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:25.096" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230804 02:24:25.098" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:25.098" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:25.093" endtime="20230804 02:24:25.098"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:25.099" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:25.099" endtime="20230804 02:24:25.099"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:25.100" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:25.100" endtime="20230804 02:24:25.100"/>
</kw>
<status status="PASS" starttime="20230804 02:24:25.093" endtime="20230804 02:24:25.100"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:25.105" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:34.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:34.641" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:25.103" endtime="20230804 02:24:34.641"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:34.643" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:34.642" endtime="20230804 02:24:34.643"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:34.644" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:34.643" endtime="20230804 02:24:34.644"/>
</kw>
<status status="PASS" starttime="20230804 02:24:25.102" endtime="20230804 02:24:34.644"/>
</kw>
<msg timestamp="20230804 02:24:34.644" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:24:25.101" endtime="20230804 02:24:34.644"/>
</kw>
<msg timestamp="20230804 02:24:34.645" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:25.101" endtime="20230804 02:24:34.645"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:34.645" endtime="20230804 02:24:34.645"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:34.649" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:34.652" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:34.652" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:34.646" endtime="20230804 02:24:34.652"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:34.653" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:34.652" endtime="20230804 02:24:34.653"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:34.654" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:34.653" endtime="20230804 02:24:34.654"/>
</kw>
<status status="PASS" starttime="20230804 02:24:34.645" endtime="20230804 02:24:34.654"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230804 02:24:25.092" endtime="20230804 02:24:34.654"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230804 02:24:34.657" level="INFO">${random} = 46492</msg>
<status status="PASS" starttime="20230804 02:24:34.657" endtime="20230804 02:24:34.657"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:34.661" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-46492 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:42.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:42.971" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:34.659" endtime="20230804 02:24:42.971"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:42.976" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:42.973" endtime="20230804 02:24:42.976"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:42.977" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:42.976" endtime="20230804 02:24:42.977"/>
</kw>
<status status="PASS" starttime="20230804 02:24:34.658" endtime="20230804 02:24:42.978"/>
</kw>
<msg timestamp="20230804 02:24:42.979" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230804 02:24:34.658" endtime="20230804 02:24:42.979"/>
</kw>
<msg timestamp="20230804 02:24:42.980" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:34.657" endtime="20230804 02:24:42.980"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:42.980" endtime="20230804 02:24:42.982"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:42.992" level="INFO">Running command 'cat /tmp/key-46492 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:43.000" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:43.000" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230804 02:24:42.983" endtime="20230804 02:24:43.000"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:43.002" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230804 02:24:43.000" endtime="20230804 02:24:43.003"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:43.003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:43.003" endtime="20230804 02:24:43.003"/>
</kw>
<msg timestamp="20230804 02:24:43.005" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230804 02:24:42.983" endtime="20230804 02:24:43.005"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230804 02:24:43.005" endtime="20230804 02:24:43.005"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230804 02:24:43.025" level="INFO">Running command 'rm /tmp/key-46492 2&gt;&amp;1'.</msg>
<msg timestamp="20230804 02:24:43.034" level="INFO">${rc} = 0</msg>
<msg timestamp="20230804 02:24:43.034" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230804 02:24:43.008" endtime="20230804 02:24:43.034"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230804 02:24:43.037" level="INFO"/>
<status status="PASS" starttime="20230804 02:24:43.034" endtime="20230804 02:24:43.037"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230804 02:24:43.038" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230804 02:24:43.037" endtime="20230804 02:24:43.038"/>
</kw>
<status status="PASS" starttime="20230804 02:24:43.007" endtime="20230804 02:24:43.038"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230804 02:24:34.656" endtime="20230804 02:24:43.038"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230804 02:24:13.539" endtime="20230804 02:24:43.040"/>
</suite>
<status status="PASS" starttime="20230804 02:23:28.186" endtime="20230804 02:24:43.044"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
