<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230807 10:23:10.503" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:22.927" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:22.937" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:22.937" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230807 10:21:22.917" endtime="20230807 10:21:22.937"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:22.939" level="INFO">scm</msg>
<status status="PASS" starttime="20230807 10:21:22.938" endtime="20230807 10:21:22.939"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:22.940" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:22.939" endtime="20230807 10:21:22.940"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.917" endtime="20230807 10:21:22.940"/>
</kw>
<msg timestamp="20230807 10:21:22.940" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:22.916" endtime="20230807 10:21:22.940"/>
</kw>
<msg timestamp="20230807 10:21:22.941" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230807 10:21:22.912" endtime="20230807 10:21:22.941"/>
</kw>
<msg timestamp="20230807 10:21:22.941" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230807 10:21:22.912" endtime="20230807 10:21:22.941"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230807 10:21:22.942" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230807 10:21:22.941" endtime="20230807 10:21:22.942"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:22.951" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:23.165" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:23.165" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:21:22.944" endtime="20230807 10:21:23.166"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:23.167" level="INFO"/>
<status status="PASS" starttime="20230807 10:21:23.166" endtime="20230807 10:21:23.167"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:23.168" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:23.167" endtime="20230807 10:21:23.168"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.943" endtime="20230807 10:21:23.168"/>
</kw>
<msg timestamp="20230807 10:21:23.168" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:22.943" endtime="20230807 10:21:23.169"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.942" endtime="20230807 10:21:23.169"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.942" endtime="20230807 10:21:23.169"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.911" endtime="20230807 10:21:23.169"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.910" endtime="20230807 10:21:23.169"/>
</kw>
<status status="PASS" starttime="20230807 10:21:22.910" endtime="20230807 10:21:23.169"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230807 10:21:23.177" level="INFO">${random} = lyXyYF6Ih0</msg>
<status status="PASS" starttime="20230807 10:21:23.174" endtime="20230807 10:21:23.177"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:23.192" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p lyXyYF6Ih0  2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:39.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:39.992" level="INFO">${output} = 2023-08-07 10:21:29,392 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:29,636 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:21:23.184" endtime="20230807 10:21:39.992"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:40.000" level="INFO">2023-08-07 10:21:29,392 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:29,636 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-07 10:21:29,636 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-07 10:21:29,725 [main] INFO freon.BaseFreonGenerator: Executing test with prefix lyXyYF6Ih0 and number-of-tests 1
2023-08-07 10:21:29,802 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:30,804 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:31,804 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:32,805 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:33,049 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-07 10:21:33,220 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-07 10:21:33,805 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:34,020 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-07 10:21:34,092 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-07 10:21:34,433 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-07 10:21:34,812 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:35,813 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:36,823 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:37,825 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:38,827 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-07 10:21:39,602 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5525.592259, max=5525.592259, mean=5525.592259, stddev=0.0, median=5525.592259, p75=5525.592259, p95=5525.592259, p98=5525.592259, p99=5525.592259, p999=5525.592259, mean_rate=0.15835725840452985, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-07 10:21:39,603 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-08-07 10:21:39,604 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-07 10:21:39,604 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230807 10:21:39.995" endtime="20230807 10:21:40.000"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:40.008" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:40.001" endtime="20230807 10:21:40.008"/>
</kw>
<status status="PASS" starttime="20230807 10:21:23.183" endtime="20230807 10:21:40.008"/>
</kw>
<msg timestamp="20230807 10:21:40.012" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:23.183" endtime="20230807 10:21:40.012"/>
</kw>
<msg timestamp="20230807 10:21:40.014" level="INFO">${result} = 2023-08-07 10:21:29,392 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:29,636 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:21:23.180" endtime="20230807 10:21:40.016"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:21:40.017" endtime="20230807 10:21:40.017"/>
</kw>
<status status="PASS" starttime="20230807 10:21:23.177" endtime="20230807 10:21:40.025"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:40.069" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p lyXyYF6Ih0  2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:52.497" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:52.497" level="INFO">${output} = 2023-08-07 10:21:45,709 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:45,911 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:21:40.066" endtime="20230807 10:21:52.497"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:52.499" level="INFO">2023-08-07 10:21:45,709 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:45,911 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-07 10:21:45,912 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-07 10:21:46,024 [main] INFO freon.BaseFreonGenerator: Executing test with prefix lyXyYF6Ih0 and number-of-tests 1
2023-08-07 10:21:46,096 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:47,105 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:48,128 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:49,128 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:49,311 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-07 10:21:50,129 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:21:51,129 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-07 10:21:52,106 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=76.638549, max=76.638549, mean=76.638549, stddev=0.0, median=76.638549, p75=76.638549, p95=76.638549, p98=76.638549, p99=76.638549, p999=76.638549, mean_rate=0.9204959882759739, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-07 10:21:52,108 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-07 10:21:52,111 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-07 10:21:52,111 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230807 10:21:52.498" endtime="20230807 10:21:52.499"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:52.499" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:52.499" endtime="20230807 10:21:52.500"/>
</kw>
<status status="PASS" starttime="20230807 10:21:40.044" endtime="20230807 10:21:52.500"/>
</kw>
<msg timestamp="20230807 10:21:52.500" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:40.043" endtime="20230807 10:21:52.500"/>
</kw>
<msg timestamp="20230807 10:21:52.500" level="INFO">${result} = 2023-08-07 10:21:45,709 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:45,911 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:21:40.038" endtime="20230807 10:21:52.500"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:21:52.500" endtime="20230807 10:21:52.501"/>
</kw>
<status status="PASS" starttime="20230807 10:21:40.026" endtime="20230807 10:21:52.501"/>
</kw>
<status status="PASS" starttime="20230807 10:21:23.173" endtime="20230807 10:21:52.501"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:52.508" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:54.735" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:54.735" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230807 10:21:52.503" endtime="20230807 10:21:54.735"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:54.737" level="INFO">40s</msg>
<status status="PASS" starttime="20230807 10:21:54.736" endtime="20230807 10:21:54.737"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:54.738" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:54.737" endtime="20230807 10:21:54.738"/>
</kw>
<status status="PASS" starttime="20230807 10:21:52.503" endtime="20230807 10:21:54.738"/>
</kw>
<msg timestamp="20230807 10:21:54.739" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:52.503" endtime="20230807 10:21:54.739"/>
</kw>
<msg timestamp="20230807 10:21:54.739" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230807 10:21:52.502" endtime="20230807 10:21:54.739"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230807 10:21:54.741" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230807 10:21:54.739" endtime="20230807 10:21:54.741"/>
</kw>
<msg timestamp="20230807 10:21:54.741" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230807 10:21:52.501" endtime="20230807 10:21:54.741"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230807 10:21:54.742" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230807 10:21:54.742" endtime="20230807 10:21:54.742"/>
</kw>
<msg timestamp="20230807 10:21:54.743" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230807 10:21:54.741" endtime="20230807 10:21:54.743"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:54.748" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:55.074" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:55.074" level="INFO">${output} = 0173081A2330</msg>
<status status="PASS" starttime="20230807 10:21:54.745" endtime="20230807 10:21:55.074"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:55.076" level="INFO">0173081A2330</msg>
<status status="PASS" starttime="20230807 10:21:55.075" endtime="20230807 10:21:55.076"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:55.077" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:55.076" endtime="20230807 10:21:55.077"/>
</kw>
<status status="PASS" starttime="20230807 10:21:54.744" endtime="20230807 10:21:55.078"/>
</kw>
<msg timestamp="20230807 10:21:55.078" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:54.744" endtime="20230807 10:21:55.078"/>
</kw>
<msg timestamp="20230807 10:21:55.078" level="INFO">${certSerial} = 0173081A2330</msg>
<status status="PASS" starttime="20230807 10:21:54.743" endtime="20230807 10:21:55.078"/>
</kw>
<msg timestamp="20230807 10:21:55.078" level="INFO">${certId1} = 0173081A2330</msg>
<status status="PASS" starttime="20230807 10:21:54.743" endtime="20230807 10:21:55.078"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:55.087" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:21:55.413" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:21:55.413" level="INFO">${output} = 016FA8F19706</msg>
<status status="PASS" starttime="20230807 10:21:55.084" endtime="20230807 10:21:55.413"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:21:55.414" level="INFO">016FA8F19706</msg>
<status status="PASS" starttime="20230807 10:21:55.413" endtime="20230807 10:21:55.415"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:21:55.415" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:21:55.415" endtime="20230807 10:21:55.415"/>
</kw>
<status status="PASS" starttime="20230807 10:21:55.083" endtime="20230807 10:21:55.416"/>
</kw>
<msg timestamp="20230807 10:21:55.416" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:55.083" endtime="20230807 10:21:55.416"/>
</kw>
<msg timestamp="20230807 10:21:55.416" level="INFO">${certSerial} = 016FA8F19706</msg>
<status status="PASS" starttime="20230807 10:21:55.082" endtime="20230807 10:21:55.416"/>
</kw>
<msg timestamp="20230807 10:21:55.416" level="INFO">${newCertId} = 016FA8F19706</msg>
<status status="PASS" starttime="20230807 10:21:55.081" endtime="20230807 10:21:55.416"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230807 10:21:55.417" endtime="20230807 10:21:55.417"/>
</kw>
<status status="PASS" starttime="20230807 10:21:55.079" endtime="20230807 10:21:55.417"/>
</kw>
<status status="PASS" starttime="20230807 10:21:55.079" endtime="20230807 10:21:55.418"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230807 10:21:55.419" level="INFO">${random} = ABovDTvQBJ</msg>
<status status="PASS" starttime="20230807 10:21:55.418" endtime="20230807 10:21:55.419"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:21:55.426" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ABovDTvQBJ  2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:06.702" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:06.702" level="INFO">${output} = 2023-08-07 10:21:59,607 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:59,843 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:21:55.423" endtime="20230807 10:22:06.702"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:06.704" level="INFO">2023-08-07 10:21:59,607 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:59,843 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-07 10:21:59,844 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-07 10:21:59,958 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ABovDTvQBJ and number-of-tests 1
2023-08-07 10:22:00,073 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:01,078 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:02,080 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:03,082 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:03,670 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-07 10:22:03,782 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-07 10:22:04,082 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:04,136 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-07 10:22:05,086 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:06,086 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-07 10:22:06,275 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2951.994814, max=2951.994814, mean=2951.994814, stddev=0.0, median=2951.994814, p75=2951.994814, p95=2951.994814, p98=2951.994814, p99=2951.994814, p999=2951.994814, mean_rate=0.29707492624511894, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-07 10:22:06,278 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-07 10:22:06,278 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-07 10:22:06,278 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230807 10:22:06.703" endtime="20230807 10:22:06.704"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:06.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:06.704" endtime="20230807 10:22:06.705"/>
</kw>
<status status="PASS" starttime="20230807 10:21:55.422" endtime="20230807 10:22:06.705"/>
</kw>
<msg timestamp="20230807 10:22:06.705" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:21:55.422" endtime="20230807 10:22:06.705"/>
</kw>
<msg timestamp="20230807 10:22:06.706" level="INFO">${result} = 2023-08-07 10:21:59,607 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:21:59,843 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:21:55.421" endtime="20230807 10:22:06.706"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:06.706" endtime="20230807 10:22:06.707"/>
</kw>
<status status="PASS" starttime="20230807 10:21:55.419" endtime="20230807 10:22:06.707"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:06.714" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ABovDTvQBJ  2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:16.802" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:16.802" level="INFO">${output} = 2023-08-07 10:22:09,533 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:22:09,688 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:22:06.710" endtime="20230807 10:22:16.802"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:16.804" level="INFO">2023-08-07 10:22:09,533 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:22:09,688 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-07 10:22:09,688 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-07 10:22:09,773 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ABovDTvQBJ and number-of-tests 1
2023-08-07 10:22:09,836 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:10,840 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:11,840 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:12,473 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-07 10:22:12,841 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:13,841 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:14,841 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-07 10:22:15,842 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-07 10:22:16,153 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=76.14284, max=76.14284, mean=76.14284, stddev=0.0, median=76.14284, p75=76.14284, p95=76.14284, p98=76.14284, p99=76.14284, p999=76.14284, mean_rate=0.8366181373655267, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-07 10:22:16,153 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-07 10:22:16,154 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-07 10:22:16,154 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230807 10:22:16.803" endtime="20230807 10:22:16.804"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:16.805" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:16.804" endtime="20230807 10:22:16.805"/>
</kw>
<status status="PASS" starttime="20230807 10:22:06.710" endtime="20230807 10:22:16.805"/>
</kw>
<msg timestamp="20230807 10:22:16.805" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:22:06.709" endtime="20230807 10:22:16.806"/>
</kw>
<msg timestamp="20230807 10:22:16.806" level="INFO">${result} = 2023-08-07 10:22:09,533 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-07 10:22:09,688 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230807 10:22:06.709" endtime="20230807 10:22:16.806"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:16.806" endtime="20230807 10:22:16.807"/>
</kw>
<status status="PASS" starttime="20230807 10:22:06.707" endtime="20230807 10:22:16.807"/>
</kw>
<status status="PASS" starttime="20230807 10:21:55.418" endtime="20230807 10:22:16.807"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230807 10:21:23.170" endtime="20230807 10:22:16.807"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230807 10:21:22.818" endtime="20230807 10:22:16.809"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:16.825" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:23.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:23.495" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:16.822" endtime="20230807 10:22:23.495"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:23.497" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:23.496" endtime="20230807 10:22:23.497"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:23.497" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:23.497" endtime="20230807 10:22:23.498"/>
</kw>
<status status="PASS" starttime="20230807 10:22:16.821" endtime="20230807 10:22:23.498"/>
</kw>
<msg timestamp="20230807 10:22:23.498" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:22:16.821" endtime="20230807 10:22:23.498"/>
</kw>
<msg timestamp="20230807 10:22:23.498" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:16.820" endtime="20230807 10:22:23.498"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:23.498" endtime="20230807 10:22:23.499"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:23.504" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:30.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:30.737" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:23.501" endtime="20230807 10:22:30.737"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:30.739" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:30.738" endtime="20230807 10:22:30.739"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:30.739" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:30.739" endtime="20230807 10:22:30.740"/>
</kw>
<status status="PASS" starttime="20230807 10:22:23.500" endtime="20230807 10:22:30.740"/>
</kw>
<msg timestamp="20230807 10:22:30.740" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:22:23.500" endtime="20230807 10:22:30.740"/>
</kw>
<msg timestamp="20230807 10:22:30.740" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:23.499" endtime="20230807 10:22:30.740"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:30.741" endtime="20230807 10:22:30.741"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230807 10:22:16.820" endtime="20230807 10:22:30.741"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:30.747" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230807 10:22:30.750" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:30.750" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:30.744" endtime="20230807 10:22:30.750"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:30.751" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:30.750" endtime="20230807 10:22:30.751"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:30.752" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:30.751" endtime="20230807 10:22:30.752"/>
</kw>
<status status="PASS" starttime="20230807 10:22:30.743" endtime="20230807 10:22:30.752"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:30.757" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:41.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:41.803" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:30.755" endtime="20230807 10:22:41.803"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:41.805" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:41.804" endtime="20230807 10:22:41.805"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:41.806" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:41.805" endtime="20230807 10:22:41.806"/>
</kw>
<status status="PASS" starttime="20230807 10:22:30.754" endtime="20230807 10:22:41.806"/>
</kw>
<msg timestamp="20230807 10:22:41.806" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:22:30.753" endtime="20230807 10:22:41.806"/>
</kw>
<msg timestamp="20230807 10:22:41.806" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:30.752" endtime="20230807 10:22:41.807"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:41.807" endtime="20230807 10:22:41.807"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:41.811" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:41.814" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:41.815" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:41.808" endtime="20230807 10:22:41.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:41.816" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:41.815" endtime="20230807 10:22:41.816"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:41.816" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:41.816" endtime="20230807 10:22:41.817"/>
</kw>
<status status="PASS" starttime="20230807 10:22:41.807" endtime="20230807 10:22:41.817"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230807 10:22:30.743" endtime="20230807 10:22:41.817"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230807 10:22:41.820" level="INFO">${random} = 33831</msg>
<status status="PASS" starttime="20230807 10:22:41.819" endtime="20230807 10:22:41.820"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:41.824" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-33831 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:51.688" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:51.688" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:41.822" endtime="20230807 10:22:51.688"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:51.690" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:51.689" endtime="20230807 10:22:51.690"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:51.690" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:51.690" endtime="20230807 10:22:51.690"/>
</kw>
<status status="PASS" starttime="20230807 10:22:41.821" endtime="20230807 10:22:51.691"/>
</kw>
<msg timestamp="20230807 10:22:51.691" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230807 10:22:41.821" endtime="20230807 10:22:51.691"/>
</kw>
<msg timestamp="20230807 10:22:51.691" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:41.820" endtime="20230807 10:22:51.691"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:51.691" endtime="20230807 10:22:51.692"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:51.696" level="INFO">Running command 'cat /tmp/key-33831 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:51.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:51.700" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230807 10:22:51.693" endtime="20230807 10:22:51.700"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:51.701" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230807 10:22:51.700" endtime="20230807 10:22:51.701"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:51.702" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:51.701" endtime="20230807 10:22:51.702"/>
</kw>
<msg timestamp="20230807 10:22:51.702" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230807 10:22:51.692" endtime="20230807 10:22:51.702"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230807 10:22:51.702" endtime="20230807 10:22:51.703"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230807 10:22:51.706" level="INFO">Running command 'rm /tmp/key-33831 2&gt;&amp;1'.</msg>
<msg timestamp="20230807 10:22:51.710" level="INFO">${rc} = 0</msg>
<msg timestamp="20230807 10:22:51.710" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230807 10:22:51.704" endtime="20230807 10:22:51.710"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230807 10:22:51.711" level="INFO"/>
<status status="PASS" starttime="20230807 10:22:51.711" endtime="20230807 10:22:51.711"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230807 10:22:51.712" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230807 10:22:51.712" endtime="20230807 10:22:51.712"/>
</kw>
<status status="PASS" starttime="20230807 10:22:51.703" endtime="20230807 10:22:51.713"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230807 10:22:41.818" endtime="20230807 10:22:51.713"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230807 10:22:16.811" endtime="20230807 10:22:51.715"/>
</suite>
<status status="PASS" starttime="20230807 10:21:22.748" endtime="20230807 10:22:51.718"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
