<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230810 23:23:47.708" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:06.552" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:06.557" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:06.557" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230810 23:22:06.549" endtime="20230810 23:22:06.557"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:06.558" level="INFO">scm</msg>
<status status="PASS" starttime="20230810 23:22:06.557" endtime="20230810 23:22:06.558"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:06.558" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:06.558" endtime="20230810 23:22:06.559"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.548" endtime="20230810 23:22:06.559"/>
</kw>
<msg timestamp="20230810 23:22:06.559" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:06.548" endtime="20230810 23:22:06.559"/>
</kw>
<msg timestamp="20230810 23:22:06.559" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230810 23:22:06.547" endtime="20230810 23:22:06.559"/>
</kw>
<msg timestamp="20230810 23:22:06.560" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230810 23:22:06.547" endtime="20230810 23:22:06.560"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230810 23:22:06.560" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230810 23:22:06.560" endtime="20230810 23:22:06.560"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:06.565" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:06.653" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:06.653" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:22:06.562" endtime="20230810 23:22:06.653"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:06.655" level="INFO"/>
<status status="PASS" starttime="20230810 23:22:06.654" endtime="20230810 23:22:06.655"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:06.656" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:06.655" endtime="20230810 23:22:06.656"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.562" endtime="20230810 23:22:06.656"/>
</kw>
<msg timestamp="20230810 23:22:06.656" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:06.562" endtime="20230810 23:22:06.656"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.561" endtime="20230810 23:22:06.656"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.560" endtime="20230810 23:22:06.657"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.546" endtime="20230810 23:22:06.657"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.546" endtime="20230810 23:22:06.657"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.545" endtime="20230810 23:22:06.657"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230810 23:22:06.660" level="INFO">${random} = Je6dofMoSb</msg>
<status status="PASS" starttime="20230810 23:22:06.660" endtime="20230810 23:22:06.660"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:06.668" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p Je6dofMoSb  2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:21.168" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:21.168" level="INFO">${output} = 2023-08-10 23:22:10,233 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:10,454 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:06.664" endtime="20230810 23:22:21.168"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:21.170" level="INFO">2023-08-10 23:22:10,233 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:10,454 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-10 23:22:10,454 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-10 23:22:10,589 [main] INFO freon.BaseFreonGenerator: Executing test with prefix Je6dofMoSb and number-of-tests 1
2023-08-10 23:22:10,655 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:11,661 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:12,661 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:13,345 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-10 23:22:13,508 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-10 23:22:13,662 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:14,376 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-10 23:22:14,450 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-10 23:22:14,662 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:14,799 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-10 23:22:15,667 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:16,668 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:17,668 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:18,669 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:19,669 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:20,670 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-10 23:22:20,781 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=6315.35974, max=6315.35974, mean=6315.35974, stddev=0.0, median=6315.35974, p75=6315.35974, p95=6315.35974, p98=6315.35974, p99=6315.35974, p999=6315.35974, mean_rate=0.1387043770253255, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-10 23:22:20,781 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-08-10 23:22:20,782 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-10 23:22:20,782 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230810 23:22:21.169" endtime="20230810 23:22:21.170"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:21.172" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:21.171" endtime="20230810 23:22:21.172"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.663" endtime="20230810 23:22:21.172"/>
</kw>
<msg timestamp="20230810 23:22:21.172" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:06.663" endtime="20230810 23:22:21.173"/>
</kw>
<msg timestamp="20230810 23:22:21.173" level="INFO">${result} = 2023-08-10 23:22:10,233 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:10,454 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:06.662" endtime="20230810 23:22:21.173"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:22:21.173" endtime="20230810 23:22:21.174"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.660" endtime="20230810 23:22:21.174"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:21.181" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p Je6dofMoSb  2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:32.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:32.504" level="INFO">${output} = 2023-08-10 23:22:26,125 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:26,297 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:21.178" endtime="20230810 23:22:32.504"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:32.506" level="INFO">2023-08-10 23:22:26,125 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:26,297 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-10 23:22:26,297 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-10 23:22:26,394 [main] INFO freon.BaseFreonGenerator: Executing test with prefix Je6dofMoSb and number-of-tests 1
2023-08-10 23:22:26,462 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:27,463 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:28,465 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:29,303 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-10 23:22:29,465 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:30,465 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:31,466 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-10 23:22:32,112 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=88.189344, max=88.189344, mean=88.189344, stddev=0.0, median=88.189344, p75=88.189344, p95=88.189344, p98=88.189344, p99=88.189344, p999=88.189344, mean_rate=0.8803355936472033, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-10 23:22:32,115 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-10 23:22:32,116 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-10 23:22:32,116 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230810 23:22:32.505" endtime="20230810 23:22:32.506"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:32.507" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:32.506" endtime="20230810 23:22:32.507"/>
</kw>
<status status="PASS" starttime="20230810 23:22:21.177" endtime="20230810 23:22:32.507"/>
</kw>
<msg timestamp="20230810 23:22:32.507" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:21.177" endtime="20230810 23:22:32.508"/>
</kw>
<msg timestamp="20230810 23:22:32.508" level="INFO">${result} = 2023-08-10 23:22:26,125 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:26,297 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:21.176" endtime="20230810 23:22:32.508"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:22:32.508" endtime="20230810 23:22:32.509"/>
</kw>
<status status="PASS" starttime="20230810 23:22:21.174" endtime="20230810 23:22:32.509"/>
</kw>
<status status="PASS" starttime="20230810 23:22:06.659" endtime="20230810 23:22:32.509"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:32.516" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:34.342" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:34.343" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230810 23:22:32.511" endtime="20230810 23:22:34.343"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:34.344" level="INFO">40s</msg>
<status status="PASS" starttime="20230810 23:22:34.343" endtime="20230810 23:22:34.344"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:34.345" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:34.344" endtime="20230810 23:22:34.345"/>
</kw>
<status status="PASS" starttime="20230810 23:22:32.511" endtime="20230810 23:22:34.345"/>
</kw>
<msg timestamp="20230810 23:22:34.345" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:32.510" endtime="20230810 23:22:34.346"/>
</kw>
<msg timestamp="20230810 23:22:34.346" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230810 23:22:32.510" endtime="20230810 23:22:34.346"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230810 23:22:34.347" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230810 23:22:34.346" endtime="20230810 23:22:34.347"/>
</kw>
<msg timestamp="20230810 23:22:34.348" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230810 23:22:32.509" endtime="20230810 23:22:34.348"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230810 23:22:34.349" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230810 23:22:34.349" endtime="20230810 23:22:34.349"/>
</kw>
<msg timestamp="20230810 23:22:34.349" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230810 23:22:34.348" endtime="20230810 23:22:34.350"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:34.356" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:34.496" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:34.497" level="INFO">${output} = 0100F5008D8C</msg>
<status status="PASS" starttime="20230810 23:22:34.352" endtime="20230810 23:22:34.497"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:34.498" level="INFO">0100F5008D8C</msg>
<status status="PASS" starttime="20230810 23:22:34.497" endtime="20230810 23:22:34.498"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:34.499" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:34.499" endtime="20230810 23:22:34.499"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.351" endtime="20230810 23:22:34.500"/>
</kw>
<msg timestamp="20230810 23:22:34.500" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:34.351" endtime="20230810 23:22:34.500"/>
</kw>
<msg timestamp="20230810 23:22:34.500" level="INFO">${certSerial} = 0100F5008D8C</msg>
<status status="PASS" starttime="20230810 23:22:34.350" endtime="20230810 23:22:34.500"/>
</kw>
<msg timestamp="20230810 23:22:34.500" level="INFO">${certId1} = 0100F5008D8C</msg>
<status status="PASS" starttime="20230810 23:22:34.350" endtime="20230810 23:22:34.500"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:34.508" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:34.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:34.641" level="INFO">${output} = 01049B2E1621</msg>
<status status="PASS" starttime="20230810 23:22:34.505" endtime="20230810 23:22:34.641"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:34.642" level="INFO">01049B2E1621</msg>
<status status="PASS" starttime="20230810 23:22:34.641" endtime="20230810 23:22:34.642"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:34.643" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:34.643" endtime="20230810 23:22:34.643"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.504" endtime="20230810 23:22:34.644"/>
</kw>
<msg timestamp="20230810 23:22:34.644" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:34.504" endtime="20230810 23:22:34.644"/>
</kw>
<msg timestamp="20230810 23:22:34.644" level="INFO">${certSerial} = 01049B2E1621</msg>
<status status="PASS" starttime="20230810 23:22:34.503" endtime="20230810 23:22:34.644"/>
</kw>
<msg timestamp="20230810 23:22:34.644" level="INFO">${newCertId} = 01049B2E1621</msg>
<status status="PASS" starttime="20230810 23:22:34.502" endtime="20230810 23:22:34.644"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230810 23:22:34.645" endtime="20230810 23:22:34.645"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.501" endtime="20230810 23:22:34.645"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.501" endtime="20230810 23:22:34.645"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230810 23:22:34.647" level="INFO">${random} = BeDpIjqbzt</msg>
<status status="PASS" starttime="20230810 23:22:34.646" endtime="20230810 23:22:34.647"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:34.654" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p BeDpIjqbzt  2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:45.509" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:45.509" level="INFO">${output} = 2023-08-10 23:22:38,511 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:38,721 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:34.651" endtime="20230810 23:22:45.509"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:45.511" level="INFO">2023-08-10 23:22:38,511 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:38,721 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-10 23:22:38,721 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-10 23:22:38,836 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BeDpIjqbzt and number-of-tests 1
2023-08-10 23:22:38,916 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:39,925 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:40,925 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:41,721 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-10 23:22:41,779 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-10 23:22:41,926 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:42,150 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-10 23:22:42,935 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:43,939 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:44,939 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-10 23:22:45,070 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2821.946608, max=2821.946608, mean=2821.946608, stddev=0.0, median=2821.946608, p75=2821.946608, p95=2821.946608, p98=2821.946608, p99=2821.946608, p999=2821.946608, mean_rate=0.2712930835428709, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-10 23:22:45,070 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-10 23:22:45,071 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-10 23:22:45,073 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230810 23:22:45.510" endtime="20230810 23:22:45.511"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:45.512" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:45.511" endtime="20230810 23:22:45.512"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.650" endtime="20230810 23:22:45.512"/>
</kw>
<msg timestamp="20230810 23:22:45.512" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:34.650" endtime="20230810 23:22:45.512"/>
</kw>
<msg timestamp="20230810 23:22:45.513" level="INFO">${result} = 2023-08-10 23:22:38,511 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:38,721 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:34.649" endtime="20230810 23:22:45.513"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:22:45.513" endtime="20230810 23:22:45.513"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.647" endtime="20230810 23:22:45.513"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:45.520" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p BeDpIjqbzt  2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:22:55.305" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:22:55.305" level="INFO">${output} = 2023-08-10 23:22:48,507 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:48,699 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:45.517" endtime="20230810 23:22:55.305"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:22:55.309" level="INFO">2023-08-10 23:22:48,507 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:48,699 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-10 23:22:48,699 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-10 23:22:48,871 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BeDpIjqbzt and number-of-tests 1
2023-08-10 23:22:49,020 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:50,023 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:51,023 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:51,678 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-10 23:22:52,025 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:53,025 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-10 23:22:54,026 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-10 23:22:54,901 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=55.209954, max=55.209954, mean=55.209954, stddev=0.0, median=55.209954, p75=55.209954, p95=55.209954, p98=55.209954, p99=55.209954, p999=55.209954, mean_rate=0.7441995082846123, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-10 23:22:54,903 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-10 23:22:54,903 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-10 23:22:54,903 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230810 23:22:55.307" endtime="20230810 23:22:55.309"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:22:55.311" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:22:55.310" endtime="20230810 23:22:55.312"/>
</kw>
<status status="PASS" starttime="20230810 23:22:45.517" endtime="20230810 23:22:55.312"/>
</kw>
<msg timestamp="20230810 23:22:55.312" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:45.516" endtime="20230810 23:22:55.312"/>
</kw>
<msg timestamp="20230810 23:22:55.314" level="INFO">${result} = 2023-08-10 23:22:48,507 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-10 23:22:48,699 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230810 23:22:45.515" endtime="20230810 23:22:55.314"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:22:55.314" endtime="20230810 23:22:55.315"/>
</kw>
<status status="PASS" starttime="20230810 23:22:45.514" endtime="20230810 23:22:55.315"/>
</kw>
<status status="PASS" starttime="20230810 23:22:34.646" endtime="20230810 23:22:55.315"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230810 23:22:06.657" endtime="20230810 23:22:55.316"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230810 23:22:06.488" endtime="20230810 23:22:55.319"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:22:55.350" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:01.491" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:01.491" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:22:55.343" endtime="20230810 23:23:01.491"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:01.493" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:01.492" endtime="20230810 23:23:01.493"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:01.493" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:01.493" endtime="20230810 23:23:01.494"/>
</kw>
<status status="PASS" starttime="20230810 23:22:55.343" endtime="20230810 23:23:01.494"/>
</kw>
<msg timestamp="20230810 23:23:01.494" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:22:55.342" endtime="20230810 23:23:01.494"/>
</kw>
<msg timestamp="20230810 23:23:01.494" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:22:55.341" endtime="20230810 23:23:01.494"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:23:01.494" endtime="20230810 23:23:01.495"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:01.500" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:09.160" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:09.160" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:01.497" endtime="20230810 23:23:09.160"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:09.162" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:09.161" endtime="20230810 23:23:09.162"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:09.163" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:09.162" endtime="20230810 23:23:09.163"/>
</kw>
<status status="PASS" starttime="20230810 23:23:01.496" endtime="20230810 23:23:09.163"/>
</kw>
<msg timestamp="20230810 23:23:09.163" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:23:01.496" endtime="20230810 23:23:09.163"/>
</kw>
<msg timestamp="20230810 23:23:09.163" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:01.495" endtime="20230810 23:23:09.163"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:23:09.164" endtime="20230810 23:23:09.164"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230810 23:22:55.339" endtime="20230810 23:23:09.164"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:09.170" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230810 23:23:09.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:09.172" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:09.167" endtime="20230810 23:23:09.172"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:09.174" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:09.173" endtime="20230810 23:23:09.174"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:09.175" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:09.174" endtime="20230810 23:23:09.175"/>
</kw>
<status status="PASS" starttime="20230810 23:23:09.167" endtime="20230810 23:23:09.175"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:09.180" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:19.075" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:19.075" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:09.177" endtime="20230810 23:23:19.075"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:19.077" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:19.076" endtime="20230810 23:23:19.077"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:19.077" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:19.077" endtime="20230810 23:23:19.078"/>
</kw>
<status status="PASS" starttime="20230810 23:23:09.176" endtime="20230810 23:23:19.078"/>
</kw>
<msg timestamp="20230810 23:23:19.078" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:23:09.176" endtime="20230810 23:23:19.078"/>
</kw>
<msg timestamp="20230810 23:23:19.078" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:09.175" endtime="20230810 23:23:19.078"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:23:19.078" endtime="20230810 23:23:19.079"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:19.083" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:19.086" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:19.086" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:19.080" endtime="20230810 23:23:19.086"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:19.088" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:19.087" endtime="20230810 23:23:19.088"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:19.088" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:19.088" endtime="20230810 23:23:19.088"/>
</kw>
<status status="PASS" starttime="20230810 23:23:19.079" endtime="20230810 23:23:19.089"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230810 23:23:09.166" endtime="20230810 23:23:19.089"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230810 23:23:19.092" level="INFO">${random} = 25768</msg>
<status status="PASS" starttime="20230810 23:23:19.091" endtime="20230810 23:23:19.092"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:19.097" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-25768 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:29.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:29.264" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:19.094" endtime="20230810 23:23:29.264"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:29.265" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:29.264" endtime="20230810 23:23:29.265"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:29.266" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:29.265" endtime="20230810 23:23:29.266"/>
</kw>
<status status="PASS" starttime="20230810 23:23:19.093" endtime="20230810 23:23:29.266"/>
</kw>
<msg timestamp="20230810 23:23:29.266" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230810 23:23:19.093" endtime="20230810 23:23:29.266"/>
</kw>
<msg timestamp="20230810 23:23:29.266" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:19.092" endtime="20230810 23:23:29.266"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:23:29.267" endtime="20230810 23:23:29.267"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:29.271" level="INFO">Running command 'cat /tmp/key-25768 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:29.274" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:29.274" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230810 23:23:29.268" endtime="20230810 23:23:29.274"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:29.276" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230810 23:23:29.275" endtime="20230810 23:23:29.276"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:29.276" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:29.276" endtime="20230810 23:23:29.276"/>
</kw>
<msg timestamp="20230810 23:23:29.277" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230810 23:23:29.267" endtime="20230810 23:23:29.277"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230810 23:23:29.277" endtime="20230810 23:23:29.278"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230810 23:23:29.281" level="INFO">Running command 'rm /tmp/key-25768 2&gt;&amp;1'.</msg>
<msg timestamp="20230810 23:23:29.284" level="INFO">${rc} = 0</msg>
<msg timestamp="20230810 23:23:29.284" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230810 23:23:29.279" endtime="20230810 23:23:29.284"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230810 23:23:29.285" level="INFO"/>
<status status="PASS" starttime="20230810 23:23:29.284" endtime="20230810 23:23:29.285"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230810 23:23:29.286" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230810 23:23:29.285" endtime="20230810 23:23:29.286"/>
</kw>
<status status="PASS" starttime="20230810 23:23:29.278" endtime="20230810 23:23:29.286"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230810 23:23:19.090" endtime="20230810 23:23:29.286"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230810 23:22:55.323" endtime="20230810 23:23:29.287"/>
</suite>
<status status="PASS" starttime="20230810 23:22:06.441" endtime="20230810 23:23:29.290"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
