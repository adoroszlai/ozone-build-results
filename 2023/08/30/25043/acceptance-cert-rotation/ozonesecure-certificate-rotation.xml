<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230830 07:02:55.862" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:20.988" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:21.008" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:21.008" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230830 07:01:20.985" endtime="20230830 07:01:21.008"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:21.013" level="INFO">scm</msg>
<status status="PASS" starttime="20230830 07:01:21.012" endtime="20230830 07:01:21.013"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:21.018" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:21.016" endtime="20230830 07:01:21.019"/>
</kw>
<status status="PASS" starttime="20230830 07:01:20.984" endtime="20230830 07:01:21.019"/>
</kw>
<msg timestamp="20230830 07:01:21.019" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:20.984" endtime="20230830 07:01:21.019"/>
</kw>
<msg timestamp="20230830 07:01:21.019" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230830 07:01:20.984" endtime="20230830 07:01:21.019"/>
</kw>
<msg timestamp="20230830 07:01:21.023" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230830 07:01:20.983" endtime="20230830 07:01:21.023"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230830 07:01:21.024" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230830 07:01:21.023" endtime="20230830 07:01:21.026"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:21.041" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:21.066" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:21.066" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:01:21.033" endtime="20230830 07:01:21.067"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:21.068" level="INFO"/>
<status status="PASS" starttime="20230830 07:01:21.067" endtime="20230830 07:01:21.068"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:21.068" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:21.068" endtime="20230830 07:01:21.069"/>
</kw>
<status status="PASS" starttime="20230830 07:01:21.031" endtime="20230830 07:01:21.069"/>
</kw>
<msg timestamp="20230830 07:01:21.069" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:21.029" endtime="20230830 07:01:21.070"/>
</kw>
<status status="PASS" starttime="20230830 07:01:21.027" endtime="20230830 07:01:21.071"/>
</kw>
<status status="PASS" starttime="20230830 07:01:21.026" endtime="20230830 07:01:21.071"/>
</kw>
<status status="PASS" starttime="20230830 07:01:20.982" endtime="20230830 07:01:21.071"/>
</kw>
<status status="PASS" starttime="20230830 07:01:20.982" endtime="20230830 07:01:21.071"/>
</kw>
<status status="PASS" starttime="20230830 07:01:20.981" endtime="20230830 07:01:21.071"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230830 07:01:21.079" level="INFO">${random} = N4HPzX7d7V</msg>
<status status="PASS" starttime="20230830 07:01:21.077" endtime="20230830 07:01:21.079"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:21.093" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p N4HPzX7d7V  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:36.403" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:36.403" level="INFO">${output} = 2023-08-30 07:01:27,696 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:27,801 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:21.086" endtime="20230830 07:01:36.403"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:36.404" level="INFO">2023-08-30 07:01:27,696 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:27,801 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:01:27,801 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:01:27,941 [main] INFO freon.BaseFreonGenerator: Executing test with prefix N4HPzX7d7V and number-of-tests 1
2023-08-30 07:01:28,057 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:29,059 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:30,059 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:30,341 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-30 07:01:30,504 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-30 07:01:31,062 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:31,278 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:01:31,378 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-30 07:01:31,725 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-30 07:01:32,062 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:33,063 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:34,063 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:35,063 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:01:35,849 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4280.389554, max=4280.389554, mean=4280.389554, stddev=0.0, median=4280.389554, p75=4280.389554, p95=4280.389554, p98=4280.389554, p99=4280.389554, p999=4280.389554, mean_rate=0.1901579826073146, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:01:35,852 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-08-30 07:01:35,857 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:01:35,857 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:01:36.404" endtime="20230830 07:01:36.404"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:36.405" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:36.405" endtime="20230830 07:01:36.411"/>
</kw>
<status status="PASS" starttime="20230830 07:01:21.085" endtime="20230830 07:01:36.411"/>
</kw>
<msg timestamp="20230830 07:01:36.411" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:21.084" endtime="20230830 07:01:36.412"/>
</kw>
<msg timestamp="20230830 07:01:36.412" level="INFO">${result} = 2023-08-30 07:01:27,696 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:27,801 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:21.083" endtime="20230830 07:01:36.412"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:01:36.412" endtime="20230830 07:01:36.413"/>
</kw>
<status status="PASS" starttime="20230830 07:01:21.080" endtime="20230830 07:01:36.413"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:36.430" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p N4HPzX7d7V  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:48.114" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:48.114" level="INFO">${output} = 2023-08-30 07:01:41,053 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:41,230 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:36.416" endtime="20230830 07:01:48.114"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:48.116" level="INFO">2023-08-30 07:01:41,053 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:41,230 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:01:41,231 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:01:41,511 [main] INFO freon.BaseFreonGenerator: Executing test with prefix N4HPzX7d7V and number-of-tests 1
2023-08-30 07:01:41,588 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:42,590 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:43,591 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:44,595 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:44,653 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:01:45,595 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:46,596 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:47,596 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:01:47,755 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=180.495456, max=180.495456, mean=180.495456, stddev=0.0, median=180.495456, p75=180.495456, p95=180.495456, p98=180.495456, p99=180.495456, p999=180.495456, mean_rate=0.7403035848933849, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:01:47,755 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-30 07:01:47,756 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:01:47,756 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:01:48.115" endtime="20230830 07:01:48.116"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:48.116" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:48.116" endtime="20230830 07:01:48.117"/>
</kw>
<status status="PASS" starttime="20230830 07:01:36.415" endtime="20230830 07:01:48.117"/>
</kw>
<msg timestamp="20230830 07:01:48.117" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:36.415" endtime="20230830 07:01:48.117"/>
</kw>
<msg timestamp="20230830 07:01:48.117" level="INFO">${result} = 2023-08-30 07:01:41,053 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:41,230 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:36.414" endtime="20230830 07:01:48.117"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:01:48.117" endtime="20230830 07:01:48.118"/>
</kw>
<status status="PASS" starttime="20230830 07:01:36.413" endtime="20230830 07:01:48.118"/>
</kw>
<status status="PASS" starttime="20230830 07:01:21.077" endtime="20230830 07:01:48.118"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:48.124" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:49.766" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:49.767" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230830 07:01:48.120" endtime="20230830 07:01:49.767"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:49.768" level="INFO">40s</msg>
<status status="PASS" starttime="20230830 07:01:49.767" endtime="20230830 07:01:49.768"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:49.769" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:49.768" endtime="20230830 07:01:49.769"/>
</kw>
<status status="PASS" starttime="20230830 07:01:48.120" endtime="20230830 07:01:49.769"/>
</kw>
<msg timestamp="20230830 07:01:49.769" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:48.119" endtime="20230830 07:01:49.769"/>
</kw>
<msg timestamp="20230830 07:01:49.769" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230830 07:01:48.119" endtime="20230830 07:01:49.769"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230830 07:01:49.771" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230830 07:01:49.770" endtime="20230830 07:01:49.771"/>
</kw>
<msg timestamp="20230830 07:01:49.771" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230830 07:01:48.118" endtime="20230830 07:01:49.771"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230830 07:01:49.772" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230830 07:01:49.772" endtime="20230830 07:01:49.772"/>
</kw>
<msg timestamp="20230830 07:01:49.773" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230830 07:01:49.771" endtime="20230830 07:01:49.773"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:49.777" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:49.867" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:49.867" level="INFO">${output} = F4E272D443</msg>
<status status="PASS" starttime="20230830 07:01:49.775" endtime="20230830 07:01:49.868"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:49.869" level="INFO">F4E272D443</msg>
<status status="PASS" starttime="20230830 07:01:49.868" endtime="20230830 07:01:49.869"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:49.870" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:49.869" endtime="20230830 07:01:49.870"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.774" endtime="20230830 07:01:49.870"/>
</kw>
<msg timestamp="20230830 07:01:49.870" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:49.774" endtime="20230830 07:01:49.870"/>
</kw>
<msg timestamp="20230830 07:01:49.870" level="INFO">${certSerial} = F4E272D443</msg>
<status status="PASS" starttime="20230830 07:01:49.773" endtime="20230830 07:01:49.870"/>
</kw>
<msg timestamp="20230830 07:01:49.871" level="INFO">${certId1} = F4E272D443</msg>
<status status="PASS" starttime="20230830 07:01:49.773" endtime="20230830 07:01:49.871"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:49.876" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:49.963" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:49.963" level="INFO">${output} = F54819E822</msg>
<status status="PASS" starttime="20230830 07:01:49.874" endtime="20230830 07:01:49.963"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:49.965" level="INFO">F54819E822</msg>
<status status="PASS" starttime="20230830 07:01:49.964" endtime="20230830 07:01:49.965"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:49.965" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:49.965" endtime="20230830 07:01:49.966"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.873" endtime="20230830 07:01:49.966"/>
</kw>
<msg timestamp="20230830 07:01:49.966" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:49.873" endtime="20230830 07:01:49.966"/>
</kw>
<msg timestamp="20230830 07:01:49.966" level="INFO">${certSerial} = F54819E822</msg>
<status status="PASS" starttime="20230830 07:01:49.872" endtime="20230830 07:01:49.966"/>
</kw>
<msg timestamp="20230830 07:01:49.966" level="INFO">${newCertId} = F54819E822</msg>
<status status="PASS" starttime="20230830 07:01:49.872" endtime="20230830 07:01:49.966"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230830 07:01:49.967" endtime="20230830 07:01:49.967"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.871" endtime="20230830 07:01:49.967"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.871" endtime="20230830 07:01:49.967"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230830 07:01:49.969" level="INFO">${random} = POTrbyn7Or</msg>
<status status="PASS" starttime="20230830 07:01:49.968" endtime="20230830 07:01:49.969"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:49.975" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p POTrbyn7Or  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:01:59.490" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:01:59.490" level="INFO">${output} = 2023-08-30 07:01:52,601 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:52,778 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:49.972" endtime="20230830 07:01:59.490"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:01:59.492" level="INFO">2023-08-30 07:01:52,601 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:52,778 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:01:52,778 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:01:52,893 [main] INFO freon.BaseFreonGenerator: Executing test with prefix POTrbyn7Or and number-of-tests 1
2023-08-30 07:01:52,954 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:53,957 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:54,958 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:55,859 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:01:55,912 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-30 07:01:55,959 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:56,962 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:57,077 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-30 07:01:57,963 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:01:58,963 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:01:59,137 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2885.081901, max=2885.081901, mean=2885.081901, stddev=0.0, median=2885.081901, p75=2885.081901, p95=2885.081901, p98=2885.081901, p99=2885.081901, p999=2885.081901, mean_rate=0.27841294272367945, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:01:59,137 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-30 07:01:59,138 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:01:59,138 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:01:59.491" endtime="20230830 07:01:59.492"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:01:59.492" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:01:59.492" endtime="20230830 07:01:59.493"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.971" endtime="20230830 07:01:59.493"/>
</kw>
<msg timestamp="20230830 07:01:59.493" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:49.971" endtime="20230830 07:01:59.493"/>
</kw>
<msg timestamp="20230830 07:01:59.493" level="INFO">${result} = 2023-08-30 07:01:52,601 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:01:52,778 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:49.970" endtime="20230830 07:01:59.493"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:01:59.493" endtime="20230830 07:01:59.494"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.969" endtime="20230830 07:01:59.494"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:01:59.500" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p POTrbyn7Or  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:10.084" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:10.084" level="INFO">${output} = 2023-08-30 07:02:01,973 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:02:02,185 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:59.497" endtime="20230830 07:02:10.084"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:10.086" level="INFO">2023-08-30 07:02:01,973 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:02:02,185 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:02:02,186 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:02:02,273 [main] INFO freon.BaseFreonGenerator: Executing test with prefix POTrbyn7Or and number-of-tests 1
2023-08-30 07:02:02,331 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:03,340 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:04,342 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:05,342 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:06,151 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:02:06,343 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:07,344 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:08,345 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:02:09,345 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:02:09,731 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=91.478232, max=91.478232, mean=91.478232, stddev=0.0, median=91.478232, p75=91.478232, p95=91.478232, p98=91.478232, p99=91.478232, p999=91.478232, mean_rate=0.8806015663342837, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:02:09,732 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-30 07:02:09,732 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:02:09,732 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:02:10.085" endtime="20230830 07:02:10.086"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:10.086" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:10.086" endtime="20230830 07:02:10.087"/>
</kw>
<status status="PASS" starttime="20230830 07:01:59.496" endtime="20230830 07:02:10.087"/>
</kw>
<msg timestamp="20230830 07:02:10.087" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:01:59.496" endtime="20230830 07:02:10.087"/>
</kw>
<msg timestamp="20230830 07:02:10.087" level="INFO">${result} = 2023-08-30 07:02:01,973 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:02:02,185 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:01:59.495" endtime="20230830 07:02:10.087"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:02:10.088" endtime="20230830 07:02:10.088"/>
</kw>
<status status="PASS" starttime="20230830 07:01:59.494" endtime="20230830 07:02:10.088"/>
</kw>
<status status="PASS" starttime="20230830 07:01:49.968" endtime="20230830 07:02:10.088"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:01:21.072" endtime="20230830 07:02:10.088"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230830 07:01:20.907" endtime="20230830 07:02:10.090"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:10.104" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:15.749" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:15.749" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:10.101" endtime="20230830 07:02:15.749"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:15.750" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:15.749" endtime="20230830 07:02:15.750"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:15.751" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:15.750" endtime="20230830 07:02:15.751"/>
</kw>
<status status="PASS" starttime="20230830 07:02:10.100" endtime="20230830 07:02:15.751"/>
</kw>
<msg timestamp="20230830 07:02:15.751" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:02:10.100" endtime="20230830 07:02:15.751"/>
</kw>
<msg timestamp="20230830 07:02:15.751" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:10.100" endtime="20230830 07:02:15.751"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:02:15.752" endtime="20230830 07:02:15.752"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:15.756" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:21.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:21.781" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:15.753" endtime="20230830 07:02:21.781"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:21.783" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:21.782" endtime="20230830 07:02:21.783"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:21.783" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:21.783" endtime="20230830 07:02:21.784"/>
</kw>
<status status="PASS" starttime="20230830 07:02:15.753" endtime="20230830 07:02:21.784"/>
</kw>
<msg timestamp="20230830 07:02:21.784" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:02:15.753" endtime="20230830 07:02:21.784"/>
</kw>
<msg timestamp="20230830 07:02:21.784" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:15.752" endtime="20230830 07:02:21.784"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:02:21.784" endtime="20230830 07:02:21.785"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:02:10.099" endtime="20230830 07:02:21.785"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:21.790" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230830 07:02:21.792" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:21.792" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:21.787" endtime="20230830 07:02:21.792"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:21.793" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:21.792" endtime="20230830 07:02:21.793"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:21.794" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:21.793" endtime="20230830 07:02:21.794"/>
</kw>
<status status="PASS" starttime="20230830 07:02:21.787" endtime="20230830 07:02:21.794"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:21.799" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:31.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:31.379" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:21.796" endtime="20230830 07:02:31.380"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:31.381" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:31.380" endtime="20230830 07:02:31.381"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:31.382" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:31.381" endtime="20230830 07:02:31.382"/>
</kw>
<status status="PASS" starttime="20230830 07:02:21.795" endtime="20230830 07:02:31.382"/>
</kw>
<msg timestamp="20230830 07:02:31.382" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:02:21.795" endtime="20230830 07:02:31.382"/>
</kw>
<msg timestamp="20230830 07:02:31.382" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:21.794" endtime="20230830 07:02:31.382"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:02:31.383" endtime="20230830 07:02:31.383"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:31.387" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:31.390" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:31.390" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:31.384" endtime="20230830 07:02:31.390"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:31.392" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:31.390" endtime="20230830 07:02:31.392"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:31.393" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:31.392" endtime="20230830 07:02:31.393"/>
</kw>
<status status="PASS" starttime="20230830 07:02:31.383" endtime="20230830 07:02:31.393"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:02:21.786" endtime="20230830 07:02:31.393"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230830 07:02:31.396" level="INFO">${random} = 73878</msg>
<status status="PASS" starttime="20230830 07:02:31.396" endtime="20230830 07:02:31.396"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:31.401" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-73878 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:39.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:39.444" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:31.398" endtime="20230830 07:02:39.444"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:39.446" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:39.445" endtime="20230830 07:02:39.446"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:39.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:39.446" endtime="20230830 07:02:39.446"/>
</kw>
<status status="PASS" starttime="20230830 07:02:31.397" endtime="20230830 07:02:39.446"/>
</kw>
<msg timestamp="20230830 07:02:39.447" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:02:31.397" endtime="20230830 07:02:39.447"/>
</kw>
<msg timestamp="20230830 07:02:39.447" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:31.396" endtime="20230830 07:02:39.447"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:02:39.447" endtime="20230830 07:02:39.447"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:39.451" level="INFO">Running command 'cat /tmp/key-73878 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:39.455" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:39.455" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230830 07:02:39.449" endtime="20230830 07:02:39.455"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:39.456" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230830 07:02:39.456" endtime="20230830 07:02:39.457"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:39.457" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:39.457" endtime="20230830 07:02:39.457"/>
</kw>
<msg timestamp="20230830 07:02:39.458" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230830 07:02:39.448" endtime="20230830 07:02:39.458"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:02:39.458" endtime="20230830 07:02:39.458"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:02:39.462" level="INFO">Running command 'rm /tmp/key-73878 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:02:39.465" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:02:39.465" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:02:39.459" endtime="20230830 07:02:39.465"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:02:39.466" level="INFO"/>
<status status="PASS" starttime="20230830 07:02:39.465" endtime="20230830 07:02:39.466"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:02:39.466" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:02:39.466" endtime="20230830 07:02:39.467"/>
</kw>
<status status="PASS" starttime="20230830 07:02:39.459" endtime="20230830 07:02:39.467"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:02:31.395" endtime="20230830 07:02:39.467"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230830 07:02:10.092" endtime="20230830 07:02:39.468"/>
</suite>
<status status="PASS" starttime="20230830 07:01:20.837" endtime="20230830 07:02:39.470"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
