<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230830 07:23:27.594" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:21:32.489" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:21:32.510" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:21:32.510" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230830 07:21:32.485" endtime="20230830 07:21:32.510"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:21:32.512" level="INFO">scm</msg>
<status status="PASS" starttime="20230830 07:21:32.511" endtime="20230830 07:21:32.512"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:21:32.520" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:21:32.512" endtime="20230830 07:21:32.520"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.485" endtime="20230830 07:21:32.524"/>
</kw>
<msg timestamp="20230830 07:21:32.524" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:21:32.485" endtime="20230830 07:21:32.524"/>
</kw>
<msg timestamp="20230830 07:21:32.524" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230830 07:21:32.484" endtime="20230830 07:21:32.524"/>
</kw>
<msg timestamp="20230830 07:21:32.525" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230830 07:21:32.483" endtime="20230830 07:21:32.525"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230830 07:21:32.525" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230830 07:21:32.525" endtime="20230830 07:21:32.525"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:21:32.546" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:21:32.690" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:21:32.690" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:21:32.535" endtime="20230830 07:21:32.690"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:21:32.692" level="INFO"/>
<status status="PASS" starttime="20230830 07:21:32.691" endtime="20230830 07:21:32.692"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:21:32.693" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:21:32.692" endtime="20230830 07:21:32.693"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.535" endtime="20230830 07:21:32.693"/>
</kw>
<msg timestamp="20230830 07:21:32.693" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:21:32.534" endtime="20230830 07:21:32.693"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.533" endtime="20230830 07:21:32.693"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.526" endtime="20230830 07:21:32.693"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.483" endtime="20230830 07:21:32.693"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.482" endtime="20230830 07:21:32.694"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.467" endtime="20230830 07:21:32.694"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230830 07:21:32.700" level="INFO">${random} = dYl5JYebGw</msg>
<status status="PASS" starttime="20230830 07:21:32.699" endtime="20230830 07:21:32.700"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:21:32.726" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p dYl5JYebGw  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:21:52.578" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:21:52.578" level="INFO">${output} = 2023-08-30 07:21:41,874 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:21:42,231 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:21:32.719" endtime="20230830 07:21:52.578"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:21:52.579" level="INFO">2023-08-30 07:21:41,874 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:21:42,231 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:21:42,231 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:21:42,341 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dYl5JYebGw and number-of-tests 1
2023-08-30 07:21:42,458 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:43,462 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:44,463 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:45,463 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:45,466 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-30 07:21:45,741 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-30 07:21:46,463 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:46,626 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:21:46,701 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-30 07:21:47,074 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-30 07:21:47,464 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:48,464 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:49,465 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:50,467 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:51,468 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:21:52,169 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5019.959874, max=5019.959874, mean=5019.959874, stddev=0.0, median=5019.959874, p75=5019.959874, p95=5019.959874, p98=5019.959874, p99=5019.959874, p999=5019.959874, mean_rate=0.15979892199944445, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:21:52,170 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-08-30 07:21:52,170 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:21:52,170 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:21:52.578" endtime="20230830 07:21:52.579"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:21:52.580" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:21:52.580" endtime="20230830 07:21:52.580"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.719" endtime="20230830 07:21:52.581"/>
</kw>
<msg timestamp="20230830 07:21:52.581" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:21:32.718" endtime="20230830 07:21:52.581"/>
</kw>
<msg timestamp="20230830 07:21:52.581" level="INFO">${result} = 2023-08-30 07:21:41,874 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:21:42,231 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:21:32.717" endtime="20230830 07:21:52.581"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:21:52.582" endtime="20230830 07:21:52.582"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.700" endtime="20230830 07:21:52.582"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:21:52.597" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p dYl5JYebGw  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:05.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:05.060" level="INFO">${output} = 2023-08-30 07:21:57,688 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:21:57,822 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:21:52.593" endtime="20230830 07:22:05.060"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:05.061" level="INFO">2023-08-30 07:21:57,688 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:21:57,822 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:21:57,822 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:21:57,900 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dYl5JYebGw and number-of-tests 1
2023-08-30 07:21:57,951 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:58,953 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:21:59,954 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:00,954 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:01,823 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:22:01,959 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:02,959 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:03,959 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:22:04,696 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=85.567655, max=85.567655, mean=85.567655, stddev=0.0, median=85.567655, p75=85.567655, p95=85.567655, p98=85.567655, p99=85.567655, p999=85.567655, mean_rate=0.8987787046235438, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:22:04,697 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-30 07:22:04,697 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:22:04,697 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:22:05.060" endtime="20230830 07:22:05.061"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:05.062" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:05.062" endtime="20230830 07:22:05.062"/>
</kw>
<status status="PASS" starttime="20230830 07:21:52.592" endtime="20230830 07:22:05.063"/>
</kw>
<msg timestamp="20230830 07:22:05.063" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:21:52.591" endtime="20230830 07:22:05.063"/>
</kw>
<msg timestamp="20230830 07:22:05.063" level="INFO">${result} = 2023-08-30 07:21:57,688 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:21:57,822 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:21:52.590" endtime="20230830 07:22:05.063"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:22:05.063" endtime="20230830 07:22:05.064"/>
</kw>
<status status="PASS" starttime="20230830 07:21:52.588" endtime="20230830 07:22:05.064"/>
</kw>
<status status="PASS" starttime="20230830 07:21:32.698" endtime="20230830 07:22:05.064"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:05.071" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:07.193" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:07.193" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230830 07:22:05.066" endtime="20230830 07:22:07.193"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:07.195" level="INFO">40s</msg>
<status status="PASS" starttime="20230830 07:22:07.194" endtime="20230830 07:22:07.195"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:07.195" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:07.195" endtime="20230830 07:22:07.196"/>
</kw>
<status status="PASS" starttime="20230830 07:22:05.066" endtime="20230830 07:22:07.196"/>
</kw>
<msg timestamp="20230830 07:22:07.196" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:05.065" endtime="20230830 07:22:07.196"/>
</kw>
<msg timestamp="20230830 07:22:07.196" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230830 07:22:05.065" endtime="20230830 07:22:07.196"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230830 07:22:07.198" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230830 07:22:07.197" endtime="20230830 07:22:07.198"/>
</kw>
<msg timestamp="20230830 07:22:07.198" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230830 07:22:05.064" endtime="20230830 07:22:07.198"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230830 07:22:07.200" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230830 07:22:07.199" endtime="20230830 07:22:07.200"/>
</kw>
<msg timestamp="20230830 07:22:07.200" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230830 07:22:07.199" endtime="20230830 07:22:07.200"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:07.205" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:07.579" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:07.579" level="INFO">${output} = 01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.202" endtime="20230830 07:22:07.579"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:07.583" level="INFO">01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.580" endtime="20230830 07:22:07.583"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:07.584" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:07.583" endtime="20230830 07:22:07.584"/>
</kw>
<status status="PASS" starttime="20230830 07:22:07.202" endtime="20230830 07:22:07.584"/>
</kw>
<msg timestamp="20230830 07:22:07.584" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:07.202" endtime="20230830 07:22:07.584"/>
</kw>
<msg timestamp="20230830 07:22:07.584" level="INFO">${certSerial} = 01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.201" endtime="20230830 07:22:07.584"/>
</kw>
<msg timestamp="20230830 07:22:07.585" level="INFO">${certId1} = 01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.200" endtime="20230830 07:22:07.585"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:07.591" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:07.981" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:07.981" level="INFO">${output} = 01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.588" endtime="20230830 07:22:07.981"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:07.984" level="INFO">01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.983" endtime="20230830 07:22:07.984"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:07.985" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:07.984" endtime="20230830 07:22:07.985"/>
</kw>
<status status="PASS" starttime="20230830 07:22:07.587" endtime="20230830 07:22:07.985"/>
</kw>
<msg timestamp="20230830 07:22:07.985" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:07.587" endtime="20230830 07:22:07.985"/>
</kw>
<msg timestamp="20230830 07:22:07.985" level="INFO">${certSerial} = 01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.586" endtime="20230830 07:22:07.985"/>
</kw>
<msg timestamp="20230830 07:22:07.985" level="INFO">${newCertId} = 01ECC7CCAF6B</msg>
<status status="PASS" starttime="20230830 07:22:07.586" endtime="20230830 07:22:07.986"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230830 07:22:07.987" level="FAIL">01ECC7CCAF6B == 01ECC7CCAF6B</msg>
<status status="FAIL" starttime="20230830 07:22:07.986" endtime="20230830 07:22:07.987"/>
</kw>
<status status="FAIL" starttime="20230830 07:22:07.586" endtime="20230830 07:22:07.987"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:12.994" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:13.214" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:13.214" level="INFO">${output} = 01EDB7ED6C6D</msg>
<status status="PASS" starttime="20230830 07:22:12.991" endtime="20230830 07:22:13.214"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:13.216" level="INFO">01EDB7ED6C6D</msg>
<status status="PASS" starttime="20230830 07:22:13.215" endtime="20230830 07:22:13.216"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:13.217" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:13.216" endtime="20230830 07:22:13.217"/>
</kw>
<status status="PASS" starttime="20230830 07:22:12.990" endtime="20230830 07:22:13.217"/>
</kw>
<msg timestamp="20230830 07:22:13.217" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:12.990" endtime="20230830 07:22:13.217"/>
</kw>
<msg timestamp="20230830 07:22:13.218" level="INFO">${certSerial} = 01EDB7ED6C6D</msg>
<status status="PASS" starttime="20230830 07:22:12.989" endtime="20230830 07:22:13.218"/>
</kw>
<msg timestamp="20230830 07:22:13.218" level="INFO">${newCertId} = 01EDB7ED6C6D</msg>
<status status="PASS" starttime="20230830 07:22:12.989" endtime="20230830 07:22:13.218"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230830 07:22:13.218" endtime="20230830 07:22:13.219"/>
</kw>
<status status="PASS" starttime="20230830 07:22:12.988" endtime="20230830 07:22:13.219"/>
</kw>
<status status="PASS" starttime="20230830 07:22:07.585" endtime="20230830 07:22:13.219"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230830 07:22:13.220" level="INFO">${random} = WP9scv9xsD</msg>
<status status="PASS" starttime="20230830 07:22:13.220" endtime="20230830 07:22:13.220"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:13.228" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p WP9scv9xsD  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:24.104" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:24.104" level="INFO">${output} = 2023-08-30 07:22:16,957 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:22:17,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:22:13.225" endtime="20230830 07:22:24.104"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:24.106" level="INFO">2023-08-30 07:22:16,957 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:22:17,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:22:17,244 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:22:17,334 [main] INFO freon.BaseFreonGenerator: Executing test with prefix WP9scv9xsD and number-of-tests 1
2023-08-30 07:22:17,386 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:18,393 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:19,394 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:20,394 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:21,002 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:22:21,073 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-30 07:22:21,387 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-30 07:22:21,395 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:22,404 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:23,404 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:22:23,738 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2065.977296, max=2065.977296, mean=2065.977296, stddev=0.0, median=2065.977296, p75=2065.977296, p95=2065.977296, p98=2065.977296, p99=2065.977296, p999=2065.977296, mean_rate=0.32182771603507143, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:22:23,738 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-08-30 07:22:23,739 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:22:23,740 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:22:24.105" endtime="20230830 07:22:24.106"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:24.107" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:24.106" endtime="20230830 07:22:24.107"/>
</kw>
<status status="PASS" starttime="20230830 07:22:13.224" endtime="20230830 07:22:24.107"/>
</kw>
<msg timestamp="20230830 07:22:24.107" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:13.223" endtime="20230830 07:22:24.107"/>
</kw>
<msg timestamp="20230830 07:22:24.107" level="INFO">${result} = 2023-08-30 07:22:16,957 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:22:17,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:22:13.222" endtime="20230830 07:22:24.107"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:22:24.108" endtime="20230830 07:22:24.108"/>
</kw>
<status status="PASS" starttime="20230830 07:22:13.221" endtime="20230830 07:22:24.108"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:24.114" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p WP9scv9xsD  2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:34.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:34.740" level="INFO">${output} = 2023-08-30 07:22:27,961 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:22:28,347 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:22:24.112" endtime="20230830 07:22:34.740"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:34.741" level="INFO">2023-08-30 07:22:27,961 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:22:28,347 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-30 07:22:28,348 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-30 07:22:28,810 [main] INFO freon.BaseFreonGenerator: Executing test with prefix WP9scv9xsD and number-of-tests 1
2023-08-30 07:22:28,988 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:29,991 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:30,991 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:31,628 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-30 07:22:31,991 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:32,992 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-30 07:22:33,992 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-30 07:22:34,375 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=54.840481, max=54.840481, mean=54.840481, stddev=0.0, median=54.840481, p75=54.840481, p95=54.840481, p98=54.840481, p99=54.840481, p999=54.840481, mean_rate=0.9088077840709929, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-30 07:22:34,376 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-08-30 07:22:34,377 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-30 07:22:34,377 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230830 07:22:34.741" endtime="20230830 07:22:34.742"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:34.742" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:34.742" endtime="20230830 07:22:34.742"/>
</kw>
<status status="PASS" starttime="20230830 07:22:24.111" endtime="20230830 07:22:34.743"/>
</kw>
<msg timestamp="20230830 07:22:34.743" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:24.111" endtime="20230830 07:22:34.743"/>
</kw>
<msg timestamp="20230830 07:22:34.743" level="INFO">${result} = 2023-08-30 07:22:27,961 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-30 07:22:28,347 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230830 07:22:24.110" endtime="20230830 07:22:34.743"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:22:34.743" endtime="20230830 07:22:34.744"/>
</kw>
<status status="PASS" starttime="20230830 07:22:24.108" endtime="20230830 07:22:34.744"/>
</kw>
<status status="PASS" starttime="20230830 07:22:13.219" endtime="20230830 07:22:34.744"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:21:32.694" endtime="20230830 07:22:34.744"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230830 07:21:32.332" endtime="20230830 07:22:34.746"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:34.761" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:42.256" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:42.256" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:34.758" endtime="20230830 07:22:42.256"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:42.258" level="INFO"/>
<status status="PASS" starttime="20230830 07:22:42.257" endtime="20230830 07:22:42.258"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:42.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:42.258" endtime="20230830 07:22:42.259"/>
</kw>
<status status="PASS" starttime="20230830 07:22:34.758" endtime="20230830 07:22:42.259"/>
</kw>
<msg timestamp="20230830 07:22:42.259" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:34.757" endtime="20230830 07:22:42.260"/>
</kw>
<msg timestamp="20230830 07:22:42.260" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:34.757" endtime="20230830 07:22:42.260"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:22:42.260" endtime="20230830 07:22:42.260"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:42.265" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:49.357" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:49.357" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:42.262" endtime="20230830 07:22:49.358"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:49.359" level="INFO"/>
<status status="PASS" starttime="20230830 07:22:49.358" endtime="20230830 07:22:49.359"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:49.360" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:49.360" endtime="20230830 07:22:49.360"/>
</kw>
<status status="PASS" starttime="20230830 07:22:42.262" endtime="20230830 07:22:49.361"/>
</kw>
<msg timestamp="20230830 07:22:49.361" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:42.261" endtime="20230830 07:22:49.361"/>
</kw>
<msg timestamp="20230830 07:22:49.361" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:42.261" endtime="20230830 07:22:49.361"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:22:49.361" endtime="20230830 07:22:49.362"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:22:34.756" endtime="20230830 07:22:49.362"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:49.367" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230830 07:22:49.370" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:49.370" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:49.365" endtime="20230830 07:22:49.370"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:49.371" level="INFO"/>
<status status="PASS" starttime="20230830 07:22:49.371" endtime="20230830 07:22:49.371"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:49.372" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:49.372" endtime="20230830 07:22:49.372"/>
</kw>
<status status="PASS" starttime="20230830 07:22:49.364" endtime="20230830 07:22:49.373"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:49.377" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:59.364" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:59.364" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:49.375" endtime="20230830 07:22:59.364"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:59.365" level="INFO"/>
<status status="PASS" starttime="20230830 07:22:59.364" endtime="20230830 07:22:59.365"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:59.366" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:59.365" endtime="20230830 07:22:59.366"/>
</kw>
<status status="PASS" starttime="20230830 07:22:49.374" endtime="20230830 07:22:59.366"/>
</kw>
<msg timestamp="20230830 07:22:59.366" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:49.374" endtime="20230830 07:22:59.366"/>
</kw>
<msg timestamp="20230830 07:22:59.367" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:49.373" endtime="20230830 07:22:59.367"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:22:59.367" endtime="20230830 07:22:59.367"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:59.371" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:22:59.374" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:22:59.375" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:59.368" endtime="20230830 07:22:59.375"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:22:59.376" level="INFO"/>
<status status="PASS" starttime="20230830 07:22:59.375" endtime="20230830 07:22:59.376"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:22:59.376" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:22:59.376" endtime="20230830 07:22:59.377"/>
</kw>
<status status="PASS" starttime="20230830 07:22:59.367" endtime="20230830 07:22:59.377"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:22:49.363" endtime="20230830 07:22:59.377"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230830 07:22:59.380" level="INFO">${random} = 73216</msg>
<status status="PASS" starttime="20230830 07:22:59.379" endtime="20230830 07:22:59.380"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:22:59.384" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-73216 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:23:10.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:23:10.459" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:59.382" endtime="20230830 07:23:10.459"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:23:10.461" level="INFO"/>
<status status="PASS" starttime="20230830 07:23:10.460" endtime="20230830 07:23:10.461"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:23:10.462" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:23:10.461" endtime="20230830 07:23:10.462"/>
</kw>
<status status="PASS" starttime="20230830 07:22:59.381" endtime="20230830 07:23:10.462"/>
</kw>
<msg timestamp="20230830 07:23:10.462" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230830 07:22:59.381" endtime="20230830 07:23:10.463"/>
</kw>
<msg timestamp="20230830 07:23:10.463" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:22:59.380" endtime="20230830 07:23:10.463"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:23:10.463" endtime="20230830 07:23:10.463"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:23:10.468" level="INFO">Running command 'cat /tmp/key-73216 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:23:10.471" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:23:10.471" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230830 07:23:10.464" endtime="20230830 07:23:10.471"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:23:10.472" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230830 07:23:10.472" endtime="20230830 07:23:10.472"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:23:10.473" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:23:10.473" endtime="20230830 07:23:10.473"/>
</kw>
<msg timestamp="20230830 07:23:10.473" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230830 07:23:10.464" endtime="20230830 07:23:10.473"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230830 07:23:10.474" endtime="20230830 07:23:10.474"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230830 07:23:10.478" level="INFO">Running command 'rm /tmp/key-73216 2&gt;&amp;1'.</msg>
<msg timestamp="20230830 07:23:10.481" level="INFO">${rc} = 0</msg>
<msg timestamp="20230830 07:23:10.481" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230830 07:23:10.475" endtime="20230830 07:23:10.481"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230830 07:23:10.482" level="INFO"/>
<status status="PASS" starttime="20230830 07:23:10.481" endtime="20230830 07:23:10.482"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230830 07:23:10.483" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230830 07:23:10.482" endtime="20230830 07:23:10.483"/>
</kw>
<status status="PASS" starttime="20230830 07:23:10.474" endtime="20230830 07:23:10.483"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230830 07:22:59.378" endtime="20230830 07:23:10.484"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230830 07:22:34.748" endtime="20230830 07:23:10.485"/>
</suite>
<status status="PASS" starttime="20230830 07:21:32.267" endtime="20230830 07:23:10.488"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
