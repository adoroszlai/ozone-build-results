<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230824 21:31:35.330" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:29:32.029" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:29:32.034" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:29:32.035" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230824 21:29:32.025" endtime="20230824 21:29:32.035"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:29:32.036" level="INFO">scm</msg>
<status status="PASS" starttime="20230824 21:29:32.035" endtime="20230824 21:29:32.036"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:29:32.037" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:29:32.036" endtime="20230824 21:29:32.037"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.024" endtime="20230824 21:29:32.037"/>
</kw>
<msg timestamp="20230824 21:29:32.037" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:29:32.024" endtime="20230824 21:29:32.038"/>
</kw>
<msg timestamp="20230824 21:29:32.038" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230824 21:29:32.023" endtime="20230824 21:29:32.038"/>
</kw>
<msg timestamp="20230824 21:29:32.038" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230824 21:29:32.022" endtime="20230824 21:29:32.038"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230824 21:29:32.039" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230824 21:29:32.039" endtime="20230824 21:29:32.039"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:29:32.044" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:29:32.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:29:32.228" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:29:32.042" endtime="20230824 21:29:32.228"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:29:32.229" level="INFO"/>
<status status="PASS" starttime="20230824 21:29:32.228" endtime="20230824 21:29:32.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:29:32.231" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:29:32.230" endtime="20230824 21:29:32.232"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.041" endtime="20230824 21:29:32.234"/>
</kw>
<msg timestamp="20230824 21:29:32.234" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:29:32.041" endtime="20230824 21:29:32.234"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.040" endtime="20230824 21:29:32.235"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.039" endtime="20230824 21:29:32.235"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.022" endtime="20230824 21:29:32.235"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.021" endtime="20230824 21:29:32.235"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.020" endtime="20230824 21:29:32.236"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230824 21:29:32.242" level="INFO">${random} = U2EUNapUsU</msg>
<status status="PASS" starttime="20230824 21:29:32.241" endtime="20230824 21:29:32.242"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:29:32.250" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p U2EUNapUsU  2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:29:52.189" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:29:52.189" level="INFO">${output} = 2023-08-24 21:29:38,211 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:29:38,706 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:29:32.246" endtime="20230824 21:29:52.189"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:29:52.190" level="INFO">2023-08-24 21:29:38,211 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:29:38,706 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-24 21:29:38,706 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-24 21:29:39,023 [main] INFO freon.BaseFreonGenerator: Executing test with prefix U2EUNapUsU and number-of-tests 1
2023-08-24 21:29:39,153 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:40,162 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:41,162 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:42,163 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:43,163 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:44,164 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:44,226 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-24 21:29:44,365 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-24 21:29:45,164 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:45,237 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-24 21:29:45,326 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-24 21:29:45,758 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-24 21:29:46,165 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:47,165 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:48,182 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:49,187 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:50,188 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:51,189 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-24 21:29:51,789 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=6420.691246, max=6420.691246, mean=6420.691246, stddev=0.0, median=6420.691246, p75=6420.691246, p95=6420.691246, p98=6420.691246, p99=6420.691246, p999=6420.691246, mean_rate=0.13640648665093166, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-24 21:29:51,790 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 13
2023-08-24 21:29:51,791 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-24 21:29:51,791 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230824 21:29:52.190" endtime="20230824 21:29:52.191"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:29:52.191" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:29:52.191" endtime="20230824 21:29:52.191"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.245" endtime="20230824 21:29:52.192"/>
</kw>
<msg timestamp="20230824 21:29:52.192" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:29:32.245" endtime="20230824 21:29:52.192"/>
</kw>
<msg timestamp="20230824 21:29:52.192" level="INFO">${result} = 2023-08-24 21:29:38,211 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:29:38,706 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:29:32.244" endtime="20230824 21:29:52.192"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:29:52.193" endtime="20230824 21:29:52.193"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.242" endtime="20230824 21:29:52.193"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:29:52.200" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p U2EUNapUsU  2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:04.201" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:04.201" level="INFO">${output} = 2023-08-24 21:29:56,144 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:29:56,390 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:29:52.197" endtime="20230824 21:30:04.201"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:04.203" level="INFO">2023-08-24 21:29:56,144 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:29:56,390 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-24 21:29:56,390 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-24 21:29:56,532 [main] INFO freon.BaseFreonGenerator: Executing test with prefix U2EUNapUsU and number-of-tests 1
2023-08-24 21:29:56,619 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:57,621 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:58,624 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:29:59,625 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:00,263 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-24 21:30:00,625 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:01,626 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:02,627 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:03,628 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-24 21:30:03,825 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=94.304002, max=94.304002, mean=94.304002, stddev=0.0, median=94.304002, p75=94.304002, p95=94.304002, p98=94.304002, p99=94.304002, p999=94.304002, mean_rate=0.7902615918626632, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-24 21:30:03,827 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-24 21:30:03,827 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-24 21:30:03,827 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230824 21:30:04.202" endtime="20230824 21:30:04.203"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:04.204" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:04.204" endtime="20230824 21:30:04.204"/>
</kw>
<status status="PASS" starttime="20230824 21:29:52.197" endtime="20230824 21:30:04.205"/>
</kw>
<msg timestamp="20230824 21:30:04.205" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:29:52.196" endtime="20230824 21:30:04.205"/>
</kw>
<msg timestamp="20230824 21:30:04.205" level="INFO">${result} = 2023-08-24 21:29:56,144 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:29:56,390 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:29:52.195" endtime="20230824 21:30:04.205"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:30:04.205" endtime="20230824 21:30:04.206"/>
</kw>
<status status="PASS" starttime="20230824 21:29:52.193" endtime="20230824 21:30:04.206"/>
</kw>
<status status="PASS" starttime="20230824 21:29:32.237" endtime="20230824 21:30:04.206"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:04.215" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:06.944" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:06.944" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230824 21:30:04.210" endtime="20230824 21:30:06.944"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:06.946" level="INFO">40s</msg>
<status status="PASS" starttime="20230824 21:30:06.945" endtime="20230824 21:30:06.946"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:06.947" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:06.946" endtime="20230824 21:30:06.947"/>
</kw>
<status status="PASS" starttime="20230824 21:30:04.210" endtime="20230824 21:30:06.948"/>
</kw>
<msg timestamp="20230824 21:30:06.948" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:04.209" endtime="20230824 21:30:06.948"/>
</kw>
<msg timestamp="20230824 21:30:06.948" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230824 21:30:04.208" endtime="20230824 21:30:06.948"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230824 21:30:06.950" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230824 21:30:06.949" endtime="20230824 21:30:06.950"/>
</kw>
<msg timestamp="20230824 21:30:06.950" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230824 21:30:04.207" endtime="20230824 21:30:06.950"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230824 21:30:06.952" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230824 21:30:06.951" endtime="20230824 21:30:06.952"/>
</kw>
<msg timestamp="20230824 21:30:06.952" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230824 21:30:06.950" endtime="20230824 21:30:06.952"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:06.958" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:07.256" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:07.257" level="INFO">${output} = D518D2B0DB</msg>
<status status="PASS" starttime="20230824 21:30:06.955" endtime="20230824 21:30:07.257"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:07.258" level="INFO">D518D2B0DB</msg>
<status status="PASS" starttime="20230824 21:30:07.257" endtime="20230824 21:30:07.258"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:07.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:07.258" endtime="20230824 21:30:07.259"/>
</kw>
<status status="PASS" starttime="20230824 21:30:06.954" endtime="20230824 21:30:07.259"/>
</kw>
<msg timestamp="20230824 21:30:07.259" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:06.954" endtime="20230824 21:30:07.260"/>
</kw>
<msg timestamp="20230824 21:30:07.260" level="INFO">${certSerial} = D518D2B0DB</msg>
<status status="PASS" starttime="20230824 21:30:06.953" endtime="20230824 21:30:07.260"/>
</kw>
<msg timestamp="20230824 21:30:07.260" level="INFO">${certId1} = D518D2B0DB</msg>
<status status="PASS" starttime="20230824 21:30:06.953" endtime="20230824 21:30:07.260"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:07.266" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:07.615" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:07.616" level="INFO">${output} = D1793C13EA</msg>
<status status="PASS" starttime="20230824 21:30:07.264" endtime="20230824 21:30:07.616"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:07.617" level="INFO">D1793C13EA</msg>
<status status="PASS" starttime="20230824 21:30:07.616" endtime="20230824 21:30:07.618"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:07.618" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:07.618" endtime="20230824 21:30:07.619"/>
</kw>
<status status="PASS" starttime="20230824 21:30:07.263" endtime="20230824 21:30:07.619"/>
</kw>
<msg timestamp="20230824 21:30:07.619" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:07.263" endtime="20230824 21:30:07.619"/>
</kw>
<msg timestamp="20230824 21:30:07.619" level="INFO">${certSerial} = D1793C13EA</msg>
<status status="PASS" starttime="20230824 21:30:07.262" endtime="20230824 21:30:07.619"/>
</kw>
<msg timestamp="20230824 21:30:07.620" level="INFO">${newCertId} = D1793C13EA</msg>
<status status="PASS" starttime="20230824 21:30:07.262" endtime="20230824 21:30:07.620"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230824 21:30:07.620" endtime="20230824 21:30:07.621"/>
</kw>
<status status="PASS" starttime="20230824 21:30:07.261" endtime="20230824 21:30:07.621"/>
</kw>
<status status="PASS" starttime="20230824 21:30:07.260" endtime="20230824 21:30:07.621"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230824 21:30:07.623" level="INFO">${random} = Q4b6xO0CF9</msg>
<status status="PASS" starttime="20230824 21:30:07.622" endtime="20230824 21:30:07.623"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:07.632" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p Q4b6xO0CF9  2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:21.517" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:21.517" level="INFO">${output} = 2023-08-24 21:30:12,753 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:30:13,016 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:30:07.628" endtime="20230824 21:30:21.517"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:21.518" level="INFO">2023-08-24 21:30:12,753 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:30:13,016 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-24 21:30:13,016 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-24 21:30:13,152 [main] INFO freon.BaseFreonGenerator: Executing test with prefix Q4b6xO0CF9 and number-of-tests 1
2023-08-24 21:30:13,221 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:14,222 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:15,223 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:16,224 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:17,236 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:17,418 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-24 21:30:17,606 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-24 21:30:18,114 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-24 21:30:18,237 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:19,237 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:20,238 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-24 21:30:21,066 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3078.63322, max=3078.63322, mean=3078.63322, stddev=0.0, median=3078.63322, p75=3078.63322, p95=3078.63322, p98=3078.63322, p99=3078.63322, p999=3078.63322, mean_rate=0.23612128779759828, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-24 21:30:21,067 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-08-24 21:30:21,068 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-24 21:30:21,069 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230824 21:30:21.517" endtime="20230824 21:30:21.519"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:21.521" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:21.519" endtime="20230824 21:30:21.521"/>
</kw>
<status status="PASS" starttime="20230824 21:30:07.627" endtime="20230824 21:30:21.521"/>
</kw>
<msg timestamp="20230824 21:30:21.521" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:07.626" endtime="20230824 21:30:21.522"/>
</kw>
<msg timestamp="20230824 21:30:21.522" level="INFO">${result} = 2023-08-24 21:30:12,753 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:30:13,016 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:30:07.625" endtime="20230824 21:30:21.522"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:30:21.522" endtime="20230824 21:30:21.523"/>
</kw>
<status status="PASS" starttime="20230824 21:30:07.623" endtime="20230824 21:30:21.523"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:21.530" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p Q4b6xO0CF9  2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:33.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:33.440" level="INFO">${output} = 2023-08-24 21:30:25,391 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:30:25,808 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:30:21.527" endtime="20230824 21:30:33.440"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:33.442" level="INFO">2023-08-24 21:30:25,391 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:30:25,808 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-24 21:30:25,809 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-24 21:30:25,929 [main] INFO freon.BaseFreonGenerator: Executing test with prefix Q4b6xO0CF9 and number-of-tests 1
2023-08-24 21:30:26,047 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:27,049 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:28,051 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:29,051 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:30,052 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:30,167 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-24 21:30:31,052 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-24 21:30:32,053 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-24 21:30:33,069 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=68.41274, max=68.41274, mean=68.41274, stddev=0.0, median=68.41274, p75=68.41274, p95=68.41274, p98=68.41274, p99=68.41274, p999=68.41274, mean_rate=0.8682205807736533, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-24 21:30:33,070 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-24 21:30:33,071 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-24 21:30:33,071 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230824 21:30:33.441" endtime="20230824 21:30:33.442"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:33.444" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:33.442" endtime="20230824 21:30:33.444"/>
</kw>
<status status="PASS" starttime="20230824 21:30:21.526" endtime="20230824 21:30:33.444"/>
</kw>
<msg timestamp="20230824 21:30:33.444" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:21.526" endtime="20230824 21:30:33.444"/>
</kw>
<msg timestamp="20230824 21:30:33.445" level="INFO">${result} = 2023-08-24 21:30:25,391 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-24 21:30:25,808 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230824 21:30:21.525" endtime="20230824 21:30:33.445"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:30:33.445" endtime="20230824 21:30:33.446"/>
</kw>
<status status="PASS" starttime="20230824 21:30:21.523" endtime="20230824 21:30:33.446"/>
</kw>
<status status="PASS" starttime="20230824 21:30:07.621" endtime="20230824 21:30:33.446"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230824 21:29:32.236" endtime="20230824 21:30:33.447"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230824 21:29:31.964" endtime="20230824 21:30:33.449"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:33.465" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:42.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:42.892" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:33.462" endtime="20230824 21:30:42.893"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:42.894" level="INFO"/>
<status status="PASS" starttime="20230824 21:30:42.893" endtime="20230824 21:30:42.894"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:42.895" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:42.894" endtime="20230824 21:30:42.895"/>
</kw>
<status status="PASS" starttime="20230824 21:30:33.462" endtime="20230824 21:30:42.895"/>
</kw>
<msg timestamp="20230824 21:30:42.896" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:33.461" endtime="20230824 21:30:42.896"/>
</kw>
<msg timestamp="20230824 21:30:42.896" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:33.461" endtime="20230824 21:30:42.896"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:30:42.896" endtime="20230824 21:30:42.897"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:42.902" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:30:51.513" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:51.513" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:42.899" endtime="20230824 21:30:51.513"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:51.515" level="INFO"/>
<status status="PASS" starttime="20230824 21:30:51.514" endtime="20230824 21:30:51.515"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:51.516" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:51.515" endtime="20230824 21:30:51.516"/>
</kw>
<status status="PASS" starttime="20230824 21:30:42.898" endtime="20230824 21:30:51.516"/>
</kw>
<msg timestamp="20230824 21:30:51.516" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:42.898" endtime="20230824 21:30:51.517"/>
</kw>
<msg timestamp="20230824 21:30:51.517" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:42.897" endtime="20230824 21:30:51.517"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:30:51.517" endtime="20230824 21:30:51.518"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230824 21:30:33.460" endtime="20230824 21:30:51.518"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:51.524" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230824 21:30:51.527" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:30:51.527" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:51.521" endtime="20230824 21:30:51.527"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:30:51.528" level="INFO"/>
<status status="PASS" starttime="20230824 21:30:51.527" endtime="20230824 21:30:51.528"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:30:51.529" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:30:51.529" endtime="20230824 21:30:51.529"/>
</kw>
<status status="PASS" starttime="20230824 21:30:51.520" endtime="20230824 21:30:51.530"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:30:51.535" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:31:04.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:31:04.753" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:51.532" endtime="20230824 21:31:04.753"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:31:04.755" level="INFO"/>
<status status="PASS" starttime="20230824 21:31:04.754" endtime="20230824 21:31:04.755"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:31:04.756" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:31:04.755" endtime="20230824 21:31:04.756"/>
</kw>
<status status="PASS" starttime="20230824 21:30:51.531" endtime="20230824 21:31:04.757"/>
</kw>
<msg timestamp="20230824 21:31:04.757" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:30:51.531" endtime="20230824 21:31:04.757"/>
</kw>
<msg timestamp="20230824 21:31:04.757" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:30:51.530" endtime="20230824 21:31:04.757"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:31:04.758" endtime="20230824 21:31:04.758"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:31:04.762" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:31:04.765" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:31:04.765" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:31:04.759" endtime="20230824 21:31:04.765"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:31:04.766" level="INFO"/>
<status status="PASS" starttime="20230824 21:31:04.766" endtime="20230824 21:31:04.767"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:31:04.767" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:31:04.767" endtime="20230824 21:31:04.768"/>
</kw>
<status status="PASS" starttime="20230824 21:31:04.758" endtime="20230824 21:31:04.768"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230824 21:30:51.519" endtime="20230824 21:31:04.768"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230824 21:31:04.771" level="INFO">${random} = 22321</msg>
<status status="PASS" starttime="20230824 21:31:04.771" endtime="20230824 21:31:04.771"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:31:04.776" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-22321 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:31:16.948" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:31:16.948" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:31:04.773" endtime="20230824 21:31:16.948"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:31:16.950" level="INFO"/>
<status status="PASS" starttime="20230824 21:31:16.949" endtime="20230824 21:31:16.950"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:31:16.951" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:31:16.950" endtime="20230824 21:31:16.951"/>
</kw>
<status status="PASS" starttime="20230824 21:31:04.773" endtime="20230824 21:31:16.951"/>
</kw>
<msg timestamp="20230824 21:31:16.952" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230824 21:31:04.772" endtime="20230824 21:31:16.952"/>
</kw>
<msg timestamp="20230824 21:31:16.952" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:31:04.771" endtime="20230824 21:31:16.952"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:31:16.952" endtime="20230824 21:31:16.953"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:31:16.957" level="INFO">Running command 'cat /tmp/key-22321 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:31:16.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:31:16.960" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230824 21:31:16.954" endtime="20230824 21:31:16.960"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:31:16.962" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230824 21:31:16.961" endtime="20230824 21:31:16.962"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:31:16.963" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:31:16.962" endtime="20230824 21:31:16.963"/>
</kw>
<msg timestamp="20230824 21:31:16.963" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230824 21:31:16.953" endtime="20230824 21:31:16.963"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230824 21:31:16.964" endtime="20230824 21:31:16.964"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230824 21:31:16.967" level="INFO">Running command 'rm /tmp/key-22321 2&gt;&amp;1'.</msg>
<msg timestamp="20230824 21:31:16.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20230824 21:31:16.971" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230824 21:31:16.965" endtime="20230824 21:31:16.971"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230824 21:31:16.972" level="INFO"/>
<status status="PASS" starttime="20230824 21:31:16.971" endtime="20230824 21:31:16.972"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230824 21:31:16.973" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230824 21:31:16.972" endtime="20230824 21:31:16.973"/>
</kw>
<status status="PASS" starttime="20230824 21:31:16.964" endtime="20230824 21:31:16.973"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230824 21:31:04.770" endtime="20230824 21:31:16.974"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230824 21:30:33.451" endtime="20230824 21:31:16.975"/>
</suite>
<status status="PASS" starttime="20230824 21:29:31.923" endtime="20230824 21:31:16.977"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
