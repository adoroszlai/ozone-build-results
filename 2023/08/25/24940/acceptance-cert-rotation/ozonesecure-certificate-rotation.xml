<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230825 07:11:15.834" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:08:52.638" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:08:52.663" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:08:52.664" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230825 07:08:52.625" endtime="20230825 07:08:52.664"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:08:52.665" level="INFO">scm</msg>
<status status="PASS" starttime="20230825 07:08:52.664" endtime="20230825 07:08:52.666"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:08:52.667" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:08:52.666" endtime="20230825 07:08:52.667"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.624" endtime="20230825 07:08:52.667"/>
</kw>
<msg timestamp="20230825 07:08:52.667" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:08:52.608" endtime="20230825 07:08:52.667"/>
</kw>
<msg timestamp="20230825 07:08:52.668" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230825 07:08:52.608" endtime="20230825 07:08:52.668"/>
</kw>
<msg timestamp="20230825 07:08:52.672" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230825 07:08:52.607" endtime="20230825 07:08:52.672"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230825 07:08:52.673" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230825 07:08:52.672" endtime="20230825 07:08:52.673"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:08:52.740" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:08:53.075" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:08:53.083" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:08:52.688" endtime="20230825 07:08:53.083"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:08:53.087" level="INFO"/>
<status status="PASS" starttime="20230825 07:08:53.084" endtime="20230825 07:08:53.087"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:08:53.088" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:08:53.087" endtime="20230825 07:08:53.088"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.688" endtime="20230825 07:08:53.094"/>
</kw>
<msg timestamp="20230825 07:08:53.094" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:08:52.687" endtime="20230825 07:08:53.094"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.686" endtime="20230825 07:08:53.095"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.678" endtime="20230825 07:08:53.095"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.606" endtime="20230825 07:08:53.095"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.592" endtime="20230825 07:08:53.096"/>
</kw>
<status status="PASS" starttime="20230825 07:08:52.592" endtime="20230825 07:08:53.097"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230825 07:08:53.111" level="INFO">${random} = GOQ28OFXZ7</msg>
<status status="PASS" starttime="20230825 07:08:53.110" endtime="20230825 07:08:53.111"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:08:53.134" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p GOQ28OFXZ7  2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:20.541" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:20.542" level="INFO">${output} = 2023-08-25 07:09:04,441 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:04,683 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:08:53.124" endtime="20230825 07:09:20.542"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:20.543" level="INFO">2023-08-25 07:09:04,441 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:04,683 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-25 07:09:04,683 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-25 07:09:04,826 [main] INFO freon.BaseFreonGenerator: Executing test with prefix GOQ28OFXZ7 and number-of-tests 1
2023-08-25 07:09:04,966 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:06,000 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:07,000 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:08,001 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:09,003 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:10,005 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:10,281 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-08-25 07:09:10,375 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-08-25 07:09:11,006 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:12,007 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:12,824 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-25 07:09:13,007 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:13,199 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-25 07:09:14,008 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:14,241 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-25 07:09:15,013 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:16,014 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:17,014 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:18,015 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:19,016 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:20,016 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-25 07:09:20,175 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=8567.06071, max=8567.06071, mean=8567.06071, stddev=0.0, median=8567.06071, p75=8567.06071, p95=8567.06071, p98=8567.06071, p99=8567.06071, p999=8567.06071, mean_rate=0.1028988433719308, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-25 07:09:20,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 15
2023-08-25 07:09:20,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-25 07:09:20,176 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230825 07:09:20.542" endtime="20230825 07:09:20.544"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:20.544" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:20.544" endtime="20230825 07:09:20.545"/>
</kw>
<status status="PASS" starttime="20230825 07:08:53.123" endtime="20230825 07:09:20.545"/>
</kw>
<msg timestamp="20230825 07:09:20.545" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:08:53.118" endtime="20230825 07:09:20.545"/>
</kw>
<msg timestamp="20230825 07:09:20.546" level="INFO">${result} = 2023-08-25 07:09:04,441 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:04,683 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:08:53.116" endtime="20230825 07:09:20.546"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:09:20.546" endtime="20230825 07:09:20.547"/>
</kw>
<status status="PASS" starttime="20230825 07:08:53.111" endtime="20230825 07:09:20.547"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:20.554" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p GOQ28OFXZ7  2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:35.782" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:35.782" level="INFO">${output} = 2023-08-25 07:09:25,442 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:25,681 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:09:20.551" endtime="20230825 07:09:35.782"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:35.784" level="INFO">2023-08-25 07:09:25,442 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:25,681 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-25 07:09:25,682 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-25 07:09:25,834 [main] INFO freon.BaseFreonGenerator: Executing test with prefix GOQ28OFXZ7 and number-of-tests 1
2023-08-25 07:09:25,913 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:26,915 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:27,916 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:28,917 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:29,924 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:30,276 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-25 07:09:30,928 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:31,929 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:32,930 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:33,930 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:34,932 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-25 07:09:35,135 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=83.978462, max=83.978462, mean=83.978462, stddev=0.0, median=83.978462, p75=83.978462, p95=83.978462, p98=83.978462, p99=83.978462, p999=83.978462, mean_rate=0.9485514298334302, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-25 07:09:35,147 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-08-25 07:09:35,148 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-25 07:09:35,149 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230825 07:09:35.783" endtime="20230825 07:09:35.784"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:35.785" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:35.784" endtime="20230825 07:09:35.785"/>
</kw>
<status status="PASS" starttime="20230825 07:09:20.550" endtime="20230825 07:09:35.785"/>
</kw>
<msg timestamp="20230825 07:09:35.785" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:20.550" endtime="20230825 07:09:35.785"/>
</kw>
<msg timestamp="20230825 07:09:35.786" level="INFO">${result} = 2023-08-25 07:09:25,442 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:25,681 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:09:20.549" endtime="20230825 07:09:35.786"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:09:35.786" endtime="20230825 07:09:35.787"/>
</kw>
<status status="PASS" starttime="20230825 07:09:20.547" endtime="20230825 07:09:35.787"/>
</kw>
<status status="PASS" starttime="20230825 07:08:53.109" endtime="20230825 07:09:35.787"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:35.793" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:37.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:37.903" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230825 07:09:35.789" endtime="20230825 07:09:37.903"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:37.906" level="INFO">40s</msg>
<status status="PASS" starttime="20230825 07:09:37.904" endtime="20230825 07:09:37.906"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:37.908" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:37.907" endtime="20230825 07:09:37.908"/>
</kw>
<status status="PASS" starttime="20230825 07:09:35.789" endtime="20230825 07:09:37.909"/>
</kw>
<msg timestamp="20230825 07:09:37.909" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:35.788" endtime="20230825 07:09:37.910"/>
</kw>
<msg timestamp="20230825 07:09:37.910" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230825 07:09:35.788" endtime="20230825 07:09:37.910"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230825 07:09:37.913" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230825 07:09:37.911" endtime="20230825 07:09:37.913"/>
</kw>
<msg timestamp="20230825 07:09:37.914" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230825 07:09:35.787" endtime="20230825 07:09:37.915"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230825 07:09:37.918" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230825 07:09:37.916" endtime="20230825 07:09:37.918"/>
</kw>
<msg timestamp="20230825 07:09:37.919" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230825 07:09:37.915" endtime="20230825 07:09:37.919"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:37.928" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:38.152" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:38.153" level="INFO">${output} = 0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:37.923" endtime="20230825 07:09:38.153"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:38.156" level="INFO">0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:38.154" endtime="20230825 07:09:38.158"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:38.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:38.158" endtime="20230825 07:09:38.160"/>
</kw>
<status status="PASS" starttime="20230825 07:09:37.922" endtime="20230825 07:09:38.160"/>
</kw>
<msg timestamp="20230825 07:09:38.161" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:37.921" endtime="20230825 07:09:38.162"/>
</kw>
<msg timestamp="20230825 07:09:38.163" level="INFO">${certSerial} = 0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:37.920" endtime="20230825 07:09:38.163"/>
</kw>
<msg timestamp="20230825 07:09:38.164" level="INFO">${certId1} = 0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:37.919" endtime="20230825 07:09:38.164"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:38.182" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:38.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:38.332" level="INFO">${output} = 0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:38.176" endtime="20230825 07:09:38.332"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:38.345" level="INFO">0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:38.333" endtime="20230825 07:09:38.345"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:38.352" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:38.346" endtime="20230825 07:09:38.352"/>
</kw>
<status status="PASS" starttime="20230825 07:09:38.175" endtime="20230825 07:09:38.353"/>
</kw>
<msg timestamp="20230825 07:09:38.353" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:38.173" endtime="20230825 07:09:38.357"/>
</kw>
<msg timestamp="20230825 07:09:38.357" level="INFO">${certSerial} = 0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:38.172" endtime="20230825 07:09:38.357"/>
</kw>
<msg timestamp="20230825 07:09:38.357" level="INFO">${newCertId} = 0137B40CCF2B</msg>
<status status="PASS" starttime="20230825 07:09:38.170" endtime="20230825 07:09:38.357"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230825 07:09:38.361" level="FAIL">0137B40CCF2B == 0137B40CCF2B</msg>
<status status="FAIL" starttime="20230825 07:09:38.360" endtime="20230825 07:09:38.361"/>
</kw>
<status status="FAIL" starttime="20230825 07:09:38.167" endtime="20230825 07:09:38.365"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:43.376" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:43.520" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:43.521" level="INFO">${output} = 0137DA7134DB</msg>
<status status="PASS" starttime="20230825 07:09:43.372" endtime="20230825 07:09:43.521"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:43.525" level="INFO">0137DA7134DB</msg>
<status status="PASS" starttime="20230825 07:09:43.523" endtime="20230825 07:09:43.525"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:43.527" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:43.527" endtime="20230825 07:09:43.528"/>
</kw>
<status status="PASS" starttime="20230825 07:09:43.370" endtime="20230825 07:09:43.528"/>
</kw>
<msg timestamp="20230825 07:09:43.528" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:43.369" endtime="20230825 07:09:43.528"/>
</kw>
<msg timestamp="20230825 07:09:43.529" level="INFO">${certSerial} = 0137DA7134DB</msg>
<status status="PASS" starttime="20230825 07:09:43.367" endtime="20230825 07:09:43.529"/>
</kw>
<msg timestamp="20230825 07:09:43.530" level="INFO">${newCertId} = 0137DA7134DB</msg>
<status status="PASS" starttime="20230825 07:09:43.367" endtime="20230825 07:09:43.531"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230825 07:09:43.531" endtime="20230825 07:09:43.532"/>
</kw>
<status status="PASS" starttime="20230825 07:09:43.366" endtime="20230825 07:09:43.532"/>
</kw>
<status status="PASS" starttime="20230825 07:09:38.164" endtime="20230825 07:09:43.532"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230825 07:09:43.535" level="INFO">${random} = GG7qibUcdB</msg>
<status status="PASS" starttime="20230825 07:09:43.534" endtime="20230825 07:09:43.535"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:43.546" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p GG7qibUcdB  2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:09:56.708" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:09:56.708" level="INFO">${output} = 2023-08-25 07:09:47,185 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:47,543 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:09:43.542" endtime="20230825 07:09:56.708"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:09:56.710" level="INFO">2023-08-25 07:09:47,185 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:47,543 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-25 07:09:47,543 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-25 07:09:47,855 [main] INFO freon.BaseFreonGenerator: Executing test with prefix GG7qibUcdB and number-of-tests 1
2023-08-25 07:09:47,951 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:48,960 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:49,961 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:50,962 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:51,962 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:52,963 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:53,474 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-25 07:09:53,695 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-08-25 07:09:53,964 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:54,090 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-08-25 07:09:54,965 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:09:55,966 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-25 07:09:56,332 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2934.702304, max=2934.702304, mean=2934.702304, stddev=0.0, median=2934.702304, p75=2934.702304, p95=2934.702304, p98=2934.702304, p99=2934.702304, p999=2934.702304, mean_rate=0.30092146120575275, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-25 07:09:56,333 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-08-25 07:09:56,333 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-25 07:09:56,333 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230825 07:09:56.709" endtime="20230825 07:09:56.710"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:09:56.711" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:09:56.710" endtime="20230825 07:09:56.711"/>
</kw>
<status status="PASS" starttime="20230825 07:09:43.541" endtime="20230825 07:09:56.711"/>
</kw>
<msg timestamp="20230825 07:09:56.712" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:43.540" endtime="20230825 07:09:56.712"/>
</kw>
<msg timestamp="20230825 07:09:56.712" level="INFO">${result} = 2023-08-25 07:09:47,185 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:09:47,543 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:09:43.537" endtime="20230825 07:09:56.712"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:09:56.713" endtime="20230825 07:09:56.713"/>
</kw>
<status status="PASS" starttime="20230825 07:09:43.535" endtime="20230825 07:09:56.713"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:09:56.722" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p GG7qibUcdB  2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:10.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:10.626" level="INFO">${output} = 2023-08-25 07:10:01,959 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:10:02,390 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:09:56.718" endtime="20230825 07:10:10.626"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:10.627" level="INFO">2023-08-25 07:10:01,959 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:10:02,390 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-08-25 07:10:02,390 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-08-25 07:10:02,653 [main] INFO freon.BaseFreonGenerator: Executing test with prefix GG7qibUcdB and number-of-tests 1
2023-08-25 07:10:02,803 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:03,810 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:04,844 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:05,845 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:06,609 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-08-25 07:10:06,845 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:07,846 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:08,847 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-08-25 07:10:09,847 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-08-25 07:10:10,250 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=103.328567, max=103.328567, mean=103.328567, stddev=0.0, median=103.328567, p75=103.328567, p95=103.328567, p98=103.328567, p99=103.328567, p999=103.328567, mean_rate=0.7246279858470067, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-08-25 07:10:10,251 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-08-25 07:10:10,251 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-08-25 07:10:10,251 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230825 07:10:10.626" endtime="20230825 07:10:10.628"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:10.629" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:10.628" endtime="20230825 07:10:10.629"/>
</kw>
<status status="PASS" starttime="20230825 07:09:56.717" endtime="20230825 07:10:10.629"/>
</kw>
<msg timestamp="20230825 07:10:10.629" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:09:56.717" endtime="20230825 07:10:10.629"/>
</kw>
<msg timestamp="20230825 07:10:10.630" level="INFO">${result} = 2023-08-25 07:10:01,959 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-08-25 07:10:02,390 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230825 07:09:56.716" endtime="20230825 07:10:10.630"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:10:10.631" endtime="20230825 07:10:10.632"/>
</kw>
<status status="PASS" starttime="20230825 07:09:56.713" endtime="20230825 07:10:10.632"/>
</kw>
<status status="PASS" starttime="20230825 07:09:43.533" endtime="20230825 07:10:10.632"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230825 07:08:53.097" endtime="20230825 07:10:10.632"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230825 07:08:51.952" endtime="20230825 07:10:10.635"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:10.656" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:21.395" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:21.395" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:10.653" endtime="20230825 07:10:21.395"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:21.397" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:21.396" endtime="20230825 07:10:21.397"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:21.398" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:21.397" endtime="20230825 07:10:21.398"/>
</kw>
<status status="PASS" starttime="20230825 07:10:10.652" endtime="20230825 07:10:21.398"/>
</kw>
<msg timestamp="20230825 07:10:21.398" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:10:10.652" endtime="20230825 07:10:21.402"/>
</kw>
<msg timestamp="20230825 07:10:21.403" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:10.651" endtime="20230825 07:10:21.403"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:10:21.403" endtime="20230825 07:10:21.404"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:21.412" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:30.657" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:30.657" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:21.407" endtime="20230825 07:10:30.658"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:30.659" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:30.658" endtime="20230825 07:10:30.660"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:30.660" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:30.660" endtime="20230825 07:10:30.660"/>
</kw>
<status status="PASS" starttime="20230825 07:10:21.406" endtime="20230825 07:10:30.661"/>
</kw>
<msg timestamp="20230825 07:10:30.661" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:10:21.406" endtime="20230825 07:10:30.661"/>
</kw>
<msg timestamp="20230825 07:10:30.661" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:21.404" endtime="20230825 07:10:30.661"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:10:30.662" endtime="20230825 07:10:30.662"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230825 07:10:10.650" endtime="20230825 07:10:30.662"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:30.669" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230825 07:10:30.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:30.673" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:30.666" endtime="20230825 07:10:30.673"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:30.675" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:30.674" endtime="20230825 07:10:30.675"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:30.676" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:30.676" endtime="20230825 07:10:30.677"/>
</kw>
<status status="PASS" starttime="20230825 07:10:30.665" endtime="20230825 07:10:30.677"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:30.684" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:44.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:44.225" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:30.680" endtime="20230825 07:10:44.225"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:44.226" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:44.226" endtime="20230825 07:10:44.227"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:44.228" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:44.227" endtime="20230825 07:10:44.228"/>
</kw>
<status status="PASS" starttime="20230825 07:10:30.679" endtime="20230825 07:10:44.228"/>
</kw>
<msg timestamp="20230825 07:10:44.228" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:10:30.678" endtime="20230825 07:10:44.228"/>
</kw>
<msg timestamp="20230825 07:10:44.229" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:30.677" endtime="20230825 07:10:44.229"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:10:44.229" endtime="20230825 07:10:44.229"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:44.234" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:44.237" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:44.237" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:44.231" endtime="20230825 07:10:44.237"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:44.239" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:44.238" endtime="20230825 07:10:44.239"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:44.240" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:44.239" endtime="20230825 07:10:44.240"/>
</kw>
<status status="PASS" starttime="20230825 07:10:44.230" endtime="20230825 07:10:44.240"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230825 07:10:30.664" endtime="20230825 07:10:44.241"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230825 07:10:44.244" level="INFO">${random} = 27600</msg>
<status status="PASS" starttime="20230825 07:10:44.243" endtime="20230825 07:10:44.244"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:44.249" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-27600 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:56.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:56.744" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:44.247" endtime="20230825 07:10:56.744"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:56.746" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:56.745" endtime="20230825 07:10:56.746"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:56.747" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:56.747" endtime="20230825 07:10:56.747"/>
</kw>
<status status="PASS" starttime="20230825 07:10:44.246" endtime="20230825 07:10:56.748"/>
</kw>
<msg timestamp="20230825 07:10:56.748" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230825 07:10:44.245" endtime="20230825 07:10:56.748"/>
</kw>
<msg timestamp="20230825 07:10:56.748" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:44.244" endtime="20230825 07:10:56.748"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:10:56.748" endtime="20230825 07:10:56.749"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:56.754" level="INFO">Running command 'cat /tmp/key-27600 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:56.758" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:56.758" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230825 07:10:56.750" endtime="20230825 07:10:56.758"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:56.760" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230825 07:10:56.759" endtime="20230825 07:10:56.760"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:56.761" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:56.760" endtime="20230825 07:10:56.761"/>
</kw>
<msg timestamp="20230825 07:10:56.761" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230825 07:10:56.749" endtime="20230825 07:10:56.761"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230825 07:10:56.761" endtime="20230825 07:10:56.762"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230825 07:10:56.768" level="INFO">Running command 'rm /tmp/key-27600 2&gt;&amp;1'.</msg>
<msg timestamp="20230825 07:10:56.772" level="INFO">${rc} = 0</msg>
<msg timestamp="20230825 07:10:56.772" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230825 07:10:56.763" endtime="20230825 07:10:56.772"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230825 07:10:56.774" level="INFO"/>
<status status="PASS" starttime="20230825 07:10:56.773" endtime="20230825 07:10:56.775"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230825 07:10:56.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230825 07:10:56.776" endtime="20230825 07:10:56.776"/>
</kw>
<status status="PASS" starttime="20230825 07:10:56.762" endtime="20230825 07:10:56.777"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230825 07:10:44.242" endtime="20230825 07:10:56.777"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230825 07:10:10.638" endtime="20230825 07:10:56.787"/>
</suite>
<status status="PASS" starttime="20230825 07:08:51.452" endtime="20230825 07:10:56.790"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
