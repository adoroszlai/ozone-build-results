<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1 (Python 3.8.10 on linux)" generated="20230726 04:47:08.847" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:23.330" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:23.356" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:23.356" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230726 04:45:23.322" endtime="20230726 04:45:23.356"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:23.358" level="INFO">scm</msg>
<status status="PASS" starttime="20230726 04:45:23.357" endtime="20230726 04:45:23.358"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:23.359" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:23.358" endtime="20230726 04:45:23.359"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.321" endtime="20230726 04:45:23.359"/>
</kw>
<msg timestamp="20230726 04:45:23.359" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:23.321" endtime="20230726 04:45:23.359"/>
</kw>
<msg timestamp="20230726 04:45:23.360" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230726 04:45:23.320" endtime="20230726 04:45:23.360"/>
</kw>
<msg timestamp="20230726 04:45:23.360" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230726 04:45:23.320" endtime="20230726 04:45:23.360"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230726 04:45:23.364" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230726 04:45:23.364" endtime="20230726 04:45:23.365"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:23.373" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:23.435" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:23.435" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:45:23.370" endtime="20230726 04:45:23.435"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:23.437" level="INFO"/>
<status status="PASS" starttime="20230726 04:45:23.436" endtime="20230726 04:45:23.437"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:23.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:23.437" endtime="20230726 04:45:23.446"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.367" endtime="20230726 04:45:23.446"/>
</kw>
<msg timestamp="20230726 04:45:23.446" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:23.367" endtime="20230726 04:45:23.446"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.366" endtime="20230726 04:45:23.446"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.365" endtime="20230726 04:45:23.446"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.319" endtime="20230726 04:45:23.446"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.319" endtime="20230726 04:45:23.447"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.318" endtime="20230726 04:45:23.447"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230726 04:45:23.451" level="INFO">${random} = HLgHjWUKlI</msg>
<status status="PASS" starttime="20230726 04:45:23.450" endtime="20230726 04:45:23.451"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:23.473" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p HLgHjWUKlI  2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:40.482" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:40.483" level="INFO">${output} = 2023-07-26 04:45:28,753 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:28,918 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:45:23.459" endtime="20230726 04:45:40.483"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:40.484" level="INFO">2023-07-26 04:45:28,753 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:28,918 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-26 04:45:28,918 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-26 04:45:28,988 [main] INFO freon.BaseFreonGenerator: Executing test with prefix HLgHjWUKlI and number-of-tests 1
2023-07-26 04:45:29,432 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:30,517 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:31,519 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:32,548 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:33,550 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:33,807 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-07-26 04:45:33,983 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-07-26 04:45:34,552 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:34,724 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-26 04:45:34,803 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-26 04:45:35,232 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-26 04:45:35,552 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:36,553 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:37,554 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:38,557 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:39,558 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-26 04:45:40,088 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4697.965297, max=4697.965297, mean=4697.965297, stddev=0.0, median=4697.965297, p75=4697.965297, p95=4697.965297, p98=4697.965297, p99=4697.965297, p999=4697.965297, mean_rate=0.16599421687336424, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-07-26 04:45:40,090 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 11
2023-07-26 04:45:40,090 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-26 04:45:40,090 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230726 04:45:40.483" endtime="20230726 04:45:40.484"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:40.485" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:40.485" endtime="20230726 04:45:40.485"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.458" endtime="20230726 04:45:40.486"/>
</kw>
<msg timestamp="20230726 04:45:40.486" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:23.458" endtime="20230726 04:45:40.486"/>
</kw>
<msg timestamp="20230726 04:45:40.486" level="INFO">${result} = 2023-07-26 04:45:28,753 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:28,918 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:45:23.453" endtime="20230726 04:45:40.486"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:45:40.486" endtime="20230726 04:45:40.487"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.451" endtime="20230726 04:45:40.487"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:40.493" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p HLgHjWUKlI  2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:52.639" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:52.640" level="INFO">${output} = 2023-07-26 04:45:44,626 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:44,813 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:45:40.490" endtime="20230726 04:45:52.640"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:52.641" level="INFO">2023-07-26 04:45:44,626 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:44,813 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-26 04:45:44,813 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-26 04:45:44,943 [main] INFO freon.BaseFreonGenerator: Executing test with prefix HLgHjWUKlI and number-of-tests 1
2023-07-26 04:45:45,037 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:46,045 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:47,045 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:48,049 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:48,314 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-26 04:45:49,050 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:50,057 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:51,057 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-26 04:45:52,280 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=94.457611, max=94.457611, mean=94.457611, stddev=0.0, median=94.457611, p75=94.457611, p95=94.457611, p98=94.457611, p99=94.457611, p999=94.457611, mean_rate=0.7054059239378611, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-26 04:45:52,281 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-26 04:45:52,281 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-26 04:45:52,281 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230726 04:45:52.640" endtime="20230726 04:45:52.641"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:52.642" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:52.642" endtime="20230726 04:45:52.642"/>
</kw>
<status status="PASS" starttime="20230726 04:45:40.490" endtime="20230726 04:45:52.643"/>
</kw>
<msg timestamp="20230726 04:45:52.643" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:40.489" endtime="20230726 04:45:52.643"/>
</kw>
<msg timestamp="20230726 04:45:52.643" level="INFO">${result} = 2023-07-26 04:45:44,626 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:44,813 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:45:40.489" endtime="20230726 04:45:52.643"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:45:52.643" endtime="20230726 04:45:52.644"/>
</kw>
<status status="PASS" starttime="20230726 04:45:40.487" endtime="20230726 04:45:52.644"/>
</kw>
<status status="PASS" starttime="20230726 04:45:23.450" endtime="20230726 04:45:52.644"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:52.652" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:54.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:54.684" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230726 04:45:52.647" endtime="20230726 04:45:54.684"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:54.685" level="INFO">40s</msg>
<status status="PASS" starttime="20230726 04:45:54.684" endtime="20230726 04:45:54.685"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:54.686" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:54.686" endtime="20230726 04:45:54.686"/>
</kw>
<status status="PASS" starttime="20230726 04:45:52.647" endtime="20230726 04:45:54.686"/>
</kw>
<msg timestamp="20230726 04:45:54.687" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:52.646" endtime="20230726 04:45:54.687"/>
</kw>
<msg timestamp="20230726 04:45:54.687" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230726 04:45:52.645" endtime="20230726 04:45:54.687"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230726 04:45:54.689" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230726 04:45:54.687" endtime="20230726 04:45:54.689"/>
</kw>
<msg timestamp="20230726 04:45:54.689" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230726 04:45:52.644" endtime="20230726 04:45:54.689"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230726 04:45:54.691" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230726 04:45:54.690" endtime="20230726 04:45:54.691"/>
</kw>
<msg timestamp="20230726 04:45:54.691" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230726 04:45:54.690" endtime="20230726 04:45:54.692"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:54.702" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:54.833" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:54.833" level="INFO">${output} = FD23130509</msg>
<status status="PASS" starttime="20230726 04:45:54.694" endtime="20230726 04:45:54.833"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:54.834" level="INFO">FD23130509</msg>
<status status="PASS" starttime="20230726 04:45:54.834" endtime="20230726 04:45:54.835"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:54.835" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:54.835" endtime="20230726 04:45:54.835"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.693" endtime="20230726 04:45:54.836"/>
</kw>
<msg timestamp="20230726 04:45:54.836" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:54.693" endtime="20230726 04:45:54.836"/>
</kw>
<msg timestamp="20230726 04:45:54.836" level="INFO">${certSerial} = FD23130509</msg>
<status status="PASS" starttime="20230726 04:45:54.692" endtime="20230726 04:45:54.836"/>
</kw>
<msg timestamp="20230726 04:45:54.836" level="INFO">${certId1} = FD23130509</msg>
<status status="PASS" starttime="20230726 04:45:54.692" endtime="20230726 04:45:54.836"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:54.843" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:45:54.950" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:45:54.950" level="INFO">${output} = FD4DE2046F</msg>
<status status="PASS" starttime="20230726 04:45:54.840" endtime="20230726 04:45:54.951"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:45:54.953" level="INFO">FD4DE2046F</msg>
<status status="PASS" starttime="20230726 04:45:54.952" endtime="20230726 04:45:54.953"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:45:54.954" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:45:54.953" endtime="20230726 04:45:54.954"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.840" endtime="20230726 04:45:54.954"/>
</kw>
<msg timestamp="20230726 04:45:54.954" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:54.839" endtime="20230726 04:45:54.954"/>
</kw>
<msg timestamp="20230726 04:45:54.955" level="INFO">${certSerial} = FD4DE2046F</msg>
<status status="PASS" starttime="20230726 04:45:54.838" endtime="20230726 04:45:54.955"/>
</kw>
<msg timestamp="20230726 04:45:54.955" level="INFO">${newCertId} = FD4DE2046F</msg>
<status status="PASS" starttime="20230726 04:45:54.838" endtime="20230726 04:45:54.955"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230726 04:45:54.955" endtime="20230726 04:45:54.956"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.837" endtime="20230726 04:45:54.956"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.837" endtime="20230726 04:45:54.956"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230726 04:45:54.958" level="INFO">${random} = R46yXhVpXN</msg>
<status status="PASS" starttime="20230726 04:45:54.957" endtime="20230726 04:45:54.958"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:45:54.966" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p R46yXhVpXN  2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:04.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:04.219" level="INFO">${output} = 2023-07-26 04:45:58,350 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:58,553 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:45:54.963" endtime="20230726 04:46:04.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:04.220" level="INFO">2023-07-26 04:45:58,350 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:58,553 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-26 04:45:58,553 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-26 04:45:58,660 [main] INFO freon.BaseFreonGenerator: Executing test with prefix R46yXhVpXN and number-of-tests 1
2023-07-26 04:45:58,730 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:45:59,733 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:00,733 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:01,734 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:02,031 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-26 04:46:02,124 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-26 04:46:02,465 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-26 04:46:02,735 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:03,736 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-26 04:46:03,845 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=1981.589278, max=1981.589278, mean=1981.589278, stddev=0.0, median=1981.589278, p75=1981.589278, p95=1981.589278, p98=1981.589278, p99=1981.589278, p999=1981.589278, mean_rate=0.4525292872361527, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-26 04:46:03,846 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-07-26 04:46:03,849 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-26 04:46:03,849 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230726 04:46:04.219" endtime="20230726 04:46:04.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:04.221" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:04.220" endtime="20230726 04:46:04.221"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.962" endtime="20230726 04:46:04.221"/>
</kw>
<msg timestamp="20230726 04:46:04.221" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:45:54.961" endtime="20230726 04:46:04.221"/>
</kw>
<msg timestamp="20230726 04:46:04.222" level="INFO">${result} = 2023-07-26 04:45:58,350 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:45:58,553 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:45:54.960" endtime="20230726 04:46:04.222"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:04.222" endtime="20230726 04:46:04.222"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.958" endtime="20230726 04:46:04.222"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:04.230" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p R46yXhVpXN  2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:15.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:15.429" level="INFO">${output} = 2023-07-26 04:46:08,101 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:46:08,349 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:46:04.227" endtime="20230726 04:46:15.430"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:15.431" level="INFO">2023-07-26 04:46:08,101 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:46:08,349 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-26 04:46:08,349 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-26 04:46:08,459 [main] INFO freon.BaseFreonGenerator: Executing test with prefix R46yXhVpXN and number-of-tests 1
2023-07-26 04:46:08,549 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:09,555 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:10,555 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:11,556 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:12,344 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-26 04:46:12,556 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:13,557 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-26 04:46:14,557 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-26 04:46:15,045 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=77.460102, max=77.460102, mean=77.460102, stddev=0.0, median=77.460102, p75=77.460102, p95=77.460102, p98=77.460102, p99=77.460102, p999=77.460102, mean_rate=0.9176909438193211, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-26 04:46:15,046 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-26 04:46:15,046 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-26 04:46:15,046 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230726 04:46:15.430" endtime="20230726 04:46:15.431"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:15.432" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:15.431" endtime="20230726 04:46:15.432"/>
</kw>
<status status="PASS" starttime="20230726 04:46:04.226" endtime="20230726 04:46:15.433"/>
</kw>
<msg timestamp="20230726 04:46:15.433" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:46:04.226" endtime="20230726 04:46:15.433"/>
</kw>
<msg timestamp="20230726 04:46:15.433" level="INFO">${result} = 2023-07-26 04:46:08,101 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-26 04:46:08,349 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230726 04:46:04.224" endtime="20230726 04:46:15.433"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:15.434" endtime="20230726 04:46:15.434"/>
</kw>
<status status="PASS" starttime="20230726 04:46:04.223" endtime="20230726 04:46:15.434"/>
</kw>
<status status="PASS" starttime="20230726 04:45:54.956" endtime="20230726 04:46:15.434"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230726 04:45:23.447" endtime="20230726 04:46:15.435"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230726 04:45:23.103" endtime="20230726 04:46:15.437"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:15.453" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:22.840" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:22.840" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:15.450" endtime="20230726 04:46:22.840"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:22.842" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:22.841" endtime="20230726 04:46:22.842"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:22.842" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:22.842" endtime="20230726 04:46:22.842"/>
</kw>
<status status="PASS" starttime="20230726 04:46:15.450" endtime="20230726 04:46:22.843"/>
</kw>
<msg timestamp="20230726 04:46:22.843" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:46:15.449" endtime="20230726 04:46:22.843"/>
</kw>
<msg timestamp="20230726 04:46:22.843" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:15.449" endtime="20230726 04:46:22.843"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:22.843" endtime="20230726 04:46:22.844"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:22.849" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:30.171" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:30.171" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:22.846" endtime="20230726 04:46:30.171"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:30.173" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:30.172" endtime="20230726 04:46:30.173"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:30.174" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:30.173" endtime="20230726 04:46:30.174"/>
</kw>
<status status="PASS" starttime="20230726 04:46:22.845" endtime="20230726 04:46:30.174"/>
</kw>
<msg timestamp="20230726 04:46:30.175" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:46:22.844" endtime="20230726 04:46:30.175"/>
</kw>
<msg timestamp="20230726 04:46:30.175" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:22.844" endtime="20230726 04:46:30.175"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:30.175" endtime="20230726 04:46:30.176"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230726 04:46:15.448" endtime="20230726 04:46:30.176"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:30.183" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230726 04:46:30.185" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:30.185" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:30.180" endtime="20230726 04:46:30.185"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:30.187" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:30.186" endtime="20230726 04:46:30.187"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:30.188" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:30.187" endtime="20230726 04:46:30.188"/>
</kw>
<status status="PASS" starttime="20230726 04:46:30.179" endtime="20230726 04:46:30.188"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:30.193" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:40.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:40.989" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:30.191" endtime="20230726 04:46:40.989"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:40.991" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:40.990" endtime="20230726 04:46:40.991"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:40.992" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:40.991" endtime="20230726 04:46:40.992"/>
</kw>
<status status="PASS" starttime="20230726 04:46:30.190" endtime="20230726 04:46:40.992"/>
</kw>
<msg timestamp="20230726 04:46:40.992" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:46:30.189" endtime="20230726 04:46:40.992"/>
</kw>
<msg timestamp="20230726 04:46:40.993" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:30.188" endtime="20230726 04:46:40.993"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:40.993" endtime="20230726 04:46:40.994"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:40.997" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:41.001" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:41.001" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:40.995" endtime="20230726 04:46:41.001"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:41.002" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:41.002" endtime="20230726 04:46:41.003"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:41.003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:41.003" endtime="20230726 04:46:41.003"/>
</kw>
<status status="PASS" starttime="20230726 04:46:40.994" endtime="20230726 04:46:41.004"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230726 04:46:30.178" endtime="20230726 04:46:41.004"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230726 04:46:41.007" level="INFO">${random} = 87125</msg>
<status status="PASS" starttime="20230726 04:46:41.006" endtime="20230726 04:46:41.007"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:41.012" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-87125 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:50.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:50.900" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:41.009" endtime="20230726 04:46:50.900"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:50.901" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:50.900" endtime="20230726 04:46:50.901"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:50.902" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:50.901" endtime="20230726 04:46:50.902"/>
</kw>
<status status="PASS" starttime="20230726 04:46:41.009" endtime="20230726 04:46:50.902"/>
</kw>
<msg timestamp="20230726 04:46:50.902" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230726 04:46:41.008" endtime="20230726 04:46:50.903"/>
</kw>
<msg timestamp="20230726 04:46:50.903" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:41.007" endtime="20230726 04:46:50.903"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:50.903" endtime="20230726 04:46:50.904"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:50.908" level="INFO">Running command 'cat /tmp/key-87125 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:50.911" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:50.911" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230726 04:46:50.905" endtime="20230726 04:46:50.911"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:50.913" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230726 04:46:50.911" endtime="20230726 04:46:50.913"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:50.914" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:50.913" endtime="20230726 04:46:50.914"/>
</kw>
<msg timestamp="20230726 04:46:50.915" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230726 04:46:50.904" endtime="20230726 04:46:50.915"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230726 04:46:50.915" endtime="20230726 04:46:50.916"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230726 04:46:50.920" level="INFO">Running command 'rm /tmp/key-87125 2&gt;&amp;1'.</msg>
<msg timestamp="20230726 04:46:50.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20230726 04:46:50.923" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230726 04:46:50.917" endtime="20230726 04:46:50.923"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230726 04:46:50.925" level="INFO"/>
<status status="PASS" starttime="20230726 04:46:50.924" endtime="20230726 04:46:50.925"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230726 04:46:50.926" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230726 04:46:50.925" endtime="20230726 04:46:50.926"/>
</kw>
<status status="PASS" starttime="20230726 04:46:50.916" endtime="20230726 04:46:50.926"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230726 04:46:41.005" endtime="20230726 04:46:50.926"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230726 04:46:15.439" endtime="20230726 04:46:50.928"/>
</suite>
<status status="PASS" starttime="20230726 04:45:23.016" endtime="20230726 04:46:50.930"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
