<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1 (Python 3.8.10 on linux)" generated="20230725 09:21:55.835" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:02.878" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:02.889" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:02.890" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230725 09:20:02.874" endtime="20230725 09:20:02.890"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:02.891" level="INFO">scm</msg>
<status status="PASS" starttime="20230725 09:20:02.890" endtime="20230725 09:20:02.891"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:02.891" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:02.891" endtime="20230725 09:20:02.891"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.871" endtime="20230725 09:20:02.892"/>
</kw>
<msg timestamp="20230725 09:20:02.892" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:02.871" endtime="20230725 09:20:02.892"/>
</kw>
<msg timestamp="20230725 09:20:02.892" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230725 09:20:02.870" endtime="20230725 09:20:02.892"/>
</kw>
<msg timestamp="20230725 09:20:02.892" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230725 09:20:02.869" endtime="20230725 09:20:02.892"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230725 09:20:02.893" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230725 09:20:02.893" endtime="20230725 09:20:02.893"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:02.902" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:02.942" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:02.942" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:20:02.897" endtime="20230725 09:20:02.942"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:02.943" level="INFO"/>
<status status="PASS" starttime="20230725 09:20:02.943" endtime="20230725 09:20:02.943"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:02.944" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:02.944" endtime="20230725 09:20:02.944"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.896" endtime="20230725 09:20:02.944"/>
</kw>
<msg timestamp="20230725 09:20:02.944" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:02.895" endtime="20230725 09:20:02.944"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.894" endtime="20230725 09:20:02.945"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.894" endtime="20230725 09:20:02.945"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.869" endtime="20230725 09:20:02.945"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.868" endtime="20230725 09:20:02.945"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.867" endtime="20230725 09:20:02.945"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230725 09:20:02.949" level="INFO">${random} = HDzJgysXjG</msg>
<status status="PASS" starttime="20230725 09:20:02.949" endtime="20230725 09:20:02.950"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:02.962" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p HDzJgysXjG  2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:18.112" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:18.113" level="INFO">${output} = 2023-07-25 09:20:08,878 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:09,033 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:02.955" endtime="20230725 09:20:18.113"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:18.114" level="INFO">2023-07-25 09:20:08,878 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:09,033 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-25 09:20:09,033 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-25 09:20:09,188 [main] INFO freon.BaseFreonGenerator: Executing test with prefix HDzJgysXjG and number-of-tests 1
2023-07-25 09:20:09,592 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:10,595 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:11,596 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:12,271 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-07-25 09:20:12,476 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-07-25 09:20:12,596 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:13,168 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-25 09:20:13,251 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-25 09:20:13,580 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-25 09:20:13,597 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:14,597 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:15,599 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:16,634 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:17,635 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-25 09:20:17,745 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4521.971951, max=4521.971951, mean=4521.971951, stddev=0.0, median=4521.971951, p75=4521.971951, p95=4521.971951, p98=4521.971951, p99=4521.971951, p999=4521.971951, mean_rate=0.19313910359253672, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-07-25 09:20:17,745 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-07-25 09:20:17,746 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-25 09:20:17,746 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230725 09:20:18.113" endtime="20230725 09:20:18.116"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:18.117" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:18.116" endtime="20230725 09:20:18.117"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.954" endtime="20230725 09:20:18.118"/>
</kw>
<msg timestamp="20230725 09:20:18.118" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:02.954" endtime="20230725 09:20:18.118"/>
</kw>
<msg timestamp="20230725 09:20:18.118" level="INFO">${result} = 2023-07-25 09:20:08,878 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:09,033 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:02.952" endtime="20230725 09:20:18.118"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:20:18.119" endtime="20230725 09:20:18.119"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.950" endtime="20230725 09:20:18.119"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:18.139" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p HDzJgysXjG  2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:30.738" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:30.738" level="INFO">${output} = 2023-07-25 09:20:23,072 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:23,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:18.131" endtime="20230725 09:20:30.738"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:30.739" level="INFO">2023-07-25 09:20:23,072 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:23,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-25 09:20:23,277 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-25 09:20:23,381 [main] INFO freon.BaseFreonGenerator: Executing test with prefix HDzJgysXjG and number-of-tests 1
2023-07-25 09:20:23,451 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:24,452 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:25,452 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:26,499 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:27,325 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-25 09:20:27,499 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:28,499 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:29,500 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-25 09:20:30,383 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=83.981728, max=83.981728, mean=83.981728, stddev=0.0, median=83.981728, p75=83.981728, p95=83.981728, p98=83.981728, p99=83.981728, p999=83.981728, mean_rate=0.7574314898294144, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-25 09:20:30,384 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-25 09:20:30,384 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-25 09:20:30,384 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230725 09:20:30.738" endtime="20230725 09:20:30.739"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:30.740" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:30.739" endtime="20230725 09:20:30.740"/>
</kw>
<status status="PASS" starttime="20230725 09:20:18.123" endtime="20230725 09:20:30.740"/>
</kw>
<msg timestamp="20230725 09:20:30.740" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:18.122" endtime="20230725 09:20:30.741"/>
</kw>
<msg timestamp="20230725 09:20:30.741" level="INFO">${result} = 2023-07-25 09:20:23,072 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:23,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:18.122" endtime="20230725 09:20:30.741"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:20:30.741" endtime="20230725 09:20:30.742"/>
</kw>
<status status="PASS" starttime="20230725 09:20:18.120" endtime="20230725 09:20:30.742"/>
</kw>
<status status="PASS" starttime="20230725 09:20:02.948" endtime="20230725 09:20:30.742"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:30.748" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:33.545" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:33.546" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230725 09:20:30.744" endtime="20230725 09:20:33.546"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:33.547" level="INFO">40s</msg>
<status status="PASS" starttime="20230725 09:20:33.546" endtime="20230725 09:20:33.547"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:33.548" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:33.548" endtime="20230725 09:20:33.548"/>
</kw>
<status status="PASS" starttime="20230725 09:20:30.743" endtime="20230725 09:20:33.548"/>
</kw>
<msg timestamp="20230725 09:20:33.549" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:30.743" endtime="20230725 09:20:33.549"/>
</kw>
<msg timestamp="20230725 09:20:33.549" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230725 09:20:30.743" endtime="20230725 09:20:33.549"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230725 09:20:33.551" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230725 09:20:33.549" endtime="20230725 09:20:33.551"/>
</kw>
<msg timestamp="20230725 09:20:33.551" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230725 09:20:30.742" endtime="20230725 09:20:33.551"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230725 09:20:33.553" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230725 09:20:33.552" endtime="20230725 09:20:33.553"/>
</kw>
<msg timestamp="20230725 09:20:33.553" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230725 09:20:33.551" endtime="20230725 09:20:33.553"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:33.558" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:33.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:33.651" level="INFO">${output} = 0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.555" endtime="20230725 09:20:33.652"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:33.653" level="INFO">0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.652" endtime="20230725 09:20:33.653"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:33.654" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:33.653" endtime="20230725 09:20:33.654"/>
</kw>
<status status="PASS" starttime="20230725 09:20:33.555" endtime="20230725 09:20:33.654"/>
</kw>
<msg timestamp="20230725 09:20:33.655" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:33.554" endtime="20230725 09:20:33.655"/>
</kw>
<msg timestamp="20230725 09:20:33.655" level="INFO">${certSerial} = 0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.553" endtime="20230725 09:20:33.655"/>
</kw>
<msg timestamp="20230725 09:20:33.655" level="INFO">${certId1} = 0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.553" endtime="20230725 09:20:33.655"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:33.663" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:33.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:33.737" level="INFO">${output} = 0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.659" endtime="20230725 09:20:33.737"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:33.739" level="INFO">0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.738" endtime="20230725 09:20:33.739"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:33.740" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:33.739" endtime="20230725 09:20:33.740"/>
</kw>
<status status="PASS" starttime="20230725 09:20:33.658" endtime="20230725 09:20:33.740"/>
</kw>
<msg timestamp="20230725 09:20:33.740" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:33.658" endtime="20230725 09:20:33.740"/>
</kw>
<msg timestamp="20230725 09:20:33.740" level="INFO">${certSerial} = 0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.657" endtime="20230725 09:20:33.740"/>
</kw>
<msg timestamp="20230725 09:20:33.741" level="INFO">${newCertId} = 0123A755E3FB</msg>
<status status="PASS" starttime="20230725 09:20:33.657" endtime="20230725 09:20:33.741"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230725 09:20:33.742" level="FAIL">0123A755E3FB == 0123A755E3FB</msg>
<status status="FAIL" starttime="20230725 09:20:33.741" endtime="20230725 09:20:33.742"/>
</kw>
<status status="FAIL" starttime="20230725 09:20:33.656" endtime="20230725 09:20:33.742"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:38.749" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:38.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:38.836" level="INFO">${output} = 01245D904582</msg>
<status status="PASS" starttime="20230725 09:20:38.746" endtime="20230725 09:20:38.836"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:38.840" level="INFO">01245D904582</msg>
<status status="PASS" starttime="20230725 09:20:38.838" endtime="20230725 09:20:38.841"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:38.842" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:38.841" endtime="20230725 09:20:38.842"/>
</kw>
<status status="PASS" starttime="20230725 09:20:38.745" endtime="20230725 09:20:38.842"/>
</kw>
<msg timestamp="20230725 09:20:38.843" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:38.745" endtime="20230725 09:20:38.843"/>
</kw>
<msg timestamp="20230725 09:20:38.843" level="INFO">${certSerial} = 01245D904582</msg>
<status status="PASS" starttime="20230725 09:20:38.744" endtime="20230725 09:20:38.843"/>
</kw>
<msg timestamp="20230725 09:20:38.843" level="INFO">${newCertId} = 01245D904582</msg>
<status status="PASS" starttime="20230725 09:20:38.743" endtime="20230725 09:20:38.843"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230725 09:20:38.844" endtime="20230725 09:20:38.844"/>
</kw>
<status status="PASS" starttime="20230725 09:20:38.743" endtime="20230725 09:20:38.844"/>
</kw>
<status status="PASS" starttime="20230725 09:20:33.655" endtime="20230725 09:20:38.844"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230725 09:20:38.846" level="INFO">${random} = ZG0ldHtq4i</msg>
<status status="PASS" starttime="20230725 09:20:38.845" endtime="20230725 09:20:38.846"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:38.853" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ZG0ldHtq4i  2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:20:50.155" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:20:50.155" level="INFO">${output} = 2023-07-25 09:20:42,721 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:43,115 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:38.850" endtime="20230725 09:20:50.156"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:20:50.157" level="INFO">2023-07-25 09:20:42,721 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:43,115 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-25 09:20:43,115 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-25 09:20:43,288 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ZG0ldHtq4i and number-of-tests 1
2023-07-25 09:20:43,374 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:44,382 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:45,382 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:46,383 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:47,103 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-25 09:20:47,191 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-25 09:20:47,383 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:47,563 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-25 09:20:48,384 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:49,384 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-25 09:20:49,782 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2335.090233, max=2335.090233, mean=2335.090233, stddev=0.0, median=2335.090233, p75=2335.090233, p95=2335.090233, p98=2335.090233, p99=2335.090233, p999=2335.090233, mean_rate=0.3224595884227969, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-25 09:20:49,783 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-07-25 09:20:49,784 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-25 09:20:49,784 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230725 09:20:50.156" endtime="20230725 09:20:50.157"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:20:50.158" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:20:50.157" endtime="20230725 09:20:50.158"/>
</kw>
<status status="PASS" starttime="20230725 09:20:38.849" endtime="20230725 09:20:50.158"/>
</kw>
<msg timestamp="20230725 09:20:50.158" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:38.849" endtime="20230725 09:20:50.158"/>
</kw>
<msg timestamp="20230725 09:20:50.159" level="INFO">${result} = 2023-07-25 09:20:42,721 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:43,115 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:38.848" endtime="20230725 09:20:50.159"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:20:50.159" endtime="20230725 09:20:50.159"/>
</kw>
<status status="PASS" starttime="20230725 09:20:38.846" endtime="20230725 09:20:50.159"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:20:50.167" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ZG0ldHtq4i  2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:00.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:00.498" level="INFO">${output} = 2023-07-25 09:20:53,620 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:53,901 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:50.163" endtime="20230725 09:21:00.498"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:00.500" level="INFO">2023-07-25 09:20:53,620 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:53,901 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-25 09:20:53,901 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-25 09:20:53,999 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ZG0ldHtq4i and number-of-tests 1
2023-07-25 09:20:54,052 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:55,057 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:56,059 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:57,059 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:57,511 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-25 09:20:58,059 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:20:59,061 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-25 09:21:00,061 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-25 09:21:00,145 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=56.420582, max=56.420582, mean=56.420582, stddev=0.0, median=56.420582, p75=56.420582, p95=56.420582, p98=56.420582, p99=56.420582, p999=56.420582, mean_rate=0.9055896361134368, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-25 09:21:00,146 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-07-25 09:21:00,146 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-25 09:21:00,146 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230725 09:21:00.499" endtime="20230725 09:21:00.500"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:00.500" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:00.500" endtime="20230725 09:21:00.501"/>
</kw>
<status status="PASS" starttime="20230725 09:20:50.162" endtime="20230725 09:21:00.501"/>
</kw>
<msg timestamp="20230725 09:21:00.501" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:20:50.162" endtime="20230725 09:21:00.501"/>
</kw>
<msg timestamp="20230725 09:21:00.501" level="INFO">${result} = 2023-07-25 09:20:53,620 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-25 09:20:53,901 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230725 09:20:50.161" endtime="20230725 09:21:00.501"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:21:00.502" endtime="20230725 09:21:00.502"/>
</kw>
<status status="PASS" starttime="20230725 09:20:50.160" endtime="20230725 09:21:00.502"/>
</kw>
<status status="PASS" starttime="20230725 09:20:38.845" endtime="20230725 09:21:00.502"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230725 09:20:02.945" endtime="20230725 09:21:00.503"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230725 09:20:02.754" endtime="20230725 09:21:00.504"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:00.520" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:08.010" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:08.010" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:00.517" endtime="20230725 09:21:08.010"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:08.011" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:08.010" endtime="20230725 09:21:08.011"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:08.012" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:08.011" endtime="20230725 09:21:08.012"/>
</kw>
<status status="PASS" starttime="20230725 09:21:00.517" endtime="20230725 09:21:08.013"/>
</kw>
<msg timestamp="20230725 09:21:08.013" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:21:00.516" endtime="20230725 09:21:08.013"/>
</kw>
<msg timestamp="20230725 09:21:08.013" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:00.516" endtime="20230725 09:21:08.013"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:21:08.013" endtime="20230725 09:21:08.014"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:08.019" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:14.836" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:14.836" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:08.016" endtime="20230725 09:21:14.836"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:14.837" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:14.836" endtime="20230725 09:21:14.837"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:14.838" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:14.837" endtime="20230725 09:21:14.838"/>
</kw>
<status status="PASS" starttime="20230725 09:21:08.015" endtime="20230725 09:21:14.838"/>
</kw>
<msg timestamp="20230725 09:21:14.838" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:21:08.015" endtime="20230725 09:21:14.838"/>
</kw>
<msg timestamp="20230725 09:21:14.839" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:08.014" endtime="20230725 09:21:14.839"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:21:14.839" endtime="20230725 09:21:14.839"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230725 09:21:00.515" endtime="20230725 09:21:14.839"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:14.845" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230725 09:21:14.848" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:14.849" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:14.842" endtime="20230725 09:21:14.849"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:14.850" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:14.849" endtime="20230725 09:21:14.850"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:14.851" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:14.850" endtime="20230725 09:21:14.851"/>
</kw>
<status status="PASS" starttime="20230725 09:21:14.842" endtime="20230725 09:21:14.851"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:14.855" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:27.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:27.678" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:14.853" endtime="20230725 09:21:27.678"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:27.680" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:27.679" endtime="20230725 09:21:27.680"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:27.680" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:27.680" endtime="20230725 09:21:27.681"/>
</kw>
<status status="PASS" starttime="20230725 09:21:14.852" endtime="20230725 09:21:27.681"/>
</kw>
<msg timestamp="20230725 09:21:27.681" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:21:14.852" endtime="20230725 09:21:27.681"/>
</kw>
<msg timestamp="20230725 09:21:27.681" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:14.851" endtime="20230725 09:21:27.681"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:21:27.682" endtime="20230725 09:21:27.682"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:27.686" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:27.689" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:27.689" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:27.683" endtime="20230725 09:21:27.689"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:27.690" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:27.690" endtime="20230725 09:21:27.690"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:27.691" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:27.691" endtime="20230725 09:21:27.691"/>
</kw>
<status status="PASS" starttime="20230725 09:21:27.682" endtime="20230725 09:21:27.691"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230725 09:21:14.841" endtime="20230725 09:21:27.692"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230725 09:21:27.694" level="INFO">${random} = 86894</msg>
<status status="PASS" starttime="20230725 09:21:27.693" endtime="20230725 09:21:27.694"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:27.699" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-86894 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:37.466" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:37.466" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:27.696" endtime="20230725 09:21:37.466"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:37.468" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:37.467" endtime="20230725 09:21:37.468"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:37.468" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:37.468" endtime="20230725 09:21:37.469"/>
</kw>
<status status="PASS" starttime="20230725 09:21:27.695" endtime="20230725 09:21:37.469"/>
</kw>
<msg timestamp="20230725 09:21:37.469" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230725 09:21:27.695" endtime="20230725 09:21:37.469"/>
</kw>
<msg timestamp="20230725 09:21:37.469" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:27.694" endtime="20230725 09:21:37.469"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:21:37.469" endtime="20230725 09:21:37.470"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:37.474" level="INFO">Running command 'cat /tmp/key-86894 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:37.477" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:37.477" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230725 09:21:37.471" endtime="20230725 09:21:37.477"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:37.478" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230725 09:21:37.478" endtime="20230725 09:21:37.479"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:37.479" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:37.479" endtime="20230725 09:21:37.479"/>
</kw>
<msg timestamp="20230725 09:21:37.480" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230725 09:21:37.470" endtime="20230725 09:21:37.480"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230725 09:21:37.480" endtime="20230725 09:21:37.480"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230725 09:21:37.484" level="INFO">Running command 'rm /tmp/key-86894 2&gt;&amp;1'.</msg>
<msg timestamp="20230725 09:21:37.487" level="INFO">${rc} = 0</msg>
<msg timestamp="20230725 09:21:37.487" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230725 09:21:37.481" endtime="20230725 09:21:37.487"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230725 09:21:37.488" level="INFO"/>
<status status="PASS" starttime="20230725 09:21:37.487" endtime="20230725 09:21:37.488"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230725 09:21:37.489" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230725 09:21:37.488" endtime="20230725 09:21:37.489"/>
</kw>
<status status="PASS" starttime="20230725 09:21:37.480" endtime="20230725 09:21:37.489"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230725 09:21:27.692" endtime="20230725 09:21:37.489"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230725 09:21:00.507" endtime="20230725 09:21:37.491"/>
</suite>
<status status="PASS" starttime="20230725 09:20:02.571" endtime="20230725 09:21:37.493"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
