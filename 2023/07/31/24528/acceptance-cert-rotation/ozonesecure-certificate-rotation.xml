<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230731 23:00:52.115" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:58:48.337" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:58:48.361" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:58:48.361" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230731 22:58:48.333" endtime="20230731 22:58:48.361"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:58:48.363" level="INFO">scm</msg>
<status status="PASS" starttime="20230731 22:58:48.362" endtime="20230731 22:58:48.363"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:58:48.363" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:58:48.363" endtime="20230731 22:58:48.364"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.332" endtime="20230731 22:58:48.364"/>
</kw>
<msg timestamp="20230731 22:58:48.364" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:58:48.331" endtime="20230731 22:58:48.364"/>
</kw>
<msg timestamp="20230731 22:58:48.364" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230731 22:58:48.331" endtime="20230731 22:58:48.364"/>
</kw>
<msg timestamp="20230731 22:58:48.365" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230731 22:58:48.330" endtime="20230731 22:58:48.365"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230731 22:58:48.365" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230731 22:58:48.365" endtime="20230731 22:58:48.366"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:58:48.384" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:58:48.578" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:58:48.578" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 22:58:48.381" endtime="20230731 22:58:48.578"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:58:48.580" level="INFO"/>
<status status="PASS" starttime="20230731 22:58:48.579" endtime="20230731 22:58:48.581"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:58:48.582" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:58:48.581" endtime="20230731 22:58:48.582"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.380" endtime="20230731 22:58:48.582"/>
</kw>
<msg timestamp="20230731 22:58:48.582" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:58:48.379" endtime="20230731 22:58:48.583"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.378" endtime="20230731 22:58:48.583"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.366" endtime="20230731 22:58:48.583"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.330" endtime="20230731 22:58:48.583"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.324" endtime="20230731 22:58:48.583"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.323" endtime="20230731 22:58:48.583"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230731 22:58:48.589" level="INFO">${random} = aU2kDH4pOn</msg>
<status status="PASS" starttime="20230731 22:58:48.588" endtime="20230731 22:58:48.589"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:58:48.606" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p aU2kDH4pOn  2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:07.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:07.628" level="INFO">${output} = 2023-07-31 22:58:53,175 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:58:53,404 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:58:48.600" endtime="20230731 22:59:07.628"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:07.629" level="INFO">2023-07-31 22:58:53,175 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:58:53,404 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-31 22:58:53,404 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-31 22:58:53,547 [main] INFO freon.BaseFreonGenerator: Executing test with prefix aU2kDH4pOn and number-of-tests 1
2023-07-31 22:58:53,644 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:58:54,649 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:58:55,650 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:58:56,652 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:58:57,203 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-07-31 22:58:57,435 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-07-31 22:58:57,654 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:58:58,253 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-31 22:58:58,353 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-31 22:58:58,654 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:58:58,862 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-31 22:58:59,655 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:00,663 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:01,663 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:02,664 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:03,664 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:04,665 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:05,670 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:06,671 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-31 22:59:07,216 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=8293.525222, max=8293.525222, mean=8293.525222, stddev=0.0, median=8293.525222, p75=8293.525222, p95=8293.525222, p98=8293.525222, p99=8293.525222, p999=8293.525222, mean_rate=0.10294376631169455, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-31 22:59:07,219 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 14
2023-07-31 22:59:07,226 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-31 22:59:07,226 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230731 22:59:07.628" endtime="20230731 22:59:07.630"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:07.632" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:07.630" endtime="20230731 22:59:07.633"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.599" endtime="20230731 22:59:07.633"/>
</kw>
<msg timestamp="20230731 22:59:07.633" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:58:48.599" endtime="20230731 22:59:07.633"/>
</kw>
<msg timestamp="20230731 22:59:07.634" level="INFO">${result} = 2023-07-31 22:58:53,175 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:58:53,404 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:58:48.596" endtime="20230731 22:59:07.635"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 22:59:07.635" endtime="20230731 22:59:07.636"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.589" endtime="20230731 22:59:07.636"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:07.651" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p aU2kDH4pOn  2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:20.255" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:20.255" level="INFO">${output} = 2023-07-31 22:59:12,065 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:12,330 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:59:07.645" endtime="20230731 22:59:20.255"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:20.257" level="INFO">2023-07-31 22:59:12,065 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:12,330 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-31 22:59:12,330 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-31 22:59:12,427 [main] INFO freon.BaseFreonGenerator: Executing test with prefix aU2kDH4pOn and number-of-tests 1
2023-07-31 22:59:12,503 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:13,505 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:14,506 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:15,507 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:15,802 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-31 22:59:16,508 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:17,508 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:18,509 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:19,509 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-31 22:59:19,829 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=102.317112, max=102.317112, mean=102.317112, stddev=0.0, median=102.317112, p75=102.317112, p95=102.317112, p98=102.317112, p99=102.317112, p999=102.317112, mean_rate=0.9118635396067081, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-31 22:59:19,830 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-31 22:59:19,831 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-31 22:59:19,831 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230731 22:59:20.256" endtime="20230731 22:59:20.257"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:20.258" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:20.257" endtime="20230731 22:59:20.258"/>
</kw>
<status status="PASS" starttime="20230731 22:59:07.644" endtime="20230731 22:59:20.258"/>
</kw>
<msg timestamp="20230731 22:59:20.258" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:07.644" endtime="20230731 22:59:20.259"/>
</kw>
<msg timestamp="20230731 22:59:20.259" level="INFO">${result} = 2023-07-31 22:59:12,065 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:12,330 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:59:07.640" endtime="20230731 22:59:20.259"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 22:59:20.259" endtime="20230731 22:59:20.260"/>
</kw>
<status status="PASS" starttime="20230731 22:59:07.636" endtime="20230731 22:59:20.260"/>
</kw>
<status status="PASS" starttime="20230731 22:58:48.587" endtime="20230731 22:59:20.260"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:20.274" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:23.040" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:23.040" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230731 22:59:20.266" endtime="20230731 22:59:23.040"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:23.042" level="INFO">40s</msg>
<status status="PASS" starttime="20230731 22:59:23.041" endtime="20230731 22:59:23.042"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:23.044" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:23.043" endtime="20230731 22:59:23.044"/>
</kw>
<status status="PASS" starttime="20230731 22:59:20.265" endtime="20230731 22:59:23.044"/>
</kw>
<msg timestamp="20230731 22:59:23.044" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:20.264" endtime="20230731 22:59:23.044"/>
</kw>
<msg timestamp="20230731 22:59:23.045" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230731 22:59:20.262" endtime="20230731 22:59:23.045"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230731 22:59:23.046" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230731 22:59:23.045" endtime="20230731 22:59:23.046"/>
</kw>
<msg timestamp="20230731 22:59:23.047" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230731 22:59:20.260" endtime="20230731 22:59:23.047"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230731 22:59:23.048" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230731 22:59:23.048" endtime="20230731 22:59:23.048"/>
</kw>
<msg timestamp="20230731 22:59:23.049" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230731 22:59:23.047" endtime="20230731 22:59:23.049"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:23.055" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:23.421" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:23.421" level="INFO">${output} = 02F1BF80F2C4</msg>
<status status="PASS" starttime="20230731 22:59:23.051" endtime="20230731 22:59:23.421"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:23.424" level="INFO">02F1BF80F2C4</msg>
<status status="PASS" starttime="20230731 22:59:23.423" endtime="20230731 22:59:23.424"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:23.425" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:23.424" endtime="20230731 22:59:23.425"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.051" endtime="20230731 22:59:23.427"/>
</kw>
<msg timestamp="20230731 22:59:23.427" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:23.050" endtime="20230731 22:59:23.427"/>
</kw>
<msg timestamp="20230731 22:59:23.428" level="INFO">${certSerial} = 02F1BF80F2C4</msg>
<status status="PASS" starttime="20230731 22:59:23.049" endtime="20230731 22:59:23.428"/>
</kw>
<msg timestamp="20230731 22:59:23.428" level="INFO">${certId1} = 02F1BF80F2C4</msg>
<status status="PASS" starttime="20230731 22:59:23.049" endtime="20230731 22:59:23.428"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:23.446" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:23.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:23.691" level="INFO">${output} = 02F0BFFCD370</msg>
<status status="PASS" starttime="20230731 22:59:23.437" endtime="20230731 22:59:23.691"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:23.693" level="INFO">02F0BFFCD370</msg>
<status status="PASS" starttime="20230731 22:59:23.692" endtime="20230731 22:59:23.693"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:23.693" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:23.693" endtime="20230731 22:59:23.694"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.436" endtime="20230731 22:59:23.694"/>
</kw>
<msg timestamp="20230731 22:59:23.694" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:23.436" endtime="20230731 22:59:23.694"/>
</kw>
<msg timestamp="20230731 22:59:23.694" level="INFO">${certSerial} = 02F0BFFCD370</msg>
<status status="PASS" starttime="20230731 22:59:23.430" endtime="20230731 22:59:23.695"/>
</kw>
<msg timestamp="20230731 22:59:23.695" level="INFO">${newCertId} = 02F0BFFCD370</msg>
<status status="PASS" starttime="20230731 22:59:23.430" endtime="20230731 22:59:23.695"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230731 22:59:23.695" endtime="20230731 22:59:23.696"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.429" endtime="20230731 22:59:23.696"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.428" endtime="20230731 22:59:23.697"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230731 22:59:23.698" level="INFO">${random} = OljgbaqJcc</msg>
<status status="PASS" starttime="20230731 22:59:23.697" endtime="20230731 22:59:23.698"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:23.706" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p OljgbaqJcc  2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:36.680" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:36.680" level="INFO">${output} = 2023-07-31 22:59:27,206 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:27,361 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:59:23.703" endtime="20230731 22:59:36.680"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:36.687" level="INFO">2023-07-31 22:59:27,206 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:27,361 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-31 22:59:27,361 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-31 22:59:27,511 [main] INFO freon.BaseFreonGenerator: Executing test with prefix OljgbaqJcc and number-of-tests 1
2023-07-31 22:59:27,622 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:28,631 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:29,633 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:30,634 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:31,635 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:32,366 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-31 22:59:32,456 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-31 22:59:32,635 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:32,863 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-31 22:59:33,636 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:34,638 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:35,639 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-31 22:59:36,232 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3004.707615, max=3004.707615, mean=3004.707615, stddev=0.0, median=3004.707615, p75=3004.707615, p95=3004.707615, p98=3004.707615, p99=3004.707615, p999=3004.707615, mean_rate=0.2267749281132719, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-31 22:59:36,233 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-07-31 22:59:36,240 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-31 22:59:36,240 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230731 22:59:36.686" endtime="20230731 22:59:36.688"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:36.692" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:36.691" endtime="20230731 22:59:36.693"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.702" endtime="20230731 22:59:36.694"/>
</kw>
<msg timestamp="20230731 22:59:36.694" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:23.701" endtime="20230731 22:59:36.694"/>
</kw>
<msg timestamp="20230731 22:59:36.695" level="INFO">${result} = 2023-07-31 22:59:27,206 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:27,361 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:59:23.700" endtime="20230731 22:59:36.695"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 22:59:36.695" endtime="20230731 22:59:36.696"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.698" endtime="20230731 22:59:36.696"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:36.711" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p OljgbaqJcc  2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:49.166" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:49.166" level="INFO">${output} = 2023-07-31 22:59:41,529 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:41,754 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:59:36.700" endtime="20230731 22:59:49.166"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:49.169" level="INFO">2023-07-31 22:59:41,529 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:41,754 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-31 22:59:41,754 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-31 22:59:41,862 [main] INFO freon.BaseFreonGenerator: Executing test with prefix OljgbaqJcc and number-of-tests 1
2023-07-31 22:59:41,937 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:42,938 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:43,939 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:44,940 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:45,440 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-31 22:59:45,940 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:46,941 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-31 22:59:47,942 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-31 22:59:48,783 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=51.574003, max=51.574003, mean=51.574003, stddev=0.0, median=51.574003, p75=51.574003, p95=51.574003, p98=51.574003, p99=51.574003, p999=51.574003, mean_rate=0.7986223132587414, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-31 22:59:48,784 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-31 22:59:48,784 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-31 22:59:48,785 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230731 22:59:49.168" endtime="20230731 22:59:49.171"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:49.172" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:49.171" endtime="20230731 22:59:49.173"/>
</kw>
<status status="PASS" starttime="20230731 22:59:36.699" endtime="20230731 22:59:49.173"/>
</kw>
<msg timestamp="20230731 22:59:49.173" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:36.699" endtime="20230731 22:59:49.173"/>
</kw>
<msg timestamp="20230731 22:59:49.174" level="INFO">${result} = 2023-07-31 22:59:41,529 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-31 22:59:41,754 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230731 22:59:36.698" endtime="20230731 22:59:49.174"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 22:59:49.174" endtime="20230731 22:59:49.176"/>
</kw>
<status status="PASS" starttime="20230731 22:59:36.696" endtime="20230731 22:59:49.176"/>
</kw>
<status status="PASS" starttime="20230731 22:59:23.697" endtime="20230731 22:59:49.176"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230731 22:58:48.584" endtime="20230731 22:59:49.176"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230731 22:58:48.150" endtime="20230731 22:59:49.178"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:49.203" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 22:59:57.365" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 22:59:57.365" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 22:59:49.197" endtime="20230731 22:59:57.365"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 22:59:57.367" level="INFO"/>
<status status="PASS" starttime="20230731 22:59:57.366" endtime="20230731 22:59:57.367"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 22:59:57.368" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 22:59:57.367" endtime="20230731 22:59:57.368"/>
</kw>
<status status="PASS" starttime="20230731 22:59:49.196" endtime="20230731 22:59:57.368"/>
</kw>
<msg timestamp="20230731 22:59:57.368" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:49.196" endtime="20230731 22:59:57.369"/>
</kw>
<msg timestamp="20230731 22:59:57.369" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 22:59:49.195" endtime="20230731 22:59:57.369"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 22:59:57.369" endtime="20230731 22:59:57.370"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 22:59:57.376" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 23:00:06.451" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:06.451" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 22:59:57.372" endtime="20230731 23:00:06.451"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:06.453" level="INFO"/>
<status status="PASS" starttime="20230731 23:00:06.452" endtime="20230731 23:00:06.453"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:06.454" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:06.453" endtime="20230731 23:00:06.454"/>
</kw>
<status status="PASS" starttime="20230731 22:59:57.371" endtime="20230731 23:00:06.454"/>
</kw>
<msg timestamp="20230731 23:00:06.455" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 22:59:57.371" endtime="20230731 23:00:06.455"/>
</kw>
<msg timestamp="20230731 23:00:06.455" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 22:59:57.370" endtime="20230731 23:00:06.455"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 23:00:06.455" endtime="20230731 23:00:06.456"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230731 22:59:49.194" endtime="20230731 23:00:06.456"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 23:00:06.463" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230731 23:00:06.465" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:06.465" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:06.459" endtime="20230731 23:00:06.465"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:06.467" level="INFO"/>
<status status="PASS" starttime="20230731 23:00:06.466" endtime="20230731 23:00:06.467"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:06.468" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:06.467" endtime="20230731 23:00:06.468"/>
</kw>
<status status="PASS" starttime="20230731 23:00:06.458" endtime="20230731 23:00:06.468"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 23:00:06.474" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 23:00:19.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:19.994" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:06.471" endtime="20230731 23:00:19.994"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:19.995" level="INFO"/>
<status status="PASS" starttime="20230731 23:00:19.994" endtime="20230731 23:00:19.996"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:19.996" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:19.996" endtime="20230731 23:00:19.996"/>
</kw>
<status status="PASS" starttime="20230731 23:00:06.470" endtime="20230731 23:00:19.997"/>
</kw>
<msg timestamp="20230731 23:00:19.997" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 23:00:06.469" endtime="20230731 23:00:19.997"/>
</kw>
<msg timestamp="20230731 23:00:19.997" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:06.468" endtime="20230731 23:00:19.997"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 23:00:19.998" endtime="20230731 23:00:19.998"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 23:00:20.004" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 23:00:20.007" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:20.008" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:19.999" endtime="20230731 23:00:20.008"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:20.011" level="INFO"/>
<status status="PASS" starttime="20230731 23:00:20.008" endtime="20230731 23:00:20.011"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:20.012" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:20.011" endtime="20230731 23:00:20.012"/>
</kw>
<status status="PASS" starttime="20230731 23:00:19.998" endtime="20230731 23:00:20.013"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230731 23:00:06.457" endtime="20230731 23:00:20.014"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230731 23:00:20.018" level="INFO">${random} = 14343</msg>
<status status="PASS" starttime="20230731 23:00:20.017" endtime="20230731 23:00:20.018"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 23:00:20.024" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-14343 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 23:00:32.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:32.211" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:20.021" endtime="20230731 23:00:32.211"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:32.213" level="INFO"/>
<status status="PASS" starttime="20230731 23:00:32.212" endtime="20230731 23:00:32.213"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:32.214" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:32.213" endtime="20230731 23:00:32.214"/>
</kw>
<status status="PASS" starttime="20230731 23:00:20.020" endtime="20230731 23:00:32.214"/>
</kw>
<msg timestamp="20230731 23:00:32.214" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230731 23:00:20.019" endtime="20230731 23:00:32.214"/>
</kw>
<msg timestamp="20230731 23:00:32.215" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:20.018" endtime="20230731 23:00:32.215"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 23:00:32.215" endtime="20230731 23:00:32.215"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 23:00:32.220" level="INFO">Running command 'cat /tmp/key-14343 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 23:00:32.223" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:32.223" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230731 23:00:32.216" endtime="20230731 23:00:32.223"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:32.225" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230731 23:00:32.224" endtime="20230731 23:00:32.225"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:32.234" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:32.233" endtime="20230731 23:00:32.235"/>
</kw>
<msg timestamp="20230731 23:00:32.236" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230731 23:00:32.216" endtime="20230731 23:00:32.236"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230731 23:00:32.236" endtime="20230731 23:00:32.239"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230731 23:00:32.248" level="INFO">Running command 'rm /tmp/key-14343 2&gt;&amp;1'.</msg>
<msg timestamp="20230731 23:00:32.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20230731 23:00:32.252" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230731 23:00:32.241" endtime="20230731 23:00:32.254"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230731 23:00:32.256" level="INFO"/>
<status status="PASS" starttime="20230731 23:00:32.254" endtime="20230731 23:00:32.257"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230731 23:00:32.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230731 23:00:32.258" endtime="20230731 23:00:32.260"/>
</kw>
<status status="PASS" starttime="20230731 23:00:32.239" endtime="20230731 23:00:32.260"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230731 23:00:20.016" endtime="20230731 23:00:32.260"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230731 22:59:49.181" endtime="20230731 23:00:32.262"/>
</suite>
<status status="PASS" starttime="20230731 22:58:48.007" endtime="20230731 23:00:32.265"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
