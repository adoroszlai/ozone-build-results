<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1 (Python 3.8.10 on linux)" generated="20230728 00:36:58.188" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:08.568" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:08.574" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:08.575" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230728 00:35:08.561" endtime="20230728 00:35:08.575"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:08.576" level="INFO">scm</msg>
<status status="PASS" starttime="20230728 00:35:08.575" endtime="20230728 00:35:08.576"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:08.576" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:08.576" endtime="20230728 00:35:08.577"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.560" endtime="20230728 00:35:08.577"/>
</kw>
<msg timestamp="20230728 00:35:08.577" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:08.560" endtime="20230728 00:35:08.577"/>
</kw>
<msg timestamp="20230728 00:35:08.577" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230728 00:35:08.559" endtime="20230728 00:35:08.577"/>
</kw>
<msg timestamp="20230728 00:35:08.578" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230728 00:35:08.559" endtime="20230728 00:35:08.578"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230728 00:35:08.578" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230728 00:35:08.578" endtime="20230728 00:35:08.578"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:08.591" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:08.646" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:08.646" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:35:08.580" endtime="20230728 00:35:08.646"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:08.650" level="INFO"/>
<status status="PASS" starttime="20230728 00:35:08.647" endtime="20230728 00:35:08.650"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:08.651" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:08.650" endtime="20230728 00:35:08.651"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.580" endtime="20230728 00:35:08.651"/>
</kw>
<msg timestamp="20230728 00:35:08.651" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:08.580" endtime="20230728 00:35:08.651"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.579" endtime="20230728 00:35:08.651"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.578" endtime="20230728 00:35:08.651"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.558" endtime="20230728 00:35:08.652"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.557" endtime="20230728 00:35:08.652"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.557" endtime="20230728 00:35:08.652"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230728 00:35:08.671" level="INFO">${random} = uNjEFvxLk4</msg>
<status status="PASS" starttime="20230728 00:35:08.670" endtime="20230728 00:35:08.671"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:08.687" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p uNjEFvxLk4  2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:24.433" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:24.433" level="INFO">${output} = 2023-07-28 00:35:14,844 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:15,046 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:08.684" endtime="20230728 00:35:24.433"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:24.435" level="INFO">2023-07-28 00:35:14,844 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:15,046 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-28 00:35:15,046 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-28 00:35:15,193 [main] INFO freon.BaseFreonGenerator: Executing test with prefix uNjEFvxLk4 and number-of-tests 1
2023-07-28 00:35:15,263 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:16,266 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:17,271 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:18,082 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-07-28 00:35:18,261 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-07-28 00:35:18,271 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:18,848 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-28 00:35:18,935 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-28 00:35:19,232 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-28 00:35:19,271 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:20,272 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:21,272 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:22,290 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:23,290 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-28 00:35:24,005 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4582.294286, max=4582.294286, mean=4582.294286, stddev=0.0, median=4582.294286, p75=4582.294286, p95=4582.294286, p98=4582.294286, p99=4582.294286, p999=4582.294286, mean_rate=0.17618514639934987, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-07-28 00:35:24,007 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-07-28 00:35:24,007 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-28 00:35:24,007 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230728 00:35:24.434" endtime="20230728 00:35:24.435"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:24.436" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:24.435" endtime="20230728 00:35:24.436"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.683" endtime="20230728 00:35:24.436"/>
</kw>
<msg timestamp="20230728 00:35:24.436" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:08.683" endtime="20230728 00:35:24.436"/>
</kw>
<msg timestamp="20230728 00:35:24.436" level="INFO">${result} = 2023-07-28 00:35:14,844 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:15,046 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:08.672" endtime="20230728 00:35:24.437"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:35:24.437" endtime="20230728 00:35:24.437"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.671" endtime="20230728 00:35:24.437"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:24.443" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p uNjEFvxLk4  2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:37.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:37.475" level="INFO">${output} = 2023-07-28 00:35:29,135 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:29,542 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:24.440" endtime="20230728 00:35:37.475"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:37.477" level="INFO">2023-07-28 00:35:29,135 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:29,542 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-28 00:35:29,542 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-28 00:35:29,749 [main] INFO freon.BaseFreonGenerator: Executing test with prefix uNjEFvxLk4 and number-of-tests 1
2023-07-28 00:35:29,970 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:30,981 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:31,982 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:32,984 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:33,985 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:34,019 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-28 00:35:34,989 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:35,989 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-28 00:35:37,101 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=83.60144, max=83.60144, mean=83.60144, stddev=0.0, median=83.60144, p75=83.60144, p95=83.60144, p98=83.60144, p99=83.60144, p999=83.60144, mean_rate=0.8006693942024711, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-28 00:35:37,102 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-28 00:35:37,102 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-28 00:35:37,102 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230728 00:35:37.476" endtime="20230728 00:35:37.477"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:37.477" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:37.477" endtime="20230728 00:35:37.477"/>
</kw>
<status status="PASS" starttime="20230728 00:35:24.440" endtime="20230728 00:35:37.478"/>
</kw>
<msg timestamp="20230728 00:35:37.478" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:24.440" endtime="20230728 00:35:37.478"/>
</kw>
<msg timestamp="20230728 00:35:37.478" level="INFO">${result} = 2023-07-28 00:35:29,135 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:29,542 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:24.439" endtime="20230728 00:35:37.478"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:35:37.478" endtime="20230728 00:35:37.479"/>
</kw>
<status status="PASS" starttime="20230728 00:35:24.437" endtime="20230728 00:35:37.479"/>
</kw>
<status status="PASS" starttime="20230728 00:35:08.669" endtime="20230728 00:35:37.479"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:37.487" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:39.270" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:39.270" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230728 00:35:37.482" endtime="20230728 00:35:39.271"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:39.272" level="INFO">40s</msg>
<status status="PASS" starttime="20230728 00:35:39.271" endtime="20230728 00:35:39.272"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:39.273" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:39.272" endtime="20230728 00:35:39.273"/>
</kw>
<status status="PASS" starttime="20230728 00:35:37.481" endtime="20230728 00:35:39.273"/>
</kw>
<msg timestamp="20230728 00:35:39.274" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:37.481" endtime="20230728 00:35:39.274"/>
</kw>
<msg timestamp="20230728 00:35:39.274" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230728 00:35:37.480" endtime="20230728 00:35:39.274"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230728 00:35:39.276" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230728 00:35:39.275" endtime="20230728 00:35:39.276"/>
</kw>
<msg timestamp="20230728 00:35:39.276" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230728 00:35:37.479" endtime="20230728 00:35:39.276"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230728 00:35:39.278" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230728 00:35:39.277" endtime="20230728 00:35:39.278"/>
</kw>
<msg timestamp="20230728 00:35:39.278" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230728 00:35:39.276" endtime="20230728 00:35:39.278"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:39.283" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:39.437" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:39.437" level="INFO">${output} = DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.280" endtime="20230728 00:35:39.437"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:39.438" level="INFO">DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.437" endtime="20230728 00:35:39.438"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:39.439" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:39.439" endtime="20230728 00:35:39.439"/>
</kw>
<status status="PASS" starttime="20230728 00:35:39.280" endtime="20230728 00:35:39.440"/>
</kw>
<msg timestamp="20230728 00:35:39.440" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:39.279" endtime="20230728 00:35:39.440"/>
</kw>
<msg timestamp="20230728 00:35:39.440" level="INFO">${certSerial} = DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.278" endtime="20230728 00:35:39.440"/>
</kw>
<msg timestamp="20230728 00:35:39.440" level="INFO">${certId1} = DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.278" endtime="20230728 00:35:39.440"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:39.447" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:39.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:39.548" level="INFO">${output} = DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.443" endtime="20230728 00:35:39.548"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:39.550" level="INFO">DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.549" endtime="20230728 00:35:39.550"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:39.551" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:39.550" endtime="20230728 00:35:39.551"/>
</kw>
<status status="PASS" starttime="20230728 00:35:39.443" endtime="20230728 00:35:39.551"/>
</kw>
<msg timestamp="20230728 00:35:39.551" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:39.443" endtime="20230728 00:35:39.551"/>
</kw>
<msg timestamp="20230728 00:35:39.552" level="INFO">${certSerial} = DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.442" endtime="20230728 00:35:39.552"/>
</kw>
<msg timestamp="20230728 00:35:39.552" level="INFO">${newCertId} = DA1E6830C9</msg>
<status status="PASS" starttime="20230728 00:35:39.442" endtime="20230728 00:35:39.552"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230728 00:35:39.553" level="FAIL">DA1E6830C9 == DA1E6830C9</msg>
<status status="FAIL" starttime="20230728 00:35:39.552" endtime="20230728 00:35:39.553"/>
</kw>
<status status="FAIL" starttime="20230728 00:35:39.441" endtime="20230728 00:35:39.553"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:44.560" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:44.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:44.643" level="INFO">${output} = DC641953F5</msg>
<status status="PASS" starttime="20230728 00:35:44.557" endtime="20230728 00:35:44.643"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:44.644" level="INFO">DC641953F5</msg>
<status status="PASS" starttime="20230728 00:35:44.644" endtime="20230728 00:35:44.645"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:44.645" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:44.645" endtime="20230728 00:35:44.645"/>
</kw>
<status status="PASS" starttime="20230728 00:35:44.556" endtime="20230728 00:35:44.646"/>
</kw>
<msg timestamp="20230728 00:35:44.646" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:44.556" endtime="20230728 00:35:44.646"/>
</kw>
<msg timestamp="20230728 00:35:44.646" level="INFO">${certSerial} = DC641953F5</msg>
<status status="PASS" starttime="20230728 00:35:44.555" endtime="20230728 00:35:44.646"/>
</kw>
<msg timestamp="20230728 00:35:44.647" level="INFO">${newCertId} = DC641953F5</msg>
<status status="PASS" starttime="20230728 00:35:44.555" endtime="20230728 00:35:44.647"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230728 00:35:44.647" endtime="20230728 00:35:44.647"/>
</kw>
<status status="PASS" starttime="20230728 00:35:44.554" endtime="20230728 00:35:44.647"/>
</kw>
<status status="PASS" starttime="20230728 00:35:39.440" endtime="20230728 00:35:44.648"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230728 00:35:44.649" level="INFO">${random} = BzO2j373DC</msg>
<status status="PASS" starttime="20230728 00:35:44.648" endtime="20230728 00:35:44.649"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:44.655" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p BzO2j373DC  2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:35:55.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:35:55.826" level="INFO">${output} = 2023-07-28 00:35:47,835 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:48,043 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:44.652" endtime="20230728 00:35:55.826"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:35:55.828" level="INFO">2023-07-28 00:35:47,835 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:48,043 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-28 00:35:48,043 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-28 00:35:48,136 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BzO2j373DC and number-of-tests 1
2023-07-28 00:35:48,229 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:49,238 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:50,239 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:51,240 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:51,771 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-28 00:35:51,828 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-28 00:35:52,240 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:52,380 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-28 00:35:53,241 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:54,241 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:55,242 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-28 00:35:55,457 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3328.097214, max=3328.097214, mean=3328.097214, stddev=0.0, median=3328.097214, p75=3328.097214, p95=3328.097214, p98=3328.097214, p99=3328.097214, p999=3328.097214, mean_rate=0.2421398742950795, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-28 00:35:55,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-28 00:35:55,459 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-28 00:35:55,459 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230728 00:35:55.827" endtime="20230728 00:35:55.828"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:35:55.828" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:35:55.828" endtime="20230728 00:35:55.829"/>
</kw>
<status status="PASS" starttime="20230728 00:35:44.652" endtime="20230728 00:35:55.829"/>
</kw>
<msg timestamp="20230728 00:35:55.829" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:44.652" endtime="20230728 00:35:55.829"/>
</kw>
<msg timestamp="20230728 00:35:55.829" level="INFO">${result} = 2023-07-28 00:35:47,835 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:48,043 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:44.651" endtime="20230728 00:35:55.829"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:35:55.829" endtime="20230728 00:35:55.830"/>
</kw>
<status status="PASS" starttime="20230728 00:35:44.649" endtime="20230728 00:35:55.830"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:35:55.838" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p BzO2j373DC  2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:06.042" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:06.042" level="INFO">${output} = 2023-07-28 00:35:58,624 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:58,843 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:55.835" endtime="20230728 00:36:06.042"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:06.043" level="INFO">2023-07-28 00:35:58,624 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:58,843 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-28 00:35:58,843 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-28 00:35:58,932 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BzO2j373DC and number-of-tests 1
2023-07-28 00:35:58,991 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:35:59,996 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:36:00,996 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:36:01,997 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:36:02,337 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-28 00:36:02,997 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:36:03,998 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-28 00:36:04,998 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-28 00:36:05,673 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=60.062529, max=60.062529, mean=60.062529, stddev=0.0, median=60.062529, p75=60.062529, p95=60.062529, p98=60.062529, p99=60.062529, p999=60.062529, mean_rate=0.9157517795094624, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-28 00:36:05,676 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-07-28 00:36:05,677 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-28 00:36:05,677 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230728 00:36:06.043" endtime="20230728 00:36:06.044"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:06.044" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:06.044" endtime="20230728 00:36:06.044"/>
</kw>
<status status="PASS" starttime="20230728 00:35:55.835" endtime="20230728 00:36:06.045"/>
</kw>
<msg timestamp="20230728 00:36:06.045" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:35:55.834" endtime="20230728 00:36:06.045"/>
</kw>
<msg timestamp="20230728 00:36:06.045" level="INFO">${result} = 2023-07-28 00:35:58,624 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-28 00:35:58,843 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230728 00:35:55.834" endtime="20230728 00:36:06.045"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:36:06.045" endtime="20230728 00:36:06.046"/>
</kw>
<status status="PASS" starttime="20230728 00:35:55.830" endtime="20230728 00:36:06.046"/>
</kw>
<status status="PASS" starttime="20230728 00:35:44.648" endtime="20230728 00:36:06.046"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230728 00:35:08.663" endtime="20230728 00:36:06.046"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230728 00:35:08.452" endtime="20230728 00:36:06.048"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:06.061" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:13.900" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:13.900" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:06.058" endtime="20230728 00:36:13.900"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:13.902" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:13.901" endtime="20230728 00:36:13.902"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:13.903" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:13.902" endtime="20230728 00:36:13.903"/>
</kw>
<status status="PASS" starttime="20230728 00:36:06.057" endtime="20230728 00:36:13.903"/>
</kw>
<msg timestamp="20230728 00:36:13.903" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:36:06.057" endtime="20230728 00:36:13.904"/>
</kw>
<msg timestamp="20230728 00:36:13.904" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:06.056" endtime="20230728 00:36:13.904"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:36:13.904" endtime="20230728 00:36:13.904"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:13.909" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:19.812" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:19.812" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:13.906" endtime="20230728 00:36:19.812"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:19.813" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:19.812" endtime="20230728 00:36:19.813"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:19.814" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:19.814" endtime="20230728 00:36:19.814"/>
</kw>
<status status="PASS" starttime="20230728 00:36:13.906" endtime="20230728 00:36:19.815"/>
</kw>
<msg timestamp="20230728 00:36:19.815" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:36:13.905" endtime="20230728 00:36:19.815"/>
</kw>
<msg timestamp="20230728 00:36:19.815" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:13.905" endtime="20230728 00:36:19.815"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:36:19.815" endtime="20230728 00:36:19.816"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230728 00:36:06.056" endtime="20230728 00:36:19.816"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:19.822" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230728 00:36:19.824" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:19.824" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:19.819" endtime="20230728 00:36:19.824"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:19.826" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:19.825" endtime="20230728 00:36:19.826"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:19.826" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:19.826" endtime="20230728 00:36:19.826"/>
</kw>
<status status="PASS" starttime="20230728 00:36:19.818" endtime="20230728 00:36:19.827"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:19.831" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:30.342" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:30.342" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:19.829" endtime="20230728 00:36:30.342"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:30.343" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:30.342" endtime="20230728 00:36:30.344"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:30.345" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:30.344" endtime="20230728 00:36:30.345"/>
</kw>
<status status="PASS" starttime="20230728 00:36:19.828" endtime="20230728 00:36:30.345"/>
</kw>
<msg timestamp="20230728 00:36:30.345" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:36:19.828" endtime="20230728 00:36:30.345"/>
</kw>
<msg timestamp="20230728 00:36:30.345" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:19.827" endtime="20230728 00:36:30.345"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:36:30.346" endtime="20230728 00:36:30.346"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:30.350" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:30.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:30.354" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:30.347" endtime="20230728 00:36:30.354"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:30.355" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:30.355" endtime="20230728 00:36:30.355"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:30.356" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:30.356" endtime="20230728 00:36:30.356"/>
</kw>
<status status="PASS" starttime="20230728 00:36:30.346" endtime="20230728 00:36:30.356"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230728 00:36:19.817" endtime="20230728 00:36:30.357"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230728 00:36:30.359" level="INFO">${random} = 77980</msg>
<status status="PASS" starttime="20230728 00:36:30.359" endtime="20230728 00:36:30.359"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:30.364" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-77980 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:39.503" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:39.503" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:30.361" endtime="20230728 00:36:39.503"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:39.505" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:39.504" endtime="20230728 00:36:39.505"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:39.506" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:39.505" endtime="20230728 00:36:39.506"/>
</kw>
<status status="PASS" starttime="20230728 00:36:30.361" endtime="20230728 00:36:39.506"/>
</kw>
<msg timestamp="20230728 00:36:39.506" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230728 00:36:30.360" endtime="20230728 00:36:39.506"/>
</kw>
<msg timestamp="20230728 00:36:39.507" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:30.359" endtime="20230728 00:36:39.507"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:36:39.507" endtime="20230728 00:36:39.507"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:39.511" level="INFO">Running command 'cat /tmp/key-77980 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:39.515" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:39.515" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230728 00:36:39.508" endtime="20230728 00:36:39.515"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:39.516" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230728 00:36:39.515" endtime="20230728 00:36:39.516"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:39.516" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:39.516" endtime="20230728 00:36:39.517"/>
</kw>
<msg timestamp="20230728 00:36:39.517" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230728 00:36:39.508" endtime="20230728 00:36:39.517"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230728 00:36:39.517" endtime="20230728 00:36:39.517"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230728 00:36:39.521" level="INFO">Running command 'rm /tmp/key-77980 2&gt;&amp;1'.</msg>
<msg timestamp="20230728 00:36:39.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20230728 00:36:39.524" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230728 00:36:39.518" endtime="20230728 00:36:39.524"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230728 00:36:39.525" level="INFO"/>
<status status="PASS" starttime="20230728 00:36:39.524" endtime="20230728 00:36:39.525"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230728 00:36:39.527" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230728 00:36:39.525" endtime="20230728 00:36:39.527"/>
</kw>
<status status="PASS" starttime="20230728 00:36:39.518" endtime="20230728 00:36:39.527"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230728 00:36:30.358" endtime="20230728 00:36:39.528"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230728 00:36:06.049" endtime="20230728 00:36:39.529"/>
</suite>
<status status="PASS" starttime="20230728 00:35:08.365" endtime="20230728 00:36:39.532"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
