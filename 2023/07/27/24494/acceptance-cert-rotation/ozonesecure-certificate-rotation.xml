<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1 (Python 3.8.10 on linux)" generated="20230727 19:21:32.418" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:04.216" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:04.222" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:04.222" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230727 19:19:04.213" endtime="20230727 19:19:04.222"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:04.224" level="INFO">scm</msg>
<status status="PASS" starttime="20230727 19:19:04.223" endtime="20230727 19:19:04.224"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:04.224" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:04.224" endtime="20230727 19:19:04.225"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.212" endtime="20230727 19:19:04.225"/>
</kw>
<msg timestamp="20230727 19:19:04.225" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:04.212" endtime="20230727 19:19:04.225"/>
</kw>
<msg timestamp="20230727 19:19:04.225" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230727 19:19:04.210" endtime="20230727 19:19:04.226"/>
</kw>
<msg timestamp="20230727 19:19:04.226" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230727 19:19:04.209" endtime="20230727 19:19:04.226"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230727 19:19:04.227" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230727 19:19:04.226" endtime="20230727 19:19:04.227"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:04.239" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:04.307" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:04.307" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:19:04.230" endtime="20230727 19:19:04.307"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:04.309" level="INFO"/>
<status status="PASS" starttime="20230727 19:19:04.308" endtime="20230727 19:19:04.309"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:04.310" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:04.310" endtime="20230727 19:19:04.310"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.229" endtime="20230727 19:19:04.311"/>
</kw>
<msg timestamp="20230727 19:19:04.311" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:04.229" endtime="20230727 19:19:04.311"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.228" endtime="20230727 19:19:04.311"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.227" endtime="20230727 19:19:04.311"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.209" endtime="20230727 19:19:04.311"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.208" endtime="20230727 19:19:04.311"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.207" endtime="20230727 19:19:04.312"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230727 19:19:04.315" level="INFO">${random} = yEsL7sEojZ</msg>
<status status="PASS" starttime="20230727 19:19:04.315" endtime="20230727 19:19:04.315"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:04.325" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p yEsL7sEojZ  2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:23.322" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:23.322" level="INFO">${output} = 2023-07-27 19:19:09,845 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:10,176 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:19:04.319" endtime="20230727 19:19:23.322"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:23.324" level="INFO">2023-07-27 19:19:09,845 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:10,176 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-27 19:19:10,176 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-27 19:19:10,318 [main] INFO freon.BaseFreonGenerator: Executing test with prefix yEsL7sEojZ and number-of-tests 1
2023-07-27 19:19:10,414 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:11,418 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:12,419 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:13,420 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:14,423 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:14,452 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-07-27 19:19:14,618 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-07-27 19:19:15,424 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:15,690 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-27 19:19:15,779 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-27 19:19:16,225 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-27 19:19:16,426 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:17,427 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:18,430 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:19,431 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:20,431 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:21,432 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:22,433 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-27 19:19:22,914 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=7477.51162, max=7477.51162, mean=7477.51162, stddev=0.0, median=7477.51162, p75=7477.51162, p95=7477.51162, p98=7477.51162, p99=7477.51162, p999=7477.51162, mean_rate=0.12209620533137647, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-27 19:19:22,915 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 13
2023-07-27 19:19:22,915 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-27 19:19:22,915 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230727 19:19:23.323" endtime="20230727 19:19:23.325"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:23.326" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:23.325" endtime="20230727 19:19:23.326"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.319" endtime="20230727 19:19:23.326"/>
</kw>
<msg timestamp="20230727 19:19:23.326" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:04.318" endtime="20230727 19:19:23.326"/>
</kw>
<msg timestamp="20230727 19:19:23.327" level="INFO">${result} = 2023-07-27 19:19:09,845 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:10,176 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:19:04.317" endtime="20230727 19:19:23.327"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:19:23.327" endtime="20230727 19:19:23.327"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.316" endtime="20230727 19:19:23.328"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:23.337" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p yEsL7sEojZ  2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:39.851" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:39.851" level="INFO">${output} = 2023-07-27 19:19:29,681 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:29,956 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:19:23.333" endtime="20230727 19:19:39.851"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:39.853" level="INFO">2023-07-27 19:19:29,681 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:29,956 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-27 19:19:29,957 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-27 19:19:30,133 [main] INFO freon.BaseFreonGenerator: Executing test with prefix yEsL7sEojZ and number-of-tests 1
2023-07-27 19:19:30,213 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:31,216 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:32,216 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:33,242 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:34,243 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:34,536 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-27 19:19:35,243 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:36,244 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:37,244 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:38,245 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-27 19:19:39,371 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=155.990475, max=155.990475, mean=155.990475, stddev=0.0, median=155.990475, p75=155.990475, p95=155.990475, p98=155.990475, p99=155.990475, p999=155.990475, mean_rate=0.4925402151783785, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-27 19:19:39,374 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-07-27 19:19:39,387 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-27 19:19:39,387 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230727 19:19:39.852" endtime="20230727 19:19:39.853"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:39.854" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:39.853" endtime="20230727 19:19:39.854"/>
</kw>
<status status="PASS" starttime="20230727 19:19:23.333" endtime="20230727 19:19:39.854"/>
</kw>
<msg timestamp="20230727 19:19:39.854" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:23.332" endtime="20230727 19:19:39.854"/>
</kw>
<msg timestamp="20230727 19:19:39.855" level="INFO">${result} = 2023-07-27 19:19:29,681 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:29,956 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:19:23.330" endtime="20230727 19:19:39.855"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:19:39.855" endtime="20230727 19:19:39.856"/>
</kw>
<status status="PASS" starttime="20230727 19:19:23.328" endtime="20230727 19:19:39.856"/>
</kw>
<status status="PASS" starttime="20230727 19:19:04.314" endtime="20230727 19:19:39.856"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:39.863" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:42.147" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:42.147" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230727 19:19:39.859" endtime="20230727 19:19:42.147"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:42.149" level="INFO">40s</msg>
<status status="PASS" starttime="20230727 19:19:42.148" endtime="20230727 19:19:42.149"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:42.150" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:42.150" endtime="20230727 19:19:42.150"/>
</kw>
<status status="PASS" starttime="20230727 19:19:39.858" endtime="20230727 19:19:42.151"/>
</kw>
<msg timestamp="20230727 19:19:42.151" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:39.858" endtime="20230727 19:19:42.151"/>
</kw>
<msg timestamp="20230727 19:19:42.151" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230727 19:19:39.857" endtime="20230727 19:19:42.151"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230727 19:19:42.154" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230727 19:19:42.152" endtime="20230727 19:19:42.154"/>
</kw>
<msg timestamp="20230727 19:19:42.154" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230727 19:19:39.856" endtime="20230727 19:19:42.154"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230727 19:19:42.156" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230727 19:19:42.155" endtime="20230727 19:19:42.156"/>
</kw>
<msg timestamp="20230727 19:19:42.156" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230727 19:19:42.154" endtime="20230727 19:19:42.156"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:42.163" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:42.301" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:42.301" level="INFO">${output} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.159" endtime="20230727 19:19:42.301"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:42.302" level="INFO">C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.301" endtime="20230727 19:19:42.303"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:42.303" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:42.303" endtime="20230727 19:19:42.304"/>
</kw>
<status status="PASS" starttime="20230727 19:19:42.159" endtime="20230727 19:19:42.304"/>
</kw>
<msg timestamp="20230727 19:19:42.304" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:42.158" endtime="20230727 19:19:42.304"/>
</kw>
<msg timestamp="20230727 19:19:42.304" level="INFO">${certSerial} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.157" endtime="20230727 19:19:42.305"/>
</kw>
<msg timestamp="20230727 19:19:42.305" level="INFO">${certId1} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.157" endtime="20230727 19:19:42.305"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:42.314" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:42.469" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:42.469" level="INFO">${output} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.310" endtime="20230727 19:19:42.469"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:42.471" level="INFO">C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.470" endtime="20230727 19:19:42.471"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:42.472" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:42.472" endtime="20230727 19:19:42.473"/>
</kw>
<status status="PASS" starttime="20230727 19:19:42.309" endtime="20230727 19:19:42.473"/>
</kw>
<msg timestamp="20230727 19:19:42.473" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:42.308" endtime="20230727 19:19:42.473"/>
</kw>
<msg timestamp="20230727 19:19:42.473" level="INFO">${certSerial} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.307" endtime="20230727 19:19:42.473"/>
</kw>
<msg timestamp="20230727 19:19:42.474" level="INFO">${newCertId} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:42.307" endtime="20230727 19:19:42.474"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230727 19:19:42.475" level="FAIL">C3B9724E12 == C3B9724E12</msg>
<status status="FAIL" starttime="20230727 19:19:42.474" endtime="20230727 19:19:42.475"/>
</kw>
<status status="FAIL" starttime="20230727 19:19:42.306" endtime="20230727 19:19:42.475"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:47.499" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:47.632" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:47.632" level="INFO">${output} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:47.487" endtime="20230727 19:19:47.632"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:47.634" level="INFO">C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:47.633" endtime="20230727 19:19:47.634"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:47.636" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:47.635" endtime="20230727 19:19:47.637"/>
</kw>
<status status="PASS" starttime="20230727 19:19:47.485" endtime="20230727 19:19:47.637"/>
</kw>
<msg timestamp="20230727 19:19:47.637" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:47.484" endtime="20230727 19:19:47.638"/>
</kw>
<msg timestamp="20230727 19:19:47.638" level="INFO">${certSerial} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:47.482" endtime="20230727 19:19:47.638"/>
</kw>
<msg timestamp="20230727 19:19:47.638" level="INFO">${newCertId} = C3B9724E12</msg>
<status status="PASS" starttime="20230727 19:19:47.480" endtime="20230727 19:19:47.638"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230727 19:19:47.640" level="FAIL">C3B9724E12 == C3B9724E12</msg>
<status status="FAIL" starttime="20230727 19:19:47.639" endtime="20230727 19:19:47.640"/>
</kw>
<status status="FAIL" starttime="20230727 19:19:47.479" endtime="20230727 19:19:47.640"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:52.649" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:19:52.744" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:19:52.745" level="INFO">${output} = C58029DA81</msg>
<status status="PASS" starttime="20230727 19:19:52.645" endtime="20230727 19:19:52.745"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:19:52.747" level="INFO">C58029DA81</msg>
<status status="PASS" starttime="20230727 19:19:52.746" endtime="20230727 19:19:52.747"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:19:52.748" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:19:52.747" endtime="20230727 19:19:52.749"/>
</kw>
<status status="PASS" starttime="20230727 19:19:52.645" endtime="20230727 19:19:52.749"/>
</kw>
<msg timestamp="20230727 19:19:52.749" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:52.644" endtime="20230727 19:19:52.749"/>
</kw>
<msg timestamp="20230727 19:19:52.750" level="INFO">${certSerial} = C58029DA81</msg>
<status status="PASS" starttime="20230727 19:19:52.643" endtime="20230727 19:19:52.750"/>
</kw>
<msg timestamp="20230727 19:19:52.750" level="INFO">${newCertId} = C58029DA81</msg>
<status status="PASS" starttime="20230727 19:19:52.643" endtime="20230727 19:19:52.750"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230727 19:19:52.750" endtime="20230727 19:19:52.751"/>
</kw>
<status status="PASS" starttime="20230727 19:19:52.642" endtime="20230727 19:19:52.752"/>
</kw>
<status status="PASS" starttime="20230727 19:19:42.305" endtime="20230727 19:19:52.752"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230727 19:19:52.754" level="INFO">${random} = WSayO6K4j5</msg>
<status status="PASS" starttime="20230727 19:19:52.753" endtime="20230727 19:19:52.754"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:19:52.762" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p WSayO6K4j5  2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:20:07.675" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:07.675" level="INFO">${output} = 2023-07-27 19:19:56,862 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:57,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:19:52.758" endtime="20230727 19:20:07.675"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:07.679" level="INFO">2023-07-27 19:19:56,862 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:57,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-27 19:19:57,244 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-27 19:19:57,550 [main] INFO freon.BaseFreonGenerator: Executing test with prefix WSayO6K4j5 and number-of-tests 1
2023-07-27 19:19:57,651 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:58,661 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:19:59,664 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:00,664 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:01,665 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:02,665 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:03,468 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-27 19:20:03,580 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-27 19:20:03,668 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:04,305 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-27 19:20:04,668 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:05,669 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:06,669 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-27 19:20:07,181 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3490.874143, max=3490.874143, mean=3490.874143, stddev=0.0, median=3490.874143, p75=3490.874143, p95=3490.874143, p98=3490.874143, p99=3490.874143, p999=3490.874143, mean_rate=0.2370707625340585, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-27 19:20:07,183 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-07-27 19:20:07,183 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-27 19:20:07,183 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230727 19:20:07.678" endtime="20230727 19:20:07.680"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:07.681" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:07.680" endtime="20230727 19:20:07.681"/>
</kw>
<status status="PASS" starttime="20230727 19:19:52.757" endtime="20230727 19:20:07.681"/>
</kw>
<msg timestamp="20230727 19:20:07.681" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:19:52.757" endtime="20230727 19:20:07.682"/>
</kw>
<msg timestamp="20230727 19:20:07.682" level="INFO">${result} = 2023-07-27 19:19:56,862 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:19:57,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:19:52.756" endtime="20230727 19:20:07.682"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:20:07.682" endtime="20230727 19:20:07.684"/>
</kw>
<status status="PASS" starttime="20230727 19:19:52.754" endtime="20230727 19:20:07.684"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:07.696" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p WSayO6K4j5  2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:20:22.188" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:22.188" level="INFO">${output} = 2023-07-27 19:20:12,262 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:20:12,439 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:20:07.690" endtime="20230727 19:20:22.188"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:22.190" level="INFO">2023-07-27 19:20:12,262 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:20:12,439 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-27 19:20:12,440 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-27 19:20:12,565 [main] INFO freon.BaseFreonGenerator: Executing test with prefix WSayO6K4j5 and number-of-tests 1
2023-07-27 19:20:12,640 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:13,649 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:14,666 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:15,667 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:16,668 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:16,886 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-27 19:20:17,668 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:18,670 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:19,671 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-27 19:20:20,671 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-27 19:20:21,566 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=112.839739, max=112.839739, mean=112.839739, stddev=0.0, median=112.839739, p75=112.839739, p95=112.839739, p98=112.839739, p99=112.839739, p999=112.839739, mean_rate=0.9153590733317751, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-27 19:20:21,567 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-07-27 19:20:21,568 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-27 19:20:21,568 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230727 19:20:22.189" endtime="20230727 19:20:22.190"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:22.191" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:22.191" endtime="20230727 19:20:22.191"/>
</kw>
<status status="PASS" starttime="20230727 19:20:07.689" endtime="20230727 19:20:22.192"/>
</kw>
<msg timestamp="20230727 19:20:22.192" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:20:07.689" endtime="20230727 19:20:22.192"/>
</kw>
<msg timestamp="20230727 19:20:22.192" level="INFO">${result} = 2023-07-27 19:20:12,262 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-27 19:20:12,439 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230727 19:20:07.687" endtime="20230727 19:20:22.192"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:20:22.192" endtime="20230727 19:20:22.193"/>
</kw>
<status status="PASS" starttime="20230727 19:20:07.684" endtime="20230727 19:20:22.193"/>
</kw>
<status status="PASS" starttime="20230727 19:19:52.752" endtime="20230727 19:20:22.193"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230727 19:19:04.312" endtime="20230727 19:20:22.194"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230727 19:19:04.116" endtime="20230727 19:20:22.196"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:22.217" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:20:33.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:33.217" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:22.214" endtime="20230727 19:20:33.217"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:33.219" level="INFO"/>
<status status="PASS" starttime="20230727 19:20:33.218" endtime="20230727 19:20:33.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:33.223" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:33.221" endtime="20230727 19:20:33.223"/>
</kw>
<status status="PASS" starttime="20230727 19:20:22.213" endtime="20230727 19:20:33.223"/>
</kw>
<msg timestamp="20230727 19:20:33.223" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:20:22.213" endtime="20230727 19:20:33.223"/>
</kw>
<msg timestamp="20230727 19:20:33.224" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:22.212" endtime="20230727 19:20:33.224"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:20:33.224" endtime="20230727 19:20:33.224"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:33.232" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:20:43.542" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:43.542" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:33.229" endtime="20230727 19:20:43.542"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:43.544" level="INFO"/>
<status status="PASS" starttime="20230727 19:20:43.543" endtime="20230727 19:20:43.545"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:43.546" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:43.545" endtime="20230727 19:20:43.547"/>
</kw>
<status status="PASS" starttime="20230727 19:20:33.227" endtime="20230727 19:20:43.548"/>
</kw>
<msg timestamp="20230727 19:20:43.548" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:20:33.226" endtime="20230727 19:20:43.548"/>
</kw>
<msg timestamp="20230727 19:20:43.549" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:33.225" endtime="20230727 19:20:43.549"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:20:43.549" endtime="20230727 19:20:43.550"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230727 19:20:22.211" endtime="20230727 19:20:43.550"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:43.562" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230727 19:20:43.565" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:43.566" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:43.556" endtime="20230727 19:20:43.566"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:43.568" level="INFO"/>
<status status="PASS" starttime="20230727 19:20:43.567" endtime="20230727 19:20:43.568"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:43.569" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:43.568" endtime="20230727 19:20:43.569"/>
</kw>
<status status="PASS" starttime="20230727 19:20:43.555" endtime="20230727 19:20:43.570"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:43.577" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:20:57.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:57.902" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:43.573" endtime="20230727 19:20:57.902"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:57.904" level="INFO"/>
<status status="PASS" starttime="20230727 19:20:57.903" endtime="20230727 19:20:57.904"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:57.906" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:57.905" endtime="20230727 19:20:57.906"/>
</kw>
<status status="PASS" starttime="20230727 19:20:43.573" endtime="20230727 19:20:57.906"/>
</kw>
<msg timestamp="20230727 19:20:57.906" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:20:43.572" endtime="20230727 19:20:57.906"/>
</kw>
<msg timestamp="20230727 19:20:57.906" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:43.570" endtime="20230727 19:20:57.907"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:20:57.907" endtime="20230727 19:20:57.907"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:57.911" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:20:57.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:20:57.916" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:57.908" endtime="20230727 19:20:57.916"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:20:57.917" level="INFO"/>
<status status="PASS" starttime="20230727 19:20:57.916" endtime="20230727 19:20:57.917"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:20:57.918" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:20:57.917" endtime="20230727 19:20:57.918"/>
</kw>
<status status="PASS" starttime="20230727 19:20:57.908" endtime="20230727 19:20:57.918"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230727 19:20:43.553" endtime="20230727 19:20:57.918"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230727 19:20:57.921" level="INFO">${random} = 73480</msg>
<status status="PASS" starttime="20230727 19:20:57.921" endtime="20230727 19:20:57.921"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:20:57.927" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-73480 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:21:11.827" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:21:11.828" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:57.924" endtime="20230727 19:21:11.828"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:21:11.829" level="INFO"/>
<status status="PASS" starttime="20230727 19:21:11.828" endtime="20230727 19:21:11.830"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:21:11.830" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:21:11.830" endtime="20230727 19:21:11.831"/>
</kw>
<status status="PASS" starttime="20230727 19:20:57.923" endtime="20230727 19:21:11.831"/>
</kw>
<msg timestamp="20230727 19:21:11.831" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230727 19:20:57.923" endtime="20230727 19:21:11.831"/>
</kw>
<msg timestamp="20230727 19:21:11.831" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:20:57.922" endtime="20230727 19:21:11.831"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:21:11.832" endtime="20230727 19:21:11.832"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:21:11.838" level="INFO">Running command 'cat /tmp/key-73480 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:21:11.842" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:21:11.842" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230727 19:21:11.833" endtime="20230727 19:21:11.842"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:21:11.844" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230727 19:21:11.843" endtime="20230727 19:21:11.844"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:21:11.845" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:21:11.844" endtime="20230727 19:21:11.845"/>
</kw>
<msg timestamp="20230727 19:21:11.845" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230727 19:21:11.832" endtime="20230727 19:21:11.845"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230727 19:21:11.845" endtime="20230727 19:21:11.846"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230727 19:21:11.851" level="INFO">Running command 'rm /tmp/key-73480 2&gt;&amp;1'.</msg>
<msg timestamp="20230727 19:21:11.855" level="INFO">${rc} = 0</msg>
<msg timestamp="20230727 19:21:11.856" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230727 19:21:11.847" endtime="20230727 19:21:11.856"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230727 19:21:11.857" level="INFO"/>
<status status="PASS" starttime="20230727 19:21:11.857" endtime="20230727 19:21:11.858"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230727 19:21:11.858" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230727 19:21:11.858" endtime="20230727 19:21:11.859"/>
</kw>
<status status="PASS" starttime="20230727 19:21:11.846" endtime="20230727 19:21:11.859"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230727 19:20:57.920" endtime="20230727 19:21:11.859"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230727 19:20:22.200" endtime="20230727 19:21:11.861"/>
</suite>
<status status="PASS" starttime="20230727 19:19:04.053" endtime="20230727 19:21:11.865"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
