<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1 (Python 3.8.10 on linux)" generated="20230722 09:04:42.152" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:01.352" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:01.366" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:01.366" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230722 09:03:01.347" endtime="20230722 09:03:01.366"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:01.367" level="INFO">scm</msg>
<status status="PASS" starttime="20230722 09:03:01.366" endtime="20230722 09:03:01.367"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:01.367" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:01.367" endtime="20230722 09:03:01.368"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.347" endtime="20230722 09:03:01.368"/>
</kw>
<msg timestamp="20230722 09:03:01.368" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:01.346" endtime="20230722 09:03:01.368"/>
</kw>
<msg timestamp="20230722 09:03:01.368" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230722 09:03:01.346" endtime="20230722 09:03:01.368"/>
</kw>
<msg timestamp="20230722 09:03:01.368" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230722 09:03:01.345" endtime="20230722 09:03:01.368"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230722 09:03:01.369" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230722 09:03:01.369" endtime="20230722 09:03:01.369"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:01.385" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:01.649" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:01.649" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:03:01.371" endtime="20230722 09:03:01.649"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:01.650" level="INFO"/>
<status status="PASS" starttime="20230722 09:03:01.649" endtime="20230722 09:03:01.650"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:01.651" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:01.650" endtime="20230722 09:03:01.651"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.371" endtime="20230722 09:03:01.651"/>
</kw>
<msg timestamp="20230722 09:03:01.652" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:01.370" endtime="20230722 09:03:01.652"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.370" endtime="20230722 09:03:01.652"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.369" endtime="20230722 09:03:01.652"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.345" endtime="20230722 09:03:01.652"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.344" endtime="20230722 09:03:01.652"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.343" endtime="20230722 09:03:01.652"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230722 09:03:01.660" level="INFO">${random} = xfEWGr6ibr</msg>
<status status="PASS" starttime="20230722 09:03:01.657" endtime="20230722 09:03:01.660"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:01.674" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p xfEWGr6ibr  2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:19.134" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:19.134" level="INFO">${output} = 2023-07-22 09:03:08,278 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:08,465 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:01.668" endtime="20230722 09:03:19.134"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:19.136" level="INFO">2023-07-22 09:03:08,278 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:08,465 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-22 09:03:08,465 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-22 09:03:08,557 [main] INFO freon.BaseFreonGenerator: Executing test with prefix xfEWGr6ibr and number-of-tests 1
2023-07-22 09:03:08,629 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:09,632 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:10,633 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:11,065 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-07-22 09:03:11,258 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-07-22 09:03:11,633 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:11,840 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-22 09:03:11,908 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-22 09:03:12,224 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-22 09:03:12,633 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:13,634 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:14,634 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:15,635 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:16,639 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:17,640 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:18,641 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-22 09:03:18,746 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=6538.315097, max=6538.315097, mean=6538.315097, stddev=0.0, median=6538.315097, p75=6538.315097, p95=6538.315097, p98=6538.315097, p99=6538.315097, p999=6538.315097, mean_rate=0.13448969075731004, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-22 09:03:18,748 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-07-22 09:03:18,748 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-22 09:03:18,748 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230722 09:03:19.135" endtime="20230722 09:03:19.136"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:19.137" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:19.136" endtime="20230722 09:03:19.137"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.667" endtime="20230722 09:03:19.137"/>
</kw>
<msg timestamp="20230722 09:03:19.137" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:01.665" endtime="20230722 09:03:19.137"/>
</kw>
<msg timestamp="20230722 09:03:19.138" level="INFO">${result} = 2023-07-22 09:03:08,278 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:08,465 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:01.664" endtime="20230722 09:03:19.138"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:03:19.138" endtime="20230722 09:03:19.138"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.660" endtime="20230722 09:03:19.138"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:19.145" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p xfEWGr6ibr  2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:32.732" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:32.732" level="INFO">${output} = 2023-07-22 09:03:24,105 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:25,270 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:19.142" endtime="20230722 09:03:32.732"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:32.733" level="INFO">2023-07-22 09:03:24,105 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:25,270 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-22 09:03:25,270 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-22 09:03:25,604 [main] INFO freon.BaseFreonGenerator: Executing test with prefix xfEWGr6ibr and number-of-tests 1
2023-07-22 09:03:25,884 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:26,886 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:27,887 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:28,887 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:29,420 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-22 09:03:29,888 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:30,888 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:31,888 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-22 09:03:32,355 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=74.324541, max=74.324541, mean=74.324541, stddev=0.0, median=74.324541, p75=74.324541, p95=74.324541, p98=74.324541, p99=74.324541, p999=74.324541, mean_rate=0.7726017208739125, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-22 09:03:32,356 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-07-22 09:03:32,356 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-22 09:03:32,356 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230722 09:03:32.732" endtime="20230722 09:03:32.733"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:32.734" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:32.733" endtime="20230722 09:03:32.734"/>
</kw>
<status status="PASS" starttime="20230722 09:03:19.141" endtime="20230722 09:03:32.734"/>
</kw>
<msg timestamp="20230722 09:03:32.734" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:19.141" endtime="20230722 09:03:32.734"/>
</kw>
<msg timestamp="20230722 09:03:32.735" level="INFO">${result} = 2023-07-22 09:03:24,105 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:25,270 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:19.140" endtime="20230722 09:03:32.735"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:03:32.735" endtime="20230722 09:03:32.735"/>
</kw>
<status status="PASS" starttime="20230722 09:03:19.139" endtime="20230722 09:03:32.735"/>
</kw>
<status status="PASS" starttime="20230722 09:03:01.655" endtime="20230722 09:03:32.735"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:32.742" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:34.627" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:34.628" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230722 09:03:32.737" endtime="20230722 09:03:34.628"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:34.629" level="INFO">40s</msg>
<status status="PASS" starttime="20230722 09:03:34.628" endtime="20230722 09:03:34.629"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:34.630" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:34.630" endtime="20230722 09:03:34.630"/>
</kw>
<status status="PASS" starttime="20230722 09:03:32.737" endtime="20230722 09:03:34.630"/>
</kw>
<msg timestamp="20230722 09:03:34.630" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:32.736" endtime="20230722 09:03:34.631"/>
</kw>
<msg timestamp="20230722 09:03:34.631" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230722 09:03:32.736" endtime="20230722 09:03:34.631"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230722 09:03:34.632" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230722 09:03:34.631" endtime="20230722 09:03:34.633"/>
</kw>
<msg timestamp="20230722 09:03:34.633" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230722 09:03:32.736" endtime="20230722 09:03:34.633"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230722 09:03:34.634" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230722 09:03:34.634" endtime="20230722 09:03:34.634"/>
</kw>
<msg timestamp="20230722 09:03:34.634" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230722 09:03:34.633" endtime="20230722 09:03:34.634"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:34.639" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:35.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:35.033" level="INFO">${output} = 01746EB66547</msg>
<status status="PASS" starttime="20230722 09:03:34.636" endtime="20230722 09:03:35.033"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:35.034" level="INFO">01746EB66547</msg>
<status status="PASS" starttime="20230722 09:03:35.034" endtime="20230722 09:03:35.035"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:35.035" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:35.035" endtime="20230722 09:03:35.035"/>
</kw>
<status status="PASS" starttime="20230722 09:03:34.636" endtime="20230722 09:03:35.036"/>
</kw>
<msg timestamp="20230722 09:03:35.036" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:34.636" endtime="20230722 09:03:35.036"/>
</kw>
<msg timestamp="20230722 09:03:35.036" level="INFO">${certSerial} = 01746EB66547</msg>
<status status="PASS" starttime="20230722 09:03:34.635" endtime="20230722 09:03:35.036"/>
</kw>
<msg timestamp="20230722 09:03:35.036" level="INFO">${certId1} = 01746EB66547</msg>
<status status="PASS" starttime="20230722 09:03:34.635" endtime="20230722 09:03:35.036"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:35.043" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:35.489" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:35.489" level="INFO">${output} = 0174B51851FA</msg>
<status status="PASS" starttime="20230722 09:03:35.040" endtime="20230722 09:03:35.489"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:35.494" level="INFO">0174B51851FA</msg>
<status status="PASS" starttime="20230722 09:03:35.491" endtime="20230722 09:03:35.494"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:35.501" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:35.496" endtime="20230722 09:03:35.502"/>
</kw>
<status status="PASS" starttime="20230722 09:03:35.039" endtime="20230722 09:03:35.502"/>
</kw>
<msg timestamp="20230722 09:03:35.502" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:35.039" endtime="20230722 09:03:35.502"/>
</kw>
<msg timestamp="20230722 09:03:35.503" level="INFO">${certSerial} = 0174B51851FA</msg>
<status status="PASS" starttime="20230722 09:03:35.038" endtime="20230722 09:03:35.504"/>
</kw>
<msg timestamp="20230722 09:03:35.504" level="INFO">${newCertId} = 0174B51851FA</msg>
<status status="PASS" starttime="20230722 09:03:35.038" endtime="20230722 09:03:35.504"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230722 09:03:35.505" endtime="20230722 09:03:35.505"/>
</kw>
<status status="PASS" starttime="20230722 09:03:35.037" endtime="20230722 09:03:35.506"/>
</kw>
<status status="PASS" starttime="20230722 09:03:35.036" endtime="20230722 09:03:35.506"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230722 09:03:35.512" level="INFO">${random} = LigU4tThyb</msg>
<status status="PASS" starttime="20230722 09:03:35.507" endtime="20230722 09:03:35.512"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:35.531" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p LigU4tThyb  2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:44.773" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:44.773" level="INFO">${output} = 2023-07-22 09:03:38,746 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:38,863 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:35.527" endtime="20230722 09:03:44.773"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:44.775" level="INFO">2023-07-22 09:03:38,746 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:38,863 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-22 09:03:38,863 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-22 09:03:38,951 [main] INFO freon.BaseFreonGenerator: Executing test with prefix LigU4tThyb and number-of-tests 1
2023-07-22 09:03:39,039 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:40,042 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:41,043 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:41,679 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-22 09:03:41,731 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-07-22 09:03:42,043 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:42,051 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-07-22 09:03:43,045 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:44,053 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-22 09:03:44,397 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2306.313523, max=2306.313523, mean=2306.313523, stddev=0.0, median=2306.313523, p75=2306.313523, p95=2306.313523, p98=2306.313523, p99=2306.313523, p999=2306.313523, mean_rate=0.3232949247291808, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-22 09:03:44,398 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-07-22 09:03:44,401 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-22 09:03:44,401 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230722 09:03:44.774" endtime="20230722 09:03:44.775"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:44.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:44.775" endtime="20230722 09:03:44.776"/>
</kw>
<status status="PASS" starttime="20230722 09:03:35.525" endtime="20230722 09:03:44.776"/>
</kw>
<msg timestamp="20230722 09:03:44.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:35.525" endtime="20230722 09:03:44.776"/>
</kw>
<msg timestamp="20230722 09:03:44.777" level="INFO">${result} = 2023-07-22 09:03:38,746 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:38,863 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:35.517" endtime="20230722 09:03:44.777"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:03:44.777" endtime="20230722 09:03:44.777"/>
</kw>
<status status="PASS" starttime="20230722 09:03:35.514" endtime="20230722 09:03:44.777"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:44.784" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p LigU4tThyb  2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:03:54.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:03:54.034" level="INFO">${output} = 2023-07-22 09:03:48,191 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:48,338 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:44.781" endtime="20230722 09:03:54.034"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:03:54.035" level="INFO">2023-07-22 09:03:48,191 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:48,338 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-07-22 09:03:48,338 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-07-22 09:03:48,420 [main] INFO freon.BaseFreonGenerator: Executing test with prefix LigU4tThyb and number-of-tests 1
2023-07-22 09:03:48,478 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:49,480 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:50,481 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:50,933 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-07-22 09:03:51,482 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:52,483 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-07-22 09:03:53,483 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-07-22 09:03:53,662 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=73.961338, max=73.961338, mean=73.961338, stddev=0.0, median=73.961338, p75=73.961338, p95=73.961338, p98=73.961338, p99=73.961338, p999=73.961338, mean_rate=0.8411457386409137, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-07-22 09:03:53,664 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-07-22 09:03:53,664 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-07-22 09:03:53,664 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230722 09:03:54.034" endtime="20230722 09:03:54.035"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:03:54.036" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:03:54.035" endtime="20230722 09:03:54.036"/>
</kw>
<status status="PASS" starttime="20230722 09:03:44.780" endtime="20230722 09:03:54.036"/>
</kw>
<msg timestamp="20230722 09:03:54.036" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:44.780" endtime="20230722 09:03:54.036"/>
</kw>
<msg timestamp="20230722 09:03:54.036" level="INFO">${result} = 2023-07-22 09:03:48,191 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-07-22 09:03:48,338 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230722 09:03:44.779" endtime="20230722 09:03:54.036"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:03:54.037" endtime="20230722 09:03:54.037"/>
</kw>
<status status="PASS" starttime="20230722 09:03:44.778" endtime="20230722 09:03:54.037"/>
</kw>
<status status="PASS" starttime="20230722 09:03:35.506" endtime="20230722 09:03:54.037"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230722 09:03:01.653" endtime="20230722 09:03:54.037"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230722 09:03:01.280" endtime="20230722 09:03:54.039"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:03:54.053" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:00.734" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:00.734" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:03:54.050" endtime="20230722 09:04:00.734"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:00.736" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:00.735" endtime="20230722 09:04:00.736"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:00.736" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:00.736" endtime="20230722 09:04:00.737"/>
</kw>
<status status="PASS" starttime="20230722 09:03:54.050" endtime="20230722 09:04:00.737"/>
</kw>
<msg timestamp="20230722 09:04:00.737" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:03:54.050" endtime="20230722 09:04:00.737"/>
</kw>
<msg timestamp="20230722 09:04:00.737" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:03:54.049" endtime="20230722 09:04:00.737"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:04:00.737" endtime="20230722 09:04:00.738"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:00.742" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:08.182" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:08.182" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:00.740" endtime="20230722 09:04:08.182"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:08.184" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:08.183" endtime="20230722 09:04:08.184"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:08.185" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:08.184" endtime="20230722 09:04:08.185"/>
</kw>
<status status="PASS" starttime="20230722 09:04:00.739" endtime="20230722 09:04:08.185"/>
</kw>
<msg timestamp="20230722 09:04:08.185" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:04:00.739" endtime="20230722 09:04:08.186"/>
</kw>
<msg timestamp="20230722 09:04:08.186" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:00.738" endtime="20230722 09:04:08.186"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:04:08.186" endtime="20230722 09:04:08.186"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230722 09:03:54.048" endtime="20230722 09:04:08.187"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:08.192" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230722 09:04:08.194" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:08.194" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:08.189" endtime="20230722 09:04:08.194"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:08.196" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:08.195" endtime="20230722 09:04:08.196"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:08.196" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:08.196" endtime="20230722 09:04:08.196"/>
</kw>
<status status="PASS" starttime="20230722 09:04:08.188" endtime="20230722 09:04:08.197"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:08.203" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:16.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:16.275" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:08.200" endtime="20230722 09:04:16.275"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:16.276" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:16.275" endtime="20230722 09:04:16.276"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:16.277" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:16.276" endtime="20230722 09:04:16.277"/>
</kw>
<status status="PASS" starttime="20230722 09:04:08.198" endtime="20230722 09:04:16.278"/>
</kw>
<msg timestamp="20230722 09:04:16.282" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:04:08.198" endtime="20230722 09:04:16.282"/>
</kw>
<msg timestamp="20230722 09:04:16.282" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:08.197" endtime="20230722 09:04:16.282"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:04:16.282" endtime="20230722 09:04:16.283"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:16.295" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:16.302" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:16.302" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:16.287" endtime="20230722 09:04:16.302"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:16.304" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:16.303" endtime="20230722 09:04:16.304"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:16.304" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:16.304" endtime="20230722 09:04:16.304"/>
</kw>
<status status="PASS" starttime="20230722 09:04:16.284" endtime="20230722 09:04:16.305"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230722 09:04:08.188" endtime="20230722 09:04:16.305"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230722 09:04:16.319" level="INFO">${random} = 93855</msg>
<status status="PASS" starttime="20230722 09:04:16.319" endtime="20230722 09:04:16.320"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:16.325" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-93855 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:24.382" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:24.382" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:16.322" endtime="20230722 09:04:24.382"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:24.383" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:24.382" endtime="20230722 09:04:24.383"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:24.384" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:24.384" endtime="20230722 09:04:24.384"/>
</kw>
<status status="PASS" starttime="20230722 09:04:16.321" endtime="20230722 09:04:24.384"/>
</kw>
<msg timestamp="20230722 09:04:24.384" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230722 09:04:16.321" endtime="20230722 09:04:24.385"/>
</kw>
<msg timestamp="20230722 09:04:24.385" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:16.320" endtime="20230722 09:04:24.385"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:04:24.385" endtime="20230722 09:04:24.385"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:24.389" level="INFO">Running command 'cat /tmp/key-93855 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:24.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:24.392" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230722 09:04:24.386" endtime="20230722 09:04:24.392"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:24.394" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230722 09:04:24.393" endtime="20230722 09:04:24.394"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:24.394" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:24.394" endtime="20230722 09:04:24.395"/>
</kw>
<msg timestamp="20230722 09:04:24.395" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230722 09:04:24.386" endtime="20230722 09:04:24.395"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230722 09:04:24.395" endtime="20230722 09:04:24.396"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230722 09:04:24.399" level="INFO">Running command 'rm /tmp/key-93855 2&gt;&amp;1'.</msg>
<msg timestamp="20230722 09:04:24.402" level="INFO">${rc} = 0</msg>
<msg timestamp="20230722 09:04:24.402" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230722 09:04:24.396" endtime="20230722 09:04:24.402"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230722 09:04:24.403" level="INFO"/>
<status status="PASS" starttime="20230722 09:04:24.402" endtime="20230722 09:04:24.403"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230722 09:04:24.404" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230722 09:04:24.403" endtime="20230722 09:04:24.404"/>
</kw>
<status status="PASS" starttime="20230722 09:04:24.396" endtime="20230722 09:04:24.404"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230722 09:04:16.318" endtime="20230722 09:04:24.404"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230722 09:03:54.041" endtime="20230722 09:04:24.405"/>
</suite>
<status status="PASS" starttime="20230722 09:03:01.213" endtime="20230722 09:04:24.407"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
