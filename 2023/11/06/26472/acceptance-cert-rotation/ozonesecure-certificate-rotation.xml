<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20231106 09:20:04.296" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:17:56.911" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:17:56.925" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:17:56.925" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20231106 09:17:56.901" endtime="20231106 09:17:56.925"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:17:56.926" level="INFO">scm</msg>
<status status="PASS" starttime="20231106 09:17:56.926" endtime="20231106 09:17:56.927"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:17:56.927" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:17:56.927" endtime="20231106 09:17:56.927"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.897" endtime="20231106 09:17:56.927"/>
</kw>
<msg timestamp="20231106 09:17:56.928" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:17:56.897" endtime="20231106 09:17:56.928"/>
</kw>
<msg timestamp="20231106 09:17:56.928" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20231106 09:17:56.896" endtime="20231106 09:17:56.928"/>
</kw>
<msg timestamp="20231106 09:17:56.928" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231106 09:17:56.889" endtime="20231106 09:17:56.928"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231106 09:17:56.929" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231106 09:17:56.928" endtime="20231106 09:17:56.929"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:17:56.954" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:17:57.022" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:17:57.022" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:17:56.945" endtime="20231106 09:17:57.023"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:17:57.024" level="INFO"/>
<status status="PASS" starttime="20231106 09:17:57.023" endtime="20231106 09:17:57.024"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:17:57.024" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:17:57.024" endtime="20231106 09:17:57.025"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.944" endtime="20231106 09:17:57.025"/>
</kw>
<msg timestamp="20231106 09:17:57.025" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:17:56.944" endtime="20231106 09:17:57.025"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.943" endtime="20231106 09:17:57.025"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.929" endtime="20231106 09:17:57.025"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.889" endtime="20231106 09:17:57.025"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.888" endtime="20231106 09:17:57.025"/>
</kw>
<status status="PASS" starttime="20231106 09:17:56.888" endtime="20231106 09:17:57.026"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20231106 09:17:57.036" level="INFO">${random} = BlCQdPqp2R</msg>
<status status="PASS" starttime="20231106 09:17:57.035" endtime="20231106 09:17:57.036"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:17:57.064" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p BlCQdPqp2R  2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:17.564" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:17.565" level="INFO">${output} = 2023-11-06 09:18:02,317 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:02,487 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:17:57.053" endtime="20231106 09:18:17.565"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:17.566" level="INFO">2023-11-06 09:18:02,317 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:02,487 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-11-06 09:18:02,487 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-11-06 09:18:02,605 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BlCQdPqp2R and number-of-tests 1
2023-11-06 09:18:02,703 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:03,704 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:04,705 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:05,705 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:05,870 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-11-06 09:18:06,125 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-11-06 09:18:06,706 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:06,994 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-11-06 09:18:07,098 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-11-06 09:18:07,596 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-11-06 09:18:07,706 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:08,707 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:09,713 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:10,713 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:11,714 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:12,716 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:13,720 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:14,721 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:15,721 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:16,722 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-11-06 09:18:16,896 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=9947.94956, max=9947.94956, mean=9947.94956, stddev=0.0, median=9947.94956, p75=9947.94956, p95=9947.94956, p98=9947.94956, p99=9947.94956, p999=9947.94956, mean_rate=0.09372710029317226, m1=0.015991117074135343, m5=0.0033057092356765017, m15=0.0011080303990206543, rate_unit=events/second, duration_unit=milliseconds
2023-11-06 09:18:16,897 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 14
2023-11-06 09:18:16,904 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-11-06 09:18:16,904 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231106 09:18:17.565" endtime="20231106 09:18:17.567"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:17.568" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:17.567" endtime="20231106 09:18:17.568"/>
</kw>
<status status="PASS" starttime="20231106 09:17:57.053" endtime="20231106 09:18:17.569"/>
</kw>
<msg timestamp="20231106 09:18:17.569" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:17:57.052" endtime="20231106 09:18:17.569"/>
</kw>
<msg timestamp="20231106 09:18:17.570" level="INFO">${result} = 2023-11-06 09:18:02,317 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:02,487 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:17:57.045" endtime="20231106 09:18:17.570"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:18:17.570" endtime="20231106 09:18:17.571"/>
</kw>
<status status="PASS" starttime="20231106 09:17:57.036" endtime="20231106 09:18:17.571"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:17.579" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p BlCQdPqp2R  2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:29.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:29.994" level="INFO">${output} = 2023-11-06 09:18:22,602 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:22,798 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:18:17.576" endtime="20231106 09:18:29.994"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:29.996" level="INFO">2023-11-06 09:18:22,602 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:22,798 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-11-06 09:18:22,798 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-11-06 09:18:22,949 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BlCQdPqp2R and number-of-tests 1
2023-11-06 09:18:23,047 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:24,051 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:25,052 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:26,053 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:26,585 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-11-06 09:18:27,053 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:28,054 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:29,054 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-11-06 09:18:29,617 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=130.37804, max=130.37804, mean=130.37804, stddev=0.0, median=130.37804, p75=130.37804, p95=130.37804, p98=130.37804, p99=130.37804, p999=130.37804, mean_rate=0.8685396955654068, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-11-06 09:18:29,618 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-11-06 09:18:29,618 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-11-06 09:18:29,618 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231106 09:18:29.995" endtime="20231106 09:18:29.996"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:29.998" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:29.997" endtime="20231106 09:18:29.998"/>
</kw>
<status status="PASS" starttime="20231106 09:18:17.575" endtime="20231106 09:18:29.998"/>
</kw>
<msg timestamp="20231106 09:18:29.999" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:17.574" endtime="20231106 09:18:29.999"/>
</kw>
<msg timestamp="20231106 09:18:29.999" level="INFO">${result} = 2023-11-06 09:18:22,602 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:22,798 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:18:17.573" endtime="20231106 09:18:29.999"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:18:30.000" endtime="20231106 09:18:30.000"/>
</kw>
<status status="PASS" starttime="20231106 09:18:17.571" endtime="20231106 09:18:30.000"/>
</kw>
<status status="PASS" starttime="20231106 09:17:57.034" endtime="20231106 09:18:30.000"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:30.009" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:33.644" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:33.645" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20231106 09:18:30.004" endtime="20231106 09:18:33.645"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:33.646" level="INFO">40s</msg>
<status status="PASS" starttime="20231106 09:18:33.645" endtime="20231106 09:18:33.646"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:33.647" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:33.646" endtime="20231106 09:18:33.647"/>
</kw>
<status status="PASS" starttime="20231106 09:18:30.003" endtime="20231106 09:18:33.647"/>
</kw>
<msg timestamp="20231106 09:18:33.648" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:30.002" endtime="20231106 09:18:33.648"/>
</kw>
<msg timestamp="20231106 09:18:33.648" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20231106 09:18:30.002" endtime="20231106 09:18:33.648"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20231106 09:18:33.649" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20231106 09:18:33.648" endtime="20231106 09:18:33.650"/>
</kw>
<msg timestamp="20231106 09:18:33.650" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20231106 09:18:30.001" endtime="20231106 09:18:33.650"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20231106 09:18:33.651" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20231106 09:18:33.651" endtime="20231106 09:18:33.651"/>
</kw>
<msg timestamp="20231106 09:18:33.652" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20231106 09:18:33.650" endtime="20231106 09:18:33.652"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:33.661" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:33.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:33.799" level="INFO">${output} = 1B</msg>
<status status="PASS" starttime="20231106 09:18:33.657" endtime="20231106 09:18:33.799"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:33.800" level="INFO">1B</msg>
<status status="PASS" starttime="20231106 09:18:33.799" endtime="20231106 09:18:33.801"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:33.801" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:33.801" endtime="20231106 09:18:33.801"/>
</kw>
<status status="PASS" starttime="20231106 09:18:33.657" endtime="20231106 09:18:33.802"/>
</kw>
<msg timestamp="20231106 09:18:33.802" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:33.654" endtime="20231106 09:18:33.802"/>
</kw>
<msg timestamp="20231106 09:18:33.802" level="INFO">${certSerial} = 1B</msg>
<status status="PASS" starttime="20231106 09:18:33.652" endtime="20231106 09:18:33.802"/>
</kw>
<msg timestamp="20231106 09:18:33.802" level="INFO">${certId1} = 1B</msg>
<status status="PASS" starttime="20231106 09:18:33.652" endtime="20231106 09:18:33.802"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:33.810" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:33.916" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:33.916" level="INFO">${output} = 1B</msg>
<status status="PASS" starttime="20231106 09:18:33.807" endtime="20231106 09:18:33.916"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:33.918" level="INFO">1B</msg>
<status status="PASS" starttime="20231106 09:18:33.917" endtime="20231106 09:18:33.918"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:33.919" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:33.919" endtime="20231106 09:18:33.920"/>
</kw>
<status status="PASS" starttime="20231106 09:18:33.806" endtime="20231106 09:18:33.920"/>
</kw>
<msg timestamp="20231106 09:18:33.920" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:33.805" endtime="20231106 09:18:33.920"/>
</kw>
<msg timestamp="20231106 09:18:33.921" level="INFO">${certSerial} = 1B</msg>
<status status="PASS" starttime="20231106 09:18:33.805" endtime="20231106 09:18:33.921"/>
</kw>
<msg timestamp="20231106 09:18:33.921" level="INFO">${newCertId} = 1B</msg>
<status status="PASS" starttime="20231106 09:18:33.804" endtime="20231106 09:18:33.921"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20231106 09:18:33.922" level="FAIL">1B == 1B</msg>
<status status="FAIL" starttime="20231106 09:18:33.921" endtime="20231106 09:18:33.922"/>
</kw>
<status status="FAIL" starttime="20231106 09:18:33.803" endtime="20231106 09:18:33.923"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:38.932" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:39.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:39.033" level="INFO">${output} = 1D</msg>
<status status="PASS" starttime="20231106 09:18:38.928" endtime="20231106 09:18:39.033"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:39.035" level="INFO">1D</msg>
<status status="PASS" starttime="20231106 09:18:39.034" endtime="20231106 09:18:39.036"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:39.037" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:39.036" endtime="20231106 09:18:39.037"/>
</kw>
<status status="PASS" starttime="20231106 09:18:38.927" endtime="20231106 09:18:39.037"/>
</kw>
<msg timestamp="20231106 09:18:39.037" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:38.926" endtime="20231106 09:18:39.038"/>
</kw>
<msg timestamp="20231106 09:18:39.038" level="INFO">${certSerial} = 1D</msg>
<status status="PASS" starttime="20231106 09:18:38.925" endtime="20231106 09:18:39.038"/>
</kw>
<msg timestamp="20231106 09:18:39.038" level="INFO">${newCertId} = 1D</msg>
<status status="PASS" starttime="20231106 09:18:38.924" endtime="20231106 09:18:39.038"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231106 09:18:39.038" endtime="20231106 09:18:39.039"/>
</kw>
<status status="PASS" starttime="20231106 09:18:38.923" endtime="20231106 09:18:39.039"/>
</kw>
<status status="PASS" starttime="20231106 09:18:33.803" endtime="20231106 09:18:39.039"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20231106 09:18:39.041" level="INFO">${random} = 7tHrJBxsuB</msg>
<status status="PASS" starttime="20231106 09:18:39.040" endtime="20231106 09:18:39.041"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:39.048" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p 7tHrJBxsuB  2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:18:52.314" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:18:52.315" level="INFO">${output} = 2023-11-06 09:18:43,349 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:43,596 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:18:39.044" endtime="20231106 09:18:52.315"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:18:52.322" level="INFO">2023-11-06 09:18:43,349 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:43,596 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-11-06 09:18:43,596 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-11-06 09:18:43,726 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 7tHrJBxsuB and number-of-tests 1
2023-11-06 09:18:43,817 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:44,818 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:45,819 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:46,819 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:47,820 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:48,381 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-11-06 09:18:48,596 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-11-06 09:18:48,821 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:49,089 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-11-06 09:18:49,821 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:50,823 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-11-06 09:18:51,682 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2969.807148, max=2969.807148, mean=2969.807148, stddev=0.0, median=2969.807148, p75=2969.807148, p95=2969.807148, p98=2969.807148, p99=2969.807148, p999=2969.807148, mean_rate=0.25072515871202167, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-11-06 09:18:51,700 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-11-06 09:18:51,706 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-11-06 09:18:51,706 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231106 09:18:52.316" endtime="20231106 09:18:52.324"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:18:52.324" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:18:52.324" endtime="20231106 09:18:52.328"/>
</kw>
<status status="PASS" starttime="20231106 09:18:39.044" endtime="20231106 09:18:52.328"/>
</kw>
<msg timestamp="20231106 09:18:52.328" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:39.043" endtime="20231106 09:18:52.329"/>
</kw>
<msg timestamp="20231106 09:18:52.333" level="INFO">${result} = 2023-11-06 09:18:43,349 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:43,596 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:18:39.043" endtime="20231106 09:18:52.333"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:18:52.334" endtime="20231106 09:18:52.334"/>
</kw>
<status status="PASS" starttime="20231106 09:18:39.041" endtime="20231106 09:18:52.340"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:18:52.402" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p 7tHrJBxsuB  2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:04.192" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:04.192" level="INFO">${output} = 2023-11-06 09:18:56,544 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:56,803 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:18:52.388" endtime="20231106 09:19:04.193"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:04.194" level="INFO">2023-11-06 09:18:56,544 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:56,803 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-11-06 09:18:56,803 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-11-06 09:18:56,930 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 7tHrJBxsuB and number-of-tests 1
2023-11-06 09:18:57,015 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:58,025 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:18:59,026 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:19:00,026 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:19:00,890 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-11-06 09:19:01,027 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:19:02,028 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-06 09:19:03,028 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-11-06 09:19:03,824 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=55.574919, max=55.574919, mean=55.574919, stddev=0.0, median=55.574919, p75=55.574919, p95=55.574919, p98=55.574919, p99=55.574919, p999=55.574919, mean_rate=0.9197391075037672, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-11-06 09:19:03,824 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-11-06 09:19:03,824 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-11-06 09:19:03,824 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231106 09:19:04.193" endtime="20231106 09:19:04.194"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:04.195" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:04.194" endtime="20231106 09:19:04.195"/>
</kw>
<status status="PASS" starttime="20231106 09:18:52.385" endtime="20231106 09:19:04.195"/>
</kw>
<msg timestamp="20231106 09:19:04.195" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:18:52.378" endtime="20231106 09:19:04.195"/>
</kw>
<msg timestamp="20231106 09:19:04.195" level="INFO">${result} = 2023-11-06 09:18:56,544 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-06 09:18:56,803 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231106 09:18:52.365" endtime="20231106 09:19:04.196"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:19:04.196" endtime="20231106 09:19:04.196"/>
</kw>
<status status="PASS" starttime="20231106 09:18:52.343" endtime="20231106 09:19:04.196"/>
</kw>
<status status="PASS" starttime="20231106 09:18:39.040" endtime="20231106 09:19:04.196"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231106 09:17:57.026" endtime="20231106 09:19:04.197"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20231106 09:17:56.728" endtime="20231106 09:19:04.199"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:04.215" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:12.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:12.892" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:04.212" endtime="20231106 09:19:12.892"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:12.894" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:12.893" endtime="20231106 09:19:12.894"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:12.896" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:12.894" endtime="20231106 09:19:12.896"/>
</kw>
<status status="PASS" starttime="20231106 09:19:04.212" endtime="20231106 09:19:12.896"/>
</kw>
<msg timestamp="20231106 09:19:12.896" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:19:04.212" endtime="20231106 09:19:12.896"/>
</kw>
<msg timestamp="20231106 09:19:12.897" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:04.211" endtime="20231106 09:19:12.897"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:19:12.897" endtime="20231106 09:19:12.897"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:12.903" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:21.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:21.737" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:12.900" endtime="20231106 09:19:21.737"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:21.739" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:21.737" endtime="20231106 09:19:21.739"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:21.740" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:21.739" endtime="20231106 09:19:21.740"/>
</kw>
<status status="PASS" starttime="20231106 09:19:12.899" endtime="20231106 09:19:21.740"/>
</kw>
<msg timestamp="20231106 09:19:21.740" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:19:12.899" endtime="20231106 09:19:21.741"/>
</kw>
<msg timestamp="20231106 09:19:21.741" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:12.898" endtime="20231106 09:19:21.741"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:19:21.741" endtime="20231106 09:19:21.742"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231106 09:19:04.210" endtime="20231106 09:19:21.742"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:21.750" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20231106 09:19:21.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:21.753" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:21.746" endtime="20231106 09:19:21.754"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:21.755" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:21.754" endtime="20231106 09:19:21.755"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:21.756" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:21.755" endtime="20231106 09:19:21.756"/>
</kw>
<status status="PASS" starttime="20231106 09:19:21.745" endtime="20231106 09:19:21.756"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:21.763" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:34.431" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:34.431" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:21.759" endtime="20231106 09:19:34.432"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:34.433" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:34.432" endtime="20231106 09:19:34.433"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:34.434" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:34.433" endtime="20231106 09:19:34.434"/>
</kw>
<status status="PASS" starttime="20231106 09:19:21.758" endtime="20231106 09:19:34.434"/>
</kw>
<msg timestamp="20231106 09:19:34.434" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:19:21.757" endtime="20231106 09:19:34.435"/>
</kw>
<msg timestamp="20231106 09:19:34.435" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:21.756" endtime="20231106 09:19:34.435"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:19:34.435" endtime="20231106 09:19:34.435"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:34.439" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:34.443" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:34.443" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:34.436" endtime="20231106 09:19:34.444"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:34.445" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:34.444" endtime="20231106 09:19:34.445"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:34.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:34.446" endtime="20231106 09:19:34.446"/>
</kw>
<status status="PASS" starttime="20231106 09:19:34.436" endtime="20231106 09:19:34.447"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231106 09:19:21.744" endtime="20231106 09:19:34.447"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20231106 09:19:34.449" level="INFO">${random} = 82542</msg>
<status status="PASS" starttime="20231106 09:19:34.449" endtime="20231106 09:19:34.449"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:34.455" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-82542 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:46.301" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:46.301" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:34.452" endtime="20231106 09:19:46.301"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:46.303" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:46.302" endtime="20231106 09:19:46.304"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:46.304" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:46.304" endtime="20231106 09:19:46.305"/>
</kw>
<status status="PASS" starttime="20231106 09:19:34.451" endtime="20231106 09:19:46.305"/>
</kw>
<msg timestamp="20231106 09:19:46.305" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231106 09:19:34.451" endtime="20231106 09:19:46.305"/>
</kw>
<msg timestamp="20231106 09:19:46.305" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:34.450" endtime="20231106 09:19:46.305"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:19:46.306" endtime="20231106 09:19:46.306"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:46.310" level="INFO">Running command 'cat /tmp/key-82542 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:46.314" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:46.314" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20231106 09:19:46.307" endtime="20231106 09:19:46.314"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:46.315" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20231106 09:19:46.314" endtime="20231106 09:19:46.315"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:46.316" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:46.316" endtime="20231106 09:19:46.317"/>
</kw>
<msg timestamp="20231106 09:19:46.317" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20231106 09:19:46.306" endtime="20231106 09:19:46.317"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231106 09:19:46.317" endtime="20231106 09:19:46.318"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231106 09:19:46.322" level="INFO">Running command 'rm /tmp/key-82542 2&gt;&amp;1'.</msg>
<msg timestamp="20231106 09:19:46.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20231106 09:19:46.325" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231106 09:19:46.319" endtime="20231106 09:19:46.325"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231106 09:19:46.327" level="INFO"/>
<status status="PASS" starttime="20231106 09:19:46.326" endtime="20231106 09:19:46.328"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231106 09:19:46.329" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231106 09:19:46.328" endtime="20231106 09:19:46.329"/>
</kw>
<status status="PASS" starttime="20231106 09:19:46.318" endtime="20231106 09:19:46.329"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231106 09:19:34.448" endtime="20231106 09:19:46.329"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20231106 09:19:04.201" endtime="20231106 09:19:46.331"/>
</suite>
<status status="PASS" starttime="20231106 09:17:56.607" endtime="20231106 09:19:46.335"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
