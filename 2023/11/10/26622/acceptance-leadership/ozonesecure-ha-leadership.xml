<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20231110 13:34:50.259" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-leadership">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:16.522" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:16.529" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:16.529" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:25:16.517" endtime="20231110 13:25:16.529"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:16.530" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:25:16.529" endtime="20231110 13:25:16.530"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:16.531" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:16.530" endtime="20231110 13:25:16.531"/>
</kw>
<status status="PASS" starttime="20231110 13:25:16.517" endtime="20231110 13:25:16.531"/>
</kw>
<msg timestamp="20231110 13:25:16.531" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:16.517" endtime="20231110 13:25:16.532"/>
</kw>
<msg timestamp="20231110 13:25:16.532" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:25:16.516" endtime="20231110 13:25:16.532"/>
</kw>
<msg timestamp="20231110 13:25:16.532" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:25:16.515" endtime="20231110 13:25:16.532"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:25:16.533" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:25:16.532" endtime="20231110 13:25:16.533"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:16.538" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:16.650" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:16.650" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:25:16.535" endtime="20231110 13:25:16.650"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:16.651" level="INFO"/>
<status status="PASS" starttime="20231110 13:25:16.650" endtime="20231110 13:25:16.651"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:16.652" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:16.652" endtime="20231110 13:25:16.652"/>
</kw>
<status status="PASS" starttime="20231110 13:25:16.534" endtime="20231110 13:25:16.653"/>
</kw>
<msg timestamp="20231110 13:25:16.653" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:16.534" endtime="20231110 13:25:16.653"/>
</kw>
<status status="PASS" starttime="20231110 13:25:16.533" endtime="20231110 13:25:16.653"/>
</kw>
<status status="PASS" starttime="20231110 13:25:16.533" endtime="20231110 13:25:16.653"/>
</kw>
<status status="PASS" starttime="20231110 13:25:16.514" endtime="20231110 13:25:16.653"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20231110 13:25:16.513" endtime="20231110 13:25:16.653"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20231110 13:25:16.448" endtime="20231110 13:25:16.655"/>
</suite>
<suite id="s1-s2" name="Admincli" source="/opt/hadoop/smoketest/admincli">
<suite id="s1-s2-s1" name="Admin" source="/opt/hadoop/smoketest/admincli/admin.robot">
<test id="s1-s2-s1-t1" name="Incomplete command" line="23">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>ozone admin</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:21.176" level="INFO">Running command 'ozone admin 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:24.850" level="INFO">${rc} = 2</msg>
<msg timestamp="20231110 13:25:24.850" level="INFO">${output} = Incomplete command
Usage: ozone admin [-hV] [--verbose] [-conf=&lt;configurationPath&gt;]
                   [-D=&lt;String=String&gt;]... [COMMAND]
Developer tools for Ozone Admin operations
      -conf=&lt;configu...</msg>
<status status="PASS" starttime="20231110 13:25:21.171" endtime="20231110 13:25:24.850"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:24.852" level="INFO">Incomplete command
Usage: ozone admin [-hV] [--verbose] [-conf=&lt;configurationPath&gt;]
                   [-D=&lt;String=String&gt;]... [COMMAND]
Developer tools for Ozone Admin operations
      -conf=&lt;configurationPath&gt;

  -D, --set=&lt;String=String&gt;

  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
      --verbose   More verbose output. Show the stack trace of the errors.
Commands:
  containerbalancer   ContainerBalancer specific operations
  replicationmanager  ReplicationManager specific operations
  safemode            Safe mode specific operations
  printTopology       Print a tree of the network topology as reported by SCM
  cert                Certificate related operations
  container           Container specific operations
  datanode            Datanode specific operations
  pipeline            Pipeline specific operations
  namespace           Namespace Summary specific admin operations
  om                  Ozone Manager specific admin operations
  reconfig            Dynamically reconfigure server without restarting it
  scm                 Ozone Storage Container Manager specific admin operations</msg>
<status status="PASS" starttime="20231110 13:25:24.851" endtime="20231110 13:25:24.852"/>
</kw>
<msg timestamp="20231110 13:25:24.853" level="INFO">${output} = Incomplete command
Usage: ozone admin [-hV] [--verbose] [-conf=&lt;configurationPath&gt;]
                   [-D=&lt;String=String&gt;]... [COMMAND]
Developer tools for Ozone Admin operations
      -conf=&lt;configu...</msg>
<status status="PASS" starttime="20231110 13:25:21.171" endtime="20231110 13:25:24.853"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Incomplete command</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.853" endtime="20231110 13:25:24.854"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>container</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.854" endtime="20231110 13:25:24.854"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>datanode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.855" endtime="20231110 13:25:24.855"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>om</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.855" endtime="20231110 13:25:24.856"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>pipeline</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.856" endtime="20231110 13:25:24.856"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>replicationmanager</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.856" endtime="20231110 13:25:24.857"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>safemode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.857" endtime="20231110 13:25:24.857"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>printTopology</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:24.858" endtime="20231110 13:25:24.858"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:25:21.170" endtime="20231110 13:25:24.858"/>
</test>
<doc>Test ozone admin command</doc>
<status status="PASS" starttime="20231110 13:25:21.128" endtime="20231110 13:25:24.860"/>
</suite>
<suite id="s1-s2-s2" name="Cert" source="/opt/hadoop/smoketest/admincli/cert.robot">
<test id="s1-s2-s2-t1" name="List certificates" line="26">
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>N/A</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20231110 13:25:24.869" endtime="20231110 13:25:24.869"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin cert list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:24.874" level="INFO">Running command 'ozone admin cert list 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:30.620" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:30.620" level="INFO">${output} = Certificate list:(Type=VALID, BatchSize=20, CertCount=11)
SerialNumber      Valid From                     Expiry                         Subject                                                       ...</msg>
<status status="PASS" starttime="20231110 13:25:24.871" endtime="20231110 13:25:30.620"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:30.623" level="INFO">Certificate list:(Type=VALID, BatchSize=20, CertCount=11)
SerialNumber      Valid From                     Expiry                         Subject                                                                                                        Issuer                                                                                                        
1                 Fri Nov 10 13:21:56 UTC 2023   Mon Dec 18 13:21:56 UTC 2028   CN=scm@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=1 CN=scm@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=1
2                 Fri Nov 10 13:21:57 UTC 2023   Mon Dec 18 13:21:57 UTC 2028   CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2 CN=scm@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=1
3                 Fri Nov 10 13:22:24 UTC 2023   Sat Nov 09 13:22:24 UTC 2024   CN=recon@recon,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=3 CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2
4                 Fri Nov 10 13:22:25 UTC 2023   Mon Dec 18 13:22:25 UTC 2028   CN=scm-sub@scm2.org,OU=cce49b2a-0f18-461d-ba0f-69ddb0800759,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=4 CN=scm@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=1
5                 Fri Nov 10 13:22:48 UTC 2023   Mon Dec 18 13:22:48 UTC 2028   CN=scm-sub@scm3.org,OU=04b4c426-1498-4c0b-aa42-503afea12e43,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=5 CN=scm@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=1
6                 Fri Nov 10 13:23:33 UTC 2023   Sat Nov 09 13:23:33 UTC 2024   CN=dn@daa13aa2d26d,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=6 CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2
7                 Fri Nov 10 13:23:34 UTC 2023   Sat Nov 09 13:23:34 UTC 2024   CN=dn@7d63ebf352c6,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=7 CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2
8                 Fri Nov 10 13:23:35 UTC 2023   Sat Nov 09 13:23:35 UTC 2024   CN=dn@b68bf03344a5,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=8 CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2
9                 Fri Nov 10 13:23:39 UTC 2023   Sat Nov 09 13:23:39 UTC 2024   CN=om3,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=9       CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2
10                Fri Nov 10 13:23:41 UTC 2023   Sat Nov 09 13:23:41 UTC 2024   CN=om1,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=10      CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2
11                Fri Nov 10 13:23:42 UTC 2023   Sat Nov 09 13:23:42 UTC 2024   CN=om2,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=11      CN=scm-sub@scm1.org,OU=59b19ecd-f2af-42d3-8605-a0f5d9fb479e,O=CID-109612d9-ad5e-429f-b5e8-71c1d9986e69,SERIALNUMBER=2</msg>
<status status="PASS" starttime="20231110 13:25:30.620" endtime="20231110 13:25:30.623"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:30.624" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:30.623" endtime="20231110 13:25:30.625"/>
</kw>
<status status="PASS" starttime="20231110 13:25:24.870" endtime="20231110 13:25:30.625"/>
</kw>
<msg timestamp="20231110 13:25:30.625" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:24.870" endtime="20231110 13:25:30.625"/>
</kw>
<msg timestamp="20231110 13:25:30.625" level="INFO">${output} = Certificate list:(Type=VALID, BatchSize=20, CertCount=11)
SerialNumber      Valid From                     Expiry                         Subject                                                       ...</msg>
<status status="PASS" starttime="20231110 13:25:24.870" endtime="20231110 13:25:30.626"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Certificate list:(Type=</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:30.626" endtime="20231110 13:25:30.627"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:25:24.868" endtime="20231110 13:25:30.627"/>
</test>
<test id="s1-s2-s2-t2" name="List certificates as JSON" line="31">
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>N/A</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20231110 13:25:30.630" endtime="20231110 13:25:30.630"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone admin cert list --json 1&gt;&gt; outStream 2&gt;&gt; errStream</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:30.635" level="INFO">Running command 'ozone admin cert list --json 1&gt;&gt; outStream 2&gt;&gt; errStream'.</msg>
<msg timestamp="20231110 13:25:35.845" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:35.845" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:25:30.631" endtime="20231110 13:25:35.845"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:35.846" level="INFO"/>
<status status="PASS" starttime="20231110 13:25:35.846" endtime="20231110 13:25:35.847"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:35.847" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:35.847" endtime="20231110 13:25:35.847"/>
</kw>
<status status="PASS" starttime="20231110 13:25:30.631" endtime="20231110 13:25:35.847"/>
</kw>
<msg timestamp="20231110 13:25:35.848" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:30.631" endtime="20231110 13:25:35.848"/>
</kw>
<status status="PASS" starttime="20231110 13:25:30.630" endtime="20231110 13:25:35.848"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>cat outStream | jq -r '.[0] | keys'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:35.852" level="INFO">Running command 'cat outStream | jq -r '.[0] | keys' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:35.907" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:35.907" level="INFO">${output} = [
  "expiry",
  "issuerDN",
  "serialNumber",
  "subjectDN",
  "validFrom"
]</msg>
<status status="PASS" starttime="20231110 13:25:35.849" endtime="20231110 13:25:35.907"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:35.909" level="INFO">[
  "expiry",
  "issuerDN",
  "serialNumber",
  "subjectDN",
  "validFrom"
]</msg>
<status status="PASS" starttime="20231110 13:25:35.908" endtime="20231110 13:25:35.909"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:35.910" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:35.909" endtime="20231110 13:25:35.910"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.849" endtime="20231110 13:25:35.910"/>
</kw>
<msg timestamp="20231110 13:25:35.910" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:35.848" endtime="20231110 13:25:35.910"/>
</kw>
<msg timestamp="20231110 13:25:35.910" level="INFO">${output} = [
  "expiry",
  "issuerDN",
  "serialNumber",
  "subjectDN",
  "validFrom"
]</msg>
<status status="PASS" starttime="20231110 13:25:35.848" endtime="20231110 13:25:35.910"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>serialNumber</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:35.911" endtime="20231110 13:25:35.911"/>
</kw>
<kw name="Execute" library="os">
<var>${errOutput}</var>
<arg>cat errStream</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:35.916" level="INFO">Running command 'cat errStream 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:35.919" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:35.919" level="INFO">${output} = Certificate list:(Type=VALID, BatchSize=20, CertCount=11)</msg>
<status status="PASS" starttime="20231110 13:25:35.913" endtime="20231110 13:25:35.919"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:35.920" level="INFO">Certificate list:(Type=VALID, BatchSize=20, CertCount=11)</msg>
<status status="PASS" starttime="20231110 13:25:35.919" endtime="20231110 13:25:35.920"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:35.921" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:35.921" endtime="20231110 13:25:35.922"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.912" endtime="20231110 13:25:35.922"/>
</kw>
<msg timestamp="20231110 13:25:35.922" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:35.912" endtime="20231110 13:25:35.923"/>
</kw>
<msg timestamp="20231110 13:25:35.923" level="INFO">${errOutput} = Certificate list:(Type=VALID, BatchSize=20, CertCount=11)</msg>
<status status="PASS" starttime="20231110 13:25:35.911" endtime="20231110 13:25:35.923"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${errOutput}</arg>
<arg>Certificate list:(Type=</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:25:35.923" endtime="20231110 13:25:35.924"/>
</kw>
<kw name="Execute" library="os">
<arg>rm outStream</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:35.928" level="INFO">Running command 'rm outStream 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:35.932" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:35.932" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:25:35.926" endtime="20231110 13:25:35.932"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:35.933" level="INFO"/>
<status status="PASS" starttime="20231110 13:25:35.932" endtime="20231110 13:25:35.933"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:35.934" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:35.933" endtime="20231110 13:25:35.934"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.925" endtime="20231110 13:25:35.934"/>
</kw>
<msg timestamp="20231110 13:25:35.934" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:35.924" endtime="20231110 13:25:35.934"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.924" endtime="20231110 13:25:35.934"/>
</kw>
<kw name="Execute" library="os">
<arg>rm errStream</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:35.938" level="INFO">Running command 'rm errStream 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:35.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:35.941" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:25:35.936" endtime="20231110 13:25:35.941"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:35.942" level="INFO"/>
<status status="PASS" starttime="20231110 13:25:35.942" endtime="20231110 13:25:35.943"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:35.943" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:35.943" endtime="20231110 13:25:35.943"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.935" endtime="20231110 13:25:35.943"/>
</kw>
<msg timestamp="20231110 13:25:35.944" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:35.935" endtime="20231110 13:25:35.944"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.934" endtime="20231110 13:25:35.944"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:25:30.629" endtime="20231110 13:25:35.944"/>
</test>
<doc>Test ozone admin cert command</doc>
<status status="PASS" starttime="20231110 13:25:24.862" endtime="20231110 13:25:35.946"/>
</suite>
<suite id="s1-s2-s3" name="Container" source="/opt/hadoop/smoketest/admincli/container.robot">
<kw name="Create test data" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:35.961" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:35.966" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:35.966" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:25:35.958" endtime="20231110 13:25:35.966"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:35.968" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:25:35.967" endtime="20231110 13:25:35.968"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:35.968" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:35.968" endtime="20231110 13:25:35.969"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.958" endtime="20231110 13:25:35.969"/>
</kw>
<msg timestamp="20231110 13:25:35.969" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:35.957" endtime="20231110 13:25:35.969"/>
</kw>
<msg timestamp="20231110 13:25:35.969" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:25:35.957" endtime="20231110 13:25:35.969"/>
</kw>
<msg timestamp="20231110 13:25:35.970" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:25:35.957" endtime="20231110 13:25:35.970"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:25:35.970" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:25:35.970" endtime="20231110 13:25:35.970"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:35.976" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:36.119" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:36.120" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:25:35.974" endtime="20231110 13:25:36.120"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:36.121" level="INFO"/>
<status status="PASS" starttime="20231110 13:25:36.120" endtime="20231110 13:25:36.121"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:36.122" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:36.122" endtime="20231110 13:25:36.122"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.973" endtime="20231110 13:25:36.122"/>
</kw>
<msg timestamp="20231110 13:25:36.123" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:35.972" endtime="20231110 13:25:36.123"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.971" endtime="20231110 13:25:36.123"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.971" endtime="20231110 13:25:36.123"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.956" endtime="20231110 13:25:36.123"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.955" endtime="20231110 13:25:36.123"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone freon ockg -n1 -t1 -p container</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:36.128" level="INFO">Running command 'ozone freon ockg -n1 -t1 -p container 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:25:51.979" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:25:51.979" level="INFO">${output} = 2023-11-10 13:25:38,919 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-10 13:25:39,118 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20231110 13:25:36.125" endtime="20231110 13:25:51.979"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:25:51.980" level="INFO">2023-11-10 13:25:38,919 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-11-10 13:25:39,118 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-11-10 13:25:39,118 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-11-10 13:25:39,248 [main] INFO freon.BaseFreonGenerator: Executing test with prefix container and number-of-tests 1
2023-11-10 13:25:39,323 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:40,330 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:41,330 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:42,256 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-11-10 13:25:42,331 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:42,813 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-11-10 13:25:43,331 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:44,332 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:45,007 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-11-10 13:25:45,078 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-11-10 13:25:45,332 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:45,433 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-11-10 13:25:46,333 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:47,333 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:48,334 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:49,335 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:50,338 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-11-10 13:25:51,339 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-11-10 13:25:51,570 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=7518.515845, max=7518.515845, mean=7518.515845, stddev=0.0, median=7518.515845, p75=7518.515845, p95=7518.515845, p98=7518.515845, p99=7518.515845, p999=7518.515845, mean_rate=0.11791403845767025, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-11-10 13:25:51,575 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 12
2023-11-10 13:25:51,575 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-11-10 13:25:51,575 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20231110 13:25:51.979" endtime="20231110 13:25:51.980"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:25:51.981" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:25:51.980" endtime="20231110 13:25:51.981"/>
</kw>
<status status="PASS" starttime="20231110 13:25:36.124" endtime="20231110 13:25:51.981"/>
</kw>
<msg timestamp="20231110 13:25:51.981" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:36.124" endtime="20231110 13:25:51.981"/>
</kw>
<status status="PASS" starttime="20231110 13:25:36.123" endtime="20231110 13:25:51.982"/>
</kw>
<status status="PASS" starttime="20231110 13:25:35.955" endtime="20231110 13:25:51.982"/>
</kw>
<test id="s1-s2-s3-t1" name="Create container" line="38">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container create</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:25:51.989" level="INFO">Running command 'ozone admin container create 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:00.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:00.985" level="INFO">${output} = Loaded properties from hadoop-metrics2.properties
Scheduled Metric snapshot period at 10 second(s).
XceiverClientMetrics metrics system started
Container 2 is created.</msg>
<status status="PASS" starttime="20231110 13:25:51.985" endtime="20231110 13:26:00.985"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:00.986" level="INFO">Loaded properties from hadoop-metrics2.properties
Scheduled Metric snapshot period at 10 second(s).
XceiverClientMetrics metrics system started
Container 2 is created.</msg>
<status status="PASS" starttime="20231110 13:26:00.985" endtime="20231110 13:26:00.987"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:00.987" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:00.987" endtime="20231110 13:26:00.988"/>
</kw>
<status status="PASS" starttime="20231110 13:25:51.984" endtime="20231110 13:26:00.988"/>
</kw>
<msg timestamp="20231110 13:26:00.988" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:25:51.984" endtime="20231110 13:26:00.988"/>
</kw>
<msg timestamp="20231110 13:26:00.988" level="INFO">${output} = Loaded properties from hadoop-metrics2.properties
Scheduled Metric snapshot period at 10 second(s).
XceiverClientMetrics metrics system started
Container 2 is created.</msg>
<status status="PASS" starttime="20231110 13:25:51.983" endtime="20231110 13:26:00.988"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>is created</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:00.988" endtime="20231110 13:26:00.989"/>
</kw>
<kw name="Execute" library="os">
<var>${container}</var>
<arg>echo "${output}" | grep 'is created' | cut -f2 -d' '</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:00.995" level="INFO">Running command 'echo "Loaded properties from hadoop-metrics2.properties
Scheduled Metric snapshot period at 10 second(s).
XceiverClientMetrics metrics system started
Container 2 is created." | grep 'is created' | cut -f2 -d' ' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:00.999" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:00.999" level="INFO">${output} = 2</msg>
<status status="PASS" starttime="20231110 13:26:00.991" endtime="20231110 13:26:01.000"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:01.002" level="INFO">2</msg>
<status status="PASS" starttime="20231110 13:26:01.000" endtime="20231110 13:26:01.002"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:01.003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:01.002" endtime="20231110 13:26:01.003"/>
</kw>
<status status="PASS" starttime="20231110 13:26:00.990" endtime="20231110 13:26:01.003"/>
</kw>
<msg timestamp="20231110 13:26:01.003" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:00.990" endtime="20231110 13:26:01.003"/>
</kw>
<msg timestamp="20231110 13:26:01.004" level="INFO">${container} = 2</msg>
<status status="PASS" starttime="20231110 13:26:00.989" endtime="20231110 13:26:01.004"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${CONTAINER}</arg>
<arg>${container}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:26:01.004" level="INFO">${CONTAINER} = 2</msg>
<status status="PASS" starttime="20231110 13:26:01.004" endtime="20231110 13:26:01.004"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:25:51.982" endtime="20231110 13:26:01.005"/>
</test>
<test id="s1-s2-s3-t2" name="List containers" line="44">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:01.012" level="INFO">Running command 'ozone admin container list 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:06.659" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:06.659" level="INFO">${output} = {
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfK...</msg>
<status status="PASS" starttime="20231110 13:26:01.009" endtime="20231110 13:26:06.659"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:06.660" level="INFO">{
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfKeys" : 0,
  "lastUsed" : "2023-11-10T13:26:06.503637Z",
  "owner" : "omservice",
  "containerID" : 1,
  "deleteTransactionId" : 0,
  "sequenceId" : 0,
  "open" : true,
  "deleted" : false
}
{
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:58.013Z",
  "replicationConfig" : {
    "replicationFactor" : "ONE",
    "replicationType" : "STANDALONE"
  },
  "usedBytes" : 0,
  "numberOfKeys" : 0,
  "lastUsed" : "2023-11-10T13:26:06.504999Z",
  "owner" : "OZONE",
  "containerID" : 2,
  "deleteTransactionId" : 0,
  "sequenceId" : 0,
  "open" : true,
  "deleted" : false
}</msg>
<status status="PASS" starttime="20231110 13:26:06.659" endtime="20231110 13:26:06.660"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:06.661" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:06.660" endtime="20231110 13:26:06.661"/>
</kw>
<status status="PASS" starttime="20231110 13:26:01.008" endtime="20231110 13:26:06.661"/>
</kw>
<msg timestamp="20231110 13:26:06.661" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:01.008" endtime="20231110 13:26:06.662"/>
</kw>
<msg timestamp="20231110 13:26:06.662" level="INFO">${output} = {
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfK...</msg>
<status status="PASS" starttime="20231110 13:26:01.007" endtime="20231110 13:26:06.662"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>OPEN</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:06.662" endtime="20231110 13:26:06.662"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:01.006" endtime="20231110 13:26:06.663"/>
</test>
<test id="s1-s2-s3-t3" name="List containers with explicit host" line="48">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container list --scm ${SCM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:06.668" level="INFO">Running command 'ozone admin container list --scm scm1.org 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:12.241" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:12.242" level="INFO">${output} = {
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfK...</msg>
<status status="PASS" starttime="20231110 13:26:06.666" endtime="20231110 13:26:12.242"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:12.243" level="INFO">{
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfKeys" : 0,
  "lastUsed" : "2023-11-10T13:26:11.999475Z",
  "owner" : "omservice",
  "containerID" : 1,
  "deleteTransactionId" : 0,
  "sequenceId" : 0,
  "open" : true,
  "deleted" : false
}
{
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:58.013Z",
  "replicationConfig" : {
    "replicationFactor" : "ONE",
    "replicationType" : "STANDALONE"
  },
  "usedBytes" : 0,
  "numberOfKeys" : 0,
  "lastUsed" : "2023-11-10T13:26:12.000664Z",
  "owner" : "OZONE",
  "containerID" : 2,
  "deleteTransactionId" : 0,
  "sequenceId" : 0,
  "open" : true,
  "deleted" : false
}</msg>
<status status="PASS" starttime="20231110 13:26:12.242" endtime="20231110 13:26:12.244"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:12.244" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:12.244" endtime="20231110 13:26:12.244"/>
</kw>
<status status="PASS" starttime="20231110 13:26:06.665" endtime="20231110 13:26:12.245"/>
</kw>
<msg timestamp="20231110 13:26:12.245" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:06.665" endtime="20231110 13:26:12.245"/>
</kw>
<msg timestamp="20231110 13:26:12.245" level="INFO">${output} = {
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfK...</msg>
<status status="PASS" starttime="20231110 13:26:06.664" endtime="20231110 13:26:12.245"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>OPEN</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:12.246" endtime="20231110 13:26:12.246"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:06.664" endtime="20231110 13:26:12.246"/>
</test>
<test id="s1-s2-s3-t4" name="List containers with container state" line="52">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container list --state=CLOSED</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:12.254" level="INFO">Running command 'ozone admin container list --state=CLOSED 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:17.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:17.570" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:26:12.251" endtime="20231110 13:26:17.570"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:17.571" level="INFO"/>
<status status="PASS" starttime="20231110 13:26:17.570" endtime="20231110 13:26:17.571"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:17.572" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:17.571" endtime="20231110 13:26:17.572"/>
</kw>
<status status="PASS" starttime="20231110 13:26:12.250" endtime="20231110 13:26:17.572"/>
</kw>
<msg timestamp="20231110 13:26:17.572" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:12.250" endtime="20231110 13:26:17.572"/>
</kw>
<msg timestamp="20231110 13:26:17.572" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:26:12.249" endtime="20231110 13:26:17.572"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>OPEN</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:17.573" endtime="20231110 13:26:17.573"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:12.248" endtime="20231110 13:26:17.573"/>
</test>
<test id="s1-s2-s3-t5" name="List containers with replication factor ONE" line="56">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container list -t RATIS -r ONE</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:17.580" level="INFO">Running command 'ozone admin container list -t RATIS -r ONE 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:23.227" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:23.227" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:26:17.577" endtime="20231110 13:26:23.227"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:23.229" level="INFO"/>
<status status="PASS" starttime="20231110 13:26:23.228" endtime="20231110 13:26:23.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:23.230" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:23.230" endtime="20231110 13:26:23.230"/>
</kw>
<status status="PASS" starttime="20231110 13:26:17.577" endtime="20231110 13:26:23.230"/>
</kw>
<msg timestamp="20231110 13:26:23.230" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:17.577" endtime="20231110 13:26:23.231"/>
</kw>
<msg timestamp="20231110 13:26:23.231" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:26:17.576" endtime="20231110 13:26:23.231"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>THREE</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:23.231" endtime="20231110 13:26:23.232"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:17.575" endtime="20231110 13:26:23.232"/>
</test>
<test id="s1-s2-s3-t6" name="List containers with replication factor THREE" line="60">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container list -t RATIS -r THREE</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:23.240" level="INFO">Running command 'ozone admin container list -t RATIS -r THREE 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:28.973" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:28.973" level="INFO">${output} = {
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfK...</msg>
<status status="PASS" starttime="20231110 13:26:23.237" endtime="20231110 13:26:28.973"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:28.974" level="INFO">{
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfKeys" : 0,
  "lastUsed" : "2023-11-10T13:26:28.583334Z",
  "owner" : "omservice",
  "containerID" : 1,
  "deleteTransactionId" : 0,
  "sequenceId" : 2,
  "open" : true,
  "deleted" : false
}</msg>
<status status="PASS" starttime="20231110 13:26:28.973" endtime="20231110 13:26:28.974"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:28.975" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:28.974" endtime="20231110 13:26:28.975"/>
</kw>
<status status="PASS" starttime="20231110 13:26:23.236" endtime="20231110 13:26:28.975"/>
</kw>
<msg timestamp="20231110 13:26:28.975" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:23.236" endtime="20231110 13:26:28.975"/>
</kw>
<msg timestamp="20231110 13:26:28.976" level="INFO">${output} = {
  "state" : "OPEN",
  "stateEnterTime" : "2023-11-10T13:25:43.444Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "replicationType" : "RATIS"
  },
  "usedBytes" : 0,
  "numberOfK...</msg>
<status status="PASS" starttime="20231110 13:26:23.235" endtime="20231110 13:26:28.976"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>ONE</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:28.976" endtime="20231110 13:26:28.976"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:23.234" endtime="20231110 13:26:28.976"/>
</test>
<test id="s1-s2-s3-t7" name="Container info" line="64">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container info "${CONTAINER}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:28.985" level="INFO">Running command 'ozone admin container info "2" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:34.578" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:34.579" level="INFO">${output} = Container id: 2
Pipeline id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d
Container State: OPEN
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]
Replicas: ...</msg>
<status status="PASS" starttime="20231110 13:26:28.980" endtime="20231110 13:26:34.579"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:34.580" level="INFO">Container id: 2
Pipeline id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d
Container State: OPEN
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]
Replicas: [State: OPEN; ReplicaIndex: 0; Origin: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb; Location: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]</msg>
<status status="PASS" starttime="20231110 13:26:34.579" endtime="20231110 13:26:34.580"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:34.581" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:34.580" endtime="20231110 13:26:34.581"/>
</kw>
<status status="PASS" starttime="20231110 13:26:28.980" endtime="20231110 13:26:34.581"/>
</kw>
<msg timestamp="20231110 13:26:34.581" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:28.979" endtime="20231110 13:26:34.581"/>
</kw>
<msg timestamp="20231110 13:26:34.582" level="INFO">${output} = Container id: 2
Pipeline id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d
Container State: OPEN
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]
Replicas: ...</msg>
<status status="PASS" starttime="20231110 13:26:28.979" endtime="20231110 13:26:34.582"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Container id: ${CONTAINER}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:34.582" endtime="20231110 13:26:34.582"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Pipeline id</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:34.582" endtime="20231110 13:26:34.583"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Datanodes</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:34.583" endtime="20231110 13:26:34.583"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:28.977" endtime="20231110 13:26:34.584"/>
</test>
<test id="s1-s2-s3-t8" name="Verbose container info" line="70">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin --verbose container info "${CONTAINER}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:34.589" level="INFO">Running command 'ozone admin --verbose container info "2" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:39.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:39.712" level="INFO">${output} = Container id: 2
Pipeline Info: Pipeline[ Id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), Replic...</msg>
<status status="PASS" starttime="20231110 13:26:34.586" endtime="20231110 13:26:39.712"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:39.714" level="INFO">Container id: 2
Pipeline Info: Pipeline[ Id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:25:57.971Z[UTC]]
Container State: OPEN
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]
Replicas: [State: OPEN; ReplicaIndex: 0; Origin: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb; Location: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]</msg>
<status status="PASS" starttime="20231110 13:26:39.713" endtime="20231110 13:26:39.714"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:39.715" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:39.714" endtime="20231110 13:26:39.715"/>
</kw>
<status status="PASS" starttime="20231110 13:26:34.586" endtime="20231110 13:26:39.715"/>
</kw>
<msg timestamp="20231110 13:26:39.715" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:34.586" endtime="20231110 13:26:39.715"/>
</kw>
<msg timestamp="20231110 13:26:39.716" level="INFO">${output} = Container id: 2
Pipeline Info: Pipeline[ Id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), Replic...</msg>
<status status="PASS" starttime="20231110 13:26:34.585" endtime="20231110 13:26:39.716"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Pipeline Info</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:39.716" endtime="20231110 13:26:39.716"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:34.584" endtime="20231110 13:26:39.717"/>
</test>
<test id="s1-s2-s3-t9" name="Close container" line="74">
<kw name="Execute" library="os">
<var>${container}</var>
<arg>ozone admin container list --state OPEN | jq -r 'select(.replicationConfig.replicationFactor == "THREE") | .containerID' | head -1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:39.728" level="INFO">Running command 'ozone admin container list --state OPEN | jq -r 'select(.replicationConfig.replicationFactor == "THREE") | .containerID' | head -1 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:45.178" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:45.178" level="INFO">${output} = 1</msg>
<status status="PASS" starttime="20231110 13:26:39.722" endtime="20231110 13:26:45.178"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:45.180" level="INFO">1</msg>
<status status="PASS" starttime="20231110 13:26:45.179" endtime="20231110 13:26:45.180"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:45.181" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:45.180" endtime="20231110 13:26:45.181"/>
</kw>
<status status="PASS" starttime="20231110 13:26:39.721" endtime="20231110 13:26:45.181"/>
</kw>
<msg timestamp="20231110 13:26:45.181" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:39.721" endtime="20231110 13:26:45.181"/>
</kw>
<msg timestamp="20231110 13:26:45.182" level="INFO">${container} = 1</msg>
<status status="PASS" starttime="20231110 13:26:39.720" endtime="20231110 13:26:45.182"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone admin container close "${container}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:45.187" level="INFO">Running command 'ozone admin container close "1" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:50.609" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:50.609" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:26:45.184" endtime="20231110 13:26:50.609"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:50.610" level="INFO"/>
<status status="PASS" starttime="20231110 13:26:50.609" endtime="20231110 13:26:50.610"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:50.611" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:50.611" endtime="20231110 13:26:50.611"/>
</kw>
<status status="PASS" starttime="20231110 13:26:45.183" endtime="20231110 13:26:50.611"/>
</kw>
<msg timestamp="20231110 13:26:50.611" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:45.183" endtime="20231110 13:26:50.612"/>
</kw>
<status status="PASS" starttime="20231110 13:26:45.182" endtime="20231110 13:26:50.612"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container info "${container}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:50.618" level="INFO">Running command 'ozone admin container info "1" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:26:55.746" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:26:55.746" level="INFO">${output} = Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5b...</msg>
<status status="PASS" starttime="20231110 13:26:50.614" endtime="20231110 13:26:55.746"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:26:55.748" level="INFO">Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net]
Replicas: [State: OPEN; ReplicaIndex: 0; Origin: 2715dbc6-238d-40ae-99dd-28a8d9c5272c; Location: 2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
State: OPEN; ReplicaIndex: 0; Origin: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52; Location: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
State: OPEN; ReplicaIndex: 0; Origin: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb; Location: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]</msg>
<status status="PASS" starttime="20231110 13:26:55.747" endtime="20231110 13:26:55.748"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:26:55.749" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:26:55.748" endtime="20231110 13:26:55.749"/>
</kw>
<status status="PASS" starttime="20231110 13:26:50.613" endtime="20231110 13:26:55.749"/>
</kw>
<msg timestamp="20231110 13:26:55.749" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:50.613" endtime="20231110 13:26:55.749"/>
</kw>
<msg timestamp="20231110 13:26:55.750" level="INFO">${output} = Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5b...</msg>
<status status="PASS" starttime="20231110 13:26:50.612" endtime="20231110 13:26:55.750"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>CLOS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:26:55.750" endtime="20231110 13:26:55.750"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>1min</arg>
<arg>10sec</arg>
<arg>Container is closed</arg>
<arg>${container}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Container is closed">
<arg>${container}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container info "${container}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:26:55.756" level="INFO">Running command 'ozone admin container info "1" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:00.925" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:00.925" level="INFO">${output} = Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5b...</msg>
<status status="PASS" starttime="20231110 13:26:55.753" endtime="20231110 13:27:00.925"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:00.927" level="INFO">Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net]
Replicas: [State: OPEN; ReplicaIndex: 0; Origin: 2715dbc6-238d-40ae-99dd-28a8d9c5272c; Location: 2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
State: OPEN; ReplicaIndex: 0; Origin: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52; Location: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
State: OPEN; ReplicaIndex: 0; Origin: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb; Location: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]</msg>
<status status="PASS" starttime="20231110 13:27:00.926" endtime="20231110 13:27:00.928"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:00.929" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:00.928" endtime="20231110 13:27:00.929"/>
</kw>
<status status="PASS" starttime="20231110 13:26:55.753" endtime="20231110 13:27:00.929"/>
</kw>
<msg timestamp="20231110 13:27:00.929" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:26:55.752" endtime="20231110 13:27:00.930"/>
</kw>
<msg timestamp="20231110 13:27:00.930" level="INFO">${output} = Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5b...</msg>
<status status="PASS" starttime="20231110 13:26:55.752" endtime="20231110 13:27:00.930"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>CLOSED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20231110 13:27:00.931" level="FAIL">'Container id: 1
Pipeline id: 6a2cead0-b51a-4d96-a769-6a4f55321e82
Container State: CLOSING
Datanodes: [7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net,
2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net]
Replicas: [State: OPEN; ReplicaIndex: 0; Origin: 2715dbc6-238d-40ae-99dd-28a8d9c5272c; Location: 2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
State: OPEN; ReplicaIndex: 0; Origin: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52; Location: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
State: OPEN; ReplicaIndex: 0; Origin: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb; Location: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]' does not contain 'CLOSED'</msg>
<status status="FAIL" starttime="20231110 13:27:00.930" endtime="20231110 13:27:00.932"/>
</kw>
<status status="FAIL" starttime="20231110 13:26:55.751" endtime="20231110 13:27:00.932"/>
</kw>
<kw name="Container is closed">
<arg>${container}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin container info "${container}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:10.938" level="INFO">Running command 'ozone admin container info "1" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:16.234" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:16.234" level="INFO">${output} = Container id: 1
Pipeline id: 602d4c03-397f-4836-99eb-5bef9b5944e9
Container State: CLOSED
Datanodes: [2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
2f4fc5bf...</msg>
<status status="PASS" starttime="20231110 13:27:10.935" endtime="20231110 13:27:16.234"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:16.236" level="INFO">Container id: 1
Pipeline id: 602d4c03-397f-4836-99eb-5bef9b5944e9
Container State: CLOSED
Datanodes: [2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]
Replicas: [State: CLOSED; ReplicaIndex: 0; Origin: 2715dbc6-238d-40ae-99dd-28a8d9c5272c; Location: 2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
State: CLOSED; ReplicaIndex: 0; Origin: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52; Location: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net,
State: CLOSED; ReplicaIndex: 0; Origin: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb; Location: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net]</msg>
<status status="PASS" starttime="20231110 13:27:16.235" endtime="20231110 13:27:16.236"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:16.237" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:16.236" endtime="20231110 13:27:16.237"/>
</kw>
<status status="PASS" starttime="20231110 13:27:10.935" endtime="20231110 13:27:16.237"/>
</kw>
<msg timestamp="20231110 13:27:16.237" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:10.934" endtime="20231110 13:27:16.238"/>
</kw>
<msg timestamp="20231110 13:27:16.238" level="INFO">${output} = Container id: 1
Pipeline id: 602d4c03-397f-4836-99eb-5bef9b5944e9
Container State: CLOSED
Datanodes: [2715dbc6-238d-40ae-99dd-28a8d9c5272c/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net,
2f4fc5bf...</msg>
<status status="PASS" starttime="20231110 13:27:10.934" endtime="20231110 13:27:16.238"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>CLOSED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:16.238" endtime="20231110 13:27:16.238"/>
</kw>
<status status="PASS" starttime="20231110 13:27:10.933" endtime="20231110 13:27:16.239"/>
</kw>
<status status="PASS" starttime="20231110 13:26:55.751" endtime="20231110 13:27:16.239"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:26:39.719" endtime="20231110 13:27:16.239"/>
</test>
<test id="s1-s2-s3-t10" name="Incomplete command" line="81">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>ozone admin container</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:16.246" level="INFO">Running command 'ozone admin container 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:19.979" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:27:19.979" level="INFO">${output} = Incomplete command
Usage: ozone admin container [-hV] [COMMAND]
Container specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
C...</msg>
<status status="PASS" starttime="20231110 13:27:16.243" endtime="20231110 13:27:19.979"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:19.980" level="INFO">Incomplete command
Usage: ozone admin container [-hV] [COMMAND]
Container specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Commands:
  list    List containers
  info    Show information about a specific container
  create  Create container
  close   close container
  report  Display the container summary report</msg>
<status status="PASS" starttime="20231110 13:27:19.980" endtime="20231110 13:27:19.981"/>
</kw>
<msg timestamp="20231110 13:27:19.981" level="INFO">${output} = Incomplete command
Usage: ozone admin container [-hV] [COMMAND]
Container specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
C...</msg>
<status status="PASS" starttime="20231110 13:27:16.243" endtime="20231110 13:27:19.981"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Incomplete command</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:19.981" endtime="20231110 13:27:19.982"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>list</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:19.982" endtime="20231110 13:27:19.982"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>info</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:19.982" endtime="20231110 13:27:19.983"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>create</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:19.983" endtime="20231110 13:27:19.983"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>close</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:19.983" endtime="20231110 13:27:19.984"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:16.241" endtime="20231110 13:27:19.984"/>
</test>
<test id="s1-s2-s3-t11" name="Cannot close container without admin privilege" line="93">
<kw name="Requires admin privilege" library="commonlib">
<arg>ozone admin container close "${CONTAINER}"</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip privilege check in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20231110 13:27:19.986" endtime="20231110 13:27:19.987"/>
</kw>
<kw name="Kinit test user" library="commonlib">
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:19.992" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:19.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:19.998" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:27:19.989" endtime="20231110 13:27:19.998"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:20.000" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:27:19.999" endtime="20231110 13:27:20.000"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:20.001" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:20.000" endtime="20231110 13:27:20.001"/>
</kw>
<status status="PASS" starttime="20231110 13:27:19.989" endtime="20231110 13:27:20.001"/>
</kw>
<msg timestamp="20231110 13:27:20.001" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:19.988" endtime="20231110 13:27:20.001"/>
</kw>
<msg timestamp="20231110 13:27:20.002" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:27:19.988" endtime="20231110 13:27:20.002"/>
</kw>
<msg timestamp="20231110 13:27:20.002" level="INFO">${TEST_USER} = testuser2/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:27:19.987" endtime="20231110 13:27:20.002"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:27:20.003" level="INFO">${TEST_USER} = testuser2/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:27:20.002" endtime="20231110 13:27:20.003"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:20.008" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser2.keytab testuser2/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:20.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:20.058" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:27:20.005" endtime="20231110 13:27:20.058"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:20.060" level="INFO"/>
<status status="PASS" starttime="20231110 13:27:20.059" endtime="20231110 13:27:20.060"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:20.061" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:20.060" endtime="20231110 13:27:20.061"/>
</kw>
<status status="PASS" starttime="20231110 13:27:20.005" endtime="20231110 13:27:20.061"/>
</kw>
<msg timestamp="20231110 13:27:20.061" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:20.004" endtime="20231110 13:27:20.061"/>
</kw>
<status status="PASS" starttime="20231110 13:27:20.004" endtime="20231110 13:27:20.062"/>
</kw>
<status status="PASS" starttime="20231110 13:27:20.003" endtime="20231110 13:27:20.062"/>
</kw>
<status status="PASS" starttime="20231110 13:27:19.987" endtime="20231110 13:27:20.062"/>
</kw>
<kw name="Access should be denied" library="commonlib">
<arg>${command}</arg>
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>${command}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:20.067" level="INFO">Running command 'ozone admin container close "2" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:25.409" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:27:25.409" level="INFO">${output} = Access denied for user testuser2/s3g@EXAMPLE.COM. SCM superuser privilege is required.</msg>
<status status="PASS" starttime="20231110 13:27:20.063" endtime="20231110 13:27:25.409"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:25.411" level="INFO">Access denied for user testuser2/s3g@EXAMPLE.COM. SCM superuser privilege is required.</msg>
<status status="PASS" starttime="20231110 13:27:25.410" endtime="20231110 13:27:25.411"/>
</kw>
<msg timestamp="20231110 13:27:25.411" level="INFO">${output} = Access denied for user testuser2/s3g@EXAMPLE.COM. SCM superuser privilege is required.</msg>
<status status="PASS" starttime="20231110 13:27:20.063" endtime="20231110 13:27:25.411"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Access denied</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:25.411" endtime="20231110 13:27:25.412"/>
</kw>
<status status="PASS" starttime="20231110 13:27:20.062" endtime="20231110 13:27:25.412"/>
</kw>
<status status="PASS" starttime="20231110 13:27:19.986" endtime="20231110 13:27:25.412"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:19.985" endtime="20231110 13:27:25.412"/>
</test>
<test id="s1-s2-s3-t12" name="Cannot create container without admin privilege" line="96">
<kw name="Requires admin privilege" library="commonlib">
<arg>ozone admin container create</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip privilege check in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20231110 13:27:25.417" endtime="20231110 13:27:25.417"/>
</kw>
<kw name="Kinit test user" library="commonlib">
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:25.423" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:25.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:25.428" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:27:25.420" endtime="20231110 13:27:25.428"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:25.430" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:27:25.429" endtime="20231110 13:27:25.430"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:25.430" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:25.430" endtime="20231110 13:27:25.431"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.419" endtime="20231110 13:27:25.431"/>
</kw>
<msg timestamp="20231110 13:27:25.431" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:25.419" endtime="20231110 13:27:25.431"/>
</kw>
<msg timestamp="20231110 13:27:25.431" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:27:25.418" endtime="20231110 13:27:25.431"/>
</kw>
<msg timestamp="20231110 13:27:25.432" level="INFO">${TEST_USER} = testuser2/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:27:25.418" endtime="20231110 13:27:25.432"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:27:25.433" level="INFO">${TEST_USER} = testuser2/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:27:25.432" endtime="20231110 13:27:25.433"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:25.439" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser2.keytab testuser2/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:25.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:25.556" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:27:25.435" endtime="20231110 13:27:25.556"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:25.558" level="INFO"/>
<status status="PASS" starttime="20231110 13:27:25.557" endtime="20231110 13:27:25.558"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:25.559" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:25.558" endtime="20231110 13:27:25.559"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.435" endtime="20231110 13:27:25.559"/>
</kw>
<msg timestamp="20231110 13:27:25.559" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:25.434" endtime="20231110 13:27:25.559"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.434" endtime="20231110 13:27:25.559"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.433" endtime="20231110 13:27:25.560"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.417" endtime="20231110 13:27:25.560"/>
</kw>
<kw name="Access should be denied" library="commonlib">
<arg>${command}</arg>
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>${command}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:25.564" level="INFO">Running command 'ozone admin container create 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:31.313" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:27:31.313" level="INFO">${output} = Access denied for user testuser2/s3g@EXAMPLE.COM. SCM superuser privilege is required.</msg>
<status status="PASS" starttime="20231110 13:27:25.561" endtime="20231110 13:27:31.313"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:31.314" level="INFO">Access denied for user testuser2/s3g@EXAMPLE.COM. SCM superuser privilege is required.</msg>
<status status="PASS" starttime="20231110 13:27:31.313" endtime="20231110 13:27:31.314"/>
</kw>
<msg timestamp="20231110 13:27:31.315" level="INFO">${output} = Access denied for user testuser2/s3g@EXAMPLE.COM. SCM superuser privilege is required.</msg>
<status status="PASS" starttime="20231110 13:27:25.561" endtime="20231110 13:27:31.315"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Access denied</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:31.315" endtime="20231110 13:27:31.315"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.560" endtime="20231110 13:27:31.315"/>
</kw>
<status status="PASS" starttime="20231110 13:27:25.416" endtime="20231110 13:27:31.316"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:25.415" endtime="20231110 13:27:31.316"/>
</test>
<test id="s1-s2-s3-t13" name="Reset user" line="99">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:31.324" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:31.329" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:31.329" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:27:31.321" endtime="20231110 13:27:31.329"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:31.331" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:27:31.330" endtime="20231110 13:27:31.331"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:31.331" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:31.331" endtime="20231110 13:27:31.332"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.320" endtime="20231110 13:27:31.332"/>
</kw>
<msg timestamp="20231110 13:27:31.332" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:31.320" endtime="20231110 13:27:31.332"/>
</kw>
<msg timestamp="20231110 13:27:31.332" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:27:31.319" endtime="20231110 13:27:31.332"/>
</kw>
<msg timestamp="20231110 13:27:31.333" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:27:31.319" endtime="20231110 13:27:31.333"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:27:31.333" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:27:31.333" endtime="20231110 13:27:31.333"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:31.338" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:31.513" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:31.513" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:27:31.336" endtime="20231110 13:27:31.513"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:31.515" level="INFO"/>
<status status="PASS" starttime="20231110 13:27:31.514" endtime="20231110 13:27:31.515"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:31.519" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:31.515" endtime="20231110 13:27:31.519"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.335" endtime="20231110 13:27:31.519"/>
</kw>
<msg timestamp="20231110 13:27:31.519" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:31.335" endtime="20231110 13:27:31.519"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.334" endtime="20231110 13:27:31.519"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.334" endtime="20231110 13:27:31.520"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.318" endtime="20231110 13:27:31.521"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.317" endtime="20231110 13:27:31.521"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:31.316" endtime="20231110 13:27:31.521"/>
</test>
<doc>Test ozone admin container command</doc>
<status status="PASS" starttime="20231110 13:25:35.948" endtime="20231110 13:27:31.525"/>
</suite>
<suite id="s1-s2-s4" name="Datanode" source="/opt/hadoop/smoketest/admincli/datanode.robot">
<test id="s1-s2-s4-t1" name="List datanodes" line="23">
<kw name="Execute" library="os">
<arg>ozone admin datanode list &gt; datanode.list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:31.559" level="INFO">Running command 'ozone admin datanode list &gt; datanode.list'.</msg>
<msg timestamp="20231110 13:27:37.154" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:37.154" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:27:31.555" endtime="20231110 13:27:37.154"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:37.156" level="INFO"/>
<status status="PASS" starttime="20231110 13:27:37.155" endtime="20231110 13:27:37.156"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:37.157" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:37.156" endtime="20231110 13:27:37.157"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.555" endtime="20231110 13:27:37.157"/>
</kw>
<msg timestamp="20231110 13:27:37.158" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:31.554" endtime="20231110 13:27:37.158"/>
</kw>
<status status="PASS" starttime="20231110 13:27:31.554" endtime="20231110 13:27:37.158"/>
</kw>
<kw name="Get File" library="OperatingSystem">
<var>${output}</var>
<arg>datanode.list</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20231110 13:27:37.158" level="INFO" html="true">Getting file '&lt;a href="file:///opt/hadoop/datanode.list"&gt;/opt/hadoop/datanode.list&lt;/a&gt;'.</msg>
<msg timestamp="20231110 13:27:37.159" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:37.158" endtime="20231110 13:27:37.159"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Datanode:</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:37.159" endtime="20231110 13:27:37.159"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Related pipelines:</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:37.159" endtime="20231110 13:27:37.160"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:31.553" endtime="20231110 13:27:37.160"/>
</test>
<test id="s1-s2-s4-t2" name="Filter list by UUID" line="29">
<kw name="Execute" library="os">
<var>${uuid}</var>
<arg>grep '^Datanode:' datanode.list | head -1 | awk '{ print \$2 }'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:37.167" level="INFO">Running command 'grep '^Datanode:' datanode.list | head -1 | awk '{ print $2 }' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:37.171" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:37.171" level="INFO">${output} = 2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:37.164" endtime="20231110 13:27:37.171"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:37.172" level="INFO">2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:37.172" endtime="20231110 13:27:37.173"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:37.173" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:37.173" endtime="20231110 13:27:37.173"/>
</kw>
<status status="PASS" starttime="20231110 13:27:37.163" endtime="20231110 13:27:37.174"/>
</kw>
<msg timestamp="20231110 13:27:37.174" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:37.163" endtime="20231110 13:27:37.174"/>
</kw>
<msg timestamp="20231110 13:27:37.174" level="INFO">${uuid} = 2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:37.163" endtime="20231110 13:27:37.174"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin datanode list --id "${uuid}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:37.178" level="INFO">Running command 'ozone admin datanode list --id "2715dbc6-238d-40ae-99dd-28a8d9c5272c" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:42.542" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:42.542" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:37.176" endtime="20231110 13:27:42.542"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:42.544" level="INFO">Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
370be141-9156-4943-af19-8ab4a9b979ee/RATIS/ONE/RATIS/OPEN/Leader
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Follower
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Follower
</msg>
<status status="PASS" starttime="20231110 13:27:42.543" endtime="20231110 13:27:42.544"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:42.545" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:42.544" endtime="20231110 13:27:42.545"/>
</kw>
<status status="PASS" starttime="20231110 13:27:37.175" endtime="20231110 13:27:42.545"/>
</kw>
<msg timestamp="20231110 13:27:42.545" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:37.175" endtime="20231110 13:27:42.545"/>
</kw>
<msg timestamp="20231110 13:27:42.545" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:37.174" endtime="20231110 13:27:42.545"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Datanode: ${uuid}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:42.546" endtime="20231110 13:27:42.546"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${datanodes}</var>
<arg>${output}</arg>
<arg>Datanode:</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20231110 13:27:42.546" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20231110 13:27:42.547" level="INFO">${datanodes} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)</msg>
<status status="PASS" starttime="20231110 13:27:42.546" endtime="20231110 13:27:42.547"/>
</kw>
<kw name="Split To Lines" library="String">
<var>@{lines}</var>
<arg>${datanodes}</arg>
<doc>Splits the given string to lines.</doc>
<msg timestamp="20231110 13:27:42.547" level="INFO">1 lines returned</msg>
<msg timestamp="20231110 13:27:42.547" level="INFO">@{lines} = [ Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines) ]</msg>
<status status="PASS" starttime="20231110 13:27:42.547" endtime="20231110 13:27:42.547"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${lines}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231110 13:27:42.548" level="INFO">Length is 1</msg>
<msg timestamp="20231110 13:27:42.548" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20231110 13:27:42.547" endtime="20231110 13:27:42.548"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:42.549" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:42.548" endtime="20231110 13:27:42.549"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:37.162" endtime="20231110 13:27:42.549"/>
</test>
<test id="s1-s2-s4-t3" name="Filter list by NodeOperationalState" line="38">
<kw name="Execute" library="os">
<var>${uuid}</var>
<arg>grep '^Datanode:' datanode.list | head -1 | awk '{ print \$2 }'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:42.555" level="INFO">Running command 'grep '^Datanode:' datanode.list | head -1 | awk '{ print $2 }' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:42.560" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:42.560" level="INFO">${output} = 2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:42.552" endtime="20231110 13:27:42.560"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:42.562" level="INFO">2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:42.561" endtime="20231110 13:27:42.562"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:42.562" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:42.562" endtime="20231110 13:27:42.563"/>
</kw>
<status status="PASS" starttime="20231110 13:27:42.552" endtime="20231110 13:27:42.563"/>
</kw>
<msg timestamp="20231110 13:27:42.563" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:42.551" endtime="20231110 13:27:42.563"/>
</kw>
<msg timestamp="20231110 13:27:42.563" level="INFO">${uuid} = 2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:42.551" endtime="20231110 13:27:42.563"/>
</kw>
<kw name="Execute" library="os">
<var>${expected}</var>
<arg>grep -c 'Operational State: IN_SERVICE' datanode.list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:42.567" level="INFO">Running command 'grep -c 'Operational State: IN_SERVICE' datanode.list 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:42.571" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:42.571" level="INFO">${output} = 3</msg>
<status status="PASS" starttime="20231110 13:27:42.565" endtime="20231110 13:27:42.571"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:42.572" level="INFO">3</msg>
<status status="PASS" starttime="20231110 13:27:42.572" endtime="20231110 13:27:42.572"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:42.573" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:42.573" endtime="20231110 13:27:42.573"/>
</kw>
<status status="PASS" starttime="20231110 13:27:42.564" endtime="20231110 13:27:42.573"/>
</kw>
<msg timestamp="20231110 13:27:42.573" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:42.564" endtime="20231110 13:27:42.574"/>
</kw>
<msg timestamp="20231110 13:27:42.574" level="INFO">${expected} = 3</msg>
<status status="PASS" starttime="20231110 13:27:42.563" endtime="20231110 13:27:42.574"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin datanode list --operational-state IN_SERVICE</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:42.578" level="INFO">Running command 'ozone admin datanode list --operational-state IN_SERVICE 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:47.878" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:47.878" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:42.575" endtime="20231110 13:27:47.878"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:47.880" level="INFO">Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
370be141-9156-4943-af19-8ab4a9b979ee/RATIS/ONE/RATIS/OPEN/Leader
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Follower
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Follower

Datanode: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52 (/default-rack/172.25.0.103/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Follower
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Leader
ca923417-e26b-461a-91c1-11adcb56a7b5/RATIS/ONE/RATIS/OPEN/Leader

Datanode: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb (/default-rack/172.25.0.102/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/4 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Leader
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Follower
a96c3762-e41e-4f5e-8090-fa0f0c00297b/RATIS/ONE/RATIS/OPEN/Leader
b54598e5-2b96-48a5-bd96-f3fbb80cc06d/STANDALONE/ONE/STAND_ALONE/OPEN/Follower
</msg>
<status status="PASS" starttime="20231110 13:27:47.879" endtime="20231110 13:27:47.880"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:47.881" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:47.881" endtime="20231110 13:27:47.881"/>
</kw>
<status status="PASS" starttime="20231110 13:27:42.575" endtime="20231110 13:27:47.882"/>
</kw>
<msg timestamp="20231110 13:27:47.882" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:42.574" endtime="20231110 13:27:47.882"/>
</kw>
<msg timestamp="20231110 13:27:47.882" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:42.574" endtime="20231110 13:27:47.882"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Datanode: ${uuid}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:47.882" endtime="20231110 13:27:47.883"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${datanodes}</var>
<arg>${output}</arg>
<arg>Datanode:</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20231110 13:27:47.883" level="INFO">3 out of 24 lines matched</msg>
<msg timestamp="20231110 13:27:47.884" level="INFO">${datanodes} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Datanode: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52 (/default-rac...</msg>
<status status="PASS" starttime="20231110 13:27:47.883" endtime="20231110 13:27:47.884"/>
</kw>
<kw name="Split To Lines" library="String">
<var>@{lines}</var>
<arg>${datanodes}</arg>
<doc>Splits the given string to lines.</doc>
<msg timestamp="20231110 13:27:47.884" level="INFO">3 lines returned</msg>
<msg timestamp="20231110 13:27:47.884" level="INFO">@{lines} = [ Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines) | Datanode: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52 (/default...</msg>
<status status="PASS" starttime="20231110 13:27:47.884" endtime="20231110 13:27:47.884"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${lines}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231110 13:27:47.885" level="INFO">Length is 3</msg>
<msg timestamp="20231110 13:27:47.885" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20231110 13:27:47.885" endtime="20231110 13:27:47.885"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>${expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:47.886" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:47.885" endtime="20231110 13:27:47.886"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:42.550" endtime="20231110 13:27:47.886"/>
</test>
<test id="s1-s2-s4-t4" name="Filter list by NodeState" line="48">
<kw name="Execute" library="os">
<var>${uuid}</var>
<arg>grep '^Datanode:' datanode.list | head -1 | awk '{ print \$2 }'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:47.894" level="INFO">Running command 'grep '^Datanode:' datanode.list | head -1 | awk '{ print $2 }' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:47.899" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:47.899" level="INFO">${output} = 2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:47.891" endtime="20231110 13:27:47.899"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:47.901" level="INFO">2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:47.900" endtime="20231110 13:27:47.901"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:47.902" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:47.901" endtime="20231110 13:27:47.902"/>
</kw>
<status status="PASS" starttime="20231110 13:27:47.889" endtime="20231110 13:27:47.902"/>
</kw>
<msg timestamp="20231110 13:27:47.902" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:47.889" endtime="20231110 13:27:47.902"/>
</kw>
<msg timestamp="20231110 13:27:47.903" level="INFO">${uuid} = 2715dbc6-238d-40ae-99dd-28a8d9c5272c</msg>
<status status="PASS" starttime="20231110 13:27:47.888" endtime="20231110 13:27:47.903"/>
</kw>
<kw name="Execute" library="os">
<var>${expected}</var>
<arg>grep -c 'Health State: HEALTHY' datanode.list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:47.908" level="INFO">Running command 'grep -c 'Health State: HEALTHY' datanode.list 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:47.911" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:47.911" level="INFO">${output} = 3</msg>
<status status="PASS" starttime="20231110 13:27:47.905" endtime="20231110 13:27:47.911"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:47.913" level="INFO">3</msg>
<status status="PASS" starttime="20231110 13:27:47.912" endtime="20231110 13:27:47.913"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:47.914" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:47.913" endtime="20231110 13:27:47.914"/>
</kw>
<status status="PASS" starttime="20231110 13:27:47.904" endtime="20231110 13:27:47.914"/>
</kw>
<msg timestamp="20231110 13:27:47.914" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:47.904" endtime="20231110 13:27:47.914"/>
</kw>
<msg timestamp="20231110 13:27:47.915" level="INFO">${expected} = 3</msg>
<status status="PASS" starttime="20231110 13:27:47.903" endtime="20231110 13:27:47.915"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin datanode list --node-state HEALTHY</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:47.920" level="INFO">Running command 'ozone admin datanode list --node-state HEALTHY 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:53.107" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:27:53.107" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:47.917" endtime="20231110 13:27:53.107"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:53.109" level="INFO">Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
370be141-9156-4943-af19-8ab4a9b979ee/RATIS/ONE/RATIS/OPEN/Leader
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Follower
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Follower

Datanode: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52 (/default-rack/172.25.0.103/ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Follower
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Leader
ca923417-e26b-461a-91c1-11adcb56a7b5/RATIS/ONE/RATIS/OPEN/Leader

Datanode: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb (/default-rack/172.25.0.102/ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/4 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related pipelines:
6a2cead0-b51a-4d96-a769-6a4f55321e82/RATIS/THREE/RATIS/OPEN/Leader
e6751dfc-e22f-4dde-b8ea-c17ce02d1c35/RATIS/THREE/RATIS/OPEN/Follower
a96c3762-e41e-4f5e-8090-fa0f0c00297b/RATIS/ONE/RATIS/OPEN/Leader
b54598e5-2b96-48a5-bd96-f3fbb80cc06d/STANDALONE/ONE/STAND_ALONE/OPEN/Follower
</msg>
<status status="PASS" starttime="20231110 13:27:53.108" endtime="20231110 13:27:53.109"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:53.110" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:53.110" endtime="20231110 13:27:53.110"/>
</kw>
<status status="PASS" starttime="20231110 13:27:47.916" endtime="20231110 13:27:53.111"/>
</kw>
<msg timestamp="20231110 13:27:53.111" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:47.916" endtime="20231110 13:27:53.111"/>
</kw>
<msg timestamp="20231110 13:27:53.111" level="INFO">${output} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Operational State: IN_SERVICE
Health State: HEALTHY
Related ...</msg>
<status status="PASS" starttime="20231110 13:27:47.915" endtime="20231110 13:27:53.111"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Datanode: ${uuid}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:53.111" endtime="20231110 13:27:53.112"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${datanodes}</var>
<arg>${output}</arg>
<arg>Datanode:</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20231110 13:27:53.112" level="INFO">3 out of 24 lines matched</msg>
<msg timestamp="20231110 13:27:53.112" level="INFO">${datanodes} = Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines)
Datanode: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52 (/default-rac...</msg>
<status status="PASS" starttime="20231110 13:27:53.112" endtime="20231110 13:27:53.112"/>
</kw>
<kw name="Split To Lines" library="String">
<var>@{lines}</var>
<arg>${datanodes}</arg>
<doc>Splits the given string to lines.</doc>
<msg timestamp="20231110 13:27:53.113" level="INFO">3 lines returned</msg>
<msg timestamp="20231110 13:27:53.113" level="INFO">@{lines} = [ Datanode: 2715dbc6-238d-40ae-99dd-28a8d9c5272c (/default-rack/172.25.0.104/ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/3 pipelines) | Datanode: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52 (/default...</msg>
<status status="PASS" starttime="20231110 13:27:53.113" endtime="20231110 13:27:53.113"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${lines}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20231110 13:27:53.114" level="INFO">Length is 3</msg>
<msg timestamp="20231110 13:27:53.114" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20231110 13:27:53.113" endtime="20231110 13:27:53.114"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>${expected}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:27:53.115" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:27:53.114" endtime="20231110 13:27:53.115"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:47.887" endtime="20231110 13:27:53.115"/>
</test>
<test id="s1-s2-s4-t5" name="Incomplete command" line="58">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>ozone admin datanode</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:53.120" level="INFO">Running command 'ozone admin datanode 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:27:56.836" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:27:56.836" level="INFO">${output} = Incomplete command
Usage: ozone admin datanode [-hV] [COMMAND]
Datanode specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Com...</msg>
<status status="PASS" starttime="20231110 13:27:53.117" endtime="20231110 13:27:56.836"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:27:56.838" level="INFO">Incomplete command
Usage: ozone admin datanode [-hV] [COMMAND]
Datanode specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Commands:
  list          List info of datanodes
  decommission  Decommission a datanode
  maintenance   Put a datanode into Maintenance Mode
  recommission  Return a datanode to service
  usageinfo     List usage information (such as Capacity, SCMUsed, Remaining)
                  of a datanode by IP address or UUID</msg>
<status status="PASS" starttime="20231110 13:27:56.837" endtime="20231110 13:27:56.838"/>
</kw>
<msg timestamp="20231110 13:27:56.838" level="INFO">${output} = Incomplete command
Usage: ozone admin datanode [-hV] [COMMAND]
Datanode specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Com...</msg>
<status status="PASS" starttime="20231110 13:27:53.117" endtime="20231110 13:27:56.838"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Incomplete command</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:56.839" endtime="20231110 13:27:56.839"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>list</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:27:56.839" endtime="20231110 13:27:56.839"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:53.116" endtime="20231110 13:27:56.840"/>
</test>
<test id="s1-s2-s4-t6" name="List datanodes as JSON" line="67">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin datanode list --json | jq -r '.'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:27:56.863" level="INFO">Running command 'ozone admin datanode list --json | jq -r '.' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:02.893" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:02.893" level="INFO">${output} = [
  {
    "datanodeDetails": {
      "level": 0,
      "cost": 0,
      "uuid": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "uuidString": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "ipAddress": "...</msg>
<status status="PASS" starttime="20231110 13:27:56.843" endtime="20231110 13:28:02.894"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:02.895" level="INFO">[
  {
    "datanodeDetails": {
      "level": 0,
      "cost": 0,
      "uuid": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "uuidString": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "ipAddress": "172.25.0.104",
      "hostName": "ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net",
      "ports": [
        {
          "name": "HTTP",
          "value": 9882
        },
        {
          "name": "CLIENT_RPC",
          "value": 9864
        },
        {
          "name": "REPLICATION",
          "value": 9886
        },
        {
          "name": "RATIS",
          "value": 9858
        },
        {
          "name": "RATIS_ADMIN",
          "value": 9857
        },
        {
          "name": "RATIS_SERVER",
          "value": 9856
        },
        {
          "name": "RATIS_DATASTREAM",
          "value": 9855
        },
        {
          "name": "STANDALONE",
          "value": 9859
        }
      ],
      "setupTime": 0,
      "persistedOpState": "IN_SERVICE",
      "persistedOpStateExpiryEpochSec": 0,
      "initialVersion": 0,
      "currentVersion": 1,
      "signature": -1340184082,
      "decommissioned": false,
      "maintenance": false,
      "networkLocation": "/default-rack",
      "networkName": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "networkFullPath": "/default-rack/2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "numOfLeaves": 1
    },
    "healthState": "HEALTHY",
    "opState": "IN_SERVICE"
  },
  {
    "datanodeDetails": {
      "level": 0,
      "cost": 0,
      "uuid": "2f4fc5bf-cc15-415e-95af-5d0b04d72e52",
      "uuidString": "2f4fc5bf-cc15-415e-95af-5d0b04d72e52",
      "ipAddress": "172.25.0.103",
      "hostName": "ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net",
      "ports": [
        {
          "name": "HTTP",
          "value": 9882
        },
        {
          "name": "CLIENT_RPC",
          "value": 9864
        },
        {
          "name": "REPLICATION",
          "value": 9886
        },
        {
          "name": "RATIS",
          "value": 9858
        },
        {
          "name": "RATIS_ADMIN",
          "value": 9857
        },
        {
          "name": "RATIS_SERVER",
          "value": 9856
        },
        {
          "name": "RATIS_DATASTREAM",
          "value": 9855
        },
        {
          "name": "STANDALONE",
          "value": 9859
        }
      ],
      "setupTime": 0,
      "persistedOpState": "IN_SERVICE",
      "persistedOpStateExpiryEpochSec": 0,
      "initialVersion": 0,
      "currentVersion": 1,
      "signature": 2036951177,
      "decommissioned": false,
      "maintenance": false,
      "networkLocation": "/default-rack",
      "networkName": "2f4fc5bf-cc15-415e-95af-5d0b04d72e52",
      "networkFullPath": "/default-rack/2f4fc5bf-cc15-415e-95af-5d0b04d72e52",
      "numOfLeaves": 1
    },
    "healthState": "HEALTHY",
    "opState": "IN_SERVICE"
  },
  {
    "datanodeDetails": {
      "level": 0,
      "cost": 0,
      "uuid": "7d87a6da-c76b-42ed-991f-e2ea2c5470fb",
      "uuidString": "7d87a6da-c76b-42ed-991f-e2ea2c5470fb",
      "ipAddress": "172.25.0.102",
      "hostName": "ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net",
      "ports": [
        {
          "name": "HTTP",
          "value": 9882
        },
        {
          "name": "CLIENT_RPC",
          "value": 9864
        },
        {
          "name": "REPLICATION",
          "value": 9886
        },
        {
          "name": "RATIS",
          "value": 9858
        },
        {
          "name": "RATIS_ADMIN",
          "value": 9857
        },
        {
          "name": "RATIS_SERVER",
          "value": 9856
        },
        {
          "name": "RATIS_DATASTREAM",
          "value": 9855
        },
        {
          "name": "STANDALONE",
          "value": 9859
        }
      ],
      "setupTime": 0,
      "persistedOpState": "IN_SERVICE",
      "persistedOpStateExpiryEpochSec": 0,
      "initialVersion": 0,
      "currentVersion": 1,
      "signature": 1002683397,
      "decommissioned": false,
      "maintenance": false,
      "networkLocation": "/default-rack",
      "networkName": "7d87a6da-c76b-42ed-991f-e2ea2c5470fb",
      "networkFullPath": "/default-rack/7d87a6da-c76b-42ed-991f-e2ea2c5470fb",
      "numOfLeaves": 1
    },
    "healthState": "HEALTHY",
    "opState": "IN_SERVICE"
  }
]</msg>
<status status="PASS" starttime="20231110 13:28:02.894" endtime="20231110 13:28:02.895"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:02.896" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:02.896" endtime="20231110 13:28:02.896"/>
</kw>
<status status="PASS" starttime="20231110 13:27:56.843" endtime="20231110 13:28:02.897"/>
</kw>
<msg timestamp="20231110 13:28:02.897" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:27:56.842" endtime="20231110 13:28:02.897"/>
</kw>
<msg timestamp="20231110 13:28:02.897" level="INFO">${output} = [
  {
    "datanodeDetails": {
      "level": 0,
      "cost": 0,
      "uuid": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "uuidString": "2715dbc6-238d-40ae-99dd-28a8d9c5272c",
      "ipAddress": "...</msg>
<status status="PASS" starttime="20231110 13:27:56.842" endtime="20231110 13:28:02.897"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>datanodeDetails</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:02.897" endtime="20231110 13:28:02.898"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>healthState</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:02.898" endtime="20231110 13:28:02.898"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>opState</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:02.899" endtime="20231110 13:28:02.899"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:27:56.841" endtime="20231110 13:28:02.899"/>
</test>
<doc>Test ozone admin datanode command</doc>
<status status="PASS" starttime="20231110 13:27:31.533" endtime="20231110 13:28:02.901"/>
</suite>
<suite id="s1-s2-s5" name="Pipeline" source="/opt/hadoop/smoketest/admincli/pipeline.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:02.923" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:02.927" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:02.927" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:28:02.919" endtime="20231110 13:28:02.928"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:02.929" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:28:02.929" endtime="20231110 13:28:02.929"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:02.930" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:02.930" endtime="20231110 13:28:02.930"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.919" endtime="20231110 13:28:02.931"/>
</kw>
<msg timestamp="20231110 13:28:02.931" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:02.918" endtime="20231110 13:28:02.931"/>
</kw>
<msg timestamp="20231110 13:28:02.931" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:28:02.918" endtime="20231110 13:28:02.931"/>
</kw>
<msg timestamp="20231110 13:28:02.932" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:28:02.917" endtime="20231110 13:28:02.932"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:28:02.932" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:28:02.932" endtime="20231110 13:28:02.933"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:02.938" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:02.955" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:02.955" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:28:02.935" endtime="20231110 13:28:02.955"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:02.956" level="INFO"/>
<status status="PASS" starttime="20231110 13:28:02.956" endtime="20231110 13:28:02.956"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:02.957" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:02.957" endtime="20231110 13:28:02.957"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.934" endtime="20231110 13:28:02.958"/>
</kw>
<msg timestamp="20231110 13:28:02.958" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:02.934" endtime="20231110 13:28:02.958"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.933" endtime="20231110 13:28:02.958"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.933" endtime="20231110 13:28:02.958"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.917" endtime="20231110 13:28:02.958"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.911" endtime="20231110 13:28:02.958"/>
</kw>
<test id="s1-s2-s5-t1" name="Create pipeline" line="28">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline create</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:02.965" level="INFO">Running command 'ozone admin pipeline create 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:07.695" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:07.695" level="INFO">${output} = PipelineID=77592a9d-2ff2-40ea-a4c1-bdff0e77acb7 is created. Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_oz...</msg>
<status status="PASS" starttime="20231110 13:28:02.962" endtime="20231110 13:28:07.695"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:07.696" level="INFO">PipelineID=77592a9d-2ff2-40ea-a4c1-bdff0e77acb7 is created. Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]</msg>
<status status="PASS" starttime="20231110 13:28:07.696" endtime="20231110 13:28:07.696"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:07.698" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:07.697" endtime="20231110 13:28:07.698"/>
</kw>
<status status="PASS" starttime="20231110 13:28:02.961" endtime="20231110 13:28:07.698"/>
</kw>
<msg timestamp="20231110 13:28:07.698" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:02.961" endtime="20231110 13:28:07.698"/>
</kw>
<msg timestamp="20231110 13:28:07.698" level="INFO">${output} = PipelineID=77592a9d-2ff2-40ea-a4c1-bdff0e77acb7 is created. Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_oz...</msg>
<status status="PASS" starttime="20231110 13:28:02.960" endtime="20231110 13:28:07.698"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>is created.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:07.699" endtime="20231110 13:28:07.699"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>STANDALONE/ONE</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:07.699" endtime="20231110 13:28:07.699"/>
</kw>
<kw name="Execute" library="os">
<var>${pipeline}</var>
<arg>echo "${output}" | grep 'is created' | cut -f1 -d' ' | cut -f2 -d'='</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:07.705" level="INFO">Running command 'echo "PipelineID=77592a9d-2ff2-40ea-a4c1-bdff0e77acb7 is created. Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]" | grep 'is created' | cut -f1 -d' ' | cut -f2 -d'=' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:07.710" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:07.711" level="INFO">${output} = 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7</msg>
<status status="PASS" starttime="20231110 13:28:07.701" endtime="20231110 13:28:07.711"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:07.712" level="INFO">77592a9d-2ff2-40ea-a4c1-bdff0e77acb7</msg>
<status status="PASS" starttime="20231110 13:28:07.711" endtime="20231110 13:28:07.712"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:07.713" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:07.713" endtime="20231110 13:28:07.713"/>
</kw>
<status status="PASS" starttime="20231110 13:28:07.701" endtime="20231110 13:28:07.714"/>
</kw>
<msg timestamp="20231110 13:28:07.714" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:07.700" endtime="20231110 13:28:07.714"/>
</kw>
<msg timestamp="20231110 13:28:07.714" level="INFO">${pipeline} = 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7</msg>
<status status="PASS" starttime="20231110 13:28:07.700" endtime="20231110 13:28:07.714"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${PIPELINE}</arg>
<arg>${pipeline}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:28:07.715" level="INFO">${PIPELINE} = 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7</msg>
<status status="PASS" starttime="20231110 13:28:07.714" endtime="20231110 13:28:07.715"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:02.959" endtime="20231110 13:28:07.715"/>
</test>
<test id="s1-s2-s5-t2" name="List pipelines" line="35">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:07.721" level="INFO">Running command 'ozone admin pipeline list 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:12.912" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:12.913" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:07.719" endtime="20231110 13:28:12.913"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:12.915" level="INFO">Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]
Pipeline[ Id: 370be141-9156-4943-af19-8ab4a9b979ee, Nodes: 2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:2715dbc6-238d-40ae-99dd-28a8d9c5272c, CreationTimestamp2023-11-10T13:24:13.220Z[UTC]]
Pipeline[ Id: 6a2cead0-b51a-4d96-a769-6a4f55321e82, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102)2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103)2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/THREE, State:OPEN, leaderId:7d87a6da-c76b-42ed-991f-e2ea2c5470fb, CreationTimestamp2023-11-10T13:24:13.492Z[UTC]]
Pipeline[ Id: e6751dfc-e22f-4dde-b8ea-c17ce02d1c35, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103)7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102)2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/THREE, State:OPEN, leaderId:2f4fc5bf-cc15-415e-95af-5d0b04d72e52, CreationTimestamp2023-11-10T13:24:13.593Z[UTC]]
Pipeline[ Id: a96c3762-e41e-4f5e-8090-fa0f0c00297b, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:7d87a6da-c76b-42ed-991f-e2ea2c5470fb, CreationTimestamp2023-11-10T13:24:12.676Z[UTC]]
Pipeline[ Id: ca923417-e26b-461a-91c1-11adcb56a7b5, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:2f4fc5bf-cc15-415e-95af-5d0b04d72e52, CreationTimestamp2023-11-10T13:24:13.083Z[UTC]]
Pipeline[ Id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:25:57.971Z[UTC]]</msg>
<status status="PASS" starttime="20231110 13:28:12.913" endtime="20231110 13:28:12.915"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:12.916" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:12.915" endtime="20231110 13:28:12.916"/>
</kw>
<status status="PASS" starttime="20231110 13:28:07.718" endtime="20231110 13:28:12.916"/>
</kw>
<msg timestamp="20231110 13:28:12.916" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:07.718" endtime="20231110 13:28:12.917"/>
</kw>
<msg timestamp="20231110 13:28:12.917" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:07.717" endtime="20231110 13:28:12.917"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>STANDALONE/ONE</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:12.917" endtime="20231110 13:28:12.918"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:07.716" endtime="20231110 13:28:12.918"/>
</test>
<test id="s1-s2-s5-t3" name="List pipeline with json option" line="39">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list --json | jq 'map(.replicationConfig) | contains([{"replicationFactor": "ONE", "replicationType": "STANDALONE"}])'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:12.926" level="INFO">Running command 'ozone admin pipeline list --json | jq 'map(.replicationConfig) | contains([{"replicationFactor": "ONE", "replicationType": "STANDALONE"}])' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:17.980" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:17.980" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20231110 13:28:12.922" endtime="20231110 13:28:17.980"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:17.981" level="INFO">true</msg>
<status status="PASS" starttime="20231110 13:28:17.980" endtime="20231110 13:28:17.982"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:17.982" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:17.982" endtime="20231110 13:28:17.983"/>
</kw>
<status status="PASS" starttime="20231110 13:28:12.922" endtime="20231110 13:28:17.983"/>
</kw>
<msg timestamp="20231110 13:28:17.983" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:12.921" endtime="20231110 13:28:17.983"/>
</kw>
<msg timestamp="20231110 13:28:17.983" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20231110 13:28:12.920" endtime="20231110 13:28:17.983"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>$output</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231110 13:28:17.983" endtime="20231110 13:28:17.991"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:12.919" endtime="20231110 13:28:17.991"/>
</test>
<test id="s1-s2-s5-t4" name="List pipelines with explicit host" line="44">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list --scm ${SCM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:17.998" level="INFO">Running command 'ozone admin pipeline list --scm scm1.org 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:22.932" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:22.932" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:17.995" endtime="20231110 13:28:22.932"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:22.934" level="INFO">Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]
Pipeline[ Id: 370be141-9156-4943-af19-8ab4a9b979ee, Nodes: 2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:2715dbc6-238d-40ae-99dd-28a8d9c5272c, CreationTimestamp2023-11-10T13:24:13.220Z[UTC]]
Pipeline[ Id: 6a2cead0-b51a-4d96-a769-6a4f55321e82, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102)2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103)2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/THREE, State:OPEN, leaderId:7d87a6da-c76b-42ed-991f-e2ea2c5470fb, CreationTimestamp2023-11-10T13:24:13.492Z[UTC]]
Pipeline[ Id: e6751dfc-e22f-4dde-b8ea-c17ce02d1c35, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103)7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102)2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/THREE, State:OPEN, leaderId:2f4fc5bf-cc15-415e-95af-5d0b04d72e52, CreationTimestamp2023-11-10T13:24:13.593Z[UTC]]
Pipeline[ Id: a96c3762-e41e-4f5e-8090-fa0f0c00297b, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:7d87a6da-c76b-42ed-991f-e2ea2c5470fb, CreationTimestamp2023-11-10T13:24:12.676Z[UTC]]
Pipeline[ Id: ca923417-e26b-461a-91c1-11adcb56a7b5, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:2f4fc5bf-cc15-415e-95af-5d0b04d72e52, CreationTimestamp2023-11-10T13:24:13.083Z[UTC]]
Pipeline[ Id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:25:57.971Z[UTC]]</msg>
<status status="PASS" starttime="20231110 13:28:22.933" endtime="20231110 13:28:22.934"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:22.935" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:22.934" endtime="20231110 13:28:22.935"/>
</kw>
<status status="PASS" starttime="20231110 13:28:17.994" endtime="20231110 13:28:22.935"/>
</kw>
<msg timestamp="20231110 13:28:22.935" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:17.994" endtime="20231110 13:28:22.935"/>
</kw>
<msg timestamp="20231110 13:28:22.936" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:17.993" endtime="20231110 13:28:22.936"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>STANDALONE/ONE</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:22.936" endtime="20231110 13:28:22.936"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:17.992" endtime="20231110 13:28:22.937"/>
</test>
<test id="s1-s2-s5-t5" name="List pipelines with explicit host and json option" line="48">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list --scm ${SCM} --json | jq 'map(.replicationConfig) | contains([{"replicationFactor": "ONE", "replicationType": "STANDALONE"}])'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:22.944" level="INFO">Running command 'ozone admin pipeline list --scm scm1.org --json | jq 'map(.replicationConfig) | contains([{"replicationFactor": "ONE", "replicationType": "STANDALONE"}])' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:28.092" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:28.092" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20231110 13:28:22.940" endtime="20231110 13:28:28.092"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:28.094" level="INFO">true</msg>
<status status="PASS" starttime="20231110 13:28:28.093" endtime="20231110 13:28:28.094"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:28.094" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:28.094" endtime="20231110 13:28:28.095"/>
</kw>
<status status="PASS" starttime="20231110 13:28:22.940" endtime="20231110 13:28:28.095"/>
</kw>
<msg timestamp="20231110 13:28:28.095" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:22.939" endtime="20231110 13:28:28.095"/>
</kw>
<msg timestamp="20231110 13:28:28.095" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20231110 13:28:22.939" endtime="20231110 13:28:28.095"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>$output</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20231110 13:28:28.096" endtime="20231110 13:28:28.096"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:22.937" endtime="20231110 13:28:28.096"/>
</test>
<test id="s1-s2-s5-t6" name="Deactivate pipeline" line="53">
<kw name="Execute" library="os">
<arg>ozone admin pipeline deactivate "${PIPELINE}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:28.104" level="INFO">Running command 'ozone admin pipeline deactivate "77592a9d-2ff2-40ea-a4c1-bdff0e77acb7" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:33.463" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:33.463" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:28:28.100" endtime="20231110 13:28:33.463"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:33.465" level="INFO"/>
<status status="PASS" starttime="20231110 13:28:33.464" endtime="20231110 13:28:33.465"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:33.465" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:33.465" endtime="20231110 13:28:33.466"/>
</kw>
<status status="PASS" starttime="20231110 13:28:28.100" endtime="20231110 13:28:33.466"/>
</kw>
<msg timestamp="20231110 13:28:33.466" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:28.099" endtime="20231110 13:28:33.466"/>
</kw>
<status status="PASS" starttime="20231110 13:28:28.099" endtime="20231110 13:28:33.466"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list | grep "${PIPELINE}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:33.472" level="INFO">Running command 'ozone admin pipeline list | grep "77592a9d-2ff2-40ea-a4c1-bdff0e77acb7" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:38.031" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:38.031" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:33.469" endtime="20231110 13:28:38.031"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:38.034" level="INFO">Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:DORMANT, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]</msg>
<status status="PASS" starttime="20231110 13:28:38.033" endtime="20231110 13:28:38.034"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:38.035" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:38.035" endtime="20231110 13:28:38.036"/>
</kw>
<status status="PASS" starttime="20231110 13:28:33.468" endtime="20231110 13:28:38.036"/>
</kw>
<msg timestamp="20231110 13:28:38.036" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:33.467" endtime="20231110 13:28:38.036"/>
</kw>
<msg timestamp="20231110 13:28:38.036" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:33.466" endtime="20231110 13:28:38.036"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>DORMANT</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:38.037" endtime="20231110 13:28:38.037"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:28.098" endtime="20231110 13:28:38.037"/>
</test>
<test id="s1-s2-s5-t7" name="Activate pipeline" line="58">
<kw name="Execute" library="os">
<arg>ozone admin pipeline activate "${PIPELINE}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:38.045" level="INFO">Running command 'ozone admin pipeline activate "77592a9d-2ff2-40ea-a4c1-bdff0e77acb7" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:43.030" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:43.030" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:28:38.041" endtime="20231110 13:28:43.030"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:43.032" level="INFO"/>
<status status="PASS" starttime="20231110 13:28:43.031" endtime="20231110 13:28:43.032"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:43.033" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:43.032" endtime="20231110 13:28:43.033"/>
</kw>
<status status="PASS" starttime="20231110 13:28:38.041" endtime="20231110 13:28:43.033"/>
</kw>
<msg timestamp="20231110 13:28:43.033" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:38.040" endtime="20231110 13:28:43.033"/>
</kw>
<status status="PASS" starttime="20231110 13:28:38.040" endtime="20231110 13:28:43.033"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list | grep "${PIPELINE}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:43.038" level="INFO">Running command 'ozone admin pipeline list | grep "77592a9d-2ff2-40ea-a4c1-bdff0e77acb7" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:48.398" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:48.398" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:43.035" endtime="20231110 13:28:48.398"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:48.400" level="INFO">Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]</msg>
<status status="PASS" starttime="20231110 13:28:48.399" endtime="20231110 13:28:48.400"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:48.401" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:48.400" endtime="20231110 13:28:48.401"/>
</kw>
<status status="PASS" starttime="20231110 13:28:43.035" endtime="20231110 13:28:48.401"/>
</kw>
<msg timestamp="20231110 13:28:48.401" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:43.034" endtime="20231110 13:28:48.401"/>
</kw>
<msg timestamp="20231110 13:28:48.402" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:43.034" endtime="20231110 13:28:48.402"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>OPEN</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:28:48.402" endtime="20231110 13:28:48.402"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:38.039" endtime="20231110 13:28:48.403"/>
</test>
<test id="s1-s2-s5-t8" name="Close pipeline" line="63">
<kw name="Execute" library="os">
<arg>ozone admin pipeline close "${PIPELINE}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:48.409" level="INFO">Running command 'ozone admin pipeline close "77592a9d-2ff2-40ea-a4c1-bdff0e77acb7" 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:53.375" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:53.375" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:28:48.406" endtime="20231110 13:28:53.375"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:53.377" level="INFO"/>
<status status="PASS" starttime="20231110 13:28:53.376" endtime="20231110 13:28:53.377"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:53.378" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:53.377" endtime="20231110 13:28:53.378"/>
</kw>
<status status="PASS" starttime="20231110 13:28:48.406" endtime="20231110 13:28:53.378"/>
</kw>
<msg timestamp="20231110 13:28:53.378" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:48.405" endtime="20231110 13:28:53.378"/>
</kw>
<status status="PASS" starttime="20231110 13:28:48.405" endtime="20231110 13:28:53.378"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin pipeline list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:53.384" level="INFO">Running command 'ozone admin pipeline list 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:28:58.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:28:58.344" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:53.380" endtime="20231110 13:28:58.344"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:28:58.345" level="INFO">Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, State:CLOSED, leaderId:, CreationTimestamp2023-11-10T13:28:07.390Z[UTC]]
Pipeline[ Id: 370be141-9156-4943-af19-8ab4a9b979ee, Nodes: 2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:2715dbc6-238d-40ae-99dd-28a8d9c5272c, CreationTimestamp2023-11-10T13:24:13.220Z[UTC]]
Pipeline[ Id: 6a2cead0-b51a-4d96-a769-6a4f55321e82, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102)2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103)2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/THREE, State:OPEN, leaderId:7d87a6da-c76b-42ed-991f-e2ea2c5470fb, CreationTimestamp2023-11-10T13:24:13.492Z[UTC]]
Pipeline[ Id: e6751dfc-e22f-4dde-b8ea-c17ce02d1c35, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103)7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102)2715dbc6-238d-40ae-99dd-28a8d9c5272c(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net/172.25.0.104), ReplicationConfig: RATIS/THREE, State:OPEN, leaderId:2f4fc5bf-cc15-415e-95af-5d0b04d72e52, CreationTimestamp2023-11-10T13:24:13.593Z[UTC]]
Pipeline[ Id: a96c3762-e41e-4f5e-8090-fa0f0c00297b, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:7d87a6da-c76b-42ed-991f-e2ea2c5470fb, CreationTimestamp2023-11-10T13:24:12.676Z[UTC]]
Pipeline[ Id: ca923417-e26b-461a-91c1-11adcb56a7b5, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: RATIS/ONE, State:OPEN, leaderId:2f4fc5bf-cc15-415e-95af-5d0b04d72e52, CreationTimestamp2023-11-10T13:24:13.083Z[UTC]]
Pipeline[ Id: b54598e5-2b96-48a5-bd96-f3fbb80cc06d, Nodes: 7d87a6da-c76b-42ed-991f-e2ea2c5470fb(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net/172.25.0.102), ReplicationConfig: STANDALONE/ONE, State:OPEN, leaderId:, CreationTimestamp2023-11-10T13:25:57.971Z[UTC]]</msg>
<status status="PASS" starttime="20231110 13:28:58.345" endtime="20231110 13:28:58.346"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:28:58.346" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:28:58.346" endtime="20231110 13:28:58.346"/>
</kw>
<status status="PASS" starttime="20231110 13:28:53.380" endtime="20231110 13:28:58.346"/>
</kw>
<msg timestamp="20231110 13:28:58.347" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:28:53.379" endtime="20231110 13:28:58.347"/>
</kw>
<msg timestamp="20231110 13:28:58.347" level="INFO">${output} = Pipeline[ Id: 77592a9d-2ff2-40ea-a4c1-bdff0e77acb7, Nodes: 2f4fc5bf-cc15-415e-95af-5d0b04d72e52(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net/172.25.0.103), ReplicationConfig: STANDALONE/ONE, St...</msg>
<status status="PASS" starttime="20231110 13:28:53.379" endtime="20231110 13:28:58.347"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${PIPELINE}' not in '''${output}'''</arg>
<arg>Pipeline already scrubbed</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20231110 13:28:58.347" endtime="20231110 13:28:58.348"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>${PIPELINE}.*CLOSED</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231110 13:28:58.348" endtime="20231110 13:28:58.348"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:48.404" endtime="20231110 13:28:58.349"/>
</test>
<test id="s1-s2-s5-t9" name="Incomplete command" line="69">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>ozone admin pipeline</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:28:58.354" level="INFO">Running command 'ozone admin pipeline 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:02.113" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:29:02.113" level="INFO">${output} = Incomplete command
Usage: ozone admin pipeline [-hV] [COMMAND]
Pipeline specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Com...</msg>
<status status="PASS" starttime="20231110 13:28:58.351" endtime="20231110 13:29:02.113"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:02.115" level="INFO">Incomplete command
Usage: ozone admin pipeline [-hV] [COMMAND]
Pipeline specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Commands:
  list        List all active pipelines
  activate    Activates the given Pipeline
  deactivate  Deactivates the given Pipeline
  create      create pipeline
  close       Close pipeline</msg>
<status status="PASS" starttime="20231110 13:29:02.114" endtime="20231110 13:29:02.115"/>
</kw>
<msg timestamp="20231110 13:29:02.115" level="INFO">${output} = Incomplete command
Usage: ozone admin pipeline [-hV] [COMMAND]
Pipeline specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Com...</msg>
<status status="PASS" starttime="20231110 13:28:58.351" endtime="20231110 13:29:02.115"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Incomplete command</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:02.115" endtime="20231110 13:29:02.116"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>close</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:02.116" endtime="20231110 13:29:02.117"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>create</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:02.117" endtime="20231110 13:29:02.117"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>deactivate</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:02.117" endtime="20231110 13:29:02.118"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>list</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:02.118" endtime="20231110 13:29:02.118"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:28:58.350" endtime="20231110 13:29:02.119"/>
</test>
<doc>Test ozone admin pipeline command</doc>
<status status="PASS" starttime="20231110 13:28:02.904" endtime="20231110 13:29:02.121"/>
</suite>
<suite id="s1-s2-s6" name="printTopology" source="/opt/hadoop/smoketest/admincli/printTopology.robot">
<test id="s1-s2-s6-t1" name="Run printTopology" line="25">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin printTopology</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:02.145" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:06.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:06.960" level="INFO">${output} = State = HEALTHY
 172.25.0.104(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net):HTTP=9882,CLIENT_RPC=9864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,RATIS_DATASTREAM=9855,STANDA...</msg>
<status status="PASS" starttime="20231110 13:29:02.142" endtime="20231110 13:29:06.960"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:06.962" level="INFO">State = HEALTHY
 172.25.0.104(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net):HTTP=9882,CLIENT_RPC=9864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,RATIS_DATASTREAM=9855,STANDALONE=9859    IN_SERVICE    /default-rack
 172.25.0.103(ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net):HTTP=9882,CLIENT_RPC=9864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,RATIS_DATASTREAM=9855,STANDALONE=9859    IN_SERVICE    /default-rack
 172.25.0.102(ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net):HTTP=9882,CLIENT_RPC=9864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,RATIS_DATASTREAM=9855,STANDALONE=9859    IN_SERVICE    /default-rack</msg>
<status status="PASS" starttime="20231110 13:29:06.961" endtime="20231110 13:29:06.962"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:06.963" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:06.962" endtime="20231110 13:29:06.963"/>
</kw>
<status status="PASS" starttime="20231110 13:29:02.141" endtime="20231110 13:29:06.963"/>
</kw>
<msg timestamp="20231110 13:29:06.963" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:02.141" endtime="20231110 13:29:06.963"/>
</kw>
<msg timestamp="20231110 13:29:06.964" level="INFO">${output} = State = HEALTHY
 172.25.0.104(ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net):HTTP=9882,CLIENT_RPC=9864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,RATIS_DATASTREAM=9855,STANDA...</msg>
<status status="PASS" starttime="20231110 13:29:02.140" endtime="20231110 13:29:06.964"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>State =</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231110 13:29:06.964" endtime="20231110 13:29:06.964"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:02.139" endtime="20231110 13:29:06.965"/>
</test>
<test id="s1-s2-s6-t2" name="Run printTopology as JSON" line="29">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin printTopology --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:06.972" level="INFO">Running command 'ozone admin printTopology --json 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:12.127" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:12.127" level="INFO">${output} = [ {
  "ipAddress" : "172.25.0.104",
  "hostName" : "ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/defaul...</msg>
<status status="PASS" starttime="20231110 13:29:06.968" endtime="20231110 13:29:12.127"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:12.129" level="INFO">[ {
  "ipAddress" : "172.25.0.104",
  "hostName" : "ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/default-rack",
  "ports" : {
    "HTTP" : 9882,
    "CLIENT_RPC" : 9864,
    "REPLICATION" : 9886,
    "RATIS" : 9858,
    "RATIS_ADMIN" : 9857,
    "RATIS_SERVER" : 9856,
    "RATIS_DATASTREAM" : 9855,
    "STANDALONE" : 9859
  }
}, {
  "ipAddress" : "172.25.0.103",
  "hostName" : "ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/default-rack",
  "ports" : {
    "HTTP" : 9882,
    "CLIENT_RPC" : 9864,
    "REPLICATION" : 9886,
    "RATIS" : 9858,
    "RATIS_ADMIN" : 9857,
    "RATIS_SERVER" : 9856,
    "RATIS_DATASTREAM" : 9855,
    "STANDALONE" : 9859
  }
}, {
  "ipAddress" : "172.25.0.102",
  "hostName" : "ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/default-rack",
  "ports" : {
    "HTTP" : 9882,
    "CLIENT_RPC" : 9864,
    "REPLICATION" : 9886,
    "RATIS" : 9858,
    "RATIS_ADMIN" : 9857,
    "RATIS_SERVER" : 9856,
    "RATIS_DATASTREAM" : 9855,
    "STANDALONE" : 9859
  }
} ]</msg>
<status status="PASS" starttime="20231110 13:29:12.128" endtime="20231110 13:29:12.129"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:12.130" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:12.129" endtime="20231110 13:29:12.130"/>
</kw>
<status status="PASS" starttime="20231110 13:29:06.968" endtime="20231110 13:29:12.130"/>
</kw>
<msg timestamp="20231110 13:29:12.130" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:06.967" endtime="20231110 13:29:12.130"/>
</kw>
<msg timestamp="20231110 13:29:12.131" level="INFO">${output} = [ {
  "ipAddress" : "172.25.0.104",
  "hostName" : "ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/defaul...</msg>
<status status="PASS" starttime="20231110 13:29:06.967" endtime="20231110 13:29:12.131"/>
</kw>
<kw name="Execute" library="os">
<var>${keys}</var>
<arg>echo '${output}' | jq -r '.[0] | keys'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:12.136" level="INFO">Running command 'echo '[ {
  "ipAddress" : "172.25.0.104",
  "hostName" : "ozonesecure-ha_datanode3_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/default-rack",
  "ports" : {
    "HTTP" : 9882,
    "CLIENT_RPC" : 9864,
    "REPLICATION" : 9886,
    "RATIS" : 9858,
    "RATIS_ADMIN" : 9857,
    "RATIS_SERVER" : 9856,
    "RATIS_DATASTREAM" : 9855,
    "STANDALONE" : 9859
  }
}, {
  "ipAddress" : "172.25.0.103",
  "hostName" : "ozonesecure-ha_datanode2_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/default-rack",
  "ports" : {
    "HTTP" : 9882,
    "CLIENT_RPC" : 9864,
    "REPLICATION" : 9886,
    "RATIS" : 9858,
    "RATIS_ADMIN" : 9857,
    "RATIS_SERVER" : 9856,
    "RATIS_DATASTREAM" : 9855,
    "STANDALONE" : 9859
  }
}, {
  "ipAddress" : "172.25.0.102",
  "hostName" : "ozonesecure-ha_datanode1_1.ozonesecure-ha_ozone_net",
  "nodeState" : "HEALTHY",
  "operationalState" : "IN_SERVICE",
  "networkLocation" : "/default-rack",
  "ports" : {
    "HTTP" : 9882,
    "CLIENT_RPC" : 9864,
    "REPLICATION" : 9886,
    "RATIS" : 9858,
    "RATIS_ADMIN" : 9857,
    "RATIS_SERVER" : 9856,
    "RATIS_DATASTREAM" : 9855,
    "STANDALONE" : 9859
  }
} ]' | jq -r '.[0] | keys' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:12.181" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:12.181" level="INFO">${output} = [
  "hostName",
  "ipAddress",
  "networkLocation",
  "nodeState",
  "operationalState",
  "ports"
]</msg>
<status status="PASS" starttime="20231110 13:29:12.133" endtime="20231110 13:29:12.181"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:12.182" level="INFO">[
  "hostName",
  "ipAddress",
  "networkLocation",
  "nodeState",
  "operationalState",
  "ports"
]</msg>
<status status="PASS" starttime="20231110 13:29:12.182" endtime="20231110 13:29:12.182"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:12.184" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:12.183" endtime="20231110 13:29:12.184"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.132" endtime="20231110 13:29:12.184"/>
</kw>
<msg timestamp="20231110 13:29:12.184" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:12.132" endtime="20231110 13:29:12.184"/>
</kw>
<msg timestamp="20231110 13:29:12.184" level="INFO">${keys} = [
  "hostName",
  "ipAddress",
  "networkLocation",
  "nodeState",
  "operationalState",
  "ports"
]</msg>
<status status="PASS" starttime="20231110 13:29:12.131" endtime="20231110 13:29:12.184"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>ipAddress</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:12.185" endtime="20231110 13:29:12.185"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:06.966" endtime="20231110 13:29:12.185"/>
</test>
<doc>Test ozone admin printTopology command</doc>
<status status="PASS" starttime="20231110 13:29:02.125" endtime="20231110 13:29:12.187"/>
</suite>
<suite id="s1-s2-s7" name="Replicationmanager" source="/opt/hadoop/smoketest/admincli/replicationmanager.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:12.201" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:12.205" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:12.205" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:29:12.198" endtime="20231110 13:29:12.205"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:12.206" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:29:12.206" endtime="20231110 13:29:12.206"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:12.207" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:12.206" endtime="20231110 13:29:12.207"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.198" endtime="20231110 13:29:12.207"/>
</kw>
<msg timestamp="20231110 13:29:12.207" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:12.198" endtime="20231110 13:29:12.207"/>
</kw>
<msg timestamp="20231110 13:29:12.207" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:29:12.198" endtime="20231110 13:29:12.207"/>
</kw>
<msg timestamp="20231110 13:29:12.208" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:29:12.197" endtime="20231110 13:29:12.208"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:29:12.208" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:29:12.208" endtime="20231110 13:29:12.208"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:12.212" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:12.355" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:12.356" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:29:12.210" endtime="20231110 13:29:12.356"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:12.357" level="INFO"/>
<status status="PASS" starttime="20231110 13:29:12.356" endtime="20231110 13:29:12.357"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:12.358" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:12.357" endtime="20231110 13:29:12.358"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.210" endtime="20231110 13:29:12.358"/>
</kw>
<msg timestamp="20231110 13:29:12.358" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:12.209" endtime="20231110 13:29:12.358"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.209" endtime="20231110 13:29:12.358"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.208" endtime="20231110 13:29:12.359"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.197" endtime="20231110 13:29:12.359"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.196" endtime="20231110 13:29:12.359"/>
</kw>
<test id="s1-s2-s7-t1" name="Check replicationmanager" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin replicationmanager status</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:12.365" level="INFO">Running command 'ozone admin replicationmanager status 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:17.167" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:17.167" level="INFO">${output} = ReplicationManager is Running.</msg>
<status status="PASS" starttime="20231110 13:29:12.362" endtime="20231110 13:29:17.167"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:17.168" level="INFO">ReplicationManager is Running.</msg>
<status status="PASS" starttime="20231110 13:29:17.168" endtime="20231110 13:29:17.169"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:17.169" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:17.169" endtime="20231110 13:29:17.170"/>
</kw>
<status status="PASS" starttime="20231110 13:29:12.361" endtime="20231110 13:29:17.170"/>
</kw>
<msg timestamp="20231110 13:29:17.170" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:12.361" endtime="20231110 13:29:17.170"/>
</kw>
<msg timestamp="20231110 13:29:17.170" level="INFO">${output} = ReplicationManager is Running.</msg>
<status status="PASS" starttime="20231110 13:29:12.360" endtime="20231110 13:29:17.170"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>ReplicationManager</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:17.171" endtime="20231110 13:29:17.171"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Running</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:17.171" endtime="20231110 13:29:17.172"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:12.359" endtime="20231110 13:29:17.172"/>
</test>
<test id="s1-s2-s7-t2" name="Check replicationmanager with explicit host" line="32">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin replicationmanager status --scm ${SCM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:17.179" level="INFO">Running command 'ozone admin replicationmanager status --scm scm1.org 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:21.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:21.640" level="INFO">${output} = ReplicationManager is Running.</msg>
<status status="PASS" starttime="20231110 13:29:17.176" endtime="20231110 13:29:21.640"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:21.642" level="INFO">ReplicationManager is Running.</msg>
<status status="PASS" starttime="20231110 13:29:21.641" endtime="20231110 13:29:21.642"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:21.643" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:21.642" endtime="20231110 13:29:21.643"/>
</kw>
<status status="PASS" starttime="20231110 13:29:17.176" endtime="20231110 13:29:21.643"/>
</kw>
<msg timestamp="20231110 13:29:21.643" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:17.175" endtime="20231110 13:29:21.643"/>
</kw>
<msg timestamp="20231110 13:29:21.643" level="INFO">${output} = ReplicationManager is Running.</msg>
<status status="PASS" starttime="20231110 13:29:17.174" endtime="20231110 13:29:21.644"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>ReplicationManager</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:21.644" endtime="20231110 13:29:21.644"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Running</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:21.644" endtime="20231110 13:29:21.645"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:17.173" endtime="20231110 13:29:21.645"/>
</test>
<test id="s1-s2-s7-t3" name="Stop replicationmanager" line="37">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin replicationmanager stop</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:21.652" level="INFO">Running command 'ozone admin replicationmanager stop 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:27.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:27.459" level="INFO">${output} = Stopping ReplicationManager...
Requested SCM to stop ReplicationManager, it might take sometime for the ReplicationManager to stop.</msg>
<status status="PASS" starttime="20231110 13:29:21.649" endtime="20231110 13:29:27.459"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:27.460" level="INFO">Stopping ReplicationManager...
Requested SCM to stop ReplicationManager, it might take sometime for the ReplicationManager to stop.</msg>
<status status="PASS" starttime="20231110 13:29:27.460" endtime="20231110 13:29:27.460"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:27.461" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:27.461" endtime="20231110 13:29:27.461"/>
</kw>
<status status="PASS" starttime="20231110 13:29:21.649" endtime="20231110 13:29:27.462"/>
</kw>
<msg timestamp="20231110 13:29:27.462" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:21.648" endtime="20231110 13:29:27.462"/>
</kw>
<msg timestamp="20231110 13:29:27.462" level="INFO">${output} = Stopping ReplicationManager...
Requested SCM to stop ReplicationManager, it might take sometime for the ReplicationManager to stop.</msg>
<status status="PASS" starttime="20231110 13:29:21.648" endtime="20231110 13:29:27.462"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Stopping ReplicationManager</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:27.462" endtime="20231110 13:29:27.463"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>30sec</arg>
<arg>5sec</arg>
<arg>Execute</arg>
<arg>ozone admin replicationmanager status | grep -q 'is Not Running'</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>ozone admin replicationmanager status | grep -q 'is Not Running'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:27.469" level="INFO">Running command 'ozone admin replicationmanager status | grep -q 'is Not Running' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:32.964" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:32.964" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:29:27.465" endtime="20231110 13:29:32.964"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:32.966" level="INFO"/>
<status status="PASS" starttime="20231110 13:29:32.965" endtime="20231110 13:29:32.966"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:32.967" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:32.966" endtime="20231110 13:29:32.967"/>
</kw>
<status status="PASS" starttime="20231110 13:29:27.465" endtime="20231110 13:29:32.967"/>
</kw>
<msg timestamp="20231110 13:29:32.967" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:27.465" endtime="20231110 13:29:32.968"/>
</kw>
<status status="PASS" starttime="20231110 13:29:27.463" endtime="20231110 13:29:32.968"/>
</kw>
<status status="PASS" starttime="20231110 13:29:27.463" endtime="20231110 13:29:32.968"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:21.647" endtime="20231110 13:29:32.968"/>
</test>
<test id="s1-s2-s7-t4" name="Start replicationmanager" line="42">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin replicationmanager start</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:32.977" level="INFO">Running command 'ozone admin replicationmanager start 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:37.980" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:37.980" level="INFO">${output} = Starting ReplicationManager...</msg>
<status status="PASS" starttime="20231110 13:29:32.974" endtime="20231110 13:29:37.980"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:37.982" level="INFO">Starting ReplicationManager...</msg>
<status status="PASS" starttime="20231110 13:29:37.981" endtime="20231110 13:29:37.982"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:37.983" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:37.982" endtime="20231110 13:29:37.983"/>
</kw>
<status status="PASS" starttime="20231110 13:29:32.974" endtime="20231110 13:29:37.983"/>
</kw>
<msg timestamp="20231110 13:29:37.983" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:32.973" endtime="20231110 13:29:37.983"/>
</kw>
<msg timestamp="20231110 13:29:37.984" level="INFO">${output} = Starting ReplicationManager...</msg>
<status status="PASS" starttime="20231110 13:29:32.972" endtime="20231110 13:29:37.984"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Starting ReplicationManager</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:37.984" endtime="20231110 13:29:37.984"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>30sec</arg>
<arg>5sec</arg>
<arg>Execute</arg>
<arg>ozone admin replicationmanager status | grep -q 'is Running'</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>ozone admin replicationmanager status | grep -q 'is Running'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:37.991" level="INFO">Running command 'ozone admin replicationmanager status | grep -q 'is Running' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:42.920" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:42.921" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:29:37.987" endtime="20231110 13:29:42.921"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:42.922" level="INFO"/>
<status status="PASS" starttime="20231110 13:29:42.921" endtime="20231110 13:29:42.922"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:42.923" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:42.922" endtime="20231110 13:29:42.923"/>
</kw>
<status status="PASS" starttime="20231110 13:29:37.986" endtime="20231110 13:29:42.923"/>
</kw>
<msg timestamp="20231110 13:29:42.923" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:37.986" endtime="20231110 13:29:42.923"/>
</kw>
<status status="PASS" starttime="20231110 13:29:37.985" endtime="20231110 13:29:42.924"/>
</kw>
<status status="PASS" starttime="20231110 13:29:37.985" endtime="20231110 13:29:42.924"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:32.971" endtime="20231110 13:29:42.924"/>
</test>
<test id="s1-s2-s7-t5" name="Incomplete command" line="47">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>ozone admin replicationmanager</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:42.930" level="INFO">Running command 'ozone admin replicationmanager 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:46.426" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:29:46.427" level="INFO">${output} = Incomplete command
Usage: ozone admin replicationmanager [-hV] [COMMAND]
ReplicationManager specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version infor...</msg>
<status status="PASS" starttime="20231110 13:29:42.927" endtime="20231110 13:29:46.427"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:46.428" level="INFO">Incomplete command
Usage: ozone admin replicationmanager [-hV] [COMMAND]
ReplicationManager specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Commands:
  start   Start ReplicationManager
  stop    Stop ReplicationManager
  status  Check if ReplicationManager is running or not</msg>
<status status="PASS" starttime="20231110 13:29:46.427" endtime="20231110 13:29:46.428"/>
</kw>
<msg timestamp="20231110 13:29:46.429" level="INFO">${output} = Incomplete command
Usage: ozone admin replicationmanager [-hV] [COMMAND]
ReplicationManager specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version infor...</msg>
<status status="PASS" starttime="20231110 13:29:42.926" endtime="20231110 13:29:46.429"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Incomplete command</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:46.429" endtime="20231110 13:29:46.429"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>start</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:46.430" endtime="20231110 13:29:46.430"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>stop</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:46.430" endtime="20231110 13:29:46.431"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>status</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:46.431" endtime="20231110 13:29:46.431"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:42.925" endtime="20231110 13:29:46.432"/>
</test>
<doc>Test ozone admin replicationmanager command</doc>
<status status="PASS" starttime="20231110 13:29:12.189" endtime="20231110 13:29:46.434"/>
</suite>
<suite id="s1-s2-s8" name="Safemode" source="/opt/hadoop/smoketest/admincli/safemode.robot">
<test id="s1-s2-s8-t1" name="Check safemode" line="26">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin safemode status</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:46.450" level="INFO">Running command 'ozone admin safemode status 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:51.240" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:51.240" level="INFO">${output} = SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:46.447" endtime="20231110 13:29:51.240"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:51.242" level="INFO">SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:51.241" endtime="20231110 13:29:51.242"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:51.243" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:51.242" endtime="20231110 13:29:51.243"/>
</kw>
<status status="PASS" starttime="20231110 13:29:46.446" endtime="20231110 13:29:51.243"/>
</kw>
<msg timestamp="20231110 13:29:51.243" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:46.446" endtime="20231110 13:29:51.244"/>
</kw>
<msg timestamp="20231110 13:29:51.244" level="INFO">${output} = SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:46.445" endtime="20231110 13:29:51.244"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>SCM is out of safe mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:51.244" endtime="20231110 13:29:51.245"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:46.444" endtime="20231110 13:29:51.245"/>
</test>
<test id="s1-s2-s8-t2" name="Check safemode with explicit host" line="30">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin safemode status --scm ${SCM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:51.252" level="INFO">Running command 'ozone admin safemode status --scm scm1.org 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:29:55.990" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:29:55.990" level="INFO">${output} = SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:51.249" endtime="20231110 13:29:55.990"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:29:55.991" level="INFO">SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:55.990" endtime="20231110 13:29:55.991"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:29:55.992" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:29:55.992" endtime="20231110 13:29:55.992"/>
</kw>
<status status="PASS" starttime="20231110 13:29:51.248" endtime="20231110 13:29:55.992"/>
</kw>
<msg timestamp="20231110 13:29:55.992" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:51.247" endtime="20231110 13:29:55.993"/>
</kw>
<msg timestamp="20231110 13:29:55.993" level="INFO">${output} = SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:51.247" endtime="20231110 13:29:55.993"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>SCM is out of safe mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:29:55.993" endtime="20231110 13:29:55.994"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:51.246" endtime="20231110 13:29:55.994"/>
</test>
<test id="s1-s2-s8-t3" name="Wait for safemode exit" line="34">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin safemode wait -t 2</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:29:56.001" level="INFO">Running command 'ozone admin safemode wait -t 2 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:00.946" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:00.946" level="INFO">${output} = SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:55.997" endtime="20231110 13:30:00.946"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:00.948" level="INFO">SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:30:00.947" endtime="20231110 13:30:00.948"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:00.948" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:00.948" endtime="20231110 13:30:00.949"/>
</kw>
<status status="PASS" starttime="20231110 13:29:55.997" endtime="20231110 13:30:00.949"/>
</kw>
<msg timestamp="20231110 13:30:00.949" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:29:55.996" endtime="20231110 13:30:00.949"/>
</kw>
<msg timestamp="20231110 13:30:00.949" level="INFO">${output} = SCM is out of safe mode.</msg>
<status status="PASS" starttime="20231110 13:29:55.996" endtime="20231110 13:30:00.949"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>SCM is out of safe mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:00.950" endtime="20231110 13:30:00.950"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:29:55.995" endtime="20231110 13:30:00.950"/>
</test>
<test id="s1-s2-s8-t4" name="Incomplete command" line="38">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>ozone admin safemode</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:00.956" level="INFO">Running command 'ozone admin safemode 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:04.951" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:30:04.951" level="INFO">${output} = Incomplete command
Usage: ozone admin safemode [-hV] [COMMAND]
Safe mode specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Co...</msg>
<status status="PASS" starttime="20231110 13:30:00.953" endtime="20231110 13:30:04.951"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:04.953" level="INFO">Incomplete command
Usage: ozone admin safemode [-hV] [COMMAND]
Safe mode specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Commands:
  status  Check if SCM is in safe mode
  exit    Force SCM out of safe mode
  wait    Wait until the scm is out from the safe mode.</msg>
<status status="PASS" starttime="20231110 13:30:04.952" endtime="20231110 13:30:04.953"/>
</kw>
<msg timestamp="20231110 13:30:04.953" level="INFO">${output} = Incomplete command
Usage: ozone admin safemode [-hV] [COMMAND]
Safe mode specific operations
  -h, --help      Show this help message and exit.
  -V, --version   Print version information and exit.
Co...</msg>
<status status="PASS" starttime="20231110 13:30:00.952" endtime="20231110 13:30:04.953"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Incomplete command</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:04.954" endtime="20231110 13:30:04.954"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>status</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:04.954" endtime="20231110 13:30:04.955"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>exit</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:04.955" endtime="20231110 13:30:04.955"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>wait</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:04.955" endtime="20231110 13:30:04.956"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:00.951" endtime="20231110 13:30:04.956"/>
</test>
<doc>Test ozone admin safemode command</doc>
<status status="PASS" starttime="20231110 13:29:46.437" endtime="20231110 13:30:04.957"/>
</suite>
<suite id="s1-s2-s9" name="Scmrole" source="/opt/hadoop/smoketest/admincli/scmrole.robot">
<test id="s1-s2-s9-t1" name="Run scm roles" line="26">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:04.972" level="INFO">Running command 'ozone admin scm roles 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:09.548" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:09.548" level="INFO">${output} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:30:04.968" endtime="20231110 13:30:09.548"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:09.550" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:30:09.549" endtime="20231110 13:30:09.550"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:09.551" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:09.550" endtime="20231110 13:30:09.551"/>
</kw>
<status status="PASS" starttime="20231110 13:30:04.968" endtime="20231110 13:30:09.551"/>
</kw>
<msg timestamp="20231110 13:30:09.551" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:04.968" endtime="20231110 13:30:09.551"/>
</kw>
<msg timestamp="20231110 13:30:09.551" level="INFO">${output} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:30:04.967" endtime="20231110 13:30:09.551"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[scm:9894(:LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231110 13:30:09.552" endtime="20231110 13:30:09.552"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:04.966" endtime="20231110 13:30:09.552"/>
</test>
<test id="s1-s2-s9-t2" name="List scm roles as JSON" line="30">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:09.559" level="INFO">Running command 'ozone admin scm roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:14.333" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:14.333" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20231110 13:30:09.555" endtime="20231110 13:30:14.333"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:14.335" level="INFO">{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "04b4c426-1498-4c0b-aa42-503afea12e43",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "cce49b2a-0f18-461d-ba0f-69ddb0800759",
    "InetAddress" : "172.25.0.117"
  }
}</msg>
<status status="PASS" starttime="20231110 13:30:14.334" endtime="20231110 13:30:14.335"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:14.336" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:14.335" endtime="20231110 13:30:14.336"/>
</kw>
<status status="PASS" starttime="20231110 13:30:09.555" endtime="20231110 13:30:14.336"/>
</kw>
<msg timestamp="20231110 13:30:14.336" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:09.555" endtime="20231110 13:30:14.336"/>
</kw>
<msg timestamp="20231110 13:30:14.337" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20231110 13:30:09.554" endtime="20231110 13:30:14.337"/>
</kw>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq -r '.[] | select(.raftPeerRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:14.342" level="INFO">Running command 'echo '{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "04b4c426-1498-4c0b-aa42-503afea12e43",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "cce49b2a-0f18-461d-ba0f-69ddb0800759",
    "InetAddress" : "172.25.0.117"
  }
}' | jq -r '.[] | select(.raftPeerRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:14.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:14.381" level="INFO">${output} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20231110 13:30:14.339" endtime="20231110 13:30:14.381"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:14.382" level="INFO">{
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20231110 13:30:14.381" endtime="20231110 13:30:14.382"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:14.383" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:14.383" endtime="20231110 13:30:14.383"/>
</kw>
<status status="PASS" starttime="20231110 13:30:14.338" endtime="20231110 13:30:14.384"/>
</kw>
<msg timestamp="20231110 13:30:14.384" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:14.338" endtime="20231110 13:30:14.384"/>
</kw>
<msg timestamp="20231110 13:30:14.384" level="INFO">${leader} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "59b19ecd-f2af-42d3-8605-a0f5d9fb479e",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20231110 13:30:14.337" endtime="20231110 13:30:14.384"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:30:14.384" endtime="20231110 13:30:14.386"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:09.553" endtime="20231110 13:30:14.386"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20231110 13:30:04.959" endtime="20231110 13:30:14.387"/>
</suite>
<status status="PASS" starttime="20231110 13:25:21.098" endtime="20231110 13:30:14.391"/>
</suite>
<suite id="s1-s3" name="Om-Fetch-Key" source="/opt/hadoop/smoketest/omha/om-fetch-key.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:18.923" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:18.927" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:18.927" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:30:18.920" endtime="20231110 13:30:18.928"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:18.928" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:30:18.928" endtime="20231110 13:30:18.928"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:18.929" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:18.929" endtime="20231110 13:30:18.929"/>
</kw>
<status status="PASS" starttime="20231110 13:30:18.920" endtime="20231110 13:30:18.929"/>
</kw>
<msg timestamp="20231110 13:30:18.929" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:18.920" endtime="20231110 13:30:18.929"/>
</kw>
<msg timestamp="20231110 13:30:18.930" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:30:18.919" endtime="20231110 13:30:18.930"/>
</kw>
<msg timestamp="20231110 13:30:18.930" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:30:18.919" endtime="20231110 13:30:18.930"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:30:18.930" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:30:18.930" endtime="20231110 13:30:18.930"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:18.935" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:19.017" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:19.017" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:30:18.932" endtime="20231110 13:30:19.017"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:19.018" level="INFO"/>
<status status="PASS" starttime="20231110 13:30:19.018" endtime="20231110 13:30:19.019"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:19.019" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:19.019" endtime="20231110 13:30:19.019"/>
</kw>
<status status="PASS" starttime="20231110 13:30:18.932" endtime="20231110 13:30:19.020"/>
</kw>
<msg timestamp="20231110 13:30:19.020" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:18.931" endtime="20231110 13:30:19.020"/>
</kw>
<status status="PASS" starttime="20231110 13:30:18.931" endtime="20231110 13:30:19.020"/>
</kw>
<status status="PASS" starttime="20231110 13:30:18.930" endtime="20231110 13:30:19.020"/>
</kw>
<status status="PASS" starttime="20231110 13:30:18.919" endtime="20231110 13:30:19.020"/>
</kw>
<status status="PASS" starttime="20231110 13:30:18.918" endtime="20231110 13:30:19.021"/>
</kw>
<test id="s1-s3-t1" name="Fetch Key with Valid ServiceID Specified" line="31">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:19.027" level="INFO">Running command 'ozone admin om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:24.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:24.498" level="INFO">${output} = Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:19.024" endtime="20231110 13:30:24.498"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:24.500" level="INFO">Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:24.499" endtime="20231110 13:30:24.500"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:24.501" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:24.500" endtime="20231110 13:30:24.502"/>
</kw>
<status status="PASS" starttime="20231110 13:30:19.023" endtime="20231110 13:30:24.502"/>
</kw>
<msg timestamp="20231110 13:30:24.502" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:19.023" endtime="20231110 13:30:24.502"/>
</kw>
<msg timestamp="20231110 13:30:24.502" level="INFO">${result} = Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:19.022" endtime="20231110 13:30:24.502"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:24.502" endtime="20231110 13:30:24.503"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:19.021" endtime="20231110 13:30:24.503"/>
</test>
<test id="s1-s3-t2" name="Fetch Key with Multiple ServiceIDs, Valid ServiceID Specified" line="35">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:24.510" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:30.087" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:30.088" level="INFO">${output} = Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:24.507" endtime="20231110 13:30:30.088"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:30.089" level="INFO">Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:30.088" endtime="20231110 13:30:30.089"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:30.090" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:30.089" endtime="20231110 13:30:30.090"/>
</kw>
<status status="PASS" starttime="20231110 13:30:24.506" endtime="20231110 13:30:30.090"/>
</kw>
<msg timestamp="20231110 13:30:30.090" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:24.506" endtime="20231110 13:30:30.090"/>
</kw>
<msg timestamp="20231110 13:30:30.090" level="INFO">${result} = Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:24.505" endtime="20231110 13:30:30.091"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:30.091" endtime="20231110 13:30:30.091"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:24.504" endtime="20231110 13:30:30.091"/>
</test>
<test id="s1-s3-t3" name="Fetch Key with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="39">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:30.098" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:34.123" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:30:34.124" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20231110 13:30:30.094" endtime="20231110 13:30:34.124"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:34.125" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20231110 13:30:34.124" endtime="20231110 13:30:34.125"/>
</kw>
<msg timestamp="20231110 13:30:34.125" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20231110 13:30:30.093" endtime="20231110 13:30:34.126"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:34.126" endtime="20231110 13:30:34.126"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:30.092" endtime="20231110 13:30:34.126"/>
</test>
<test id="s1-s3-t4" name="Fetch Key with Multiple ServiceIDs, Invalid ServiceID Specified" line="43">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:34.132" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:38.110" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:30:38.110" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:30:34.129" endtime="20231110 13:30:38.111"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:38.112" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:30:38.111" endtime="20231110 13:30:38.112"/>
</kw>
<msg timestamp="20231110 13:30:38.113" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:30:34.128" endtime="20231110 13:30:38.113"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:38.113" endtime="20231110 13:30:38.113"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:34.127" endtime="20231110 13:30:38.114"/>
</test>
<test id="s1-s3-t5" name="Fetch Key without OM Service ID" line="47">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:38.120" level="INFO">Running command 'ozone admin om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:43.718" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:43.718" level="INFO">${output} = Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:38.117" endtime="20231110 13:30:43.718"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:43.720" level="INFO">Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:43.719" endtime="20231110 13:30:43.720"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:43.720" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:43.720" endtime="20231110 13:30:43.720"/>
</kw>
<status status="PASS" starttime="20231110 13:30:38.116" endtime="20231110 13:30:43.721"/>
</kw>
<msg timestamp="20231110 13:30:43.721" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:38.116" endtime="20231110 13:30:43.721"/>
</kw>
<msg timestamp="20231110 13:30:43.721" level="INFO">${result} = Current Secret Key ID: 47a282cb-88de-4f76-9604-81a0912d9d25</msg>
<status status="PASS" starttime="20231110 13:30:38.115" endtime="20231110 13:30:43.721"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:43.722" endtime="20231110 13:30:43.722"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:38.114" endtime="20231110 13:30:43.722"/>
</test>
<test id="s1-s3-t6" name="Fetch Key with Multiple ServiceIDs, No ServiceID Specified" line="51">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:43.732" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:47.496" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:30:47.497" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:30:43.727" endtime="20231110 13:30:47.497"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:47.498" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:30:47.497" endtime="20231110 13:30:47.498"/>
</kw>
<msg timestamp="20231110 13:30:47.499" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:30:43.726" endtime="20231110 13:30:47.499"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:30:47.499" endtime="20231110 13:30:47.500"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:43.725" endtime="20231110 13:30:47.500"/>
</test>
<doc>Smoke test for om fetch-key</doc>
<status status="PASS" starttime="20231110 13:30:18.868" endtime="20231110 13:30:47.502"/>
</suite>
<suite id="s1-s4" name="Om-Roles" source="/opt/hadoop/smoketest/omha/om-roles.robot">
<test id="s1-s4-t1" name="List om roles with OM service ID passed" line="33">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:52.010" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:52.015" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:52.015" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:30:52.007" endtime="20231110 13:30:52.015"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:52.016" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:30:52.016" endtime="20231110 13:30:52.017"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:52.017" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:52.017" endtime="20231110 13:30:52.017"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.006" endtime="20231110 13:30:52.017"/>
</kw>
<msg timestamp="20231110 13:30:52.018" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:52.006" endtime="20231110 13:30:52.018"/>
</kw>
<msg timestamp="20231110 13:30:52.018" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:30:52.005" endtime="20231110 13:30:52.018"/>
</kw>
<msg timestamp="20231110 13:30:52.018" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:30:52.005" endtime="20231110 13:30:52.018"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:30:52.019" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:30:52.018" endtime="20231110 13:30:52.019"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:52.024" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:52.132" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:52.132" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:30:52.021" endtime="20231110 13:30:52.132"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:52.134" level="INFO"/>
<status status="PASS" starttime="20231110 13:30:52.133" endtime="20231110 13:30:52.134"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:52.134" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:52.134" endtime="20231110 13:30:52.135"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.020" endtime="20231110 13:30:52.135"/>
</kw>
<msg timestamp="20231110 13:30:52.135" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:52.020" endtime="20231110 13:30:52.135"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.019" endtime="20231110 13:30:52.135"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.019" endtime="20231110 13:30:52.135"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.004" endtime="20231110 13:30:52.135"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.003" endtime="20231110 13:30:52.136"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:52.141" level="INFO">Running command 'ozone admin om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:30:57.298" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:30:57.298" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:30:52.138" endtime="20231110 13:30:57.298"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:30:57.300" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:30:57.299" endtime="20231110 13:30:57.300"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:30:57.301" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:30:57.300" endtime="20231110 13:30:57.301"/>
</kw>
<status status="PASS" starttime="20231110 13:30:52.137" endtime="20231110 13:30:57.301"/>
</kw>
<msg timestamp="20231110 13:30:57.301" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:52.137" endtime="20231110 13:30:57.301"/>
</kw>
<msg timestamp="20231110 13:30:57.301" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:30:52.136" endtime="20231110 13:30:57.301"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231110 13:30:57.302" endtime="20231110 13:30:57.303"/>
</kw>
<status status="PASS" starttime="20231110 13:30:57.302" endtime="20231110 13:30:57.303"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:30:57.308" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:02.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:02.781" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:30:57.305" endtime="20231110 13:31:02.782"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:02.783" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:31:02.782" endtime="20231110 13:31:02.783"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:02.784" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:02.783" endtime="20231110 13:31:02.784"/>
</kw>
<status status="PASS" starttime="20231110 13:30:57.304" endtime="20231110 13:31:02.784"/>
</kw>
<msg timestamp="20231110 13:31:02.784" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:30:57.304" endtime="20231110 13:31:02.784"/>
</kw>
<msg timestamp="20231110 13:31:02.785" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:30:57.303" endtime="20231110 13:31:02.785"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231110 13:31:02.785" endtime="20231110 13:31:02.786"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.785" endtime="20231110 13:31:02.786"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:30:52.002" endtime="20231110 13:31:02.786"/>
</test>
<test id="s1-s4-t2" name="List om roles without OM service ID passed" line="39">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:02.795" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:02.800" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:02.800" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:31:02.791" endtime="20231110 13:31:02.800"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:02.801" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:31:02.801" endtime="20231110 13:31:02.801"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:02.802" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:02.802" endtime="20231110 13:31:02.802"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.791" endtime="20231110 13:31:02.802"/>
</kw>
<msg timestamp="20231110 13:31:02.802" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:02.791" endtime="20231110 13:31:02.803"/>
</kw>
<msg timestamp="20231110 13:31:02.803" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:31:02.790" endtime="20231110 13:31:02.803"/>
</kw>
<msg timestamp="20231110 13:31:02.803" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:31:02.789" endtime="20231110 13:31:02.803"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:31:02.804" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:31:02.803" endtime="20231110 13:31:02.804"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:02.809" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:02.896" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:02.896" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:31:02.806" endtime="20231110 13:31:02.896"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:02.897" level="INFO"/>
<status status="PASS" starttime="20231110 13:31:02.896" endtime="20231110 13:31:02.897"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:02.898" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:02.898" endtime="20231110 13:31:02.898"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.806" endtime="20231110 13:31:02.899"/>
</kw>
<msg timestamp="20231110 13:31:02.899" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:02.805" endtime="20231110 13:31:02.899"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.805" endtime="20231110 13:31:02.899"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.804" endtime="20231110 13:31:02.899"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.789" endtime="20231110 13:31:02.899"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.788" endtime="20231110 13:31:02.899"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:02.904" level="INFO">Running command 'ozone admin om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:08.067" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:08.068" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:31:02.901" endtime="20231110 13:31:08.068"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:08.069" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:31:08.068" endtime="20231110 13:31:08.069"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:08.070" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:08.070" endtime="20231110 13:31:08.070"/>
</kw>
<status status="PASS" starttime="20231110 13:31:02.900" endtime="20231110 13:31:08.070"/>
</kw>
<msg timestamp="20231110 13:31:08.070" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:02.900" endtime="20231110 13:31:08.071"/>
</kw>
<msg timestamp="20231110 13:31:08.071" level="INFO">${output_without_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20231110 13:31:02.900" endtime="20231110 13:31:08.071"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20231110 13:31:08.072" endtime="20231110 13:31:08.072"/>
</kw>
<status status="PASS" starttime="20231110 13:31:08.071" endtime="20231110 13:31:08.072"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:08.076" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:12.010" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:31:12.010" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:31:08.073" endtime="20231110 13:31:12.010"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:12.012" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:31:12.010" endtime="20231110 13:31:12.012"/>
</kw>
<msg timestamp="20231110 13:31:12.012" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:31:08.072" endtime="20231110 13:31:12.012"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:31:12.012" endtime="20231110 13:31:12.013"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:31:02.788" endtime="20231110 13:31:12.013"/>
</test>
<test id="s1-s4-t3" name="List om roles as JSON with OM service ID passed" line="45">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:12.023" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:12.028" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:12.028" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:31:12.018" endtime="20231110 13:31:12.028"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:12.031" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:31:12.028" endtime="20231110 13:31:12.031"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:12.039" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:12.031" endtime="20231110 13:31:12.039"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.017" endtime="20231110 13:31:12.039"/>
</kw>
<msg timestamp="20231110 13:31:12.040" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:12.017" endtime="20231110 13:31:12.040"/>
</kw>
<msg timestamp="20231110 13:31:12.040" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:31:12.017" endtime="20231110 13:31:12.040"/>
</kw>
<msg timestamp="20231110 13:31:12.040" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:31:12.016" endtime="20231110 13:31:12.041"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:31:12.041" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:31:12.041" endtime="20231110 13:31:12.041"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:12.048" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:12.103" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:12.103" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:31:12.044" endtime="20231110 13:31:12.103"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:12.105" level="INFO"/>
<status status="PASS" starttime="20231110 13:31:12.104" endtime="20231110 13:31:12.105"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:12.106" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:12.105" endtime="20231110 13:31:12.106"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.044" endtime="20231110 13:31:12.106"/>
</kw>
<msg timestamp="20231110 13:31:12.106" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:12.043" endtime="20231110 13:31:12.106"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.042" endtime="20231110 13:31:12.106"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.042" endtime="20231110 13:31:12.106"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.016" endtime="20231110 13:31:12.107"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.015" endtime="20231110 13:31:12.107"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:12.112" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:17.419" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:17.419" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20231110 13:31:12.109" endtime="20231110 13:31:17.419"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:17.421" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20231110 13:31:17.420" endtime="20231110 13:31:17.421"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:17.422" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:17.421" endtime="20231110 13:31:17.422"/>
</kw>
<status status="PASS" starttime="20231110 13:31:12.108" endtime="20231110 13:31:17.422"/>
</kw>
<msg timestamp="20231110 13:31:17.422" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:12.108" endtime="20231110 13:31:17.423"/>
</kw>
<msg timestamp="20231110 13:31:17.423" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20231110 13:31:12.107" endtime="20231110 13:31:17.423"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:17.429" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:17.471" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:17.471" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:17.426" endtime="20231110 13:31:17.471"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:17.473" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:17.472" endtime="20231110 13:31:17.473"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:17.473" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:17.473" endtime="20231110 13:31:17.473"/>
</kw>
<status status="PASS" starttime="20231110 13:31:17.425" endtime="20231110 13:31:17.474"/>
</kw>
<msg timestamp="20231110 13:31:17.474" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:17.425" endtime="20231110 13:31:17.474"/>
</kw>
<msg timestamp="20231110 13:31:17.474" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:17.424" endtime="20231110 13:31:17.474"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:31:17.475" endtime="20231110 13:31:17.476"/>
</kw>
<status status="PASS" starttime="20231110 13:31:17.423" endtime="20231110 13:31:17.476"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:17.480" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:23.194" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:23.194" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20231110 13:31:17.477" endtime="20231110 13:31:23.194"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:23.196" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20231110 13:31:23.195" endtime="20231110 13:31:23.196"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:23.197" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:23.196" endtime="20231110 13:31:23.197"/>
</kw>
<status status="PASS" starttime="20231110 13:31:17.477" endtime="20231110 13:31:23.197"/>
</kw>
<msg timestamp="20231110 13:31:23.198" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:17.476" endtime="20231110 13:31:23.198"/>
</kw>
<msg timestamp="20231110 13:31:23.198" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20231110 13:31:17.476" endtime="20231110 13:31:23.198"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:23.204" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:23.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:23.242" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:23.200" endtime="20231110 13:31:23.242"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:23.244" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:23.243" endtime="20231110 13:31:23.244"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:23.245" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:23.245" endtime="20231110 13:31:23.245"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.200" endtime="20231110 13:31:23.246"/>
</kw>
<msg timestamp="20231110 13:31:23.246" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:23.199" endtime="20231110 13:31:23.246"/>
</kw>
<msg timestamp="20231110 13:31:23.246" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:23.199" endtime="20231110 13:31:23.246"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:31:23.246" endtime="20231110 13:31:23.248"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.198" endtime="20231110 13:31:23.248"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:31:12.014" endtime="20231110 13:31:23.248"/>
</test>
<test id="s1-s4-t4" name="List om roles as JSON without OM service ID passed" line="51">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:23.258" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' | sed 's/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:23.264" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:23.264" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20231110 13:31:23.255" endtime="20231110 13:31:23.264"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:23.266" level="INFO">s3g</msg>
<status status="PASS" starttime="20231110 13:31:23.265" endtime="20231110 13:31:23.266"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:23.267" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:23.267" endtime="20231110 13:31:23.267"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.254" endtime="20231110 13:31:23.268"/>
</kw>
<msg timestamp="20231110 13:31:23.268" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:23.254" endtime="20231110 13:31:23.268"/>
</kw>
<msg timestamp="20231110 13:31:23.268" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20231110 13:31:23.253" endtime="20231110 13:31:23.268"/>
</kw>
<msg timestamp="20231110 13:31:23.268" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:31:23.252" endtime="20231110 13:31:23.269"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20231110 13:31:23.269" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20231110 13:31:23.269" endtime="20231110 13:31:23.269"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:23.275" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:23.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:23.325" level="INFO">${output} = </msg>
<status status="PASS" starttime="20231110 13:31:23.272" endtime="20231110 13:31:23.325"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:23.328" level="INFO"/>
<status status="PASS" starttime="20231110 13:31:23.327" endtime="20231110 13:31:23.328"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:23.329" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:23.328" endtime="20231110 13:31:23.329"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.271" endtime="20231110 13:31:23.329"/>
</kw>
<msg timestamp="20231110 13:31:23.329" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:23.271" endtime="20231110 13:31:23.330"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.270" endtime="20231110 13:31:23.330"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.270" endtime="20231110 13:31:23.330"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.252" endtime="20231110 13:31:23.330"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.251" endtime="20231110 13:31:23.330"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:23.335" level="INFO">Running command 'ozone admin om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:28.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:28.799" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20231110 13:31:23.332" endtime="20231110 13:31:28.799"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:28.801" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20231110 13:31:28.800" endtime="20231110 13:31:28.801"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:28.802" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:28.801" endtime="20231110 13:31:28.802"/>
</kw>
<status status="PASS" starttime="20231110 13:31:23.331" endtime="20231110 13:31:28.802"/>
</kw>
<msg timestamp="20231110 13:31:28.802" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:23.331" endtime="20231110 13:31:28.802"/>
</kw>
<msg timestamp="20231110 13:31:28.803" level="INFO">${output_without_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20231110 13:31:23.330" endtime="20231110 13:31:28.803"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_without_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:28.808" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:28.852" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:28.852" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:28.805" endtime="20231110 13:31:28.853"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:28.854" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:28.853" endtime="20231110 13:31:28.854"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:28.855" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:28.855" endtime="20231110 13:31:28.855"/>
</kw>
<status status="PASS" starttime="20231110 13:31:28.804" endtime="20231110 13:31:28.856"/>
</kw>
<msg timestamp="20231110 13:31:28.856" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:28.804" endtime="20231110 13:31:28.856"/>
</kw>
<msg timestamp="20231110 13:31:28.856" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20231110 13:31:28.803" endtime="20231110 13:31:28.856"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:31:28.856" endtime="20231110 13:31:28.857"/>
</kw>
<status status="PASS" starttime="20231110 13:31:28.803" endtime="20231110 13:31:28.858"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:28.861" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:32.538" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:31:32.538" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:31:28.858" endtime="20231110 13:31:32.538"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:32.540" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:31:32.539" endtime="20231110 13:31:32.540"/>
</kw>
<msg timestamp="20231110 13:31:32.540" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:31:28.858" endtime="20231110 13:31:32.540"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:31:32.540" endtime="20231110 13:31:32.541"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:31:23.250" endtime="20231110 13:31:32.541"/>
</test>
<doc>Smoke test for listing om roles.</doc>
<status status="PASS" starttime="20231110 13:30:51.942" endtime="20231110 13:31:32.544"/>
</suite>
<suite id="s1-s5" name="Om-Leader-Transfer" source="/opt/hadoop/smoketest/omha/om-leader-transfer.robot">
<test id="s1-s5-t1" name="Transfer Leadership for OM with Valid ServiceID Specified" line="52">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:36.906" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:42.610" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:42.611" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:31:36.903" endtime="20231110 13:31:42.611"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:42.612" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:31:42.611" endtime="20231110 13:31:42.612"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:42.613" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:42.613" endtime="20231110 13:31:42.614"/>
</kw>
<status status="PASS" starttime="20231110 13:31:36.902" endtime="20231110 13:31:42.614"/>
</kw>
<msg timestamp="20231110 13:31:42.614" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:36.902" endtime="20231110 13:31:42.614"/>
</kw>
<msg timestamp="20231110 13:31:42.614" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:31:36.901" endtime="20231110 13:31:42.614"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:31:42.615" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:31:42.615" endtime="20231110 13:31:42.615"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:31:42.616" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:31:42.615" endtime="20231110 13:31:42.616"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:31:42.617" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:31:42.616" endtime="20231110 13:31:42.617"/>
</kw>
<msg timestamp="20231110 13:31:42.617" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:31:36.901" endtime="20231110 13:31:42.617"/>
</kw>
<msg timestamp="20231110 13:31:42.618" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20231110 13:31:42.618" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20231110 13:31:36.900" endtime="20231110 13:31:42.618"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:42.624" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:51.620" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:51.620" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20231110 13:31:42.620" endtime="20231110 13:31:51.620"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:51.621" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20231110 13:31:51.620" endtime="20231110 13:31:51.621"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:51.622" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:51.622" endtime="20231110 13:31:51.622"/>
</kw>
<status status="PASS" starttime="20231110 13:31:42.620" endtime="20231110 13:31:51.623"/>
</kw>
<msg timestamp="20231110 13:31:51.623" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:42.619" endtime="20231110 13:31:51.623"/>
</kw>
<msg timestamp="20231110 13:31:51.623" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20231110 13:31:42.618" endtime="20231110 13:31:51.623"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:31:51.623" endtime="20231110 13:31:51.624"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:51.630" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:31:56.924" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:31:56.925" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:31:51.627" endtime="20231110 13:31:56.925"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:31:56.927" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:31:56.925" endtime="20231110 13:31:56.927"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:31:56.928" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:31:56.927" endtime="20231110 13:31:56.928"/>
</kw>
<status status="PASS" starttime="20231110 13:31:51.626" endtime="20231110 13:31:56.928"/>
</kw>
<msg timestamp="20231110 13:31:56.928" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:51.626" endtime="20231110 13:31:56.928"/>
</kw>
<msg timestamp="20231110 13:31:56.928" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:31:51.625" endtime="20231110 13:31:56.928"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:31:56.929" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:31:56.929" endtime="20231110 13:31:56.929"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:31:56.930" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:31:56.929" endtime="20231110 13:31:56.930"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:31:56.930" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:31:56.930" endtime="20231110 13:31:56.930"/>
</kw>
<msg timestamp="20231110 13:31:56.931" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:31:51.625" endtime="20231110 13:31:56.931"/>
</kw>
<msg timestamp="20231110 13:31:56.931" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20231110 13:31:51.625" endtime="20231110 13:31:56.931"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:31:56.931" endtime="20231110 13:31:56.932"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20231110 13:31:56.932" endtime="20231110 13:31:56.933"/>
</kw>
<status status="PASS" starttime="20231110 13:31:56.932" endtime="20231110 13:31:56.933"/>
</kw>
<status status="PASS" starttime="20231110 13:31:51.624" endtime="20231110 13:31:56.933"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:31:36.899" endtime="20231110 13:31:56.933"/>
</test>
<test id="s1-s5-t2" name="Transfer Leadership for OM with Multiple ServiceIDs, Valid ServiceID Specified" line="62">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:31:56.940" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:03.069" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:03.069" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:31:56.937" endtime="20231110 13:32:03.069"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:03.071" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:03.070" endtime="20231110 13:32:03.071"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:03.072" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:03.071" endtime="20231110 13:32:03.072"/>
</kw>
<status status="PASS" starttime="20231110 13:31:56.937" endtime="20231110 13:32:03.072"/>
</kw>
<msg timestamp="20231110 13:32:03.072" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:31:56.936" endtime="20231110 13:32:03.072"/>
</kw>
<msg timestamp="20231110 13:32:03.072" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:31:56.936" endtime="20231110 13:32:03.073"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:03.073" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:32:03.073" endtime="20231110 13:32:03.073"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:03.074" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:32:03.073" endtime="20231110 13:32:03.074"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:03.075" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:03.074" endtime="20231110 13:32:03.075"/>
</kw>
<msg timestamp="20231110 13:32:03.075" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:31:56.935" endtime="20231110 13:32:03.075"/>
</kw>
<msg timestamp="20231110 13:32:03.075" level="INFO">${leaderOM} = om1</msg>
<msg timestamp="20231110 13:32:03.075" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20231110 13:31:56.935" endtime="20231110 13:32:03.075"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:03.080" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:09.227" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:09.227" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20231110 13:32:03.077" endtime="20231110 13:32:09.227"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:09.229" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20231110 13:32:09.228" endtime="20231110 13:32:09.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:09.230" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:09.229" endtime="20231110 13:32:09.230"/>
</kw>
<status status="PASS" starttime="20231110 13:32:03.077" endtime="20231110 13:32:09.230"/>
</kw>
<msg timestamp="20231110 13:32:09.230" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:03.076" endtime="20231110 13:32:09.230"/>
</kw>
<msg timestamp="20231110 13:32:09.230" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20231110 13:32:03.075" endtime="20231110 13:32:09.230"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:32:09.231" endtime="20231110 13:32:09.231"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:09.240" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:14.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:14.826" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:09.237" endtime="20231110 13:32:14.826"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:14.828" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:14.827" endtime="20231110 13:32:14.828"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:14.828" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:14.828" endtime="20231110 13:32:14.829"/>
</kw>
<status status="PASS" starttime="20231110 13:32:09.236" endtime="20231110 13:32:14.829"/>
</kw>
<msg timestamp="20231110 13:32:14.829" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:09.236" endtime="20231110 13:32:14.829"/>
</kw>
<msg timestamp="20231110 13:32:14.829" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:09.235" endtime="20231110 13:32:14.829"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:14.830" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:32:14.829" endtime="20231110 13:32:14.830"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:14.830" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:32:14.830" endtime="20231110 13:32:14.830"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:14.831" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:14.831" endtime="20231110 13:32:14.831"/>
</kw>
<msg timestamp="20231110 13:32:14.831" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:09.233" endtime="20231110 13:32:14.831"/>
</kw>
<msg timestamp="20231110 13:32:14.832" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20231110 13:32:09.232" endtime="20231110 13:32:14.832"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:32:14.832" endtime="20231110 13:32:14.832"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20231110 13:32:14.833" endtime="20231110 13:32:14.833"/>
</kw>
<status status="PASS" starttime="20231110 13:32:14.832" endtime="20231110 13:32:14.833"/>
</kw>
<status status="PASS" starttime="20231110 13:32:09.231" endtime="20231110 13:32:14.833"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:31:56.934" endtime="20231110 13:32:14.834"/>
</test>
<test id="s1-s5-t3" name="Transfer Leadership for OM with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="72">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:14.842" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:20.167" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:20.167" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:14.838" endtime="20231110 13:32:20.167"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:20.169" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:20.168" endtime="20231110 13:32:20.169"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:20.169" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:20.169" endtime="20231110 13:32:20.170"/>
</kw>
<status status="PASS" starttime="20231110 13:32:14.838" endtime="20231110 13:32:20.170"/>
</kw>
<msg timestamp="20231110 13:32:20.170" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:14.838" endtime="20231110 13:32:20.170"/>
</kw>
<msg timestamp="20231110 13:32:20.170" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:14.837" endtime="20231110 13:32:20.170"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:20.171" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:32:20.170" endtime="20231110 13:32:20.171"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:20.171" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:32:20.171" endtime="20231110 13:32:20.172"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:20.172" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:20.172" endtime="20231110 13:32:20.172"/>
</kw>
<msg timestamp="20231110 13:32:20.173" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:14.837" endtime="20231110 13:32:20.173"/>
</kw>
<msg timestamp="20231110 13:32:20.173" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20231110 13:32:14.836" endtime="20231110 13:32:20.173"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:20.177" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:23.809" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:32:23.809" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20231110 13:32:20.174" endtime="20231110 13:32:23.809"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:23.811" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20231110 13:32:23.810" endtime="20231110 13:32:23.811"/>
</kw>
<msg timestamp="20231110 13:32:23.812" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20231110 13:32:20.173" endtime="20231110 13:32:23.812"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:32:23.812" endtime="20231110 13:32:23.812"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:32:14.835" endtime="20231110 13:32:23.813"/>
</test>
<test id="s1-s5-t4" name="Transfer Leadership for OM with Multiple ServiceIDs, Invalid ServiceID Specified" line="80">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:23.821" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:29.296" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:29.296" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:23.818" endtime="20231110 13:32:29.296"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:29.298" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:29.297" endtime="20231110 13:32:29.298"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:29.299" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:29.298" endtime="20231110 13:32:29.299"/>
</kw>
<status status="PASS" starttime="20231110 13:32:23.817" endtime="20231110 13:32:29.299"/>
</kw>
<msg timestamp="20231110 13:32:29.299" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:23.817" endtime="20231110 13:32:29.299"/>
</kw>
<msg timestamp="20231110 13:32:29.299" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:23.817" endtime="20231110 13:32:29.299"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:29.300" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:32:29.299" endtime="20231110 13:32:29.300"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:29.301" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:32:29.300" endtime="20231110 13:32:29.301"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:29.301" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:29.301" endtime="20231110 13:32:29.301"/>
</kw>
<msg timestamp="20231110 13:32:29.301" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:23.816" endtime="20231110 13:32:29.302"/>
</kw>
<msg timestamp="20231110 13:32:29.302" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20231110 13:32:23.815" endtime="20231110 13:32:29.302"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:29.306" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:32.952" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:32:32.952" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:32:29.303" endtime="20231110 13:32:32.952"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:32.954" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:32:32.953" endtime="20231110 13:32:32.954"/>
</kw>
<msg timestamp="20231110 13:32:32.954" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:32:29.302" endtime="20231110 13:32:32.954"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:32:32.955" endtime="20231110 13:32:32.955"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:32:23.814" endtime="20231110 13:32:32.955"/>
</test>
<test id="s1-s5-t5" name="Transfer Leadership for OM without ServiceID specified" line="88">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:32.962" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:38.527" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:38.527" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:32.959" endtime="20231110 13:32:38.527"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:38.529" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:38.528" endtime="20231110 13:32:38.529"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:38.530" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:38.529" endtime="20231110 13:32:38.530"/>
</kw>
<status status="PASS" starttime="20231110 13:32:32.959" endtime="20231110 13:32:38.530"/>
</kw>
<msg timestamp="20231110 13:32:38.530" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:32.959" endtime="20231110 13:32:38.530"/>
</kw>
<msg timestamp="20231110 13:32:38.530" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:32:32.958" endtime="20231110 13:32:38.530"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:38.531" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:32:38.531" endtime="20231110 13:32:38.531"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:38.532" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:32:38.531" endtime="20231110 13:32:38.532"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:38.532" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:38.532" endtime="20231110 13:32:38.532"/>
</kw>
<msg timestamp="20231110 13:32:38.533" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:32.958" endtime="20231110 13:32:38.533"/>
</kw>
<msg timestamp="20231110 13:32:38.533" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20231110 13:32:38.533" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20231110 13:32:32.957" endtime="20231110 13:32:38.533"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:38.538" level="INFO">Running command 'ozone admin om transfer -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:44.560" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:44.561" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20231110 13:32:38.535" endtime="20231110 13:32:44.561"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:44.562" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20231110 13:32:44.561" endtime="20231110 13:32:44.563"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:44.563" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:44.563" endtime="20231110 13:32:44.563"/>
</kw>
<status status="PASS" starttime="20231110 13:32:38.534" endtime="20231110 13:32:44.564"/>
</kw>
<msg timestamp="20231110 13:32:44.564" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:38.534" endtime="20231110 13:32:44.564"/>
</kw>
<msg timestamp="20231110 13:32:44.564" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20231110 13:32:38.533" endtime="20231110 13:32:44.564"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:32:44.564" endtime="20231110 13:32:44.565"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:44.572" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:49.761" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:49.762" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:44.569" endtime="20231110 13:32:49.762"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:49.763" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:49.762" endtime="20231110 13:32:49.764"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:49.764" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:49.764" endtime="20231110 13:32:49.765"/>
</kw>
<status status="PASS" starttime="20231110 13:32:44.568" endtime="20231110 13:32:49.765"/>
</kw>
<msg timestamp="20231110 13:32:49.765" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:44.568" endtime="20231110 13:32:49.765"/>
</kw>
<msg timestamp="20231110 13:32:49.765" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:44.567" endtime="20231110 13:32:49.765"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:49.766" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:32:49.765" endtime="20231110 13:32:49.766"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:49.766" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:32:49.766" endtime="20231110 13:32:49.767"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:49.767" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:49.767" endtime="20231110 13:32:49.767"/>
</kw>
<msg timestamp="20231110 13:32:49.767" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:44.566" endtime="20231110 13:32:49.767"/>
</kw>
<msg timestamp="20231110 13:32:49.768" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20231110 13:32:44.565" endtime="20231110 13:32:49.768"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:32:49.768" endtime="20231110 13:32:49.768"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20231110 13:32:49.769" endtime="20231110 13:32:49.769"/>
</kw>
<status status="PASS" starttime="20231110 13:32:49.769" endtime="20231110 13:32:49.770"/>
</kw>
<status status="PASS" starttime="20231110 13:32:44.565" endtime="20231110 13:32:49.770"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:32:32.956" endtime="20231110 13:32:49.770"/>
</test>
<test id="s1-s5-t6" name="Transfer Leadership for OM with Multiple ServiceIDs, No ServiceID Specified" line="98">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:49.777" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:54.929" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:32:54.929" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:49.774" endtime="20231110 13:32:54.929"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:54.931" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:54.930" endtime="20231110 13:32:54.931"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:32:54.932" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:32:54.931" endtime="20231110 13:32:54.932"/>
</kw>
<status status="PASS" starttime="20231110 13:32:49.773" endtime="20231110 13:32:54.932"/>
</kw>
<msg timestamp="20231110 13:32:54.932" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:49.773" endtime="20231110 13:32:54.932"/>
</kw>
<msg timestamp="20231110 13:32:54.933" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:49.772" endtime="20231110 13:32:54.933"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:54.933" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:32:54.933" endtime="20231110 13:32:54.933"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:54.934" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:32:54.933" endtime="20231110 13:32:54.934"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:32:54.935" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:32:54.934" endtime="20231110 13:32:54.935"/>
</kw>
<msg timestamp="20231110 13:32:54.935" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:49.772" endtime="20231110 13:32:54.935"/>
</kw>
<msg timestamp="20231110 13:32:54.935" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20231110 13:32:49.772" endtime="20231110 13:32:54.935"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:54.939" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:32:58.422" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:32:58.422" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:32:54.936" endtime="20231110 13:32:58.422"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:32:58.424" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:32:58.423" endtime="20231110 13:32:58.424"/>
</kw>
<msg timestamp="20231110 13:32:58.425" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:32:54.936" endtime="20231110 13:32:58.425"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:32:58.425" endtime="20231110 13:32:58.425"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:32:49.771" endtime="20231110 13:32:58.426"/>
</test>
<test id="s1-s5-t7" name="Transfer Leadership for OM randomly with Valid ServiceID Specified" line="106">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:32:58.434" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:03.813" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:03.813" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:58.431" endtime="20231110 13:33:03.813"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:03.815" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:03.814" endtime="20231110 13:33:03.815"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:03.816" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:03.815" endtime="20231110 13:33:03.816"/>
</kw>
<status status="PASS" starttime="20231110 13:32:58.430" endtime="20231110 13:33:03.816"/>
</kw>
<msg timestamp="20231110 13:33:03.817" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:32:58.430" endtime="20231110 13:33:03.817"/>
</kw>
<msg timestamp="20231110 13:33:03.817" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:32:58.429" endtime="20231110 13:33:03.817"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:03.818" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:33:03.817" endtime="20231110 13:33:03.818"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:03.819" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:33:03.818" endtime="20231110 13:33:03.819"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:03.819" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:33:03.819" endtime="20231110 13:33:03.819"/>
</kw>
<msg timestamp="20231110 13:33:03.819" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:32:58.429" endtime="20231110 13:33:03.820"/>
</kw>
<msg timestamp="20231110 13:33:03.820" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20231110 13:32:58.428" endtime="20231110 13:33:03.820"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:03.825" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:09.462" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:09.462" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:03.822" endtime="20231110 13:33:09.462"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:09.463" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:09.462" endtime="20231110 13:33:09.463"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:09.464" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:09.464" endtime="20231110 13:33:09.464"/>
</kw>
<status status="PASS" starttime="20231110 13:33:03.821" endtime="20231110 13:33:09.464"/>
</kw>
<msg timestamp="20231110 13:33:09.464" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:03.821" endtime="20231110 13:33:09.465"/>
</kw>
<msg timestamp="20231110 13:33:09.465" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:03.820" endtime="20231110 13:33:09.465"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:33:09.465" endtime="20231110 13:33:09.465"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:09.472" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:15.122" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:15.122" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:09.469" endtime="20231110 13:33:15.122"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:15.124" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:15.123" endtime="20231110 13:33:15.124"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:15.125" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:15.124" endtime="20231110 13:33:15.125"/>
</kw>
<status status="PASS" starttime="20231110 13:33:09.468" endtime="20231110 13:33:15.125"/>
</kw>
<msg timestamp="20231110 13:33:15.125" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:09.468" endtime="20231110 13:33:15.125"/>
</kw>
<msg timestamp="20231110 13:33:15.125" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:09.467" endtime="20231110 13:33:15.125"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:15.126" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:33:15.126" endtime="20231110 13:33:15.126"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:15.127" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:33:15.126" endtime="20231110 13:33:15.127"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:15.127" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:33:15.127" endtime="20231110 13:33:15.127"/>
</kw>
<msg timestamp="20231110 13:33:15.128" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:33:09.467" endtime="20231110 13:33:15.128"/>
</kw>
<msg timestamp="20231110 13:33:15.128" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20231110 13:33:09.466" endtime="20231110 13:33:15.128"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:33:15.128" endtime="20231110 13:33:15.129"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231110 13:33:15.129" endtime="20231110 13:33:15.129"/>
</kw>
<status status="PASS" starttime="20231110 13:33:09.466" endtime="20231110 13:33:15.129"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:32:58.427" endtime="20231110 13:33:15.130"/>
</test>
<test id="s1-s5-t8" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Valid ServiceID Specified" line="115">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:15.138" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:20.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:20.629" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:15.135" endtime="20231110 13:33:20.629"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:20.631" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:20.630" endtime="20231110 13:33:20.631"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:20.632" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:20.631" endtime="20231110 13:33:20.632"/>
</kw>
<status status="PASS" starttime="20231110 13:33:15.134" endtime="20231110 13:33:20.632"/>
</kw>
<msg timestamp="20231110 13:33:20.632" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:15.134" endtime="20231110 13:33:20.632"/>
</kw>
<msg timestamp="20231110 13:33:20.632" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:15.133" endtime="20231110 13:33:20.632"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:20.633" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:33:20.633" endtime="20231110 13:33:20.633"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:20.634" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:33:20.633" endtime="20231110 13:33:20.634"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:20.634" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:33:20.634" endtime="20231110 13:33:20.634"/>
</kw>
<msg timestamp="20231110 13:33:20.635" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:33:15.133" endtime="20231110 13:33:20.635"/>
</kw>
<msg timestamp="20231110 13:33:20.635" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" starttime="20231110 13:33:15.132" endtime="20231110 13:33:20.635"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:20.641" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:26.694" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:26.694" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:20.637" endtime="20231110 13:33:26.694"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:26.696" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:26.695" endtime="20231110 13:33:26.696"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:26.697" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:26.696" endtime="20231110 13:33:26.697"/>
</kw>
<status status="PASS" starttime="20231110 13:33:20.637" endtime="20231110 13:33:26.697"/>
</kw>
<msg timestamp="20231110 13:33:26.697" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:20.636" endtime="20231110 13:33:26.697"/>
</kw>
<msg timestamp="20231110 13:33:26.697" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:20.635" endtime="20231110 13:33:26.697"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:33:26.698" endtime="20231110 13:33:26.698"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:26.705" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:32.441" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:32.441" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:26.702" endtime="20231110 13:33:32.441"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:32.442" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:32.441" endtime="20231110 13:33:32.443"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:32.443" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:32.443" endtime="20231110 13:33:32.444"/>
</kw>
<status status="PASS" starttime="20231110 13:33:26.701" endtime="20231110 13:33:32.444"/>
</kw>
<msg timestamp="20231110 13:33:32.444" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:26.701" endtime="20231110 13:33:32.444"/>
</kw>
<msg timestamp="20231110 13:33:32.444" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:26.700" endtime="20231110 13:33:32.444"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:32.445" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:33:32.444" endtime="20231110 13:33:32.445"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:32.446" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:33:32.445" endtime="20231110 13:33:32.446"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:32.446" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:33:32.446" endtime="20231110 13:33:32.446"/>
</kw>
<msg timestamp="20231110 13:33:32.446" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:33:26.700" endtime="20231110 13:33:32.447"/>
</kw>
<msg timestamp="20231110 13:33:32.447" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20231110 13:33:26.699" endtime="20231110 13:33:32.447"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:33:32.447" endtime="20231110 13:33:32.447"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231110 13:33:32.448" endtime="20231110 13:33:32.448"/>
</kw>
<status status="PASS" starttime="20231110 13:33:26.698" endtime="20231110 13:33:32.448"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:33:15.131" endtime="20231110 13:33:32.448"/>
</test>
<test id="s1-s5-t9" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="125">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:32.455" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:36.113" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:33:36.113" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20231110 13:33:32.452" endtime="20231110 13:33:36.113"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:36.115" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20231110 13:33:36.114" endtime="20231110 13:33:36.115"/>
</kw>
<msg timestamp="20231110 13:33:36.115" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20231110 13:33:32.451" endtime="20231110 13:33:36.115"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:33:36.115" endtime="20231110 13:33:36.116"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:33:32.450" endtime="20231110 13:33:36.116"/>
</test>
<test id="s1-s5-t10" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Invalid ServiceID Specified" line="130">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:36.122" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:40.096" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:33:40.096" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:33:36.119" endtime="20231110 13:33:40.096"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:40.098" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:33:40.097" endtime="20231110 13:33:40.098"/>
</kw>
<msg timestamp="20231110 13:33:40.098" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20231110 13:33:36.118" endtime="20231110 13:33:40.098"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:33:40.098" endtime="20231110 13:33:40.099"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:33:36.117" endtime="20231110 13:33:40.099"/>
</test>
<test id="s1-s5-t11" name="Transfer Leadership for OM randomly without ServiceID specified" line="136">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:40.109" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:45.708" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:45.708" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:40.106" endtime="20231110 13:33:45.709"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:45.710" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:45.709" endtime="20231110 13:33:45.711"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:45.712" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:45.711" endtime="20231110 13:33:45.712"/>
</kw>
<status status="PASS" starttime="20231110 13:33:40.105" endtime="20231110 13:33:45.712"/>
</kw>
<msg timestamp="20231110 13:33:45.712" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:40.104" endtime="20231110 13:33:45.712"/>
</kw>
<msg timestamp="20231110 13:33:45.713" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20231110 13:33:40.104" endtime="20231110 13:33:45.713"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:45.713" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20231110 13:33:45.713" endtime="20231110 13:33:45.713"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:45.714" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20231110 13:33:45.713" endtime="20231110 13:33:45.714"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:45.715" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:33:45.714" endtime="20231110 13:33:45.715"/>
</kw>
<msg timestamp="20231110 13:33:45.715" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20231110 13:33:40.103" endtime="20231110 13:33:45.715"/>
</kw>
<msg timestamp="20231110 13:33:45.715" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20231110 13:33:40.103" endtime="20231110 13:33:45.715"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:45.721" level="INFO">Running command 'ozone admin om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:51.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:51.705" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:45.717" endtime="20231110 13:33:51.705"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:51.707" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:51.706" endtime="20231110 13:33:51.707"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:51.707" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:51.707" endtime="20231110 13:33:51.708"/>
</kw>
<status status="PASS" starttime="20231110 13:33:45.716" endtime="20231110 13:33:51.708"/>
</kw>
<msg timestamp="20231110 13:33:51.708" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:45.716" endtime="20231110 13:33:51.708"/>
</kw>
<msg timestamp="20231110 13:33:51.708" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20231110 13:33:45.715" endtime="20231110 13:33:51.708"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:33:51.709" endtime="20231110 13:33:51.709"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:51.716" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:33:57.336" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:33:57.336" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:51.712" endtime="20231110 13:33:57.336"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:33:57.338" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:57.337" endtime="20231110 13:33:57.339"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:33:57.339" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:33:57.339" endtime="20231110 13:33:57.339"/>
</kw>
<status status="PASS" starttime="20231110 13:33:51.712" endtime="20231110 13:33:57.340"/>
</kw>
<msg timestamp="20231110 13:33:57.340" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:33:51.711" endtime="20231110 13:33:57.340"/>
</kw>
<msg timestamp="20231110 13:33:57.340" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20231110 13:33:51.711" endtime="20231110 13:33:57.340"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:57.341" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20231110 13:33:57.340" endtime="20231110 13:33:57.341"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:57.342" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20231110 13:33:57.341" endtime="20231110 13:33:57.342"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20231110 13:33:57.342" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20231110 13:33:57.342" endtime="20231110 13:33:57.342"/>
</kw>
<msg timestamp="20231110 13:33:57.343" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20231110 13:33:51.710" endtime="20231110 13:33:57.343"/>
</kw>
<msg timestamp="20231110 13:33:57.343" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20231110 13:33:51.710" endtime="20231110 13:33:57.343"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:33:57.343" endtime="20231110 13:33:57.344"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20231110 13:33:57.344" endtime="20231110 13:33:57.344"/>
</kw>
<status status="PASS" starttime="20231110 13:33:51.709" endtime="20231110 13:33:57.344"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:33:40.102" endtime="20231110 13:33:57.345"/>
</test>
<test id="s1-s5-t12" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, No ServiceID Specified" line="146">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:33:57.350" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:34:00.664" level="INFO">${rc} = 255</msg>
<msg timestamp="20231110 13:34:00.664" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:33:57.347" endtime="20231110 13:34:00.664"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:00.666" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:34:00.665" endtime="20231110 13:34:00.666"/>
</kw>
<msg timestamp="20231110 13:34:00.666" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20231110 13:33:57.346" endtime="20231110 13:34:00.666"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:34:00.666" endtime="20231110 13:34:00.667"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:33:57.345" endtime="20231110 13:34:00.667"/>
</test>
<doc>Smoketest for OM leader transfer</doc>
<status status="PASS" starttime="20231110 13:31:36.844" endtime="20231110 13:34:00.669"/>
</suite>
<suite id="s1-s6" name="Scm-Leader-Transfer" source="/opt/hadoop/smoketest/scmha/scm-leader-transfer.robot">
<test id="s1-s6-t1" name="Transfer Leadership" line="47">
<kw name="Get SCM Leader Node">
<var>${leaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:34:05.324" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:34:09.692" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:34:09.692" level="INFO">${output} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:34:05.320" endtime="20231110 13:34:09.692"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:09.694" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:09.693" endtime="20231110 13:34:09.694"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:34:09.695" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:34:09.694" endtime="20231110 13:34:09.695"/>
</kw>
<status status="PASS" starttime="20231110 13:34:05.319" endtime="20231110 13:34:09.695"/>
</kw>
<msg timestamp="20231110 13:34:09.695" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:34:05.319" endtime="20231110 13:34:09.696"/>
</kw>
<msg timestamp="20231110 13:34:09.696" level="INFO">${result} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:34:05.319" endtime="20231110 13:34:09.696"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:09.696" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:09.696" endtime="20231110 13:34:09.697"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:34:09.697" endtime="20231110 13:34:09.697"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:34:09.697" endtime="20231110 13:34:09.698"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20231110 13:34:09.698" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20231110 13:34:09.698" level="INFO">${scmLine} = scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:09.698" endtime="20231110 13:34:09.698"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231110 13:34:09.699" level="INFO">${splits} = ['scm1.org', '9894', 'LEADER', '59b19ecd-f2af-42d3-8605-a0f5d9fb479e', '172.25.0.116']</msg>
<status status="PASS" starttime="20231110 13:34:09.698" endtime="20231110 13:34:09.699"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20231110 13:34:09.700" level="INFO">${leaderSCM} = 59b19ecd-f2af-42d3-8605-a0f5d9fb479e</msg>
<status status="PASS" starttime="20231110 13:34:09.699" endtime="20231110 13:34:09.700"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:09.701" level="INFO">Leader SCM: 59b19ecd-f2af-42d3-8605-a0f5d9fb479e</msg>
<status status="PASS" starttime="20231110 13:34:09.700" endtime="20231110 13:34:09.701"/>
</kw>
<msg timestamp="20231110 13:34:09.701" level="INFO">${leaderSCM} = 59b19ecd-f2af-42d3-8605-a0f5d9fb479e</msg>
<status status="PASS" starttime="20231110 13:34:05.318" endtime="20231110 13:34:09.701"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:09.702" level="INFO">Leader SCM: 59b19ecd-f2af-42d3-8605-a0f5d9fb479e</msg>
<status status="PASS" starttime="20231110 13:34:09.701" endtime="20231110 13:34:09.702"/>
</kw>
<kw name="Get SCM UUID">
<var>${target_scm_uuid}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:34:09.707" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:34:14.906" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:34:14.906" level="INFO">${output} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:34:09.704" endtime="20231110 13:34:14.906"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:14.909" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:14.907" endtime="20231110 13:34:14.909"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:34:14.910" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:34:14.909" endtime="20231110 13:34:14.910"/>
</kw>
<status status="PASS" starttime="20231110 13:34:09.703" endtime="20231110 13:34:14.911"/>
</kw>
<msg timestamp="20231110 13:34:14.911" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:34:09.703" endtime="20231110 13:34:14.912"/>
</kw>
<msg timestamp="20231110 13:34:14.912" level="INFO">${result} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:34:09.702" endtime="20231110 13:34:14.912"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:14.913" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:LEADER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:14.912" endtime="20231110 13:34:14.913"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scm_line}</var>
<arg>${result}</arg>
<arg>${TARGET_SCM}</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20231110 13:34:14.914" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20231110 13:34:14.915" level="INFO">${scm_line} = scm2.org:9894:FOLLOWER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117</msg>
<status status="PASS" starttime="20231110 13:34:14.913" endtime="20231110 13:34:14.915"/>
</kw>
<kw name="Split String" library="String">
<var>${scm_split}</var>
<arg>${scm_line}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231110 13:34:14.916" level="INFO">${scm_split} = ['scm2.org', '9894', 'FOLLOWER', 'cce49b2a-0f18-461d-ba0f-69ddb0800759', '172.25.0.117']</msg>
<status status="PASS" starttime="20231110 13:34:14.915" endtime="20231110 13:34:14.916"/>
</kw>
<kw name="Strip String" library="String">
<var>${scm_uuid}</var>
<arg>${scm_split[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20231110 13:34:14.918" level="INFO">${scm_uuid} = cce49b2a-0f18-461d-ba0f-69ddb0800759</msg>
<status status="PASS" starttime="20231110 13:34:14.916" endtime="20231110 13:34:14.918"/>
</kw>
<msg timestamp="20231110 13:34:14.919" level="INFO">${target_scm_uuid} = cce49b2a-0f18-461d-ba0f-69ddb0800759</msg>
<status status="PASS" starttime="20231110 13:34:09.702" endtime="20231110 13:34:14.919"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm transfer --service-id=scmservice -n ${target_scm_uuid}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:34:14.927" level="INFO">Running command 'ozone admin scm transfer --service-id=scmservice -n cce49b2a-0f18-461d-ba0f-69ddb0800759 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:34:23.591" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:34:23.591" level="INFO">${output} = Transfer leadership successfully to cce49b2a-0f18-461d-ba0f-69ddb0800759.</msg>
<status status="PASS" starttime="20231110 13:34:14.921" endtime="20231110 13:34:23.591"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:23.593" level="INFO">Transfer leadership successfully to cce49b2a-0f18-461d-ba0f-69ddb0800759.</msg>
<status status="PASS" starttime="20231110 13:34:23.592" endtime="20231110 13:34:23.593"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:34:23.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:34:23.593" endtime="20231110 13:34:23.594"/>
</kw>
<status status="PASS" starttime="20231110 13:34:14.920" endtime="20231110 13:34:23.594"/>
</kw>
<msg timestamp="20231110 13:34:23.594" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:34:14.920" endtime="20231110 13:34:23.594"/>
</kw>
<msg timestamp="20231110 13:34:23.594" level="INFO">${result} = Transfer leadership successfully to cce49b2a-0f18-461d-ba0f-69ddb0800759.</msg>
<status status="PASS" starttime="20231110 13:34:14.919" endtime="20231110 13:34:23.594"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:23.595" level="INFO">Transfer leadership successfully to cce49b2a-0f18-461d-ba0f-69ddb0800759.</msg>
<status status="PASS" starttime="20231110 13:34:23.594" endtime="20231110 13:34:23.595"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:34:23.595" endtime="20231110 13:34:23.595"/>
</kw>
<kw name="Get SCM Leader Node">
<var>${newLeaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20231110 13:34:23.601" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20231110 13:34:30.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20231110 13:34:30.863" level="INFO">${output} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:LEADER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:FOLLOWER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:34:23.597" endtime="20231110 13:34:30.863"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:30.865" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:LEADER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:FOLLOWER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:30.864" endtime="20231110 13:34:30.865"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20231110 13:34:30.866" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20231110 13:34:30.865" endtime="20231110 13:34:30.866"/>
</kw>
<status status="PASS" starttime="20231110 13:34:23.597" endtime="20231110 13:34:30.866"/>
</kw>
<msg timestamp="20231110 13:34:30.866" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20231110 13:34:23.596" endtime="20231110 13:34:30.866"/>
</kw>
<msg timestamp="20231110 13:34:30.867" level="INFO">${result} = scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:LEADER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:FOLLOWER:59b19ecd-f2af-42d3-8605-a0f5d9fb4...</msg>
<status status="PASS" starttime="20231110 13:34:23.596" endtime="20231110 13:34:30.867"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:30.867" level="INFO">scm3.org:9894:FOLLOWER:04b4c426-1498-4c0b-aa42-503afea12e43:172.25.0.118
scm2.org:9894:LEADER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117
scm1.org:9894:FOLLOWER:59b19ecd-f2af-42d3-8605-a0f5d9fb479e:172.25.0.116</msg>
<status status="PASS" starttime="20231110 13:34:30.867" endtime="20231110 13:34:30.867"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:34:30.867" endtime="20231110 13:34:30.868"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20231110 13:34:30.868" endtime="20231110 13:34:30.868"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20231110 13:34:30.869" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20231110 13:34:30.869" level="INFO">${scmLine} = scm2.org:9894:LEADER:cce49b2a-0f18-461d-ba0f-69ddb0800759:172.25.0.117</msg>
<status status="PASS" starttime="20231110 13:34:30.869" endtime="20231110 13:34:30.869"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20231110 13:34:30.870" level="INFO">${splits} = ['scm2.org', '9894', 'LEADER', 'cce49b2a-0f18-461d-ba0f-69ddb0800759', '172.25.0.117']</msg>
<status status="PASS" starttime="20231110 13:34:30.869" endtime="20231110 13:34:30.870"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20231110 13:34:30.871" level="INFO">${leaderSCM} = cce49b2a-0f18-461d-ba0f-69ddb0800759</msg>
<status status="PASS" starttime="20231110 13:34:30.870" endtime="20231110 13:34:30.871"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231110 13:34:30.872" level="INFO">Leader SCM: cce49b2a-0f18-461d-ba0f-69ddb0800759</msg>
<status status="PASS" starttime="20231110 13:34:30.871" endtime="20231110 13:34:30.872"/>
</kw>
<msg timestamp="20231110 13:34:30.872" level="INFO">${newLeaderSCM} = cce49b2a-0f18-461d-ba0f-69ddb0800759</msg>
<status status="PASS" starttime="20231110 13:34:23.596" endtime="20231110 13:34:30.872"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderSCM}</arg>
<arg>${newLeaderSCM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20231110 13:34:30.872" endtime="20231110 13:34:30.873"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20231110 13:34:05.317" endtime="20231110 13:34:30.873"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20231110 13:34:05.261" endtime="20231110 13:34:30.874"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="532174"/>
</suite>
<statistics>
<total>
<stat pass="68" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="68" fail="0" skip="0" id="s1" name="ozonesecure-ha-leadership">ozonesecure-ha-leadership</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-leadership.Kinit</stat>
<stat pass="44" fail="0" skip="0" id="s1-s2" name="Admincli">ozonesecure-ha-leadership.Admincli</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2-s1" name="Admin">ozonesecure-ha-leadership.Admincli.Admin</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2-s2" name="Cert">ozonesecure-ha-leadership.Admincli.Cert</stat>
<stat pass="13" fail="0" skip="0" id="s1-s2-s3" name="Container">ozonesecure-ha-leadership.Admincli.Container</stat>
<stat pass="6" fail="0" skip="0" id="s1-s2-s4" name="Datanode">ozonesecure-ha-leadership.Admincli.Datanode</stat>
<stat pass="9" fail="0" skip="0" id="s1-s2-s5" name="Pipeline">ozonesecure-ha-leadership.Admincli.Pipeline</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2-s6" name="printTopology">ozonesecure-ha-leadership.Admincli.printTopology</stat>
<stat pass="5" fail="0" skip="0" id="s1-s2-s7" name="Replicationmanager">ozonesecure-ha-leadership.Admincli.Replicationmanager</stat>
<stat pass="4" fail="0" skip="0" id="s1-s2-s8" name="Safemode">ozonesecure-ha-leadership.Admincli.Safemode</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2-s9" name="Scmrole">ozonesecure-ha-leadership.Admincli.Scmrole</stat>
<stat pass="6" fail="0" skip="0" id="s1-s3" name="Om-Fetch-Key">ozonesecure-ha-leadership.Om-Fetch-Key</stat>
<stat pass="4" fail="0" skip="0" id="s1-s4" name="Om-Roles">ozonesecure-ha-leadership.Om-Roles</stat>
<stat pass="12" fail="0" skip="0" id="s1-s5" name="Om-Leader-Transfer">ozonesecure-ha-leadership.Om-Leader-Transfer</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Scm-Leader-Transfer">ozonesecure-ha-leadership.Scm-Leader-Transfer</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
