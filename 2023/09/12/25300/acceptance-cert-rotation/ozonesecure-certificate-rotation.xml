<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230912 15:07:13.169" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:13.253" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:13.267" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:13.267" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230912 15:05:13.228" endtime="20230912 15:05:13.267"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:13.269" level="INFO">scm</msg>
<status status="PASS" starttime="20230912 15:05:13.268" endtime="20230912 15:05:13.269"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:13.270" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:13.269" endtime="20230912 15:05:13.270"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.228" endtime="20230912 15:05:13.270"/>
</kw>
<msg timestamp="20230912 15:05:13.270" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:13.228" endtime="20230912 15:05:13.270"/>
</kw>
<msg timestamp="20230912 15:05:13.274" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230912 15:05:13.227" endtime="20230912 15:05:13.274"/>
</kw>
<msg timestamp="20230912 15:05:13.276" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230912 15:05:13.226" endtime="20230912 15:05:13.276"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230912 15:05:13.277" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230912 15:05:13.276" endtime="20230912 15:05:13.277"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:13.286" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:13.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:13.361" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:05:13.281" endtime="20230912 15:05:13.361"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:13.362" level="INFO"/>
<status status="PASS" starttime="20230912 15:05:13.361" endtime="20230912 15:05:13.362"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:13.363" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:13.362" endtime="20230912 15:05:13.363"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.279" endtime="20230912 15:05:13.363"/>
</kw>
<msg timestamp="20230912 15:05:13.363" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:13.278" endtime="20230912 15:05:13.363"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.278" endtime="20230912 15:05:13.363"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.277" endtime="20230912 15:05:13.363"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.226" endtime="20230912 15:05:13.364"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.225" endtime="20230912 15:05:13.364"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.225" endtime="20230912 15:05:13.364"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230912 15:05:13.373" level="INFO">${random} = iOlcvGTcvS</msg>
<status status="PASS" starttime="20230912 15:05:13.373" endtime="20230912 15:05:13.373"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:13.400" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p iOlcvGTcvS  2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:30.843" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:30.843" level="INFO">${output} = 2023-09-12 15:05:17,976 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:18,177 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:13.387" endtime="20230912 15:05:30.843"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:30.846" level="INFO">2023-09-12 15:05:17,976 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:18,177 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-12 15:05:18,177 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-12 15:05:18,419 [main] INFO freon.BaseFreonGenerator: Executing test with prefix iOlcvGTcvS and number-of-tests 1
2023-09-12 15:05:18,513 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:19,523 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:20,524 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:21,469 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-12 15:05:21,524 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:21,663 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-12 15:05:22,525 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:22,561 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-12 15:05:22,644 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-12 15:05:23,192 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-12 15:05:23,525 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:24,530 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:25,534 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:26,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:27,538 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:28,546 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:29,547 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-12 15:05:30,284 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=7604.36022, max=7604.36022, mean=7604.36022, stddev=0.0, median=7604.36022, p75=7604.36022, p95=7604.36022, p98=7604.36022, p99=7604.36022, p999=7604.36022, mean_rate=0.11722986299382605, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-12 15:05:30,286 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 12
2023-09-12 15:05:30,294 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-12 15:05:30,294 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230912 15:05:30.845" endtime="20230912 15:05:30.847"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:30.848" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:30.847" endtime="20230912 15:05:30.849"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.386" endtime="20230912 15:05:30.849"/>
</kw>
<msg timestamp="20230912 15:05:30.849" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:13.385" endtime="20230912 15:05:30.849"/>
</kw>
<msg timestamp="20230912 15:05:30.850" level="INFO">${result} = 2023-09-12 15:05:17,976 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:18,177 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:13.384" endtime="20230912 15:05:30.850"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:05:30.850" endtime="20230912 15:05:30.852"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.374" endtime="20230912 15:05:30.852"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:30.864" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p iOlcvGTcvS  2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:43.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:43.887" level="INFO">${output} = 2023-09-12 15:05:36,016 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:36,155 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:30.859" endtime="20230912 15:05:43.888"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:43.889" level="INFO">2023-09-12 15:05:36,016 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:36,155 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-12 15:05:36,155 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-12 15:05:36,247 [main] INFO freon.BaseFreonGenerator: Executing test with prefix iOlcvGTcvS and number-of-tests 1
2023-09-12 15:05:36,307 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:37,315 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:38,315 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:39,316 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:39,570 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-12 15:05:40,317 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:41,317 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:42,319 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:43,320 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-12 15:05:43,520 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=96.679163, max=96.679163, mean=96.679163, stddev=0.0, median=96.679163, p75=96.679163, p95=96.679163, p98=96.679163, p99=96.679163, p999=96.679163, mean_rate=0.8216453683985744, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-12 15:05:43,522 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-12 15:05:43,522 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-12 15:05:43,522 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230912 15:05:43.888" endtime="20230912 15:05:43.889"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:43.890" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:43.889" endtime="20230912 15:05:43.890"/>
</kw>
<status status="PASS" starttime="20230912 15:05:30.858" endtime="20230912 15:05:43.891"/>
</kw>
<msg timestamp="20230912 15:05:43.891" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:30.857" endtime="20230912 15:05:43.891"/>
</kw>
<msg timestamp="20230912 15:05:43.891" level="INFO">${result} = 2023-09-12 15:05:36,016 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:36,155 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:30.855" endtime="20230912 15:05:43.891"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:05:43.892" endtime="20230912 15:05:43.892"/>
</kw>
<status status="PASS" starttime="20230912 15:05:30.853" endtime="20230912 15:05:43.892"/>
</kw>
<status status="PASS" starttime="20230912 15:05:13.371" endtime="20230912 15:05:43.893"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:43.900" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:46.233" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:46.233" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230912 15:05:43.896" endtime="20230912 15:05:46.233"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:46.235" level="INFO">40s</msg>
<status status="PASS" starttime="20230912 15:05:46.234" endtime="20230912 15:05:46.235"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:46.236" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:46.235" endtime="20230912 15:05:46.236"/>
</kw>
<status status="PASS" starttime="20230912 15:05:43.895" endtime="20230912 15:05:46.237"/>
</kw>
<msg timestamp="20230912 15:05:46.237" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:43.894" endtime="20230912 15:05:46.237"/>
</kw>
<msg timestamp="20230912 15:05:46.237" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230912 15:05:43.894" endtime="20230912 15:05:46.237"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230912 15:05:46.239" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230912 15:05:46.237" endtime="20230912 15:05:46.239"/>
</kw>
<msg timestamp="20230912 15:05:46.239" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230912 15:05:43.893" endtime="20230912 15:05:46.239"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230912 15:05:46.241" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230912 15:05:46.240" endtime="20230912 15:05:46.241"/>
</kw>
<msg timestamp="20230912 15:05:46.242" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230912 15:05:46.240" endtime="20230912 15:05:46.242"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:46.249" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:46.430" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:46.430" level="INFO">${output} = D468058325</msg>
<status status="PASS" starttime="20230912 15:05:46.245" endtime="20230912 15:05:46.430"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:46.438" level="INFO">D468058325</msg>
<status status="PASS" starttime="20230912 15:05:46.437" endtime="20230912 15:05:46.438"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:46.443" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:46.441" endtime="20230912 15:05:46.443"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.244" endtime="20230912 15:05:46.443"/>
</kw>
<msg timestamp="20230912 15:05:46.443" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:46.244" endtime="20230912 15:05:46.444"/>
</kw>
<msg timestamp="20230912 15:05:46.444" level="INFO">${certSerial} = D468058325</msg>
<status status="PASS" starttime="20230912 15:05:46.243" endtime="20230912 15:05:46.444"/>
</kw>
<msg timestamp="20230912 15:05:46.445" level="INFO">${certId1} = D468058325</msg>
<status status="PASS" starttime="20230912 15:05:46.242" endtime="20230912 15:05:46.445"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:46.460" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:46.617" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:46.617" level="INFO">${output} = D431331C00</msg>
<status status="PASS" starttime="20230912 15:05:46.455" endtime="20230912 15:05:46.617"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:46.619" level="INFO">D431331C00</msg>
<status status="PASS" starttime="20230912 15:05:46.618" endtime="20230912 15:05:46.619"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:46.621" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:46.620" endtime="20230912 15:05:46.621"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.453" endtime="20230912 15:05:46.621"/>
</kw>
<msg timestamp="20230912 15:05:46.621" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:46.452" endtime="20230912 15:05:46.621"/>
</kw>
<msg timestamp="20230912 15:05:46.628" level="INFO">${certSerial} = D431331C00</msg>
<status status="PASS" starttime="20230912 15:05:46.451" endtime="20230912 15:05:46.628"/>
</kw>
<msg timestamp="20230912 15:05:46.628" level="INFO">${newCertId} = D431331C00</msg>
<status status="PASS" starttime="20230912 15:05:46.449" endtime="20230912 15:05:46.628"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230912 15:05:46.631" endtime="20230912 15:05:46.644"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.446" endtime="20230912 15:05:46.649"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.445" endtime="20230912 15:05:46.649"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230912 15:05:46.659" level="INFO">${random} = cfWq5bIPGR</msg>
<status status="PASS" starttime="20230912 15:05:46.656" endtime="20230912 15:05:46.659"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:46.715" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p cfWq5bIPGR  2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:05:59.668" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:05:59.669" level="INFO">${output} = 2023-09-12 15:05:51,404 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:51,665 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:46.676" endtime="20230912 15:05:59.670"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:05:59.674" level="INFO">2023-09-12 15:05:51,404 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:51,665 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-12 15:05:51,666 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-12 15:05:51,802 [main] INFO freon.BaseFreonGenerator: Executing test with prefix cfWq5bIPGR and number-of-tests 1
2023-09-12 15:05:51,871 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:52,895 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:53,897 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:54,897 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:55,516 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-12 15:05:55,599 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-12 15:05:55,898 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:55,984 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-12 15:05:56,898 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:57,899 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:05:58,899 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-12 15:05:59,272 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3720.694022, max=3720.694022, mean=3720.694022, stddev=0.0, median=3720.694022, p75=3720.694022, p95=3720.694022, p98=3720.694022, p99=3720.694022, p999=3720.694022, mean_rate=0.24038496359610353, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-12 15:05:59,274 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-12 15:05:59,275 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-12 15:05:59,276 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230912 15:05:59.671" endtime="20230912 15:05:59.674"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:05:59.685" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:05:59.674" endtime="20230912 15:05:59.686"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.665" endtime="20230912 15:05:59.687"/>
</kw>
<msg timestamp="20230912 15:05:59.687" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:46.664" endtime="20230912 15:05:59.687"/>
</kw>
<msg timestamp="20230912 15:05:59.690" level="INFO">${result} = 2023-09-12 15:05:51,404 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:05:51,665 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:46.662" endtime="20230912 15:05:59.690"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:05:59.690" endtime="20230912 15:05:59.696"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.660" endtime="20230912 15:05:59.696"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:05:59.711" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p cfWq5bIPGR  2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:11.615" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:11.615" level="INFO">${output} = 2023-09-12 15:06:04,052 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:06:04,312 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:59.705" endtime="20230912 15:06:11.615"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:11.617" level="INFO">2023-09-12 15:06:04,052 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:06:04,312 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-12 15:06:04,312 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-12 15:06:04,453 [main] INFO freon.BaseFreonGenerator: Executing test with prefix cfWq5bIPGR and number-of-tests 1
2023-09-12 15:06:04,529 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:06:05,531 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:06:06,532 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:06:07,533 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:06:08,327 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-12 15:06:08,533 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:06:09,534 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-12 15:06:10,535 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-12 15:06:11,214 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=60.65835, max=60.65835, mean=60.65835, stddev=0.0, median=60.65835, p75=60.65835, p95=60.65835, p98=60.65835, p99=60.65835, p999=60.65835, mean_rate=0.7951706076508112, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-12 15:06:11,221 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-12 15:06:11,222 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-12 15:06:11,222 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230912 15:06:11.616" endtime="20230912 15:06:11.617"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:11.618" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:11.617" endtime="20230912 15:06:11.618"/>
</kw>
<status status="PASS" starttime="20230912 15:05:59.705" endtime="20230912 15:06:11.618"/>
</kw>
<msg timestamp="20230912 15:06:11.618" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:05:59.703" endtime="20230912 15:06:11.619"/>
</kw>
<msg timestamp="20230912 15:06:11.619" level="INFO">${result} = 2023-09-12 15:06:04,052 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-12 15:06:04,312 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230912 15:05:59.701" endtime="20230912 15:06:11.619"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:06:11.619" endtime="20230912 15:06:11.620"/>
</kw>
<status status="PASS" starttime="20230912 15:05:59.696" endtime="20230912 15:06:11.620"/>
</kw>
<status status="PASS" starttime="20230912 15:05:46.652" endtime="20230912 15:06:11.620"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230912 15:05:13.364" endtime="20230912 15:06:11.621"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230912 15:05:13.037" endtime="20230912 15:06:11.622"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:11.642" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:21.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:21.405" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:11.638" endtime="20230912 15:06:21.405"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:21.406" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:21.405" endtime="20230912 15:06:21.407"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:21.407" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:21.407" endtime="20230912 15:06:21.407"/>
</kw>
<status status="PASS" starttime="20230912 15:06:11.638" endtime="20230912 15:06:21.408"/>
</kw>
<msg timestamp="20230912 15:06:21.408" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:06:11.637" endtime="20230912 15:06:21.408"/>
</kw>
<msg timestamp="20230912 15:06:21.408" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:11.637" endtime="20230912 15:06:21.408"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:06:21.408" endtime="20230912 15:06:21.409"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:21.415" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:29.816" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:29.816" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:21.411" endtime="20230912 15:06:29.816"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:29.818" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:29.817" endtime="20230912 15:06:29.818"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:29.819" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:29.818" endtime="20230912 15:06:29.819"/>
</kw>
<status status="PASS" starttime="20230912 15:06:21.410" endtime="20230912 15:06:29.820"/>
</kw>
<msg timestamp="20230912 15:06:29.820" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:06:21.410" endtime="20230912 15:06:29.820"/>
</kw>
<msg timestamp="20230912 15:06:29.826" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:21.409" endtime="20230912 15:06:29.826"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:06:29.827" endtime="20230912 15:06:29.827"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230912 15:06:11.636" endtime="20230912 15:06:29.829"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:29.838" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230912 15:06:29.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:29.841" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:29.835" endtime="20230912 15:06:29.841"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:29.842" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:29.841" endtime="20230912 15:06:29.843"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:29.843" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:29.843" endtime="20230912 15:06:29.844"/>
</kw>
<status status="PASS" starttime="20230912 15:06:29.834" endtime="20230912 15:06:29.844"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:29.850" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:43.081" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:43.081" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:29.847" endtime="20230912 15:06:43.081"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:43.082" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:43.081" endtime="20230912 15:06:43.083"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:43.083" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:43.083" endtime="20230912 15:06:43.083"/>
</kw>
<status status="PASS" starttime="20230912 15:06:29.846" endtime="20230912 15:06:43.084"/>
</kw>
<msg timestamp="20230912 15:06:43.084" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:06:29.845" endtime="20230912 15:06:43.084"/>
</kw>
<msg timestamp="20230912 15:06:43.084" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:29.844" endtime="20230912 15:06:43.084"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:06:43.084" endtime="20230912 15:06:43.085"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:43.089" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:43.093" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:43.093" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:43.086" endtime="20230912 15:06:43.093"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:43.094" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:43.093" endtime="20230912 15:06:43.094"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:43.095" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:43.095" endtime="20230912 15:06:43.096"/>
</kw>
<status status="PASS" starttime="20230912 15:06:43.085" endtime="20230912 15:06:43.096"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230912 15:06:29.832" endtime="20230912 15:06:43.096"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230912 15:06:43.099" level="INFO">${random} = 46768</msg>
<status status="PASS" starttime="20230912 15:06:43.098" endtime="20230912 15:06:43.099"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:43.104" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-46768 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:54.386" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:54.387" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:43.101" endtime="20230912 15:06:54.387"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:54.389" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:54.387" endtime="20230912 15:06:54.389"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:54.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:54.389" endtime="20230912 15:06:54.390"/>
</kw>
<status status="PASS" starttime="20230912 15:06:43.100" endtime="20230912 15:06:54.390"/>
</kw>
<msg timestamp="20230912 15:06:54.391" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230912 15:06:43.100" endtime="20230912 15:06:54.391"/>
</kw>
<msg timestamp="20230912 15:06:54.391" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:43.099" endtime="20230912 15:06:54.391"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:06:54.391" endtime="20230912 15:06:54.392"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:54.400" level="INFO">Running command 'cat /tmp/key-46768 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:54.404" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:54.404" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230912 15:06:54.393" endtime="20230912 15:06:54.404"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:54.407" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230912 15:06:54.405" endtime="20230912 15:06:54.407"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:54.408" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:54.407" endtime="20230912 15:06:54.408"/>
</kw>
<msg timestamp="20230912 15:06:54.409" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230912 15:06:54.392" endtime="20230912 15:06:54.409"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230912 15:06:54.409" endtime="20230912 15:06:54.410"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230912 15:06:54.415" level="INFO">Running command 'rm /tmp/key-46768 2&gt;&amp;1'.</msg>
<msg timestamp="20230912 15:06:54.420" level="INFO">${rc} = 0</msg>
<msg timestamp="20230912 15:06:54.420" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230912 15:06:54.411" endtime="20230912 15:06:54.420"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230912 15:06:54.422" level="INFO"/>
<status status="PASS" starttime="20230912 15:06:54.420" endtime="20230912 15:06:54.422"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230912 15:06:54.423" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230912 15:06:54.422" endtime="20230912 15:06:54.423"/>
</kw>
<status status="PASS" starttime="20230912 15:06:54.410" endtime="20230912 15:06:54.423"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230912 15:06:43.097" endtime="20230912 15:06:54.423"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230912 15:06:11.626" endtime="20230912 15:06:54.425"/>
</suite>
<status status="PASS" starttime="20230912 15:05:12.884" endtime="20230912 15:06:54.428"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
