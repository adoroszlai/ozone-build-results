<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230914 10:47:21.301" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:17.766" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:17.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:17.777" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230914 10:45:17.762" endtime="20230914 10:45:17.777"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:17.778" level="INFO">scm</msg>
<status status="PASS" starttime="20230914 10:45:17.778" endtime="20230914 10:45:17.779"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:17.780" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:17.779" endtime="20230914 10:45:17.780"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.760" endtime="20230914 10:45:17.780"/>
</kw>
<msg timestamp="20230914 10:45:17.780" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:17.758" endtime="20230914 10:45:17.780"/>
</kw>
<msg timestamp="20230914 10:45:17.781" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230914 10:45:17.757" endtime="20230914 10:45:17.781"/>
</kw>
<msg timestamp="20230914 10:45:17.781" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230914 10:45:17.756" endtime="20230914 10:45:17.781"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230914 10:45:17.782" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230914 10:45:17.782" endtime="20230914 10:45:17.783"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:17.795" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:17.950" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:17.950" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:45:17.788" endtime="20230914 10:45:17.950"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:17.952" level="INFO"/>
<status status="PASS" starttime="20230914 10:45:17.951" endtime="20230914 10:45:17.952"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:17.953" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:17.952" endtime="20230914 10:45:17.953"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.785" endtime="20230914 10:45:17.953"/>
</kw>
<msg timestamp="20230914 10:45:17.953" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:17.784" endtime="20230914 10:45:17.953"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.783" endtime="20230914 10:45:17.954"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.783" endtime="20230914 10:45:17.954"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.755" endtime="20230914 10:45:17.954"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.753" endtime="20230914 10:45:17.954"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.753" endtime="20230914 10:45:17.954"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230914 10:45:17.966" level="INFO">${random} = OGsEjD9Ey2</msg>
<status status="PASS" starttime="20230914 10:45:17.961" endtime="20230914 10:45:17.966"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:17.979" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p OGsEjD9Ey2  2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:33.311" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:33.311" level="INFO">${output} = 2023-09-14 10:45:22,557 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:22,738 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:45:17.970" endtime="20230914 10:45:33.312"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:33.316" level="INFO">2023-09-14 10:45:22,557 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:22,738 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-14 10:45:22,738 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-14 10:45:22,867 [main] INFO freon.BaseFreonGenerator: Executing test with prefix OGsEjD9Ey2 and number-of-tests 1
2023-09-14 10:45:22,949 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:23,957 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:24,958 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:25,958 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:26,427 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-14 10:45:26,634 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-14 10:45:26,959 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:27,347 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-14 10:45:27,408 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-14 10:45:27,735 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-14 10:45:27,959 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:28,960 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:29,962 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:30,965 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:31,965 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-14 10:45:32,803 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5114.630945, max=5114.630945, mean=5114.630945, stddev=0.0, median=5114.630945, p75=5114.630945, p95=5114.630945, p98=5114.630945, p99=5114.630945, p999=5114.630945, mean_rate=0.16425140694182716, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-14 10:45:32,804 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-09-14 10:45:32,805 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-14 10:45:32,805 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230914 10:45:33.314" endtime="20230914 10:45:33.316"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:33.317" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:33.316" endtime="20230914 10:45:33.317"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.970" endtime="20230914 10:45:33.317"/>
</kw>
<msg timestamp="20230914 10:45:33.317" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:17.969" endtime="20230914 10:45:33.318"/>
</kw>
<msg timestamp="20230914 10:45:33.318" level="INFO">${result} = 2023-09-14 10:45:22,557 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:22,738 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:45:17.968" endtime="20230914 10:45:33.318"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:45:33.318" endtime="20230914 10:45:33.319"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.966" endtime="20230914 10:45:33.319"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:33.339" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p OGsEjD9Ey2  2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:47.955" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:47.955" level="INFO">${output} = 2023-09-14 10:45:39,374 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:39,665 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:45:33.334" endtime="20230914 10:45:47.955"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:47.957" level="INFO">2023-09-14 10:45:39,374 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:39,665 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-14 10:45:39,665 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-14 10:45:39,800 [main] INFO freon.BaseFreonGenerator: Executing test with prefix OGsEjD9Ey2 and number-of-tests 1
2023-09-14 10:45:39,878 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:40,886 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:41,887 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:42,887 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:43,558 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-14 10:45:43,923 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:44,923 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:45,924 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:45:46,925 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-14 10:45:47,587 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=103.814871, max=103.814871, mean=103.814871, stddev=0.0, median=103.814871, p75=103.814871, p95=103.814871, p98=103.814871, p99=103.814871, p999=103.814871, mean_rate=0.8249845522261333, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-14 10:45:47,588 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-14 10:45:47,588 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-14 10:45:47,588 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230914 10:45:47.956" endtime="20230914 10:45:47.957"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:47.958" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:47.957" endtime="20230914 10:45:47.958"/>
</kw>
<status status="PASS" starttime="20230914 10:45:33.329" endtime="20230914 10:45:47.958"/>
</kw>
<msg timestamp="20230914 10:45:47.958" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:33.329" endtime="20230914 10:45:47.958"/>
</kw>
<msg timestamp="20230914 10:45:47.959" level="INFO">${result} = 2023-09-14 10:45:39,374 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:39,665 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:45:33.328" endtime="20230914 10:45:47.959"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:45:47.959" endtime="20230914 10:45:47.960"/>
</kw>
<status status="PASS" starttime="20230914 10:45:33.320" endtime="20230914 10:45:47.960"/>
</kw>
<status status="PASS" starttime="20230914 10:45:17.957" endtime="20230914 10:45:47.960"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:47.966" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:50.014" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:50.014" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230914 10:45:47.962" endtime="20230914 10:45:50.014"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:50.016" level="INFO">40s</msg>
<status status="PASS" starttime="20230914 10:45:50.015" endtime="20230914 10:45:50.016"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:50.017" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:50.017" endtime="20230914 10:45:50.017"/>
</kw>
<status status="PASS" starttime="20230914 10:45:47.961" endtime="20230914 10:45:50.018"/>
</kw>
<msg timestamp="20230914 10:45:50.018" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:47.961" endtime="20230914 10:45:50.018"/>
</kw>
<msg timestamp="20230914 10:45:50.018" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230914 10:45:47.961" endtime="20230914 10:45:50.019"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230914 10:45:50.021" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230914 10:45:50.019" endtime="20230914 10:45:50.021"/>
</kw>
<msg timestamp="20230914 10:45:50.021" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230914 10:45:47.960" endtime="20230914 10:45:50.021"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230914 10:45:50.023" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230914 10:45:50.022" endtime="20230914 10:45:50.023"/>
</kw>
<msg timestamp="20230914 10:45:50.023" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230914 10:45:50.021" endtime="20230914 10:45:50.023"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:50.029" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:50.362" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:50.362" level="INFO">${output} = 0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.026" endtime="20230914 10:45:50.362"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:50.366" level="INFO">0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.363" endtime="20230914 10:45:50.367"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:50.375" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:50.374" endtime="20230914 10:45:50.375"/>
</kw>
<status status="PASS" starttime="20230914 10:45:50.025" endtime="20230914 10:45:50.375"/>
</kw>
<msg timestamp="20230914 10:45:50.376" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:50.025" endtime="20230914 10:45:50.376"/>
</kw>
<msg timestamp="20230914 10:45:50.376" level="INFO">${certSerial} = 0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.024" endtime="20230914 10:45:50.376"/>
</kw>
<msg timestamp="20230914 10:45:50.376" level="INFO">${certId1} = 0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.023" endtime="20230914 10:45:50.376"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:50.389" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:50.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:50.606" level="INFO">${output} = 0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.386" endtime="20230914 10:45:50.606"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:50.608" level="INFO">0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.607" endtime="20230914 10:45:50.608"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:50.609" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:50.608" endtime="20230914 10:45:50.609"/>
</kw>
<status status="PASS" starttime="20230914 10:45:50.386" endtime="20230914 10:45:50.610"/>
</kw>
<msg timestamp="20230914 10:45:50.610" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:50.385" endtime="20230914 10:45:50.610"/>
</kw>
<msg timestamp="20230914 10:45:50.610" level="INFO">${certSerial} = 0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.383" endtime="20230914 10:45:50.610"/>
</kw>
<msg timestamp="20230914 10:45:50.611" level="INFO">${newCertId} = 0F55C8BAB223</msg>
<status status="PASS" starttime="20230914 10:45:50.383" endtime="20230914 10:45:50.611"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230914 10:45:50.612" level="FAIL">0F55C8BAB223 == 0F55C8BAB223</msg>
<status status="FAIL" starttime="20230914 10:45:50.611" endtime="20230914 10:45:50.612"/>
</kw>
<status status="FAIL" starttime="20230914 10:45:50.380" endtime="20230914 10:45:50.612"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:55.621" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:45:55.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:45:55.685" level="INFO">${output} = 0F5A315FD450</msg>
<status status="PASS" starttime="20230914 10:45:55.617" endtime="20230914 10:45:55.685"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:45:55.687" level="INFO">0F5A315FD450</msg>
<status status="PASS" starttime="20230914 10:45:55.686" endtime="20230914 10:45:55.687"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:45:55.688" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:45:55.687" endtime="20230914 10:45:55.688"/>
</kw>
<status status="PASS" starttime="20230914 10:45:55.616" endtime="20230914 10:45:55.688"/>
</kw>
<msg timestamp="20230914 10:45:55.688" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:55.616" endtime="20230914 10:45:55.689"/>
</kw>
<msg timestamp="20230914 10:45:55.689" level="INFO">${certSerial} = 0F5A315FD450</msg>
<status status="PASS" starttime="20230914 10:45:55.615" endtime="20230914 10:45:55.689"/>
</kw>
<msg timestamp="20230914 10:45:55.689" level="INFO">${newCertId} = 0F5A315FD450</msg>
<status status="PASS" starttime="20230914 10:45:55.614" endtime="20230914 10:45:55.689"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230914 10:45:55.690" endtime="20230914 10:45:55.690"/>
</kw>
<status status="PASS" starttime="20230914 10:45:55.613" endtime="20230914 10:45:55.690"/>
</kw>
<status status="PASS" starttime="20230914 10:45:50.377" endtime="20230914 10:45:55.690"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230914 10:45:55.692" level="INFO">${random} = BbsHJ4KKqg</msg>
<status status="PASS" starttime="20230914 10:45:55.692" endtime="20230914 10:45:55.692"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:45:55.700" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p BbsHJ4KKqg  2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:46:08.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:08.391" level="INFO">${output} = 2023-09-14 10:45:59,335 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:59,591 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:45:55.697" endtime="20230914 10:46:08.391"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:08.393" level="INFO">2023-09-14 10:45:59,335 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:59,591 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-14 10:45:59,600 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-14 10:45:59,768 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BbsHJ4KKqg and number-of-tests 1
2023-09-14 10:45:59,837 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:00,850 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:01,851 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:02,851 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:03,852 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:04,853 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:05,182 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-14 10:46:05,280 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-14 10:46:05,629 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-14 10:46:05,853 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:06,858 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:07,858 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-14 10:46:07,951 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2273.773611, max=2273.773611, mean=2273.773611, stddev=0.0, median=2273.773611, p75=2273.773611, p95=2273.773611, p98=2273.773611, p99=2273.773611, p999=2273.773611, mean_rate=0.31435531919975473, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-14 10:46:07,953 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-14 10:46:07,955 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-14 10:46:07,955 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230914 10:46:08.392" endtime="20230914 10:46:08.393"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:08.394" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:08.393" endtime="20230914 10:46:08.394"/>
</kw>
<status status="PASS" starttime="20230914 10:45:55.696" endtime="20230914 10:46:08.394"/>
</kw>
<msg timestamp="20230914 10:46:08.394" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:45:55.696" endtime="20230914 10:46:08.394"/>
</kw>
<msg timestamp="20230914 10:46:08.395" level="INFO">${result} = 2023-09-14 10:45:59,335 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:45:59,591 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:45:55.694" endtime="20230914 10:46:08.395"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:46:08.395" endtime="20230914 10:46:08.395"/>
</kw>
<status status="PASS" starttime="20230914 10:45:55.692" endtime="20230914 10:46:08.396"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:08.403" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p BbsHJ4KKqg  2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:46:19.174" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:19.174" level="INFO">${output} = 2023-09-14 10:46:12,012 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:46:12,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:46:08.400" endtime="20230914 10:46:19.174"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:19.176" level="INFO">2023-09-14 10:46:12,012 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:46:12,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-14 10:46:12,277 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-14 10:46:12,397 [main] INFO freon.BaseFreonGenerator: Executing test with prefix BbsHJ4KKqg and number-of-tests 1
2023-09-14 10:46:12,480 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:13,484 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:14,485 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:15,486 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:15,882 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-14 10:46:16,487 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:17,487 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-14 10:46:18,488 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-14 10:46:18,541 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=59.157947, max=59.157947, mean=59.157947, stddev=0.0, median=59.157947, p75=59.157947, p95=59.157947, p98=59.157947, p99=59.157947, p999=59.157947, mean_rate=0.9292638537345533, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-14 10:46:18,545 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-14 10:46:18,549 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-14 10:46:18,549 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230914 10:46:19.175" endtime="20230914 10:46:19.176"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:19.179" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:19.179" endtime="20230914 10:46:19.180"/>
</kw>
<status status="PASS" starttime="20230914 10:46:08.399" endtime="20230914 10:46:19.180"/>
</kw>
<msg timestamp="20230914 10:46:19.180" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:46:08.398" endtime="20230914 10:46:19.180"/>
</kw>
<msg timestamp="20230914 10:46:19.181" level="INFO">${result} = 2023-09-14 10:46:12,012 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-14 10:46:12,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230914 10:46:08.398" endtime="20230914 10:46:19.181"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:46:19.181" endtime="20230914 10:46:19.182"/>
</kw>
<status status="PASS" starttime="20230914 10:46:08.396" endtime="20230914 10:46:19.182"/>
</kw>
<status status="PASS" starttime="20230914 10:45:55.691" endtime="20230914 10:46:19.182"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230914 10:45:17.955" endtime="20230914 10:46:19.183"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230914 10:45:17.637" endtime="20230914 10:46:19.184"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:19.206" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:46:27.870" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:27.870" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:19.202" endtime="20230914 10:46:27.870"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:27.872" level="INFO"/>
<status status="PASS" starttime="20230914 10:46:27.871" endtime="20230914 10:46:27.872"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:27.873" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:27.872" endtime="20230914 10:46:27.874"/>
</kw>
<status status="PASS" starttime="20230914 10:46:19.201" endtime="20230914 10:46:27.874"/>
</kw>
<msg timestamp="20230914 10:46:27.874" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:46:19.201" endtime="20230914 10:46:27.874"/>
</kw>
<msg timestamp="20230914 10:46:27.875" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:19.200" endtime="20230914 10:46:27.875"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:46:27.875" endtime="20230914 10:46:27.875"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:27.880" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:46:38.033" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:38.033" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:27.878" endtime="20230914 10:46:38.033"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:38.036" level="INFO"/>
<status status="PASS" starttime="20230914 10:46:38.034" endtime="20230914 10:46:38.036"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:38.037" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:38.036" endtime="20230914 10:46:38.037"/>
</kw>
<status status="PASS" starttime="20230914 10:46:27.877" endtime="20230914 10:46:38.038"/>
</kw>
<msg timestamp="20230914 10:46:38.038" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:46:27.877" endtime="20230914 10:46:38.038"/>
</kw>
<msg timestamp="20230914 10:46:38.038" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:27.876" endtime="20230914 10:46:38.039"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:46:38.039" endtime="20230914 10:46:38.040"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230914 10:46:19.199" endtime="20230914 10:46:38.040"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:38.048" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230914 10:46:38.051" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:38.051" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:38.044" endtime="20230914 10:46:38.051"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:38.053" level="INFO"/>
<status status="PASS" starttime="20230914 10:46:38.052" endtime="20230914 10:46:38.053"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:38.054" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:38.053" endtime="20230914 10:46:38.054"/>
</kw>
<status status="PASS" starttime="20230914 10:46:38.043" endtime="20230914 10:46:38.054"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:38.063" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:46:50.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:50.406" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:38.057" endtime="20230914 10:46:50.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:50.408" level="INFO"/>
<status status="PASS" starttime="20230914 10:46:50.407" endtime="20230914 10:46:50.408"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:50.409" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:50.409" endtime="20230914 10:46:50.409"/>
</kw>
<status status="PASS" starttime="20230914 10:46:38.056" endtime="20230914 10:46:50.410"/>
</kw>
<msg timestamp="20230914 10:46:50.410" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:46:38.056" endtime="20230914 10:46:50.410"/>
</kw>
<msg timestamp="20230914 10:46:50.410" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:38.054" endtime="20230914 10:46:50.410"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:46:50.410" endtime="20230914 10:46:50.411"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:50.416" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:46:50.419" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:46:50.419" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:50.412" endtime="20230914 10:46:50.420"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:46:50.421" level="INFO"/>
<status status="PASS" starttime="20230914 10:46:50.420" endtime="20230914 10:46:50.421"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:46:50.422" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:46:50.421" endtime="20230914 10:46:50.422"/>
</kw>
<status status="PASS" starttime="20230914 10:46:50.411" endtime="20230914 10:46:50.422"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230914 10:46:38.042" endtime="20230914 10:46:50.423"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230914 10:46:50.426" level="INFO">${random} = 41096</msg>
<status status="PASS" starttime="20230914 10:46:50.425" endtime="20230914 10:46:50.426"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:46:50.432" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-41096 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:47:03.035" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:47:03.035" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:50.428" endtime="20230914 10:47:03.035"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:47:03.037" level="INFO"/>
<status status="PASS" starttime="20230914 10:47:03.036" endtime="20230914 10:47:03.037"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:47:03.038" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:47:03.037" endtime="20230914 10:47:03.038"/>
</kw>
<status status="PASS" starttime="20230914 10:46:50.428" endtime="20230914 10:47:03.039"/>
</kw>
<msg timestamp="20230914 10:47:03.039" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230914 10:46:50.427" endtime="20230914 10:47:03.039"/>
</kw>
<msg timestamp="20230914 10:47:03.039" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:46:50.426" endtime="20230914 10:47:03.039"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:47:03.039" endtime="20230914 10:47:03.040"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:47:03.045" level="INFO">Running command 'cat /tmp/key-41096 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:47:03.049" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:47:03.049" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230914 10:47:03.041" endtime="20230914 10:47:03.049"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:47:03.052" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230914 10:47:03.051" endtime="20230914 10:47:03.052"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:47:03.053" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:47:03.052" endtime="20230914 10:47:03.053"/>
</kw>
<msg timestamp="20230914 10:47:03.054" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230914 10:47:03.040" endtime="20230914 10:47:03.054"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230914 10:47:03.054" endtime="20230914 10:47:03.055"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230914 10:47:03.060" level="INFO">Running command 'rm /tmp/key-41096 2&gt;&amp;1'.</msg>
<msg timestamp="20230914 10:47:03.064" level="INFO">${rc} = 0</msg>
<msg timestamp="20230914 10:47:03.064" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230914 10:47:03.057" endtime="20230914 10:47:03.064"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230914 10:47:03.066" level="INFO"/>
<status status="PASS" starttime="20230914 10:47:03.065" endtime="20230914 10:47:03.067"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230914 10:47:03.068" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230914 10:47:03.067" endtime="20230914 10:47:03.068"/>
</kw>
<status status="PASS" starttime="20230914 10:47:03.055" endtime="20230914 10:47:03.069"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230914 10:46:50.424" endtime="20230914 10:47:03.069"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230914 10:46:19.187" endtime="20230914 10:47:03.071"/>
</suite>
<status status="PASS" starttime="20230914 10:45:17.492" endtime="20230914 10:47:03.076"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
