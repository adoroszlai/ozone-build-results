<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230906 06:35:31.511" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:14.109" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:14.127" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:14.127" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230906 06:33:14.106" endtime="20230906 06:33:14.127"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:14.131" level="INFO">scm</msg>
<status status="PASS" starttime="20230906 06:33:14.130" endtime="20230906 06:33:14.133"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:14.136" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:14.134" endtime="20230906 06:33:14.136"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.105" endtime="20230906 06:33:14.136"/>
</kw>
<msg timestamp="20230906 06:33:14.137" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:14.104" endtime="20230906 06:33:14.137"/>
</kw>
<msg timestamp="20230906 06:33:14.137" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230906 06:33:14.104" endtime="20230906 06:33:14.137"/>
</kw>
<msg timestamp="20230906 06:33:14.138" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230906 06:33:14.103" endtime="20230906 06:33:14.138"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230906 06:33:14.139" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230906 06:33:14.138" endtime="20230906 06:33:14.139"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:14.146" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:14.303" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:14.304" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:33:14.143" endtime="20230906 06:33:14.304"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:14.306" level="INFO"/>
<status status="PASS" starttime="20230906 06:33:14.305" endtime="20230906 06:33:14.306"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:14.306" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:14.306" endtime="20230906 06:33:14.306"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.142" endtime="20230906 06:33:14.307"/>
</kw>
<msg timestamp="20230906 06:33:14.307" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:14.142" endtime="20230906 06:33:14.307"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.141" endtime="20230906 06:33:14.307"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.140" endtime="20230906 06:33:14.307"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.102" endtime="20230906 06:33:14.307"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.101" endtime="20230906 06:33:14.308"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.100" endtime="20230906 06:33:14.308"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230906 06:33:14.311" level="INFO">${random} = gbIwEmUfMR</msg>
<status status="PASS" starttime="20230906 06:33:14.311" endtime="20230906 06:33:14.311"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:14.318" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p gbIwEmUfMR  2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:35.752" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:35.752" level="INFO">${output} = 2023-09-06 06:33:18,810 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:19,540 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:33:14.315" endtime="20230906 06:33:35.752"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:35.754" level="INFO">2023-09-06 06:33:18,810 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:19,540 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-06 06:33:19,540 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-06 06:33:19,785 [main] INFO freon.BaseFreonGenerator: Executing test with prefix gbIwEmUfMR and number-of-tests 1
2023-09-06 06:33:19,918 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:20,924 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:21,925 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:22,926 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:23,927 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:24,920 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-06 06:33:24,928 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:25,184 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-06 06:33:25,928 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:26,245 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-06 06:33:26,398 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-06 06:33:26,911 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-06 06:33:26,929 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:27,929 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:28,941 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:29,943 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:30,946 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:31,948 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:32,949 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:33,955 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:34,967 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-06 06:33:35,374 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=8913.377727, max=8913.377727, mean=8913.377727, stddev=0.0, median=8913.377727, p75=8913.377727, p95=8913.377727, p98=8913.377727, p99=8913.377727, p999=8913.377727, mean_rate=0.09980009681327952, m1=0.015991117074135343, m5=0.0033057092356765017, m15=0.0011080303990206543, rate_unit=events/second, duration_unit=milliseconds
2023-09-06 06:33:35,376 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 15
2023-09-06 06:33:35,376 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-06 06:33:35,376 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230906 06:33:35.753" endtime="20230906 06:33:35.754"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:35.755" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:35.755" endtime="20230906 06:33:35.755"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.315" endtime="20230906 06:33:35.756"/>
</kw>
<msg timestamp="20230906 06:33:35.756" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:14.314" endtime="20230906 06:33:35.756"/>
</kw>
<msg timestamp="20230906 06:33:35.757" level="INFO">${result} = 2023-09-06 06:33:18,810 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:19,540 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:33:14.313" endtime="20230906 06:33:35.757"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:33:35.757" endtime="20230906 06:33:35.757"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.312" endtime="20230906 06:33:35.757"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:35.765" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p gbIwEmUfMR  2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:48.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:48.475" level="INFO">${output} = 2023-09-06 06:33:39,722 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:39,983 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:33:35.762" endtime="20230906 06:33:48.476"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:48.479" level="INFO">2023-09-06 06:33:39,722 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:39,983 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-06 06:33:39,984 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-06 06:33:40,134 [main] INFO freon.BaseFreonGenerator: Executing test with prefix gbIwEmUfMR and number-of-tests 1
2023-09-06 06:33:40,210 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:41,213 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:42,214 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:43,236 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:44,243 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:44,430 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-06 06:33:45,244 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:46,247 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:47,247 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-06 06:33:47,994 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=95.273442, max=95.273442, mean=95.273442, stddev=0.0, median=95.273442, p75=95.273442, p95=95.273442, p98=95.273442, p99=95.273442, p999=95.273442, mean_rate=0.839464245020507, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-06 06:33:47,999 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-06 06:33:48,000 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-06 06:33:48,000 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230906 06:33:48.477" endtime="20230906 06:33:48.479"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:48.482" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:48.482" endtime="20230906 06:33:48.483"/>
</kw>
<status status="PASS" starttime="20230906 06:33:35.761" endtime="20230906 06:33:48.488"/>
</kw>
<msg timestamp="20230906 06:33:48.488" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:35.760" endtime="20230906 06:33:48.488"/>
</kw>
<msg timestamp="20230906 06:33:48.489" level="INFO">${result} = 2023-09-06 06:33:39,722 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:39,983 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:33:35.760" endtime="20230906 06:33:48.489"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:33:48.489" endtime="20230906 06:33:48.490"/>
</kw>
<status status="PASS" starttime="20230906 06:33:35.758" endtime="20230906 06:33:48.490"/>
</kw>
<status status="PASS" starttime="20230906 06:33:14.310" endtime="20230906 06:33:48.490"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:48.514" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:51.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:51.381" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230906 06:33:48.500" endtime="20230906 06:33:51.381"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:51.383" level="INFO">40s</msg>
<status status="PASS" starttime="20230906 06:33:51.382" endtime="20230906 06:33:51.383"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:51.384" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:51.383" endtime="20230906 06:33:51.384"/>
</kw>
<status status="PASS" starttime="20230906 06:33:48.496" endtime="20230906 06:33:51.385"/>
</kw>
<msg timestamp="20230906 06:33:51.385" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:48.494" endtime="20230906 06:33:51.385"/>
</kw>
<msg timestamp="20230906 06:33:51.385" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230906 06:33:48.494" endtime="20230906 06:33:51.385"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230906 06:33:51.387" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230906 06:33:51.386" endtime="20230906 06:33:51.387"/>
</kw>
<msg timestamp="20230906 06:33:51.388" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230906 06:33:48.491" endtime="20230906 06:33:51.388"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230906 06:33:51.389" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230906 06:33:51.389" endtime="20230906 06:33:51.390"/>
</kw>
<msg timestamp="20230906 06:33:51.390" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230906 06:33:51.388" endtime="20230906 06:33:51.390"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:51.396" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:51.697" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:51.697" level="INFO">${output} = E05AB7A4A3</msg>
<status status="PASS" starttime="20230906 06:33:51.393" endtime="20230906 06:33:51.697"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:51.699" level="INFO">E05AB7A4A3</msg>
<status status="PASS" starttime="20230906 06:33:51.697" endtime="20230906 06:33:51.699"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:51.700" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:51.699" endtime="20230906 06:33:51.700"/>
</kw>
<status status="PASS" starttime="20230906 06:33:51.392" endtime="20230906 06:33:51.700"/>
</kw>
<msg timestamp="20230906 06:33:51.700" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:51.391" endtime="20230906 06:33:51.700"/>
</kw>
<msg timestamp="20230906 06:33:51.701" level="INFO">${certSerial} = E05AB7A4A3</msg>
<status status="PASS" starttime="20230906 06:33:51.391" endtime="20230906 06:33:51.701"/>
</kw>
<msg timestamp="20230906 06:33:51.701" level="INFO">${certId1} = E05AB7A4A3</msg>
<status status="PASS" starttime="20230906 06:33:51.390" endtime="20230906 06:33:51.701"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:51.708" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:33:52.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:33:52.006" level="INFO">${output} = E07C108032</msg>
<status status="PASS" starttime="20230906 06:33:51.705" endtime="20230906 06:33:52.006"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:33:52.008" level="INFO">E07C108032</msg>
<status status="PASS" starttime="20230906 06:33:52.006" endtime="20230906 06:33:52.008"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:33:52.009" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:33:52.008" endtime="20230906 06:33:52.009"/>
</kw>
<status status="PASS" starttime="20230906 06:33:51.705" endtime="20230906 06:33:52.009"/>
</kw>
<msg timestamp="20230906 06:33:52.009" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:51.704" endtime="20230906 06:33:52.010"/>
</kw>
<msg timestamp="20230906 06:33:52.010" level="INFO">${certSerial} = E07C108032</msg>
<status status="PASS" starttime="20230906 06:33:51.703" endtime="20230906 06:33:52.010"/>
</kw>
<msg timestamp="20230906 06:33:52.010" level="INFO">${newCertId} = E07C108032</msg>
<status status="PASS" starttime="20230906 06:33:51.703" endtime="20230906 06:33:52.010"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230906 06:33:52.010" endtime="20230906 06:33:52.011"/>
</kw>
<status status="PASS" starttime="20230906 06:33:51.702" endtime="20230906 06:33:52.011"/>
</kw>
<status status="PASS" starttime="20230906 06:33:51.701" endtime="20230906 06:33:52.011"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230906 06:33:52.013" level="INFO">${random} = QY5N5JualY</msg>
<status status="PASS" starttime="20230906 06:33:52.012" endtime="20230906 06:33:52.013"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:33:52.023" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p QY5N5JualY  2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:34:04.452" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:04.452" level="INFO">${output} = 2023-09-06 06:33:56,165 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:56,366 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:33:52.019" endtime="20230906 06:34:04.452"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:04.453" level="INFO">2023-09-06 06:33:56,165 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:56,366 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-06 06:33:56,366 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-06 06:33:56,479 [main] INFO freon.BaseFreonGenerator: Executing test with prefix QY5N5JualY and number-of-tests 1
2023-09-06 06:33:56,593 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:57,605 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:58,614 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:33:59,615 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:00,615 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:00,760 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-06 06:34:00,851 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-06 06:34:01,142 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-06 06:34:01,616 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:02,617 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:03,623 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-06 06:34:04,013 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2730.538463, max=2730.538463, mean=2730.538463, stddev=0.0, median=2730.538463, p75=2730.538463, p95=2730.538463, p98=2730.538463, p99=2730.538463, p999=2730.538463, mean_rate=0.26560188140218843, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-06 06:34:04,013 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-06 06:34:04,014 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-06 06:34:04,014 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230906 06:34:04.453" endtime="20230906 06:34:04.454"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:04.455" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:04.454" endtime="20230906 06:34:04.455"/>
</kw>
<status status="PASS" starttime="20230906 06:33:52.018" endtime="20230906 06:34:04.455"/>
</kw>
<msg timestamp="20230906 06:34:04.455" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:33:52.017" endtime="20230906 06:34:04.455"/>
</kw>
<msg timestamp="20230906 06:34:04.456" level="INFO">${result} = 2023-09-06 06:33:56,165 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:33:56,366 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:33:52.016" endtime="20230906 06:34:04.456"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:34:04.456" endtime="20230906 06:34:04.457"/>
</kw>
<status status="PASS" starttime="20230906 06:33:52.014" endtime="20230906 06:34:04.457"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:04.464" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p QY5N5JualY  2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:34:18.841" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:18.841" level="INFO">${output} = 2023-09-06 06:34:07,915 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:34:08,553 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:34:04.461" endtime="20230906 06:34:18.841"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:18.844" level="INFO">2023-09-06 06:34:07,915 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:34:08,553 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-06 06:34:08,553 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-06 06:34:09,043 [main] INFO freon.BaseFreonGenerator: Executing test with prefix QY5N5JualY and number-of-tests 1
2023-09-06 06:34:09,367 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:10,389 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:11,390 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:12,390 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:13,391 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:13,797 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-06 06:34:14,398 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:15,399 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:16,400 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-06 06:34:17,401 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-06 06:34:18,174 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=88.961115, max=88.961115, mean=88.961115, stddev=0.0, median=88.961115, p75=88.961115, p95=88.961115, p98=88.961115, p99=88.961115, p999=88.961115, mean_rate=0.759975710781096, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-06 06:34:18,179 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-09-06 06:34:18,180 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-06 06:34:18,180 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230906 06:34:18.842" endtime="20230906 06:34:18.844"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:18.847" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:18.844" endtime="20230906 06:34:18.847"/>
</kw>
<status status="PASS" starttime="20230906 06:34:04.460" endtime="20230906 06:34:18.847"/>
</kw>
<msg timestamp="20230906 06:34:18.852" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:34:04.460" endtime="20230906 06:34:18.852"/>
</kw>
<msg timestamp="20230906 06:34:18.853" level="INFO">${result} = 2023-09-06 06:34:07,915 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-06 06:34:08,553 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230906 06:34:04.459" endtime="20230906 06:34:18.853"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:34:18.853" endtime="20230906 06:34:18.857"/>
</kw>
<status status="PASS" starttime="20230906 06:34:04.457" endtime="20230906 06:34:18.857"/>
</kw>
<status status="PASS" starttime="20230906 06:33:52.012" endtime="20230906 06:34:18.857"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230906 06:33:14.308" endtime="20230906 06:34:18.857"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230906 06:33:14.028" endtime="20230906 06:34:18.862"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:18.928" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:34:29.945" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:29.946" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:18.924" endtime="20230906 06:34:29.946"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:29.947" level="INFO"/>
<status status="PASS" starttime="20230906 06:34:29.946" endtime="20230906 06:34:29.947"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:29.948" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:29.948" endtime="20230906 06:34:29.948"/>
</kw>
<status status="PASS" starttime="20230906 06:34:18.916" endtime="20230906 06:34:29.949"/>
</kw>
<msg timestamp="20230906 06:34:29.949" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:34:18.915" endtime="20230906 06:34:29.949"/>
</kw>
<msg timestamp="20230906 06:34:29.949" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:18.914" endtime="20230906 06:34:29.949"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:34:29.950" endtime="20230906 06:34:29.950"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:29.956" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:34:40.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:40.296" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:29.952" endtime="20230906 06:34:40.296"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:40.297" level="INFO"/>
<status status="PASS" starttime="20230906 06:34:40.296" endtime="20230906 06:34:40.298"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:40.298" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:40.298" endtime="20230906 06:34:40.299"/>
</kw>
<status status="PASS" starttime="20230906 06:34:29.952" endtime="20230906 06:34:40.299"/>
</kw>
<msg timestamp="20230906 06:34:40.299" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:34:29.951" endtime="20230906 06:34:40.299"/>
</kw>
<msg timestamp="20230906 06:34:40.299" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:29.950" endtime="20230906 06:34:40.299"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:34:40.300" endtime="20230906 06:34:40.300"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230906 06:34:18.907" endtime="20230906 06:34:40.301"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:40.307" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230906 06:34:40.311" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:40.311" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:40.304" endtime="20230906 06:34:40.311"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:40.313" level="INFO"/>
<status status="PASS" starttime="20230906 06:34:40.312" endtime="20230906 06:34:40.313"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:40.314" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:40.313" endtime="20230906 06:34:40.314"/>
</kw>
<status status="PASS" starttime="20230906 06:34:40.303" endtime="20230906 06:34:40.315"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:40.322" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:34:56.633" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:56.633" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:40.318" endtime="20230906 06:34:56.633"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:56.635" level="INFO"/>
<status status="PASS" starttime="20230906 06:34:56.634" endtime="20230906 06:34:56.635"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:56.636" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:56.636" endtime="20230906 06:34:56.637"/>
</kw>
<status status="PASS" starttime="20230906 06:34:40.317" endtime="20230906 06:34:56.637"/>
</kw>
<msg timestamp="20230906 06:34:56.637" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:34:40.316" endtime="20230906 06:34:56.637"/>
</kw>
<msg timestamp="20230906 06:34:56.637" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:40.315" endtime="20230906 06:34:56.638"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:34:56.638" endtime="20230906 06:34:56.638"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:56.642" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:34:56.647" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:34:56.647" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:56.639" endtime="20230906 06:34:56.647"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:34:56.649" level="INFO"/>
<status status="PASS" starttime="20230906 06:34:56.648" endtime="20230906 06:34:56.649"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:34:56.650" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:34:56.649" endtime="20230906 06:34:56.650"/>
</kw>
<status status="PASS" starttime="20230906 06:34:56.639" endtime="20230906 06:34:56.650"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230906 06:34:40.302" endtime="20230906 06:34:56.651"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230906 06:34:56.654" level="INFO">${random} = 02135</msg>
<status status="PASS" starttime="20230906 06:34:56.653" endtime="20230906 06:34:56.655"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:34:56.663" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-02135 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:35:11.797" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:35:11.797" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:56.658" endtime="20230906 06:35:11.797"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:35:11.799" level="INFO"/>
<status status="PASS" starttime="20230906 06:35:11.798" endtime="20230906 06:35:11.799"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:35:11.799" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:35:11.799" endtime="20230906 06:35:11.800"/>
</kw>
<status status="PASS" starttime="20230906 06:34:56.658" endtime="20230906 06:35:11.800"/>
</kw>
<msg timestamp="20230906 06:35:11.800" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230906 06:34:56.657" endtime="20230906 06:35:11.800"/>
</kw>
<msg timestamp="20230906 06:35:11.800" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:34:56.655" endtime="20230906 06:35:11.801"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:35:11.801" endtime="20230906 06:35:11.801"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:35:11.806" level="INFO">Running command 'cat /tmp/key-02135 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:35:11.811" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:35:11.811" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230906 06:35:11.802" endtime="20230906 06:35:11.811"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:35:11.813" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230906 06:35:11.812" endtime="20230906 06:35:11.813"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:35:11.814" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:35:11.814" endtime="20230906 06:35:11.815"/>
</kw>
<msg timestamp="20230906 06:35:11.815" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230906 06:35:11.802" endtime="20230906 06:35:11.815"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230906 06:35:11.815" endtime="20230906 06:35:11.816"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230906 06:35:11.821" level="INFO">Running command 'rm /tmp/key-02135 2&gt;&amp;1'.</msg>
<msg timestamp="20230906 06:35:11.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20230906 06:35:11.826" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230906 06:35:11.817" endtime="20230906 06:35:11.826"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230906 06:35:11.828" level="INFO"/>
<status status="PASS" starttime="20230906 06:35:11.826" endtime="20230906 06:35:11.828"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230906 06:35:11.829" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230906 06:35:11.828" endtime="20230906 06:35:11.829"/>
</kw>
<status status="PASS" starttime="20230906 06:35:11.816" endtime="20230906 06:35:11.830"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230906 06:34:56.652" endtime="20230906 06:35:11.830"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230906 06:34:18.870" endtime="20230906 06:35:11.833"/>
</suite>
<status status="PASS" starttime="20230906 06:33:13.976" endtime="20230906 06:35:11.838"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
