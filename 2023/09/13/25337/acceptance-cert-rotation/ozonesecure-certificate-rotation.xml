<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230913 09:15:29.070" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:13:33.145" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:13:33.190" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:13:33.190" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230913 09:13:33.099" endtime="20230913 09:13:33.190"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:13:33.244" level="INFO">scm</msg>
<status status="PASS" starttime="20230913 09:13:33.191" endtime="20230913 09:13:33.244"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:13:33.245" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:13:33.244" endtime="20230913 09:13:33.245"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.098" endtime="20230913 09:13:33.245"/>
</kw>
<msg timestamp="20230913 09:13:33.245" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:13:33.094" endtime="20230913 09:13:33.246"/>
</kw>
<msg timestamp="20230913 09:13:33.246" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230913 09:13:33.094" endtime="20230913 09:13:33.246"/>
</kw>
<msg timestamp="20230913 09:13:33.270" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230913 09:13:33.089" endtime="20230913 09:13:33.270"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230913 09:13:33.271" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230913 09:13:33.271" endtime="20230913 09:13:33.271"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:13:33.359" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:13:33.555" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:13:33.555" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:13:33.297" endtime="20230913 09:13:33.555"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:13:33.556" level="INFO"/>
<status status="PASS" starttime="20230913 09:13:33.556" endtime="20230913 09:13:33.556"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:13:33.557" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:13:33.557" endtime="20230913 09:13:33.564"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.290" endtime="20230913 09:13:33.565"/>
</kw>
<msg timestamp="20230913 09:13:33.565" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:13:33.289" endtime="20230913 09:13:33.568"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.272" endtime="20230913 09:13:33.569"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.271" endtime="20230913 09:13:33.569"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.088" endtime="20230913 09:13:33.569"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.082" endtime="20230913 09:13:33.569"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.078" endtime="20230913 09:13:33.569"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 09:13:33.583" level="INFO">${random} = R9D7DXnh6D</msg>
<status status="PASS" starttime="20230913 09:13:33.582" endtime="20230913 09:13:33.583"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:13:33.640" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p R9D7DXnh6D  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:13:51.643" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:13:51.643" level="INFO">${output} = 2023-09-13 09:13:40,374 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:13:40,529 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:13:33.612" endtime="20230913 09:13:51.644"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:13:51.645" level="INFO">2023-09-13 09:13:40,374 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:13:40,529 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 09:13:40,529 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 09:13:40,629 [main] INFO freon.BaseFreonGenerator: Executing test with prefix R9D7DXnh6D and number-of-tests 1
2023-09-13 09:13:40,702 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:41,705 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:42,706 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:43,603 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-13 09:13:43,706 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:43,827 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-13 09:13:44,707 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:45,311 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 09:13:45,494 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-13 09:13:45,708 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:46,709 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:46,764 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-13 09:13:47,710 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:48,710 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:49,711 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:50,711 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 09:13:51,252 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=6722.052975, max=6722.052975, mean=6722.052975, stddev=0.0, median=6722.052975, p75=6722.052975, p95=6722.052975, p98=6722.052975, p99=6722.052975, p999=6722.052975, mean_rate=0.1364114431800184, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 09:13:51,253 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 11
2023-09-13 09:13:51,253 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 09:13:51,253 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 09:13:51.644" endtime="20230913 09:13:51.646"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:13:51.646" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:13:51.646" endtime="20230913 09:13:51.646"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.612" endtime="20230913 09:13:51.647"/>
</kw>
<msg timestamp="20230913 09:13:51.647" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:13:33.611" endtime="20230913 09:13:51.647"/>
</kw>
<msg timestamp="20230913 09:13:51.647" level="INFO">${result} = 2023-09-13 09:13:40,374 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:13:40,529 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:13:33.584" endtime="20230913 09:13:51.647"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:13:51.647" endtime="20230913 09:13:51.648"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.583" endtime="20230913 09:13:51.649"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:13:51.656" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p R9D7DXnh6D  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:04.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:04.880" level="INFO">${output} = 2023-09-13 09:13:58,028 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:13:58,143 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:13:51.652" endtime="20230913 09:14:04.880"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:04.882" level="INFO">2023-09-13 09:13:58,028 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:13:58,143 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 09:13:58,144 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 09:13:58,233 [main] INFO freon.BaseFreonGenerator: Executing test with prefix R9D7DXnh6D and number-of-tests 1
2023-09-13 09:13:58,295 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:13:59,296 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:00,297 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:01,238 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 09:14:01,308 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:02,309 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:03,309 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:04,310 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 09:14:04,511 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=99.799997, max=99.799997, mean=99.799997, stddev=0.0, median=99.799997, p75=99.799997, p95=99.799997, p98=99.799997, p99=99.799997, p999=99.799997, mean_rate=0.9031437183789007, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 09:14:04,512 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-13 09:14:04,512 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 09:14:04,513 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 09:14:04.881" endtime="20230913 09:14:04.882"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:04.883" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:04.882" endtime="20230913 09:14:04.883"/>
</kw>
<status status="PASS" starttime="20230913 09:13:51.652" endtime="20230913 09:14:04.883"/>
</kw>
<msg timestamp="20230913 09:14:04.883" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:13:51.651" endtime="20230913 09:14:04.884"/>
</kw>
<msg timestamp="20230913 09:14:04.884" level="INFO">${result} = 2023-09-13 09:13:58,028 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:13:58,143 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:13:51.651" endtime="20230913 09:14:04.884"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:14:04.884" endtime="20230913 09:14:04.885"/>
</kw>
<status status="PASS" starttime="20230913 09:13:51.649" endtime="20230913 09:14:04.885"/>
</kw>
<status status="PASS" starttime="20230913 09:13:33.581" endtime="20230913 09:14:04.885"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:04.891" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:07.128" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:07.128" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230913 09:14:04.887" endtime="20230913 09:14:07.128"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:07.130" level="INFO">40s</msg>
<status status="PASS" starttime="20230913 09:14:07.129" endtime="20230913 09:14:07.130"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:07.131" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:07.130" endtime="20230913 09:14:07.131"/>
</kw>
<status status="PASS" starttime="20230913 09:14:04.887" endtime="20230913 09:14:07.131"/>
</kw>
<msg timestamp="20230913 09:14:07.131" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:04.886" endtime="20230913 09:14:07.131"/>
</kw>
<msg timestamp="20230913 09:14:07.131" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230913 09:14:04.886" endtime="20230913 09:14:07.131"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230913 09:14:07.133" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230913 09:14:07.132" endtime="20230913 09:14:07.133"/>
</kw>
<msg timestamp="20230913 09:14:07.133" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230913 09:14:04.885" endtime="20230913 09:14:07.133"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230913 09:14:07.135" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230913 09:14:07.134" endtime="20230913 09:14:07.135"/>
</kw>
<msg timestamp="20230913 09:14:07.135" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230913 09:14:07.133" endtime="20230913 09:14:07.135"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:07.140" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:07.269" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:07.270" level="INFO">${output} = 0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.137" endtime="20230913 09:14:07.270"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:07.272" level="INFO">0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.270" endtime="20230913 09:14:07.272"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:07.273" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:07.272" endtime="20230913 09:14:07.273"/>
</kw>
<status status="PASS" starttime="20230913 09:14:07.137" endtime="20230913 09:14:07.273"/>
</kw>
<msg timestamp="20230913 09:14:07.274" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:07.136" endtime="20230913 09:14:07.274"/>
</kw>
<msg timestamp="20230913 09:14:07.274" level="INFO">${certSerial} = 0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.136" endtime="20230913 09:14:07.274"/>
</kw>
<msg timestamp="20230913 09:14:07.274" level="INFO">${certId1} = 0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.135" endtime="20230913 09:14:07.274"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:07.281" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:07.373" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:07.373" level="INFO">${output} = 0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.278" endtime="20230913 09:14:07.373"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:07.375" level="INFO">0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.374" endtime="20230913 09:14:07.375"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:07.376" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:07.375" endtime="20230913 09:14:07.376"/>
</kw>
<status status="PASS" starttime="20230913 09:14:07.277" endtime="20230913 09:14:07.376"/>
</kw>
<msg timestamp="20230913 09:14:07.377" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:07.277" endtime="20230913 09:14:07.377"/>
</kw>
<msg timestamp="20230913 09:14:07.377" level="INFO">${certSerial} = 0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.276" endtime="20230913 09:14:07.377"/>
</kw>
<msg timestamp="20230913 09:14:07.377" level="INFO">${newCertId} = 0113AED6704C</msg>
<status status="PASS" starttime="20230913 09:14:07.276" endtime="20230913 09:14:07.377"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230913 09:14:07.378" level="FAIL">0113AED6704C == 0113AED6704C</msg>
<status status="FAIL" starttime="20230913 09:14:07.378" endtime="20230913 09:14:07.378"/>
</kw>
<status status="FAIL" starttime="20230913 09:14:07.275" endtime="20230913 09:14:07.379"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:12.474" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:12.630" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:12.630" level="INFO">${output} = 0115FB479E16</msg>
<status status="PASS" starttime="20230913 09:14:12.448" endtime="20230913 09:14:12.631"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:12.632" level="INFO">0115FB479E16</msg>
<status status="PASS" starttime="20230913 09:14:12.631" endtime="20230913 09:14:12.632"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:12.633" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:12.632" endtime="20230913 09:14:12.633"/>
</kw>
<status status="PASS" starttime="20230913 09:14:12.447" endtime="20230913 09:14:12.633"/>
</kw>
<msg timestamp="20230913 09:14:12.633" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:12.435" endtime="20230913 09:14:12.634"/>
</kw>
<msg timestamp="20230913 09:14:12.634" level="INFO">${certSerial} = 0115FB479E16</msg>
<status status="PASS" starttime="20230913 09:14:12.426" endtime="20230913 09:14:12.634"/>
</kw>
<msg timestamp="20230913 09:14:12.634" level="INFO">${newCertId} = 0115FB479E16</msg>
<status status="PASS" starttime="20230913 09:14:12.400" endtime="20230913 09:14:12.634"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230913 09:14:12.634" endtime="20230913 09:14:12.635"/>
</kw>
<status status="PASS" starttime="20230913 09:14:12.381" endtime="20230913 09:14:12.635"/>
</kw>
<status status="PASS" starttime="20230913 09:14:07.274" endtime="20230913 09:14:12.635"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 09:14:12.636" level="INFO">${random} = RuZ4TLkbUd</msg>
<status status="PASS" starttime="20230913 09:14:12.636" endtime="20230913 09:14:12.636"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:12.643" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p RuZ4TLkbUd  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:23.747" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:23.747" level="INFO">${output} = 2023-09-13 09:14:16,848 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:14:17,061 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:14:12.640" endtime="20230913 09:14:23.747"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:23.748" level="INFO">2023-09-13 09:14:16,848 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:14:17,061 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 09:14:17,061 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 09:14:17,173 [main] INFO freon.BaseFreonGenerator: Executing test with prefix RuZ4TLkbUd and number-of-tests 1
2023-09-13 09:14:17,247 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:18,248 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:19,249 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:20,277 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:20,396 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 09:14:20,460 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-13 09:14:20,783 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-13 09:14:21,277 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:22,278 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:23,278 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 09:14:23,378 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2333.541349, max=2333.541349, mean=2333.541349, stddev=0.0, median=2333.541349, p75=2333.541349, p95=2333.541349, p98=2333.541349, p99=2333.541349, p999=2333.541349, mean_rate=0.29422401336647924, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 09:14:23,378 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-13 09:14:23,385 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 09:14:23,386 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 09:14:23.747" endtime="20230913 09:14:23.748"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:23.749" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:23.749" endtime="20230913 09:14:23.749"/>
</kw>
<status status="PASS" starttime="20230913 09:14:12.639" endtime="20230913 09:14:23.749"/>
</kw>
<msg timestamp="20230913 09:14:23.750" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:12.639" endtime="20230913 09:14:23.750"/>
</kw>
<msg timestamp="20230913 09:14:23.750" level="INFO">${result} = 2023-09-13 09:14:16,848 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:14:17,061 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:14:12.638" endtime="20230913 09:14:23.750"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:14:23.750" endtime="20230913 09:14:23.751"/>
</kw>
<status status="PASS" starttime="20230913 09:14:12.636" endtime="20230913 09:14:23.751"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:23.758" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p RuZ4TLkbUd  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:35.765" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:35.765" level="INFO">${output} = 2023-09-13 09:14:27,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:14:27,968 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:14:23.754" endtime="20230913 09:14:35.765"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:35.771" level="INFO">2023-09-13 09:14:27,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:14:27,968 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 09:14:27,969 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 09:14:28,080 [main] INFO freon.BaseFreonGenerator: Executing test with prefix RuZ4TLkbUd and number-of-tests 1
2023-09-13 09:14:28,148 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:29,163 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:30,163 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:30,965 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 09:14:31,164 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:32,166 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:33,169 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 09:14:34,171 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 09:14:35,298 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=67.150641, max=67.150641, mean=67.150641, stddev=0.0, median=67.150641, p75=67.150641, p95=67.150641, p98=67.150641, p99=67.150641, p999=67.150641, mean_rate=0.6333919857901397, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 09:14:35,300 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-13 09:14:35,300 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 09:14:35,300 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 09:14:35.768" endtime="20230913 09:14:35.771"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:35.775" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:35.771" endtime="20230913 09:14:35.775"/>
</kw>
<status status="PASS" starttime="20230913 09:14:23.754" endtime="20230913 09:14:35.775"/>
</kw>
<msg timestamp="20230913 09:14:35.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:23.753" endtime="20230913 09:14:35.776"/>
</kw>
<msg timestamp="20230913 09:14:35.778" level="INFO">${result} = 2023-09-13 09:14:27,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 09:14:27,968 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 09:14:23.752" endtime="20230913 09:14:35.778"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:14:35.779" endtime="20230913 09:14:35.781"/>
</kw>
<status status="PASS" starttime="20230913 09:14:23.751" endtime="20230913 09:14:35.781"/>
</kw>
<status status="PASS" starttime="20230913 09:14:12.635" endtime="20230913 09:14:35.781"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 09:13:33.573" endtime="20230913 09:14:35.782"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230913 09:13:32.779" endtime="20230913 09:14:35.787"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:35.823" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:42.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:42.220" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:35.819" endtime="20230913 09:14:42.220"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:42.222" level="INFO"/>
<status status="PASS" starttime="20230913 09:14:42.220" endtime="20230913 09:14:42.222"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:42.224" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:42.223" endtime="20230913 09:14:42.224"/>
</kw>
<status status="PASS" starttime="20230913 09:14:35.819" endtime="20230913 09:14:42.224"/>
</kw>
<msg timestamp="20230913 09:14:42.224" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:35.818" endtime="20230913 09:14:42.224"/>
</kw>
<msg timestamp="20230913 09:14:42.225" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:35.818" endtime="20230913 09:14:42.225"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:14:42.225" endtime="20230913 09:14:42.225"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:42.231" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:14:49.984" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:49.984" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:42.228" endtime="20230913 09:14:49.984"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:49.986" level="INFO"/>
<status status="PASS" starttime="20230913 09:14:49.985" endtime="20230913 09:14:49.986"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:49.987" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:49.986" endtime="20230913 09:14:49.987"/>
</kw>
<status status="PASS" starttime="20230913 09:14:42.227" endtime="20230913 09:14:49.987"/>
</kw>
<msg timestamp="20230913 09:14:49.987" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:42.227" endtime="20230913 09:14:49.987"/>
</kw>
<msg timestamp="20230913 09:14:49.988" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:42.226" endtime="20230913 09:14:49.988"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:14:49.988" endtime="20230913 09:14:49.988"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 09:14:35.816" endtime="20230913 09:14:49.988"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:49.994" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230913 09:14:49.996" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:14:49.996" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:49.991" endtime="20230913 09:14:49.996"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:14:49.998" level="INFO"/>
<status status="PASS" starttime="20230913 09:14:49.997" endtime="20230913 09:14:49.998"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:14:49.998" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:14:49.998" endtime="20230913 09:14:49.999"/>
</kw>
<status status="PASS" starttime="20230913 09:14:49.990" endtime="20230913 09:14:49.999"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:14:50.003" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:15:00.724" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:15:00.724" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:50.001" endtime="20230913 09:15:00.724"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:15:00.726" level="INFO"/>
<status status="PASS" starttime="20230913 09:15:00.724" endtime="20230913 09:15:00.726"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:15:00.727" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:15:00.726" endtime="20230913 09:15:00.727"/>
</kw>
<status status="PASS" starttime="20230913 09:14:50.000" endtime="20230913 09:15:00.727"/>
</kw>
<msg timestamp="20230913 09:15:00.727" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:14:50.000" endtime="20230913 09:15:00.727"/>
</kw>
<msg timestamp="20230913 09:15:00.728" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:14:49.999" endtime="20230913 09:15:00.728"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:15:00.728" endtime="20230913 09:15:00.728"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:15:00.732" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:15:00.736" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:15:00.736" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:15:00.729" endtime="20230913 09:15:00.736"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:15:00.737" level="INFO"/>
<status status="PASS" starttime="20230913 09:15:00.737" endtime="20230913 09:15:00.738"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:15:00.738" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:15:00.738" endtime="20230913 09:15:00.738"/>
</kw>
<status status="PASS" starttime="20230913 09:15:00.728" endtime="20230913 09:15:00.739"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 09:14:49.989" endtime="20230913 09:15:00.739"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 09:15:00.741" level="INFO">${random} = 34496</msg>
<status status="PASS" starttime="20230913 09:15:00.741" endtime="20230913 09:15:00.741"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:15:00.746" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-34496 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:15:11.213" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:15:11.213" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:15:00.743" endtime="20230913 09:15:11.213"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:15:11.215" level="INFO"/>
<status status="PASS" starttime="20230913 09:15:11.213" endtime="20230913 09:15:11.215"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:15:11.215" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:15:11.215" endtime="20230913 09:15:11.216"/>
</kw>
<status status="PASS" starttime="20230913 09:15:00.743" endtime="20230913 09:15:11.216"/>
</kw>
<msg timestamp="20230913 09:15:11.216" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 09:15:00.742" endtime="20230913 09:15:11.216"/>
</kw>
<msg timestamp="20230913 09:15:11.216" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:15:00.741" endtime="20230913 09:15:11.216"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:15:11.217" endtime="20230913 09:15:11.217"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:15:11.221" level="INFO">Running command 'cat /tmp/key-34496 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:15:11.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:15:11.224" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 09:15:11.218" endtime="20230913 09:15:11.224"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:15:11.226" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 09:15:11.225" endtime="20230913 09:15:11.226"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:15:11.227" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:15:11.226" endtime="20230913 09:15:11.227"/>
</kw>
<msg timestamp="20230913 09:15:11.227" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 09:15:11.217" endtime="20230913 09:15:11.227"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 09:15:11.227" endtime="20230913 09:15:11.228"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 09:15:11.231" level="INFO">Running command 'rm /tmp/key-34496 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 09:15:11.234" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 09:15:11.234" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 09:15:11.228" endtime="20230913 09:15:11.234"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 09:15:11.236" level="INFO"/>
<status status="PASS" starttime="20230913 09:15:11.235" endtime="20230913 09:15:11.236"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 09:15:11.237" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 09:15:11.236" endtime="20230913 09:15:11.237"/>
</kw>
<status status="PASS" starttime="20230913 09:15:11.228" endtime="20230913 09:15:11.237"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 09:15:00.740" endtime="20230913 09:15:11.237"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230913 09:14:35.792" endtime="20230913 09:15:11.240"/>
</suite>
<status status="PASS" starttime="20230913 09:13:32.608" endtime="20230913 09:15:11.243"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
