<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230913 13:20:03.598" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:18.184" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:18.192" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:18.193" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230913 13:18:18.178" endtime="20230913 13:18:18.194"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:18.195" level="INFO">scm</msg>
<status status="PASS" starttime="20230913 13:18:18.194" endtime="20230913 13:18:18.195"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:18.197" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:18.195" endtime="20230913 13:18:18.197"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.176" endtime="20230913 13:18:18.197"/>
</kw>
<msg timestamp="20230913 13:18:18.197" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:18.176" endtime="20230913 13:18:18.197"/>
</kw>
<msg timestamp="20230913 13:18:18.197" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230913 13:18:18.175" endtime="20230913 13:18:18.198"/>
</kw>
<msg timestamp="20230913 13:18:18.199" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230913 13:18:18.173" endtime="20230913 13:18:18.200"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230913 13:18:18.200" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230913 13:18:18.200" endtime="20230913 13:18:18.201"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:18.211" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:18.503" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:18.503" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:18:18.206" endtime="20230913 13:18:18.503"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:18.504" level="INFO"/>
<status status="PASS" starttime="20230913 13:18:18.504" endtime="20230913 13:18:18.504"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:18.505" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:18.504" endtime="20230913 13:18:18.505"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.205" endtime="20230913 13:18:18.505"/>
</kw>
<msg timestamp="20230913 13:18:18.505" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:18.204" endtime="20230913 13:18:18.506"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.203" endtime="20230913 13:18:18.506"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.201" endtime="20230913 13:18:18.506"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.173" endtime="20230913 13:18:18.506"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.171" endtime="20230913 13:18:18.506"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.169" endtime="20230913 13:18:18.506"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 13:18:18.516" level="INFO">${random} = GwUFHkbS5b</msg>
<status status="PASS" starttime="20230913 13:18:18.516" endtime="20230913 13:18:18.516"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:18.533" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p GwUFHkbS5b  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:35.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:35.897" level="INFO">${output} = 2023-09-13 13:18:24,901 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:18:25,365 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:18:18.529" endtime="20230913 13:18:35.897"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:35.899" level="INFO">2023-09-13 13:18:24,901 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:18:25,365 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 13:18:25,366 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 13:18:25,836 [main] INFO freon.BaseFreonGenerator: Executing test with prefix GwUFHkbS5b and number-of-tests 1
2023-09-13 13:18:26,189 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:27,205 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:28,206 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:29,206 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:29,724 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-13 13:18:29,930 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-13 13:18:30,207 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:30,594 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 13:18:30,664 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-13 13:18:30,959 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-13 13:18:31,207 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:32,208 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:33,208 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:34,209 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 13:18:35,486 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=4017.17347, max=4017.17347, mean=4017.17347, stddev=0.0, median=4017.17347, p75=4017.17347, p95=4017.17347, p98=4017.17347, p99=4017.17347, p999=4017.17347, mean_rate=0.18219542400261451, m1=0.2, m5=0.2, m15=0.2, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 13:18:35,487 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-09-13 13:18:35,487 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 13:18:35,487 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 13:18:35.898" endtime="20230913 13:18:35.899"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:35.900" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:35.899" endtime="20230913 13:18:35.900"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.519" endtime="20230913 13:18:35.900"/>
</kw>
<msg timestamp="20230913 13:18:35.900" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:18.519" endtime="20230913 13:18:35.900"/>
</kw>
<msg timestamp="20230913 13:18:35.901" level="INFO">${result} = 2023-09-13 13:18:24,901 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:18:25,365 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:18:18.518" endtime="20230913 13:18:35.901"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:18:35.901" endtime="20230913 13:18:35.902"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.517" endtime="20230913 13:18:35.902"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:35.908" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p GwUFHkbS5b  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:46.875" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:46.875" level="INFO">${output} = 2023-09-13 13:18:40,264 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:18:40,656 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:18:35.905" endtime="20230913 13:18:46.875"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:46.877" level="INFO">2023-09-13 13:18:40,264 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:18:40,656 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 13:18:40,659 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 13:18:40,841 [main] INFO freon.BaseFreonGenerator: Executing test with prefix GwUFHkbS5b and number-of-tests 1
2023-09-13 13:18:40,889 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:41,897 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:42,898 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:43,739 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 13:18:43,898 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:44,898 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:18:45,900 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 13:18:46,478 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=59.498863, max=59.498863, mean=59.498863, stddev=0.0, median=59.498863, p75=59.498863, p95=59.498863, p98=59.498863, p99=59.498863, p999=59.498863, mean_rate=0.9622034875536887, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 13:18:46,479 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-13 13:18:46,502 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 13:18:46,502 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 13:18:46.876" endtime="20230913 13:18:46.878"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:46.878" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:46.878" endtime="20230913 13:18:46.878"/>
</kw>
<status status="PASS" starttime="20230913 13:18:35.905" endtime="20230913 13:18:46.879"/>
</kw>
<msg timestamp="20230913 13:18:46.879" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:35.904" endtime="20230913 13:18:46.879"/>
</kw>
<msg timestamp="20230913 13:18:46.879" level="INFO">${result} = 2023-09-13 13:18:40,264 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:18:40,656 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:18:35.904" endtime="20230913 13:18:46.879"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:18:46.880" endtime="20230913 13:18:46.880"/>
</kw>
<status status="PASS" starttime="20230913 13:18:35.902" endtime="20230913 13:18:46.880"/>
</kw>
<status status="PASS" starttime="20230913 13:18:18.512" endtime="20230913 13:18:46.881"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:46.888" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:48.361" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:48.362" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230913 13:18:46.883" endtime="20230913 13:18:48.362"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:48.363" level="INFO">40s</msg>
<status status="PASS" starttime="20230913 13:18:48.362" endtime="20230913 13:18:48.363"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:48.364" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:48.363" endtime="20230913 13:18:48.364"/>
</kw>
<status status="PASS" starttime="20230913 13:18:46.883" endtime="20230913 13:18:48.364"/>
</kw>
<msg timestamp="20230913 13:18:48.364" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:46.883" endtime="20230913 13:18:48.364"/>
</kw>
<msg timestamp="20230913 13:18:48.365" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230913 13:18:46.882" endtime="20230913 13:18:48.365"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230913 13:18:48.366" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230913 13:18:48.365" endtime="20230913 13:18:48.366"/>
</kw>
<msg timestamp="20230913 13:18:48.366" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230913 13:18:46.882" endtime="20230913 13:18:48.366"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230913 13:18:48.367" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230913 13:18:48.367" endtime="20230913 13:18:48.367"/>
</kw>
<msg timestamp="20230913 13:18:48.368" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230913 13:18:48.366" endtime="20230913 13:18:48.368"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:48.372" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:48.442" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:48.442" level="INFO">${output} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.369" endtime="20230913 13:18:48.442"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:48.443" level="INFO">F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.442" endtime="20230913 13:18:48.443"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:48.444" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:48.444" endtime="20230913 13:18:48.444"/>
</kw>
<status status="PASS" starttime="20230913 13:18:48.369" endtime="20230913 13:18:48.445"/>
</kw>
<msg timestamp="20230913 13:18:48.445" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:48.369" endtime="20230913 13:18:48.445"/>
</kw>
<msg timestamp="20230913 13:18:48.445" level="INFO">${certSerial} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.368" endtime="20230913 13:18:48.445"/>
</kw>
<msg timestamp="20230913 13:18:48.445" level="INFO">${certId1} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.368" endtime="20230913 13:18:48.445"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:48.451" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:48.502" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:48.502" level="INFO">${output} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.448" endtime="20230913 13:18:48.502"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:48.504" level="INFO">F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.503" endtime="20230913 13:18:48.504"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:48.505" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:48.504" endtime="20230913 13:18:48.505"/>
</kw>
<status status="PASS" starttime="20230913 13:18:48.448" endtime="20230913 13:18:48.505"/>
</kw>
<msg timestamp="20230913 13:18:48.505" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:48.447" endtime="20230913 13:18:48.505"/>
</kw>
<msg timestamp="20230913 13:18:48.505" level="INFO">${certSerial} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.447" endtime="20230913 13:18:48.505"/>
</kw>
<msg timestamp="20230913 13:18:48.506" level="INFO">${newCertId} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:48.446" endtime="20230913 13:18:48.506"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230913 13:18:48.506" level="FAIL">F0A9A05BA9 == F0A9A05BA9</msg>
<status status="FAIL" starttime="20230913 13:18:48.506" endtime="20230913 13:18:48.506"/>
</kw>
<status status="FAIL" starttime="20230913 13:18:48.446" endtime="20230913 13:18:48.507"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:53.515" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:53.558" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:53.558" level="INFO">${output} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:53.510" endtime="20230913 13:18:53.558"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:53.559" level="INFO">F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:53.559" endtime="20230913 13:18:53.560"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:53.560" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:53.560" endtime="20230913 13:18:53.560"/>
</kw>
<status status="PASS" starttime="20230913 13:18:53.510" endtime="20230913 13:18:53.561"/>
</kw>
<msg timestamp="20230913 13:18:53.561" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:53.510" endtime="20230913 13:18:53.561"/>
</kw>
<msg timestamp="20230913 13:18:53.561" level="INFO">${certSerial} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:53.509" endtime="20230913 13:18:53.561"/>
</kw>
<msg timestamp="20230913 13:18:53.561" level="INFO">${newCertId} = F0A9A05BA9</msg>
<status status="PASS" starttime="20230913 13:18:53.508" endtime="20230913 13:18:53.561"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230913 13:18:53.562" level="FAIL">F0A9A05BA9 == F0A9A05BA9</msg>
<status status="FAIL" starttime="20230913 13:18:53.561" endtime="20230913 13:18:53.562"/>
</kw>
<status status="FAIL" starttime="20230913 13:18:53.507" endtime="20230913 13:18:53.562"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:58.568" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:18:58.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:18:58.628" level="INFO">${output} = F576DDA30C</msg>
<status status="PASS" starttime="20230913 13:18:58.565" endtime="20230913 13:18:58.628"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:18:58.630" level="INFO">F576DDA30C</msg>
<status status="PASS" starttime="20230913 13:18:58.629" endtime="20230913 13:18:58.630"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:18:58.630" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:18:58.630" endtime="20230913 13:18:58.630"/>
</kw>
<status status="PASS" starttime="20230913 13:18:58.565" endtime="20230913 13:18:58.631"/>
</kw>
<msg timestamp="20230913 13:18:58.631" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:58.565" endtime="20230913 13:18:58.631"/>
</kw>
<msg timestamp="20230913 13:18:58.631" level="INFO">${certSerial} = F576DDA30C</msg>
<status status="PASS" starttime="20230913 13:18:58.564" endtime="20230913 13:18:58.631"/>
</kw>
<msg timestamp="20230913 13:18:58.631" level="INFO">${newCertId} = F576DDA30C</msg>
<status status="PASS" starttime="20230913 13:18:58.564" endtime="20230913 13:18:58.631"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230913 13:18:58.631" endtime="20230913 13:18:58.632"/>
</kw>
<status status="PASS" starttime="20230913 13:18:58.563" endtime="20230913 13:18:58.632"/>
</kw>
<status status="PASS" starttime="20230913 13:18:48.445" endtime="20230913 13:18:58.632"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 13:18:58.633" level="INFO">${random} = IXo3IPwbIe</msg>
<status status="PASS" starttime="20230913 13:18:58.633" endtime="20230913 13:18:58.633"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:18:58.639" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p IXo3IPwbIe  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:08.466" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:08.466" level="INFO">${output} = 2023-09-13 13:19:01,493 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:19:01,653 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:18:58.636" endtime="20230913 13:19:08.467"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:08.468" level="INFO">2023-09-13 13:19:01,493 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:19:01,653 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 13:19:01,653 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 13:19:01,742 [main] INFO freon.BaseFreonGenerator: Executing test with prefix IXo3IPwbIe and number-of-tests 1
2023-09-13 13:19:01,798 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:02,800 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:03,800 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:04,736 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 13:19:04,784 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-13 13:19:04,801 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:05,085 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-13 13:19:05,801 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:06,802 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:07,802 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 13:19:08,092 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2680.592788, max=2680.592788, mean=2680.592788, stddev=0.0, median=2680.592788, p75=2680.592788, p95=2680.592788, p98=2680.592788, p99=2680.592788, p999=2680.592788, mean_rate=0.2719267766104948, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 13:19:08,092 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-13 13:19:08,093 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 13:19:08,093 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 13:19:08.467" endtime="20230913 13:19:08.468"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:08.469" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:08.469" endtime="20230913 13:19:08.469"/>
</kw>
<status status="PASS" starttime="20230913 13:18:58.635" endtime="20230913 13:19:08.469"/>
</kw>
<msg timestamp="20230913 13:19:08.469" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:18:58.635" endtime="20230913 13:19:08.470"/>
</kw>
<msg timestamp="20230913 13:19:08.470" level="INFO">${result} = 2023-09-13 13:19:01,493 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:19:01,653 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:18:58.634" endtime="20230913 13:19:08.470"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:08.470" endtime="20230913 13:19:08.470"/>
</kw>
<status status="PASS" starttime="20230913 13:18:58.633" endtime="20230913 13:19:08.471"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:08.477" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p IXo3IPwbIe  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:16.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:16.853" level="INFO">${output} = 2023-09-13 13:19:10,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:19:10,946 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:19:08.474" endtime="20230913 13:19:16.853"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:16.854" level="INFO">2023-09-13 13:19:10,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:19:10,946 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 13:19:10,946 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 13:19:11,042 [main] INFO freon.BaseFreonGenerator: Executing test with prefix IXo3IPwbIe and number-of-tests 1
2023-09-13 13:19:11,105 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:12,115 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:13,116 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:13,734 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 13:19:14,117 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:15,119 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 13:19:16,120 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 13:19:16,496 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=109.925095, max=109.925095, mean=109.925095, stddev=0.0, median=109.925095, p75=109.925095, p95=109.925095, p98=109.925095, p99=109.925095, p999=109.925095, mean_rate=0.6693709373020438, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 13:19:16,497 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-09-13 13:19:16,497 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 13:19:16,497 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 13:19:16.853" endtime="20230913 13:19:16.854"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:16.855" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:16.854" endtime="20230913 13:19:16.855"/>
</kw>
<status status="PASS" starttime="20230913 13:19:08.473" endtime="20230913 13:19:16.855"/>
</kw>
<msg timestamp="20230913 13:19:16.855" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:19:08.473" endtime="20230913 13:19:16.855"/>
</kw>
<msg timestamp="20230913 13:19:16.856" level="INFO">${result} = 2023-09-13 13:19:10,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 13:19:10,946 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 13:19:08.472" endtime="20230913 13:19:16.856"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:16.856" endtime="20230913 13:19:16.856"/>
</kw>
<status status="PASS" starttime="20230913 13:19:08.471" endtime="20230913 13:19:16.856"/>
</kw>
<status status="PASS" starttime="20230913 13:18:58.632" endtime="20230913 13:19:16.856"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 13:18:18.506" endtime="20230913 13:19:16.857"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230913 13:18:18.059" endtime="20230913 13:19:16.859"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:16.873" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:22.680" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:22.680" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:16.871" endtime="20230913 13:19:22.680"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:22.682" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:22.681" endtime="20230913 13:19:22.682"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:22.683" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:22.682" endtime="20230913 13:19:22.683"/>
</kw>
<status status="PASS" starttime="20230913 13:19:16.870" endtime="20230913 13:19:22.683"/>
</kw>
<msg timestamp="20230913 13:19:22.683" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:19:16.870" endtime="20230913 13:19:22.683"/>
</kw>
<msg timestamp="20230913 13:19:22.684" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:16.869" endtime="20230913 13:19:22.684"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:22.684" endtime="20230913 13:19:22.684"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:22.689" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:29.274" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:29.274" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:22.686" endtime="20230913 13:19:29.274"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:29.276" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:29.275" endtime="20230913 13:19:29.276"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:29.277" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:29.276" endtime="20230913 13:19:29.277"/>
</kw>
<status status="PASS" starttime="20230913 13:19:22.685" endtime="20230913 13:19:29.277"/>
</kw>
<msg timestamp="20230913 13:19:29.277" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:19:22.685" endtime="20230913 13:19:29.277"/>
</kw>
<msg timestamp="20230913 13:19:29.277" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:22.684" endtime="20230913 13:19:29.277"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:29.278" endtime="20230913 13:19:29.278"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 13:19:16.869" endtime="20230913 13:19:29.278"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:29.283" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230913 13:19:29.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:29.285" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:29.281" endtime="20230913 13:19:29.285"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:29.286" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:29.286" endtime="20230913 13:19:29.287"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:29.287" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:29.287" endtime="20230913 13:19:29.287"/>
</kw>
<status status="PASS" starttime="20230913 13:19:29.280" endtime="20230913 13:19:29.287"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:29.291" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:38.157" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:38.157" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:29.289" endtime="20230913 13:19:38.157"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:38.159" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:38.158" endtime="20230913 13:19:38.159"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:38.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:38.159" endtime="20230913 13:19:38.160"/>
</kw>
<status status="PASS" starttime="20230913 13:19:29.289" endtime="20230913 13:19:38.160"/>
</kw>
<msg timestamp="20230913 13:19:38.160" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:19:29.288" endtime="20230913 13:19:38.160"/>
</kw>
<msg timestamp="20230913 13:19:38.160" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:29.288" endtime="20230913 13:19:38.160"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:38.161" endtime="20230913 13:19:38.161"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:38.164" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:38.167" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:38.167" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:38.162" endtime="20230913 13:19:38.167"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:38.168" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:38.168" endtime="20230913 13:19:38.168"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:38.169" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:38.169" endtime="20230913 13:19:38.169"/>
</kw>
<status status="PASS" starttime="20230913 13:19:38.161" endtime="20230913 13:19:38.170"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 13:19:29.279" endtime="20230913 13:19:38.170"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 13:19:38.172" level="INFO">${random} = 33773</msg>
<status status="PASS" starttime="20230913 13:19:38.172" endtime="20230913 13:19:38.172"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:38.179" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-33773 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:47.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:47.280" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:38.174" endtime="20230913 13:19:47.280"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:47.281" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:47.281" endtime="20230913 13:19:47.281"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:47.282" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:47.282" endtime="20230913 13:19:47.282"/>
</kw>
<status status="PASS" starttime="20230913 13:19:38.173" endtime="20230913 13:19:47.282"/>
</kw>
<msg timestamp="20230913 13:19:47.282" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 13:19:38.173" endtime="20230913 13:19:47.282"/>
</kw>
<msg timestamp="20230913 13:19:47.283" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:38.172" endtime="20230913 13:19:47.283"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:47.283" endtime="20230913 13:19:47.283"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:47.287" level="INFO">Running command 'cat /tmp/key-33773 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:47.290" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:47.290" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 13:19:47.284" endtime="20230913 13:19:47.290"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:47.291" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 13:19:47.290" endtime="20230913 13:19:47.291"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:47.291" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:47.291" endtime="20230913 13:19:47.291"/>
</kw>
<msg timestamp="20230913 13:19:47.292" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 13:19:47.283" endtime="20230913 13:19:47.292"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 13:19:47.292" endtime="20230913 13:19:47.292"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 13:19:47.295" level="INFO">Running command 'rm /tmp/key-33773 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 13:19:47.298" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 13:19:47.298" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 13:19:47.293" endtime="20230913 13:19:47.298"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 13:19:47.299" level="INFO"/>
<status status="PASS" starttime="20230913 13:19:47.299" endtime="20230913 13:19:47.299"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 13:19:47.300" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 13:19:47.300" endtime="20230913 13:19:47.300"/>
</kw>
<status status="PASS" starttime="20230913 13:19:47.292" endtime="20230913 13:19:47.300"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 13:19:38.171" endtime="20230913 13:19:47.301"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230913 13:19:16.861" endtime="20230913 13:19:47.302"/>
</suite>
<status status="PASS" starttime="20230913 13:18:17.999" endtime="20230913 13:19:47.305"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
