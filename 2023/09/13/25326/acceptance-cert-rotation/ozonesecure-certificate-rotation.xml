<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230913 07:11:38.697" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:04.849" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:04.859" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:04.859" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230913 07:10:04.843" endtime="20230913 07:10:04.859"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:04.860" level="INFO">scm</msg>
<status status="PASS" starttime="20230913 07:10:04.860" endtime="20230913 07:10:04.860"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:04.861" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:04.861" endtime="20230913 07:10:04.861"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.843" endtime="20230913 07:10:04.861"/>
</kw>
<msg timestamp="20230913 07:10:04.861" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:04.842" endtime="20230913 07:10:04.862"/>
</kw>
<msg timestamp="20230913 07:10:04.862" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230913 07:10:04.842" endtime="20230913 07:10:04.862"/>
</kw>
<msg timestamp="20230913 07:10:04.862" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230913 07:10:04.840" endtime="20230913 07:10:04.862"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230913 07:10:04.863" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230913 07:10:04.862" endtime="20230913 07:10:04.863"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:04.874" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:04.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:04.923" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:10:04.867" endtime="20230913 07:10:04.923"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:04.925" level="INFO"/>
<status status="PASS" starttime="20230913 07:10:04.924" endtime="20230913 07:10:04.925"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:04.925" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:04.925" endtime="20230913 07:10:04.926"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.866" endtime="20230913 07:10:04.926"/>
</kw>
<msg timestamp="20230913 07:10:04.926" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:04.866" endtime="20230913 07:10:04.926"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.864" endtime="20230913 07:10:04.926"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.864" endtime="20230913 07:10:04.926"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.840" endtime="20230913 07:10:04.926"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.839" endtime="20230913 07:10:04.926"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.837" endtime="20230913 07:10:04.926"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 07:10:04.929" level="INFO">${random} = fNrfVdUw09</msg>
<status status="PASS" starttime="20230913 07:10:04.929" endtime="20230913 07:10:04.929"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:04.951" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p fNrfVdUw09  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:20.808" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:20.808" level="INFO">${output} = 2023-09-13 07:10:09,346 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:09,479 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:04.942" endtime="20230913 07:10:20.808"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:20.809" level="INFO">2023-09-13 07:10:09,346 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:09,479 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 07:10:09,479 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 07:10:09,638 [main] INFO freon.BaseFreonGenerator: Executing test with prefix fNrfVdUw09 and number-of-tests 1
2023-09-13 07:10:09,864 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:10,906 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:11,907 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:12,927 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:13,594 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-13 07:10:13,929 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:13,963 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-13 07:10:14,938 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:15,585 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 07:10:15,699 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-13 07:10:15,938 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:16,007 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-13 07:10:16,939 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:17,939 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:18,948 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:19,949 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 07:10:20,457 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5017.57182, max=5017.57182, mean=5017.57182, stddev=0.0, median=5017.57182, p75=5017.57182, p95=5017.57182, p98=5017.57182, p99=5017.57182, p999=5017.57182, mean_rate=0.16025793373407515, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 07:10:20,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 11
2023-09-13 07:10:20,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 07:10:20,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 07:10:20.809" endtime="20230913 07:10:20.810"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:20.810" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:20.810" endtime="20230913 07:10:20.810"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.942" endtime="20230913 07:10:20.811"/>
</kw>
<msg timestamp="20230913 07:10:20.811" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:04.942" endtime="20230913 07:10:20.811"/>
</kw>
<msg timestamp="20230913 07:10:20.811" level="INFO">${result} = 2023-09-13 07:10:09,346 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:09,479 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:04.941" endtime="20230913 07:10:20.811"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:10:20.811" endtime="20230913 07:10:20.812"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.929" endtime="20230913 07:10:20.812"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:20.818" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p fNrfVdUw09  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:32.056" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:32.056" level="INFO">${output} = 2023-09-13 07:10:24,375 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:24,918 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:20.815" endtime="20230913 07:10:32.056"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:32.057" level="INFO">2023-09-13 07:10:24,375 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:24,918 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 07:10:24,918 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 07:10:25,052 [main] INFO freon.BaseFreonGenerator: Executing test with prefix fNrfVdUw09 and number-of-tests 1
2023-09-13 07:10:25,205 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:26,208 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:27,209 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:28,209 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:28,936 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 07:10:29,210 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:30,210 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:31,211 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 07:10:31,699 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=79.653267, max=79.653267, mean=79.653267, stddev=0.0, median=79.653267, p75=79.653267, p95=79.653267, p98=79.653267, p99=79.653267, p999=79.653267, mean_rate=0.7945641407163019, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 07:10:31,699 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-13 07:10:31,700 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 07:10:31,700 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 07:10:32.057" endtime="20230913 07:10:32.058"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:32.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:32.058" endtime="20230913 07:10:32.058"/>
</kw>
<status status="PASS" starttime="20230913 07:10:20.814" endtime="20230913 07:10:32.059"/>
</kw>
<msg timestamp="20230913 07:10:32.059" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:20.814" endtime="20230913 07:10:32.059"/>
</kw>
<msg timestamp="20230913 07:10:32.059" level="INFO">${result} = 2023-09-13 07:10:24,375 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:24,918 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:20.813" endtime="20230913 07:10:32.059"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:10:32.059" endtime="20230913 07:10:32.060"/>
</kw>
<status status="PASS" starttime="20230913 07:10:20.812" endtime="20230913 07:10:32.060"/>
</kw>
<status status="PASS" starttime="20230913 07:10:04.928" endtime="20230913 07:10:32.060"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:32.066" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:33.987" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:33.987" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230913 07:10:32.062" endtime="20230913 07:10:33.987"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:33.989" level="INFO">40s</msg>
<status status="PASS" starttime="20230913 07:10:33.988" endtime="20230913 07:10:33.989"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:33.989" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:33.989" endtime="20230913 07:10:33.989"/>
</kw>
<status status="PASS" starttime="20230913 07:10:32.061" endtime="20230913 07:10:33.990"/>
</kw>
<msg timestamp="20230913 07:10:33.990" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:32.061" endtime="20230913 07:10:33.990"/>
</kw>
<msg timestamp="20230913 07:10:33.990" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230913 07:10:32.061" endtime="20230913 07:10:33.990"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230913 07:10:33.992" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230913 07:10:33.990" endtime="20230913 07:10:33.992"/>
</kw>
<msg timestamp="20230913 07:10:33.992" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230913 07:10:32.060" endtime="20230913 07:10:33.992"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230913 07:10:33.993" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230913 07:10:33.993" endtime="20230913 07:10:33.993"/>
</kw>
<msg timestamp="20230913 07:10:33.994" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230913 07:10:33.992" endtime="20230913 07:10:33.994"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:33.998" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:34.161" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:34.161" level="INFO">${output} = 041454D3983C</msg>
<status status="PASS" starttime="20230913 07:10:33.996" endtime="20230913 07:10:34.161"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:34.163" level="INFO">041454D3983C</msg>
<status status="PASS" starttime="20230913 07:10:34.162" endtime="20230913 07:10:34.163"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:34.166" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:34.163" endtime="20230913 07:10:34.167"/>
</kw>
<status status="PASS" starttime="20230913 07:10:33.995" endtime="20230913 07:10:34.167"/>
</kw>
<msg timestamp="20230913 07:10:34.167" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:33.995" endtime="20230913 07:10:34.176"/>
</kw>
<msg timestamp="20230913 07:10:34.176" level="INFO">${certSerial} = 041454D3983C</msg>
<status status="PASS" starttime="20230913 07:10:33.994" endtime="20230913 07:10:34.176"/>
</kw>
<msg timestamp="20230913 07:10:34.177" level="INFO">${certId1} = 041454D3983C</msg>
<status status="PASS" starttime="20230913 07:10:33.994" endtime="20230913 07:10:34.177"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:34.193" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:34.355" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:34.355" level="INFO">${output} = 0413CDB1B56B</msg>
<status status="PASS" starttime="20230913 07:10:34.180" endtime="20230913 07:10:34.355"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:34.365" level="INFO">0413CDB1B56B</msg>
<status status="PASS" starttime="20230913 07:10:34.364" endtime="20230913 07:10:34.365"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:34.366" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:34.365" endtime="20230913 07:10:34.366"/>
</kw>
<status status="PASS" starttime="20230913 07:10:34.179" endtime="20230913 07:10:34.368"/>
</kw>
<msg timestamp="20230913 07:10:34.368" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:34.179" endtime="20230913 07:10:34.368"/>
</kw>
<msg timestamp="20230913 07:10:34.368" level="INFO">${certSerial} = 0413CDB1B56B</msg>
<status status="PASS" starttime="20230913 07:10:34.178" endtime="20230913 07:10:34.368"/>
</kw>
<msg timestamp="20230913 07:10:34.369" level="INFO">${newCertId} = 0413CDB1B56B</msg>
<status status="PASS" starttime="20230913 07:10:34.178" endtime="20230913 07:10:34.369"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230913 07:10:34.369" endtime="20230913 07:10:34.369"/>
</kw>
<status status="PASS" starttime="20230913 07:10:34.178" endtime="20230913 07:10:34.370"/>
</kw>
<status status="PASS" starttime="20230913 07:10:34.177" endtime="20230913 07:10:34.370"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 07:10:34.371" level="INFO">${random} = ccpALQx9Ze</msg>
<status status="PASS" starttime="20230913 07:10:34.370" endtime="20230913 07:10:34.371"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:34.395" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ccpALQx9Ze  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:43.066" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:43.067" level="INFO">${output} = 2023-09-13 07:10:37,064 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:37,172 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:34.375" endtime="20230913 07:10:43.067"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:43.068" level="INFO">2023-09-13 07:10:37,064 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:37,172 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 07:10:37,172 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 07:10:37,285 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ccpALQx9Ze and number-of-tests 1
2023-09-13 07:10:37,355 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:38,360 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:39,360 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:39,939 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 07:10:40,008 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-13 07:10:40,308 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-13 07:10:40,361 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:41,361 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:42,362 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 07:10:42,706 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2233.110952, max=2233.110952, mean=2233.110952, stddev=0.0, median=2233.110952, p75=2233.110952, p95=2233.110952, p98=2233.110952, p99=2233.110952, p999=2233.110952, mean_rate=0.3182331035149648, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 07:10:42,707 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-09-13 07:10:42,707 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 07:10:42,707 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 07:10:43.067" endtime="20230913 07:10:43.069"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:43.069" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:43.069" endtime="20230913 07:10:43.069"/>
</kw>
<status status="PASS" starttime="20230913 07:10:34.375" endtime="20230913 07:10:43.070"/>
</kw>
<msg timestamp="20230913 07:10:43.070" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:34.374" endtime="20230913 07:10:43.070"/>
</kw>
<msg timestamp="20230913 07:10:43.070" level="INFO">${result} = 2023-09-13 07:10:37,064 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:37,172 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:34.373" endtime="20230913 07:10:43.070"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:10:43.070" endtime="20230913 07:10:43.071"/>
</kw>
<status status="PASS" starttime="20230913 07:10:34.371" endtime="20230913 07:10:43.071"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:43.078" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ccpALQx9Ze  2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:52.549" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:52.549" level="INFO">${output} = 2023-09-13 07:10:46,553 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:46,777 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:43.075" endtime="20230913 07:10:52.549"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:52.551" level="INFO">2023-09-13 07:10:46,553 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:46,777 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-13 07:10:46,777 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-13 07:10:46,849 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ccpALQx9Ze and number-of-tests 1
2023-09-13 07:10:46,913 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:47,918 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:48,919 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:49,478 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-13 07:10:49,919 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:50,920 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-13 07:10:51,920 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-13 07:10:52,195 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=59.20707, max=59.20707, mean=59.20707, stddev=0.0, median=59.20707, p75=59.20707, p95=59.20707, p98=59.20707, p99=59.20707, p999=59.20707, mean_rate=0.768946677740196, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-13 07:10:52,196 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-09-13 07:10:52,196 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-13 07:10:52,196 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230913 07:10:52.550" endtime="20230913 07:10:52.551"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:52.551" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:52.551" endtime="20230913 07:10:52.551"/>
</kw>
<status status="PASS" starttime="20230913 07:10:43.074" endtime="20230913 07:10:52.552"/>
</kw>
<msg timestamp="20230913 07:10:52.552" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:43.074" endtime="20230913 07:10:52.552"/>
</kw>
<msg timestamp="20230913 07:10:52.552" level="INFO">${result} = 2023-09-13 07:10:46,553 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-13 07:10:46,777 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230913 07:10:43.073" endtime="20230913 07:10:52.552"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:10:52.552" endtime="20230913 07:10:52.553"/>
</kw>
<status status="PASS" starttime="20230913 07:10:43.071" endtime="20230913 07:10:52.553"/>
</kw>
<status status="PASS" starttime="20230913 07:10:34.370" endtime="20230913 07:10:52.553"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 07:10:04.927" endtime="20230913 07:10:52.553"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230913 07:10:04.764" endtime="20230913 07:10:52.554"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:52.568" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:10:58.822" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:10:58.822" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:10:52.565" endtime="20230913 07:10:58.822"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:10:58.824" level="INFO"/>
<status status="PASS" starttime="20230913 07:10:58.823" endtime="20230913 07:10:58.824"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:10:58.824" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:10:58.824" endtime="20230913 07:10:58.825"/>
</kw>
<status status="PASS" starttime="20230913 07:10:52.565" endtime="20230913 07:10:58.825"/>
</kw>
<msg timestamp="20230913 07:10:58.825" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:52.564" endtime="20230913 07:10:58.825"/>
</kw>
<msg timestamp="20230913 07:10:58.825" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:10:52.564" endtime="20230913 07:10:58.825"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:10:58.825" endtime="20230913 07:10:58.826"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:10:58.830" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:11:05.580" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:05.580" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:10:58.827" endtime="20230913 07:11:05.580"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:05.582" level="INFO"/>
<status status="PASS" starttime="20230913 07:11:05.581" endtime="20230913 07:11:05.582"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:05.583" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:05.582" endtime="20230913 07:11:05.583"/>
</kw>
<status status="PASS" starttime="20230913 07:10:58.827" endtime="20230913 07:11:05.583"/>
</kw>
<msg timestamp="20230913 07:11:05.583" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:10:58.826" endtime="20230913 07:11:05.583"/>
</kw>
<msg timestamp="20230913 07:11:05.583" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:10:58.826" endtime="20230913 07:11:05.583"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:11:05.584" endtime="20230913 07:11:05.584"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 07:10:52.563" endtime="20230913 07:11:05.584"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:11:05.589" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230913 07:11:05.591" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:05.591" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:05.586" endtime="20230913 07:11:05.591"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:05.592" level="INFO"/>
<status status="PASS" starttime="20230913 07:11:05.592" endtime="20230913 07:11:05.592"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:05.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:05.593" endtime="20230913 07:11:05.593"/>
</kw>
<status status="PASS" starttime="20230913 07:11:05.586" endtime="20230913 07:11:05.593"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:11:05.598" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:11:13.540" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:13.540" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:05.596" endtime="20230913 07:11:13.541"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:13.542" level="INFO"/>
<status status="PASS" starttime="20230913 07:11:13.541" endtime="20230913 07:11:13.542"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:13.543" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:13.543" endtime="20230913 07:11:13.543"/>
</kw>
<status status="PASS" starttime="20230913 07:11:05.595" endtime="20230913 07:11:13.543"/>
</kw>
<msg timestamp="20230913 07:11:13.544" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:11:05.594" endtime="20230913 07:11:13.544"/>
</kw>
<msg timestamp="20230913 07:11:13.544" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:05.594" endtime="20230913 07:11:13.544"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:11:13.544" endtime="20230913 07:11:13.545"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:11:13.550" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:11:13.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:13.556" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:13.546" endtime="20230913 07:11:13.556"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:13.558" level="INFO"/>
<status status="PASS" starttime="20230913 07:11:13.557" endtime="20230913 07:11:13.558"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:13.558" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:13.558" endtime="20230913 07:11:13.558"/>
</kw>
<status status="PASS" starttime="20230913 07:11:13.545" endtime="20230913 07:11:13.559"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 07:11:05.585" endtime="20230913 07:11:13.559"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230913 07:11:13.562" level="INFO">${random} = 42522</msg>
<status status="PASS" starttime="20230913 07:11:13.561" endtime="20230913 07:11:13.563"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:11:13.567" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-42522 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:11:22.019" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:22.019" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:13.564" endtime="20230913 07:11:22.019"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:22.021" level="INFO"/>
<status status="PASS" starttime="20230913 07:11:22.020" endtime="20230913 07:11:22.021"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:22.021" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:22.021" endtime="20230913 07:11:22.021"/>
</kw>
<status status="PASS" starttime="20230913 07:11:13.564" endtime="20230913 07:11:22.022"/>
</kw>
<msg timestamp="20230913 07:11:22.022" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230913 07:11:13.564" endtime="20230913 07:11:22.022"/>
</kw>
<msg timestamp="20230913 07:11:22.022" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:13.563" endtime="20230913 07:11:22.022"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:11:22.022" endtime="20230913 07:11:22.023"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:11:22.026" level="INFO">Running command 'cat /tmp/key-42522 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:11:22.029" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:22.029" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 07:11:22.023" endtime="20230913 07:11:22.029"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:22.030" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 07:11:22.030" endtime="20230913 07:11:22.030"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:22.031" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:22.031" endtime="20230913 07:11:22.031"/>
</kw>
<msg timestamp="20230913 07:11:22.031" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230913 07:11:22.023" endtime="20230913 07:11:22.031"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230913 07:11:22.032" endtime="20230913 07:11:22.032"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230913 07:11:22.035" level="INFO">Running command 'rm /tmp/key-42522 2&gt;&amp;1'.</msg>
<msg timestamp="20230913 07:11:22.038" level="INFO">${rc} = 0</msg>
<msg timestamp="20230913 07:11:22.038" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230913 07:11:22.033" endtime="20230913 07:11:22.038"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230913 07:11:22.039" level="INFO"/>
<status status="PASS" starttime="20230913 07:11:22.039" endtime="20230913 07:11:22.039"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230913 07:11:22.040" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230913 07:11:22.040" endtime="20230913 07:11:22.040"/>
</kw>
<status status="PASS" starttime="20230913 07:11:22.032" endtime="20230913 07:11:22.040"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230913 07:11:13.560" endtime="20230913 07:11:22.041"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230913 07:10:52.556" endtime="20230913 07:11:22.042"/>
</suite>
<status status="PASS" starttime="20230913 07:10:04.712" endtime="20230913 07:11:22.044"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
