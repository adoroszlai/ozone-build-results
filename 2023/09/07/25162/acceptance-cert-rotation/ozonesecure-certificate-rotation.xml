<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230907 05:07:39.746" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:05:35.664" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:05:35.706" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:05:35.706" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230907 05:05:35.648" endtime="20230907 05:05:35.706"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:05:35.717" level="INFO">scm</msg>
<status status="PASS" starttime="20230907 05:05:35.706" endtime="20230907 05:05:35.717"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:05:35.718" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:05:35.717" endtime="20230907 05:05:35.718"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.647" endtime="20230907 05:05:35.718"/>
</kw>
<msg timestamp="20230907 05:05:35.719" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:05:35.647" endtime="20230907 05:05:35.719"/>
</kw>
<msg timestamp="20230907 05:05:35.719" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230907 05:05:35.646" endtime="20230907 05:05:35.719"/>
</kw>
<msg timestamp="20230907 05:05:35.764" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230907 05:05:35.641" endtime="20230907 05:05:35.764"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230907 05:05:35.769" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230907 05:05:35.768" endtime="20230907 05:05:35.769"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:05:35.993" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:05:36.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:05:36.124" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:05:35.813" endtime="20230907 05:05:36.124"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:05:36.126" level="INFO"/>
<status status="PASS" starttime="20230907 05:05:36.125" endtime="20230907 05:05:36.126"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:05:36.127" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:05:36.126" endtime="20230907 05:05:36.127"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.804" endtime="20230907 05:05:36.127"/>
</kw>
<msg timestamp="20230907 05:05:36.127" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:05:35.804" endtime="20230907 05:05:36.127"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.796" endtime="20230907 05:05:36.127"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.786" endtime="20230907 05:05:36.127"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.641" endtime="20230907 05:05:36.128"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.640" endtime="20230907 05:05:36.128"/>
</kw>
<status status="PASS" starttime="20230907 05:05:35.639" endtime="20230907 05:05:36.128"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230907 05:05:36.139" level="INFO">${random} = 59OzKJkJPs</msg>
<status status="PASS" starttime="20230907 05:05:36.138" endtime="20230907 05:05:36.139"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:05:36.254" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p 59OzKJkJPs  2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:05:58.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:05:58.606" level="INFO">${output} = 2023-09-07 05:05:45,061 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:05:45,249 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:05:36.172" endtime="20230907 05:05:58.606"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:05:58.608" level="INFO">2023-09-07 05:05:45,061 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:05:45,249 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-07 05:05:45,249 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-07 05:05:45,388 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 59OzKJkJPs and number-of-tests 1
2023-09-07 05:05:45,480 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:46,482 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:47,483 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:48,490 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:49,406 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-07 05:05:49,490 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:49,637 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-07 05:05:50,491 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:50,650 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-07 05:05:50,907 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-07 05:05:51,464 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-07 05:05:51,491 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:52,492 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:53,492 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:54,495 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:55,495 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:56,517 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:05:57,517 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-07 05:05:58,190 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=7637.608733, max=7637.608733, mean=7637.608733, stddev=0.0, median=7637.608733, p75=7637.608733, p95=7637.608733, p98=7637.608733, p99=7637.608733, p999=7637.608733, mean_rate=0.11801528612064748, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-07 05:05:58,196 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 13
2023-09-07 05:05:58,196 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-07 05:05:58,196 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230907 05:05:58.607" endtime="20230907 05:05:58.608"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:05:58.609" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:05:58.608" endtime="20230907 05:05:58.609"/>
</kw>
<status status="PASS" starttime="20230907 05:05:36.143" endtime="20230907 05:05:58.609"/>
</kw>
<msg timestamp="20230907 05:05:58.609" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:05:36.142" endtime="20230907 05:05:58.609"/>
</kw>
<msg timestamp="20230907 05:05:58.610" level="INFO">${result} = 2023-09-07 05:05:45,061 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:05:45,249 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:05:36.141" endtime="20230907 05:05:58.610"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:05:58.610" endtime="20230907 05:05:58.611"/>
</kw>
<status status="PASS" starttime="20230907 05:05:36.139" endtime="20230907 05:05:58.611"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:05:58.617" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p 59OzKJkJPs  2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:11.525" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:11.525" level="INFO">${output} = 2023-09-07 05:06:03,776 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:04,361 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:05:58.614" endtime="20230907 05:06:11.525"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:11.527" level="INFO">2023-09-07 05:06:03,776 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:04,361 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-07 05:06:04,362 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-07 05:06:04,683 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 59OzKJkJPs and number-of-tests 1
2023-09-07 05:06:04,745 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:05,752 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:06,753 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:07,766 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:07,923 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-07 05:06:08,767 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:09,767 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:10,768 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-07 05:06:11,150 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=110.146859, max=110.146859, mean=110.146859, stddev=0.0, median=110.146859, p75=110.146859, p95=110.146859, p98=110.146859, p99=110.146859, p999=110.146859, mean_rate=0.905647217655086, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-07 05:06:11,152 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-07 05:06:11,153 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-07 05:06:11,153 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230907 05:06:11.526" endtime="20230907 05:06:11.527"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:11.528" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:11.527" endtime="20230907 05:06:11.528"/>
</kw>
<status status="PASS" starttime="20230907 05:05:58.614" endtime="20230907 05:06:11.528"/>
</kw>
<msg timestamp="20230907 05:06:11.529" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:05:58.613" endtime="20230907 05:06:11.529"/>
</kw>
<msg timestamp="20230907 05:06:11.529" level="INFO">${result} = 2023-09-07 05:06:03,776 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:04,361 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:05:58.613" endtime="20230907 05:06:11.529"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:06:11.529" endtime="20230907 05:06:11.530"/>
</kw>
<status status="PASS" starttime="20230907 05:05:58.611" endtime="20230907 05:06:11.530"/>
</kw>
<status status="PASS" starttime="20230907 05:05:36.137" endtime="20230907 05:06:11.530"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:11.540" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:15.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:15.036" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230907 05:06:11.535" endtime="20230907 05:06:15.036"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:15.038" level="INFO">40s</msg>
<status status="PASS" starttime="20230907 05:06:15.037" endtime="20230907 05:06:15.038"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:15.039" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:15.038" endtime="20230907 05:06:15.039"/>
</kw>
<status status="PASS" starttime="20230907 05:06:11.534" endtime="20230907 05:06:15.039"/>
</kw>
<msg timestamp="20230907 05:06:15.039" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:11.533" endtime="20230907 05:06:15.040"/>
</kw>
<msg timestamp="20230907 05:06:15.040" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230907 05:06:11.531" endtime="20230907 05:06:15.040"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230907 05:06:15.042" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230907 05:06:15.040" endtime="20230907 05:06:15.042"/>
</kw>
<msg timestamp="20230907 05:06:15.042" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230907 05:06:11.530" endtime="20230907 05:06:15.042"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230907 05:06:15.044" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230907 05:06:15.043" endtime="20230907 05:06:15.044"/>
</kw>
<msg timestamp="20230907 05:06:15.045" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230907 05:06:15.043" endtime="20230907 05:06:15.045"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:15.052" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:15.245" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:15.245" level="INFO">${output} = D97910FA09</msg>
<status status="PASS" starttime="20230907 05:06:15.048" endtime="20230907 05:06:15.245"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:15.247" level="INFO">D97910FA09</msg>
<status status="PASS" starttime="20230907 05:06:15.246" endtime="20230907 05:06:15.249"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:15.250" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:15.250" endtime="20230907 05:06:15.250"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.048" endtime="20230907 05:06:15.251"/>
</kw>
<msg timestamp="20230907 05:06:15.251" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:15.047" endtime="20230907 05:06:15.252"/>
</kw>
<msg timestamp="20230907 05:06:15.253" level="INFO">${certSerial} = D97910FA09</msg>
<status status="PASS" starttime="20230907 05:06:15.046" endtime="20230907 05:06:15.253"/>
</kw>
<msg timestamp="20230907 05:06:15.253" level="INFO">${certId1} = D97910FA09</msg>
<status status="PASS" starttime="20230907 05:06:15.045" endtime="20230907 05:06:15.253"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:15.263" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:15.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:15.428" level="INFO">${output} = D924B67FF4</msg>
<status status="PASS" starttime="20230907 05:06:15.259" endtime="20230907 05:06:15.428"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:15.431" level="INFO">D924B67FF4</msg>
<status status="PASS" starttime="20230907 05:06:15.430" endtime="20230907 05:06:15.431"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:15.432" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:15.432" endtime="20230907 05:06:15.432"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.258" endtime="20230907 05:06:15.432"/>
</kw>
<msg timestamp="20230907 05:06:15.433" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:15.258" endtime="20230907 05:06:15.433"/>
</kw>
<msg timestamp="20230907 05:06:15.433" level="INFO">${certSerial} = D924B67FF4</msg>
<status status="PASS" starttime="20230907 05:06:15.256" endtime="20230907 05:06:15.433"/>
</kw>
<msg timestamp="20230907 05:06:15.434" level="INFO">${newCertId} = D924B67FF4</msg>
<status status="PASS" starttime="20230907 05:06:15.255" endtime="20230907 05:06:15.434"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230907 05:06:15.434" endtime="20230907 05:06:15.435"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.254" endtime="20230907 05:06:15.435"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.253" endtime="20230907 05:06:15.435"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230907 05:06:15.439" level="INFO">${random} = x4svGPt986</msg>
<status status="PASS" starttime="20230907 05:06:15.437" endtime="20230907 05:06:15.439"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:15.458" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p x4svGPt986  2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:27.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:27.880" level="INFO">${output} = 2023-09-07 05:06:18,883 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:19,123 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:06:15.449" endtime="20230907 05:06:27.880"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:27.882" level="INFO">2023-09-07 05:06:18,883 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:19,123 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-07 05:06:19,123 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-07 05:06:19,268 [main] INFO freon.BaseFreonGenerator: Executing test with prefix x4svGPt986 and number-of-tests 1
2023-09-07 05:06:19,350 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:20,353 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:21,354 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:22,354 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:23,146 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-07 05:06:23,355 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:23,406 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-07 05:06:24,357 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:24,609 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-07 05:06:25,359 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:26,363 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:27,364 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-07 05:06:27,517 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=3989.392892, max=3989.392892, mean=3989.392892, stddev=0.0, median=3989.392892, p75=3989.392892, p95=3989.392892, p98=3989.392892, p99=3989.392892, p999=3989.392892, mean_rate=0.20453451899583214, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-07 05:06:27,519 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-07 05:06:27,519 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-07 05:06:27,520 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230907 05:06:27.881" endtime="20230907 05:06:27.882"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:27.882" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:27.882" endtime="20230907 05:06:27.882"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.448" endtime="20230907 05:06:27.883"/>
</kw>
<msg timestamp="20230907 05:06:27.883" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:15.446" endtime="20230907 05:06:27.883"/>
</kw>
<msg timestamp="20230907 05:06:27.883" level="INFO">${result} = 2023-09-07 05:06:18,883 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:19,123 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:06:15.445" endtime="20230907 05:06:27.883"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:06:27.883" endtime="20230907 05:06:27.884"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.439" endtime="20230907 05:06:27.884"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:27.891" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p x4svGPt986  2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:39.370" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:39.370" level="INFO">${output} = 2023-09-07 05:06:31,504 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:31,661 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:06:27.888" endtime="20230907 05:06:39.371"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:39.372" level="INFO">2023-09-07 05:06:31,504 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:31,661 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-07 05:06:31,661 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-07 05:06:31,752 [main] INFO freon.BaseFreonGenerator: Executing test with prefix x4svGPt986 and number-of-tests 1
2023-09-07 05:06:31,830 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:32,832 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:33,834 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:34,834 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:35,835 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:36,123 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-07 05:06:36,835 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:37,836 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-07 05:06:38,837 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-07 05:06:38,983 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=75.539191, max=75.539191, mean=75.539191, stddev=0.0, median=75.539191, p75=75.539191, p95=75.539191, p98=75.539191, p99=75.539191, p999=75.539191, mean_rate=0.9097114911138545, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-07 05:06:38,984 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-07 05:06:38,985 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-07 05:06:38,985 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230907 05:06:39.371" endtime="20230907 05:06:39.372"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:39.373" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:39.372" endtime="20230907 05:06:39.373"/>
</kw>
<status status="PASS" starttime="20230907 05:06:27.887" endtime="20230907 05:06:39.374"/>
</kw>
<msg timestamp="20230907 05:06:39.374" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:27.887" endtime="20230907 05:06:39.374"/>
</kw>
<msg timestamp="20230907 05:06:39.374" level="INFO">${result} = 2023-09-07 05:06:31,504 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-07 05:06:31,661 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230907 05:06:27.886" endtime="20230907 05:06:39.374"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:06:39.374" endtime="20230907 05:06:39.375"/>
</kw>
<status status="PASS" starttime="20230907 05:06:27.885" endtime="20230907 05:06:39.375"/>
</kw>
<status status="PASS" starttime="20230907 05:06:15.436" endtime="20230907 05:06:39.375"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230907 05:05:36.129" endtime="20230907 05:06:39.375"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230907 05:05:35.363" endtime="20230907 05:06:39.377"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:39.396" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:48.914" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:48.914" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:39.392" endtime="20230907 05:06:48.914"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:48.916" level="INFO"/>
<status status="PASS" starttime="20230907 05:06:48.915" endtime="20230907 05:06:48.916"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:48.917" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:48.916" endtime="20230907 05:06:48.917"/>
</kw>
<status status="PASS" starttime="20230907 05:06:39.392" endtime="20230907 05:06:48.918"/>
</kw>
<msg timestamp="20230907 05:06:48.918" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:39.391" endtime="20230907 05:06:48.918"/>
</kw>
<msg timestamp="20230907 05:06:48.918" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:39.391" endtime="20230907 05:06:48.918"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:06:48.918" endtime="20230907 05:06:48.919"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:48.923" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:06:57.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:57.244" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:48.921" endtime="20230907 05:06:57.244"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:57.248" level="INFO"/>
<status status="PASS" starttime="20230907 05:06:57.247" endtime="20230907 05:06:57.248"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:57.249" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:57.248" endtime="20230907 05:06:57.250"/>
</kw>
<status status="PASS" starttime="20230907 05:06:48.920" endtime="20230907 05:06:57.250"/>
</kw>
<msg timestamp="20230907 05:06:57.250" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:48.920" endtime="20230907 05:06:57.250"/>
</kw>
<msg timestamp="20230907 05:06:57.250" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:48.919" endtime="20230907 05:06:57.250"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:06:57.251" endtime="20230907 05:06:57.251"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230907 05:06:39.390" endtime="20230907 05:06:57.252"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:57.259" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230907 05:06:57.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:06:57.261" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:57.256" endtime="20230907 05:06:57.261"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:06:57.263" level="INFO"/>
<status status="PASS" starttime="20230907 05:06:57.262" endtime="20230907 05:06:57.263"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:06:57.264" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:06:57.263" endtime="20230907 05:06:57.264"/>
</kw>
<status status="PASS" starttime="20230907 05:06:57.255" endtime="20230907 05:06:57.265"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:06:57.273" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:07:09.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:07:09.359" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:57.267" endtime="20230907 05:07:09.359"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:07:09.360" level="INFO"/>
<status status="PASS" starttime="20230907 05:07:09.359" endtime="20230907 05:07:09.360"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:07:09.361" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:07:09.361" endtime="20230907 05:07:09.361"/>
</kw>
<status status="PASS" starttime="20230907 05:06:57.266" endtime="20230907 05:07:09.362"/>
</kw>
<msg timestamp="20230907 05:07:09.362" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:06:57.266" endtime="20230907 05:07:09.362"/>
</kw>
<msg timestamp="20230907 05:07:09.362" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:06:57.265" endtime="20230907 05:07:09.362"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:07:09.362" endtime="20230907 05:07:09.363"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:07:09.368" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:07:09.370" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:07:09.370" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:07:09.364" endtime="20230907 05:07:09.370"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:07:09.371" level="INFO"/>
<status status="PASS" starttime="20230907 05:07:09.371" endtime="20230907 05:07:09.372"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:07:09.372" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:07:09.372" endtime="20230907 05:07:09.372"/>
</kw>
<status status="PASS" starttime="20230907 05:07:09.363" endtime="20230907 05:07:09.373"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230907 05:06:57.253" endtime="20230907 05:07:09.373"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230907 05:07:09.376" level="INFO">${random} = 37257</msg>
<status status="PASS" starttime="20230907 05:07:09.376" endtime="20230907 05:07:09.376"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:07:09.381" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-37257 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:07:21.694" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:07:21.694" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:07:09.378" endtime="20230907 05:07:21.694"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:07:21.696" level="INFO"/>
<status status="PASS" starttime="20230907 05:07:21.695" endtime="20230907 05:07:21.696"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:07:21.697" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:07:21.696" endtime="20230907 05:07:21.697"/>
</kw>
<status status="PASS" starttime="20230907 05:07:09.378" endtime="20230907 05:07:21.698"/>
</kw>
<msg timestamp="20230907 05:07:21.698" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230907 05:07:09.377" endtime="20230907 05:07:21.698"/>
</kw>
<msg timestamp="20230907 05:07:21.698" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:07:09.376" endtime="20230907 05:07:21.698"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:07:21.698" endtime="20230907 05:07:21.699"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:07:21.703" level="INFO">Running command 'cat /tmp/key-37257 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:07:21.706" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:07:21.706" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230907 05:07:21.700" endtime="20230907 05:07:21.706"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:07:21.708" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230907 05:07:21.707" endtime="20230907 05:07:21.708"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:07:21.709" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:07:21.708" endtime="20230907 05:07:21.709"/>
</kw>
<msg timestamp="20230907 05:07:21.709" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230907 05:07:21.699" endtime="20230907 05:07:21.709"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230907 05:07:21.709" endtime="20230907 05:07:21.710"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230907 05:07:21.713" level="INFO">Running command 'rm /tmp/key-37257 2&gt;&amp;1'.</msg>
<msg timestamp="20230907 05:07:21.716" level="INFO">${rc} = 0</msg>
<msg timestamp="20230907 05:07:21.716" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230907 05:07:21.711" endtime="20230907 05:07:21.716"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230907 05:07:21.718" level="INFO"/>
<status status="PASS" starttime="20230907 05:07:21.717" endtime="20230907 05:07:21.718"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230907 05:07:21.719" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230907 05:07:21.718" endtime="20230907 05:07:21.719"/>
</kw>
<status status="PASS" starttime="20230907 05:07:21.710" endtime="20230907 05:07:21.719"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230907 05:07:09.374" endtime="20230907 05:07:21.719"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230907 05:06:39.380" endtime="20230907 05:07:21.721"/>
</suite>
<status status="PASS" starttime="20230907 05:05:34.900" endtime="20230907 05:07:21.724"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
