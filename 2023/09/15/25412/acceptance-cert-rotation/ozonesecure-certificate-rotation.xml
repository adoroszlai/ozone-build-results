<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230915 14:37:02.741" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:29.131" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:29.142" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:29.142" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230915 14:35:29.128" endtime="20230915 14:35:29.142"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:29.143" level="INFO">scm</msg>
<status status="PASS" starttime="20230915 14:35:29.143" endtime="20230915 14:35:29.144"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:29.144" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:29.144" endtime="20230915 14:35:29.144"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.127" endtime="20230915 14:35:29.144"/>
</kw>
<msg timestamp="20230915 14:35:29.144" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:29.127" endtime="20230915 14:35:29.145"/>
</kw>
<msg timestamp="20230915 14:35:29.145" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230915 14:35:29.126" endtime="20230915 14:35:29.145"/>
</kw>
<msg timestamp="20230915 14:35:29.145" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 14:35:29.126" endtime="20230915 14:35:29.145"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230915 14:35:29.146" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 14:35:29.145" endtime="20230915 14:35:29.146"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:29.152" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:29.197" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:29.197" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:35:29.149" endtime="20230915 14:35:29.197"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:29.198" level="INFO"/>
<status status="PASS" starttime="20230915 14:35:29.198" endtime="20230915 14:35:29.198"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:29.199" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:29.199" endtime="20230915 14:35:29.199"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.149" endtime="20230915 14:35:29.201"/>
</kw>
<msg timestamp="20230915 14:35:29.201" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:29.148" endtime="20230915 14:35:29.201"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.146" endtime="20230915 14:35:29.201"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.146" endtime="20230915 14:35:29.201"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.126" endtime="20230915 14:35:29.201"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.125" endtime="20230915 14:35:29.201"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.124" endtime="20230915 14:35:29.201"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 14:35:29.204" level="INFO">${random} = SHBGZFBUaO</msg>
<status status="PASS" starttime="20230915 14:35:29.203" endtime="20230915 14:35:29.204"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:29.216" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p SHBGZFBUaO  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:43.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:43.803" level="INFO">${output} = 2023-09-15 14:35:33,794 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:35:33,979 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:35:29.210" endtime="20230915 14:35:43.803"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:43.804" level="INFO">2023-09-15 14:35:33,794 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:35:33,979 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 14:35:33,979 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 14:35:34,067 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SHBGZFBUaO and number-of-tests 1
2023-09-15 14:35:34,123 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:35,126 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:36,126 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:36,773 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-15 14:35:37,012 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-15 14:35:37,133 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:38,135 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:39,196 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:39,582 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 14:35:39,690 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 14:35:40,096 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 14:35:40,196 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:41,196 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:42,198 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:43,198 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 14:35:43,439 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5857.817984, max=5857.817984, mean=5857.817984, stddev=0.0, median=5857.817984, p75=5857.817984, p95=5857.817984, p98=5857.817984, p99=5857.817984, p999=5857.817984, mean_rate=0.16169367972213614, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 14:35:43,439 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-09-15 14:35:43,440 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 14:35:43,440 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 14:35:43.803" endtime="20230915 14:35:43.804"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:43.805" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:43.804" endtime="20230915 14:35:43.805"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.209" endtime="20230915 14:35:43.805"/>
</kw>
<msg timestamp="20230915 14:35:43.805" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:29.206" endtime="20230915 14:35:43.805"/>
</kw>
<msg timestamp="20230915 14:35:43.806" level="INFO">${result} = 2023-09-15 14:35:33,794 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:35:33,979 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:35:29.205" endtime="20230915 14:35:43.806"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:35:43.806" endtime="20230915 14:35:43.806"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.204" endtime="20230915 14:35:43.807"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:43.813" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p SHBGZFBUaO  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:55.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:55.903" level="INFO">${output} = 2023-09-15 14:35:47,241 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:35:47,590 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:35:43.810" endtime="20230915 14:35:55.903"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:55.904" level="INFO">2023-09-15 14:35:47,241 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:35:47,590 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 14:35:47,590 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 14:35:48,069 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SHBGZFBUaO and number-of-tests 1
2023-09-15 14:35:48,227 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:49,231 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:50,231 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:51,232 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:52,232 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:52,437 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 14:35:53,233 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:54,233 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:35:55,234 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 14:35:55,511 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=108.172391, max=108.172391, mean=108.172391, stddev=0.0, median=108.172391, p75=108.172391, p95=108.172391, p98=108.172391, p99=108.172391, p999=108.172391, mean_rate=0.7130574560099543, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 14:35:55,512 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-15 14:35:55,512 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 14:35:55,512 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 14:35:55.904" endtime="20230915 14:35:55.904"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:55.905" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:55.905" endtime="20230915 14:35:55.905"/>
</kw>
<status status="PASS" starttime="20230915 14:35:43.809" endtime="20230915 14:35:55.905"/>
</kw>
<msg timestamp="20230915 14:35:55.905" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:43.809" endtime="20230915 14:35:55.906"/>
</kw>
<msg timestamp="20230915 14:35:55.906" level="INFO">${result} = 2023-09-15 14:35:47,241 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:35:47,590 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:35:43.808" endtime="20230915 14:35:55.906"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:35:55.906" endtime="20230915 14:35:55.906"/>
</kw>
<status status="PASS" starttime="20230915 14:35:43.807" endtime="20230915 14:35:55.907"/>
</kw>
<status status="PASS" starttime="20230915 14:35:29.203" endtime="20230915 14:35:55.907"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:55.911" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:58.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:58.379" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230915 14:35:55.908" endtime="20230915 14:35:58.379"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:58.381" level="INFO">40s</msg>
<status status="PASS" starttime="20230915 14:35:58.380" endtime="20230915 14:35:58.381"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:58.381" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:58.381" endtime="20230915 14:35:58.381"/>
</kw>
<status status="PASS" starttime="20230915 14:35:55.908" endtime="20230915 14:35:58.382"/>
</kw>
<msg timestamp="20230915 14:35:58.382" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:55.908" endtime="20230915 14:35:58.382"/>
</kw>
<msg timestamp="20230915 14:35:58.382" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230915 14:35:55.907" endtime="20230915 14:35:58.382"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230915 14:35:58.384" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230915 14:35:58.383" endtime="20230915 14:35:58.384"/>
</kw>
<msg timestamp="20230915 14:35:58.384" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230915 14:35:55.907" endtime="20230915 14:35:58.384"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230915 14:35:58.385" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 14:35:58.385" endtime="20230915 14:35:58.386"/>
</kw>
<msg timestamp="20230915 14:35:58.386" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 14:35:58.384" endtime="20230915 14:35:58.386"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:58.390" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:58.506" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:58.506" level="INFO">${output} = FA35F0901C</msg>
<status status="PASS" starttime="20230915 14:35:58.388" endtime="20230915 14:35:58.506"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:58.508" level="INFO">FA35F0901C</msg>
<status status="PASS" starttime="20230915 14:35:58.507" endtime="20230915 14:35:58.508"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:58.509" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:58.508" endtime="20230915 14:35:58.509"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.387" endtime="20230915 14:35:58.509"/>
</kw>
<msg timestamp="20230915 14:35:58.509" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:58.387" endtime="20230915 14:35:58.509"/>
</kw>
<msg timestamp="20230915 14:35:58.510" level="INFO">${certSerial} = FA35F0901C</msg>
<status status="PASS" starttime="20230915 14:35:58.386" endtime="20230915 14:35:58.510"/>
</kw>
<msg timestamp="20230915 14:35:58.510" level="INFO">${certId1} = FA35F0901C</msg>
<status status="PASS" starttime="20230915 14:35:58.386" endtime="20230915 14:35:58.510"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:58.518" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:35:58.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:35:58.631" level="INFO">${output} = F98B7687A8</msg>
<status status="PASS" starttime="20230915 14:35:58.514" endtime="20230915 14:35:58.631"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:35:58.633" level="INFO">F98B7687A8</msg>
<status status="PASS" starttime="20230915 14:35:58.632" endtime="20230915 14:35:58.633"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:35:58.633" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:35:58.633" endtime="20230915 14:35:58.633"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.514" endtime="20230915 14:35:58.634"/>
</kw>
<msg timestamp="20230915 14:35:58.634" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:58.513" endtime="20230915 14:35:58.634"/>
</kw>
<msg timestamp="20230915 14:35:58.634" level="INFO">${certSerial} = F98B7687A8</msg>
<status status="PASS" starttime="20230915 14:35:58.513" endtime="20230915 14:35:58.634"/>
</kw>
<msg timestamp="20230915 14:35:58.634" level="INFO">${newCertId} = F98B7687A8</msg>
<status status="PASS" starttime="20230915 14:35:58.512" endtime="20230915 14:35:58.634"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230915 14:35:58.635" endtime="20230915 14:35:58.635"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.511" endtime="20230915 14:35:58.635"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.510" endtime="20230915 14:35:58.635"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 14:35:58.637" level="INFO">${random} = w3lsSL6Hyu</msg>
<status status="PASS" starttime="20230915 14:35:58.636" endtime="20230915 14:35:58.637"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:35:58.643" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p w3lsSL6Hyu  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:08.236" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:08.236" level="INFO">${output} = 2023-09-15 14:36:01,605 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:36:01,786 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:35:58.640" endtime="20230915 14:36:08.236"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:08.238" level="INFO">2023-09-15 14:36:01,605 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:36:01,786 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 14:36:01,786 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 14:36:01,881 [main] INFO freon.BaseFreonGenerator: Executing test with prefix w3lsSL6Hyu and number-of-tests 1
2023-09-15 14:36:01,942 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:02,945 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:03,946 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:04,820 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 14:36:04,868 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 14:36:04,946 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:05,157 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 14:36:05,946 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:06,947 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 14:36:07,801 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2020.958055, max=2020.958055, mean=2020.958055, stddev=0.0, median=2020.958055, p75=2020.958055, p95=2020.958055, p98=2020.958055, p99=2020.958055, p999=2020.958055, mean_rate=0.28091460201969715, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 14:36:07,803 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-15 14:36:07,803 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 14:36:07,803 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 14:36:08.237" endtime="20230915 14:36:08.238"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:08.239" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:08.238" endtime="20230915 14:36:08.239"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.640" endtime="20230915 14:36:08.239"/>
</kw>
<msg timestamp="20230915 14:36:08.239" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:35:58.639" endtime="20230915 14:36:08.240"/>
</kw>
<msg timestamp="20230915 14:36:08.240" level="INFO">${result} = 2023-09-15 14:36:01,605 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:36:01,786 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:35:58.639" endtime="20230915 14:36:08.240"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:08.240" endtime="20230915 14:36:08.241"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.637" endtime="20230915 14:36:08.241"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:08.247" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p w3lsSL6Hyu  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:16.819" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:16.819" level="INFO">${output} = 2023-09-15 14:36:11,005 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:36:11,191 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:36:08.244" endtime="20230915 14:36:16.819"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:16.821" level="INFO">2023-09-15 14:36:11,005 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:36:11,191 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 14:36:11,191 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 14:36:11,289 [main] INFO freon.BaseFreonGenerator: Executing test with prefix w3lsSL6Hyu and number-of-tests 1
2023-09-15 14:36:11,353 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:12,357 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:13,358 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:13,696 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 14:36:14,358 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:15,359 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 14:36:16,359 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 14:36:16,457 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=59.207952, max=59.207952, mean=59.207952, stddev=0.0, median=59.207952, p75=59.207952, p95=59.207952, p98=59.207952, p99=59.207952, p999=59.207952, mean_rate=0.9221921152113054, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 14:36:16,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-09-15 14:36:16,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 14:36:16,458 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 14:36:16.820" endtime="20230915 14:36:16.821"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:16.821" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:16.821" endtime="20230915 14:36:16.821"/>
</kw>
<status status="PASS" starttime="20230915 14:36:08.243" endtime="20230915 14:36:16.822"/>
</kw>
<msg timestamp="20230915 14:36:16.822" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:36:08.243" endtime="20230915 14:36:16.822"/>
</kw>
<msg timestamp="20230915 14:36:16.822" level="INFO">${result} = 2023-09-15 14:36:11,005 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 14:36:11,191 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 14:36:08.242" endtime="20230915 14:36:16.822"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:16.822" endtime="20230915 14:36:16.823"/>
</kw>
<status status="PASS" starttime="20230915 14:36:08.241" endtime="20230915 14:36:16.823"/>
</kw>
<status status="PASS" starttime="20230915 14:35:58.636" endtime="20230915 14:36:16.823"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 14:35:29.202" endtime="20230915 14:36:16.823"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230915 14:35:28.990" endtime="20230915 14:36:16.825"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:16.838" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:23.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:23.495" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:16.835" endtime="20230915 14:36:23.495"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:23.497" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:23.496" endtime="20230915 14:36:23.497"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:23.497" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:23.497" endtime="20230915 14:36:23.497"/>
</kw>
<status status="PASS" starttime="20230915 14:36:16.835" endtime="20230915 14:36:23.498"/>
</kw>
<msg timestamp="20230915 14:36:23.498" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:36:16.834" endtime="20230915 14:36:23.498"/>
</kw>
<msg timestamp="20230915 14:36:23.498" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:16.834" endtime="20230915 14:36:23.498"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:23.498" endtime="20230915 14:36:23.499"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:23.503" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:29.403" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:29.403" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:23.500" endtime="20230915 14:36:29.403"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:29.404" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:29.403" endtime="20230915 14:36:29.404"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:29.405" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:29.405" endtime="20230915 14:36:29.406"/>
</kw>
<status status="PASS" starttime="20230915 14:36:23.500" endtime="20230915 14:36:29.406"/>
</kw>
<msg timestamp="20230915 14:36:29.406" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:36:23.499" endtime="20230915 14:36:29.406"/>
</kw>
<msg timestamp="20230915 14:36:29.406" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:23.499" endtime="20230915 14:36:29.406"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:29.406" endtime="20230915 14:36:29.407"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 14:36:16.833" endtime="20230915 14:36:29.407"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:29.414" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230915 14:36:29.417" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:29.417" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:29.411" endtime="20230915 14:36:29.417"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:29.418" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:29.417" endtime="20230915 14:36:29.418"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:29.419" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:29.418" endtime="20230915 14:36:29.419"/>
</kw>
<status status="PASS" starttime="20230915 14:36:29.410" endtime="20230915 14:36:29.419"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:29.425" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:37.928" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:37.928" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:29.422" endtime="20230915 14:36:37.928"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:37.929" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:37.929" endtime="20230915 14:36:37.929"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:37.930" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:37.930" endtime="20230915 14:36:37.930"/>
</kw>
<status status="PASS" starttime="20230915 14:36:29.421" endtime="20230915 14:36:37.930"/>
</kw>
<msg timestamp="20230915 14:36:37.930" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:36:29.420" endtime="20230915 14:36:37.931"/>
</kw>
<msg timestamp="20230915 14:36:37.931" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:29.419" endtime="20230915 14:36:37.931"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:37.931" endtime="20230915 14:36:37.931"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:37.935" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:37.939" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:37.939" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:37.932" endtime="20230915 14:36:37.939"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:37.940" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:37.940" endtime="20230915 14:36:37.940"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:37.941" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:37.940" endtime="20230915 14:36:37.941"/>
</kw>
<status status="PASS" starttime="20230915 14:36:37.932" endtime="20230915 14:36:37.941"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 14:36:29.409" endtime="20230915 14:36:37.942"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 14:36:37.944" level="INFO">${random} = 95570</msg>
<status status="PASS" starttime="20230915 14:36:37.944" endtime="20230915 14:36:37.944"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:37.949" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-95570 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:45.911" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:45.911" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:37.946" endtime="20230915 14:36:45.911"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:45.913" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:45.912" endtime="20230915 14:36:45.913"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:45.913" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:45.913" endtime="20230915 14:36:45.914"/>
</kw>
<status status="PASS" starttime="20230915 14:36:37.945" endtime="20230915 14:36:45.914"/>
</kw>
<msg timestamp="20230915 14:36:45.914" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 14:36:37.945" endtime="20230915 14:36:45.914"/>
</kw>
<msg timestamp="20230915 14:36:45.914" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:37.944" endtime="20230915 14:36:45.914"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:45.914" endtime="20230915 14:36:45.915"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:45.918" level="INFO">Running command 'cat /tmp/key-95570 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:45.921" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:45.921" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 14:36:45.915" endtime="20230915 14:36:45.921"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:45.922" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 14:36:45.922" endtime="20230915 14:36:45.922"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:45.923" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:45.922" endtime="20230915 14:36:45.923"/>
</kw>
<msg timestamp="20230915 14:36:45.923" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 14:36:45.915" endtime="20230915 14:36:45.923"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 14:36:45.923" endtime="20230915 14:36:45.924"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 14:36:45.927" level="INFO">Running command 'rm /tmp/key-95570 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 14:36:45.930" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 14:36:45.930" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 14:36:45.925" endtime="20230915 14:36:45.930"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 14:36:45.931" level="INFO"/>
<status status="PASS" starttime="20230915 14:36:45.930" endtime="20230915 14:36:45.931"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 14:36:45.932" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 14:36:45.931" endtime="20230915 14:36:45.932"/>
</kw>
<status status="PASS" starttime="20230915 14:36:45.924" endtime="20230915 14:36:45.932"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 14:36:37.943" endtime="20230915 14:36:45.932"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230915 14:36:16.826" endtime="20230915 14:36:45.933"/>
</suite>
<status status="PASS" starttime="20230915 14:35:28.876" endtime="20230915 14:36:45.936"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
