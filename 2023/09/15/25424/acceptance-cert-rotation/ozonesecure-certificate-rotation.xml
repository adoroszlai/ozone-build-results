<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230915 17:44:03.914" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:41:54.849" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:41:54.856" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:41:54.856" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230915 17:41:54.845" endtime="20230915 17:41:54.856"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:41:54.857" level="INFO">scm</msg>
<status status="PASS" starttime="20230915 17:41:54.857" endtime="20230915 17:41:54.858"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:41:54.858" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:41:54.858" endtime="20230915 17:41:54.859"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.845" endtime="20230915 17:41:54.859"/>
</kw>
<msg timestamp="20230915 17:41:54.859" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:41:54.844" endtime="20230915 17:41:54.859"/>
</kw>
<msg timestamp="20230915 17:41:54.860" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230915 17:41:54.843" endtime="20230915 17:41:54.860"/>
</kw>
<msg timestamp="20230915 17:41:54.860" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 17:41:54.843" endtime="20230915 17:41:54.861"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230915 17:41:54.861" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 17:41:54.861" endtime="20230915 17:41:54.861"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:41:54.870" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:41:55.185" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:41:55.185" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:41:54.868" endtime="20230915 17:41:55.185"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:41:55.187" level="INFO"/>
<status status="PASS" starttime="20230915 17:41:55.186" endtime="20230915 17:41:55.187"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:41:55.189" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:41:55.187" endtime="20230915 17:41:55.189"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.867" endtime="20230915 17:41:55.189"/>
</kw>
<msg timestamp="20230915 17:41:55.189" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:41:54.867" endtime="20230915 17:41:55.189"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.862" endtime="20230915 17:41:55.191"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.862" endtime="20230915 17:41:55.191"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.842" endtime="20230915 17:41:55.192"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.841" endtime="20230915 17:41:55.192"/>
</kw>
<status status="PASS" starttime="20230915 17:41:54.841" endtime="20230915 17:41:55.192"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 17:41:55.199" level="INFO">${random} = 1COQoI9D0U</msg>
<status status="PASS" starttime="20230915 17:41:55.198" endtime="20230915 17:41:55.199"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:41:55.217" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p 1COQoI9D0U  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:14.185" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:14.185" level="INFO">${output} = 2023-09-15 17:42:00,041 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:00,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:41:55.210" endtime="20230915 17:42:14.185"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:14.187" level="INFO">2023-09-15 17:42:00,041 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:00,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 17:42:00,277 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 17:42:00,503 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 1COQoI9D0U and number-of-tests 1
2023-09-15 17:42:00,615 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:01,637 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:02,638 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:03,638 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:04,249 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-15 17:42:04,331 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-15 17:42:04,644 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:05,498 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 17:42:05,644 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:05,720 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 17:42:06,646 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:07,028 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 17:42:07,646 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:08,650 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:09,651 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:10,656 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:11,657 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:12,657 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:13,658 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 17:42:13,806 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=8346.683498, max=8346.683498, mean=8346.683498, stddev=0.0, median=8346.683498, p75=8346.683498, p95=8346.683498, p98=8346.683498, p99=8346.683498, p999=8346.683498, mean_rate=0.10619842034121042, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 17:42:13,814 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 13
2023-09-15 17:42:13,814 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 17:42:13,814 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 17:42:14.186" endtime="20230915 17:42:14.187"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:14.188" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:14.188" endtime="20230915 17:42:14.189"/>
</kw>
<status status="PASS" starttime="20230915 17:41:55.208" endtime="20230915 17:42:14.189"/>
</kw>
<msg timestamp="20230915 17:42:14.189" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:41:55.208" endtime="20230915 17:42:14.189"/>
</kw>
<msg timestamp="20230915 17:42:14.189" level="INFO">${result} = 2023-09-15 17:42:00,041 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:00,277 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:41:55.206" endtime="20230915 17:42:14.190"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:42:14.190" endtime="20230915 17:42:14.191"/>
</kw>
<status status="PASS" starttime="20230915 17:41:55.202" endtime="20230915 17:42:14.191"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:14.199" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p 1COQoI9D0U  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:27.047" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:27.047" level="INFO">${output} = 2023-09-15 17:42:17,842 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:18,005 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:42:14.195" endtime="20230915 17:42:27.047"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:27.049" level="INFO">2023-09-15 17:42:17,842 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:18,005 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 17:42:18,005 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 17:42:18,165 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 1COQoI9D0U and number-of-tests 1
2023-09-15 17:42:18,340 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:19,363 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:20,366 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:21,367 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:22,367 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:23,236 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 17:42:23,368 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:24,368 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:25,370 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:26,371 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 17:42:26,676 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=157.08794, max=157.08794, mean=157.08794, stddev=0.0, median=157.08794, p75=157.08794, p95=157.08794, p98=157.08794, p99=157.08794, p999=157.08794, mean_rate=0.8701715196126514, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 17:42:26,676 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-15 17:42:26,680 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 17:42:26,680 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 17:42:27.048" endtime="20230915 17:42:27.049"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:27.050" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:27.049" endtime="20230915 17:42:27.050"/>
</kw>
<status status="PASS" starttime="20230915 17:42:14.195" endtime="20230915 17:42:27.050"/>
</kw>
<msg timestamp="20230915 17:42:27.051" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:14.194" endtime="20230915 17:42:27.051"/>
</kw>
<msg timestamp="20230915 17:42:27.051" level="INFO">${result} = 2023-09-15 17:42:17,842 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:18,005 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:42:14.193" endtime="20230915 17:42:27.051"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:42:27.051" endtime="20230915 17:42:27.052"/>
</kw>
<status status="PASS" starttime="20230915 17:42:14.192" endtime="20230915 17:42:27.052"/>
</kw>
<status status="PASS" starttime="20230915 17:41:55.197" endtime="20230915 17:42:27.052"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:27.059" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:30.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:30.476" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230915 17:42:27.055" endtime="20230915 17:42:30.476"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:30.477" level="INFO">40s</msg>
<status status="PASS" starttime="20230915 17:42:30.476" endtime="20230915 17:42:30.478"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:30.479" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:30.478" endtime="20230915 17:42:30.479"/>
</kw>
<status status="PASS" starttime="20230915 17:42:27.055" endtime="20230915 17:42:30.479"/>
</kw>
<msg timestamp="20230915 17:42:30.479" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:27.054" endtime="20230915 17:42:30.480"/>
</kw>
<msg timestamp="20230915 17:42:30.480" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230915 17:42:27.053" endtime="20230915 17:42:30.480"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230915 17:42:30.482" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230915 17:42:30.480" endtime="20230915 17:42:30.482"/>
</kw>
<msg timestamp="20230915 17:42:30.482" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230915 17:42:27.052" endtime="20230915 17:42:30.482"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230915 17:42:30.484" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 17:42:30.484" endtime="20230915 17:42:30.485"/>
</kw>
<msg timestamp="20230915 17:42:30.485" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 17:42:30.483" endtime="20230915 17:42:30.485"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:30.491" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:30.894" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:30.894" level="INFO">${output} = BB8ED71796</msg>
<status status="PASS" starttime="20230915 17:42:30.487" endtime="20230915 17:42:30.894"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:30.896" level="INFO">BB8ED71796</msg>
<status status="PASS" starttime="20230915 17:42:30.895" endtime="20230915 17:42:30.896"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:30.897" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:30.896" endtime="20230915 17:42:30.897"/>
</kw>
<status status="PASS" starttime="20230915 17:42:30.487" endtime="20230915 17:42:30.897"/>
</kw>
<msg timestamp="20230915 17:42:30.897" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:30.486" endtime="20230915 17:42:30.897"/>
</kw>
<msg timestamp="20230915 17:42:30.897" level="INFO">${certSerial} = BB8ED71796</msg>
<status status="PASS" starttime="20230915 17:42:30.486" endtime="20230915 17:42:30.897"/>
</kw>
<msg timestamp="20230915 17:42:30.898" level="INFO">${certId1} = BB8ED71796</msg>
<status status="PASS" starttime="20230915 17:42:30.485" endtime="20230915 17:42:30.898"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:30.906" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:31.220" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:31.220" level="INFO">${output} = BC0DE944E5</msg>
<status status="PASS" starttime="20230915 17:42:30.903" endtime="20230915 17:42:31.220"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:31.222" level="INFO">BC0DE944E5</msg>
<status status="PASS" starttime="20230915 17:42:31.221" endtime="20230915 17:42:31.223"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:31.223" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:31.223" endtime="20230915 17:42:31.224"/>
</kw>
<status status="PASS" starttime="20230915 17:42:30.902" endtime="20230915 17:42:31.224"/>
</kw>
<msg timestamp="20230915 17:42:31.224" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:30.901" endtime="20230915 17:42:31.225"/>
</kw>
<msg timestamp="20230915 17:42:31.225" level="INFO">${certSerial} = BC0DE944E5</msg>
<status status="PASS" starttime="20230915 17:42:30.901" endtime="20230915 17:42:31.225"/>
</kw>
<msg timestamp="20230915 17:42:31.225" level="INFO">${newCertId} = BC0DE944E5</msg>
<status status="PASS" starttime="20230915 17:42:30.900" endtime="20230915 17:42:31.225"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230915 17:42:31.226" endtime="20230915 17:42:31.226"/>
</kw>
<status status="PASS" starttime="20230915 17:42:30.899" endtime="20230915 17:42:31.226"/>
</kw>
<status status="PASS" starttime="20230915 17:42:30.898" endtime="20230915 17:42:31.226"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 17:42:31.229" level="INFO">${random} = WsQ6x1VF7B</msg>
<status status="PASS" starttime="20230915 17:42:31.227" endtime="20230915 17:42:31.229"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:31.237" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p WsQ6x1VF7B  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:44.125" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:44.125" level="INFO">${output} = 2023-09-15 17:42:35,062 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:35,310 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:42:31.234" endtime="20230915 17:42:44.125"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:44.127" level="INFO">2023-09-15 17:42:35,062 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:35,310 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 17:42:35,310 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 17:42:35,464 [main] INFO freon.BaseFreonGenerator: Executing test with prefix WsQ6x1VF7B and number-of-tests 1
2023-09-15 17:42:35,572 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:36,580 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:37,580 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:38,581 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:39,586 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:40,587 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:40,890 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 17:42:40,987 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 17:42:41,540 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 17:42:41,587 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:42,588 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:43,589 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 17:42:43,716 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2789.988632, max=2789.988632, mean=2789.988632, stddev=0.0, median=2789.988632, p75=2789.988632, p95=2789.988632, p98=2789.988632, p99=2789.988632, p999=2789.988632, mean_rate=0.30281420893804445, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 17:42:43,717 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-15 17:42:43,718 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 17:42:43,718 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 17:42:44.126" endtime="20230915 17:42:44.127"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:44.127" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:44.127" endtime="20230915 17:42:44.128"/>
</kw>
<status status="PASS" starttime="20230915 17:42:31.233" endtime="20230915 17:42:44.128"/>
</kw>
<msg timestamp="20230915 17:42:44.128" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:31.232" endtime="20230915 17:42:44.128"/>
</kw>
<msg timestamp="20230915 17:42:44.129" level="INFO">${result} = 2023-09-15 17:42:35,062 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:35,310 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:42:31.231" endtime="20230915 17:42:44.129"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:42:44.129" endtime="20230915 17:42:44.129"/>
</kw>
<status status="PASS" starttime="20230915 17:42:31.229" endtime="20230915 17:42:44.130"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:44.137" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p WsQ6x1VF7B  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:42:58.122" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:42:58.122" level="INFO">${output} = 2023-09-15 17:42:50,495 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:50,813 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:42:44.133" endtime="20230915 17:42:58.122"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:42:58.124" level="INFO">2023-09-15 17:42:50,495 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:50,813 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 17:42:50,813 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 17:42:50,935 [main] INFO freon.BaseFreonGenerator: Executing test with prefix WsQ6x1VF7B and number-of-tests 1
2023-09-15 17:42:51,000 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:52,005 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:53,006 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:54,006 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:54,395 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 17:42:55,007 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:56,007 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 17:42:57,008 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 17:42:57,728 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=67.634256, max=67.634256, mean=67.634256, stddev=0.0, median=67.634256, p75=67.634256, p95=67.634256, p98=67.634256, p99=67.634256, p999=67.634256, mean_rate=0.8812166649008994, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 17:42:57,730 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-15 17:42:57,730 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 17:42:57,730 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 17:42:58.123" endtime="20230915 17:42:58.124"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:42:58.125" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:42:58.125" endtime="20230915 17:42:58.125"/>
</kw>
<status status="PASS" starttime="20230915 17:42:44.133" endtime="20230915 17:42:58.126"/>
</kw>
<msg timestamp="20230915 17:42:58.126" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:44.132" endtime="20230915 17:42:58.126"/>
</kw>
<msg timestamp="20230915 17:42:58.127" level="INFO">${result} = 2023-09-15 17:42:50,495 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 17:42:50,813 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 17:42:44.131" endtime="20230915 17:42:58.127"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:42:58.127" endtime="20230915 17:42:58.128"/>
</kw>
<status status="PASS" starttime="20230915 17:42:44.130" endtime="20230915 17:42:58.128"/>
</kw>
<status status="PASS" starttime="20230915 17:42:31.227" endtime="20230915 17:42:58.128"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 17:41:55.194" endtime="20230915 17:42:58.128"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230915 17:41:54.758" endtime="20230915 17:42:58.131"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:42:58.154" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:08.487" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:08.487" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:42:58.149" endtime="20230915 17:43:08.487"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:08.492" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:08.489" endtime="20230915 17:43:08.492"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:08.494" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:08.492" endtime="20230915 17:43:08.494"/>
</kw>
<status status="PASS" starttime="20230915 17:42:58.149" endtime="20230915 17:43:08.494"/>
</kw>
<msg timestamp="20230915 17:43:08.497" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:42:58.148" endtime="20230915 17:43:08.497"/>
</kw>
<msg timestamp="20230915 17:43:08.497" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:42:58.147" endtime="20230915 17:43:08.497"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:43:08.499" endtime="20230915 17:43:08.500"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:08.510" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:17.543" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:17.543" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:08.506" endtime="20230915 17:43:17.544"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:17.545" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:17.544" endtime="20230915 17:43:17.546"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:17.547" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:17.546" endtime="20230915 17:43:17.547"/>
</kw>
<status status="PASS" starttime="20230915 17:43:08.504" endtime="20230915 17:43:17.547"/>
</kw>
<msg timestamp="20230915 17:43:17.547" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:43:08.502" endtime="20230915 17:43:17.547"/>
</kw>
<msg timestamp="20230915 17:43:17.548" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:08.500" endtime="20230915 17:43:17.548"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:43:17.548" endtime="20230915 17:43:17.549"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 17:42:58.146" endtime="20230915 17:43:17.549"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:17.557" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230915 17:43:17.560" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:17.560" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:17.554" endtime="20230915 17:43:17.560"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:17.562" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:17.561" endtime="20230915 17:43:17.562"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:17.563" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:17.562" endtime="20230915 17:43:17.563"/>
</kw>
<status status="PASS" starttime="20230915 17:43:17.553" endtime="20230915 17:43:17.563"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:17.569" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:32.623" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:32.623" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:17.566" endtime="20230915 17:43:32.623"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:32.625" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:32.624" endtime="20230915 17:43:32.625"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:32.625" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:32.625" endtime="20230915 17:43:32.626"/>
</kw>
<status status="PASS" starttime="20230915 17:43:17.565" endtime="20230915 17:43:32.626"/>
</kw>
<msg timestamp="20230915 17:43:32.626" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:43:17.564" endtime="20230915 17:43:32.626"/>
</kw>
<msg timestamp="20230915 17:43:32.627" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:17.563" endtime="20230915 17:43:32.627"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:43:32.627" endtime="20230915 17:43:32.627"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:32.635" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:32.639" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:32.639" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:32.628" endtime="20230915 17:43:32.639"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:32.642" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:32.640" endtime="20230915 17:43:32.642"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:32.643" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:32.642" endtime="20230915 17:43:32.643"/>
</kw>
<status status="PASS" starttime="20230915 17:43:32.628" endtime="20230915 17:43:32.643"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 17:43:17.551" endtime="20230915 17:43:32.644"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 17:43:32.648" level="INFO">${random} = 78292</msg>
<status status="PASS" starttime="20230915 17:43:32.647" endtime="20230915 17:43:32.648"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:32.653" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-78292 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:44.748" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:44.749" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:32.650" endtime="20230915 17:43:44.749"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:44.750" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:44.749" endtime="20230915 17:43:44.750"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:44.751" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:44.751" endtime="20230915 17:43:44.751"/>
</kw>
<status status="PASS" starttime="20230915 17:43:32.649" endtime="20230915 17:43:44.751"/>
</kw>
<msg timestamp="20230915 17:43:44.751" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 17:43:32.649" endtime="20230915 17:43:44.752"/>
</kw>
<msg timestamp="20230915 17:43:44.752" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:32.648" endtime="20230915 17:43:44.752"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:43:44.752" endtime="20230915 17:43:44.753"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:44.756" level="INFO">Running command 'cat /tmp/key-78292 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:44.760" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:44.760" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 17:43:44.753" endtime="20230915 17:43:44.760"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:44.762" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 17:43:44.761" endtime="20230915 17:43:44.762"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:44.763" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:44.762" endtime="20230915 17:43:44.763"/>
</kw>
<msg timestamp="20230915 17:43:44.763" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 17:43:44.753" endtime="20230915 17:43:44.763"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 17:43:44.763" endtime="20230915 17:43:44.764"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 17:43:44.768" level="INFO">Running command 'rm /tmp/key-78292 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 17:43:44.774" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 17:43:44.774" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 17:43:44.765" endtime="20230915 17:43:44.774"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 17:43:44.775" level="INFO"/>
<status status="PASS" starttime="20230915 17:43:44.774" endtime="20230915 17:43:44.775"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 17:43:44.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 17:43:44.776" endtime="20230915 17:43:44.777"/>
</kw>
<status status="PASS" starttime="20230915 17:43:44.764" endtime="20230915 17:43:44.777"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 17:43:32.645" endtime="20230915 17:43:44.778"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230915 17:42:58.133" endtime="20230915 17:43:44.780"/>
</suite>
<status status="PASS" starttime="20230915 17:41:54.679" endtime="20230915 17:43:44.783"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
