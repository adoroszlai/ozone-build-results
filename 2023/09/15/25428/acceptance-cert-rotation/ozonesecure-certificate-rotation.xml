<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230915 20:37:07.282" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:19.211" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:19.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:19.217" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230915 20:35:19.207" endtime="20230915 20:35:19.217"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:19.218" level="INFO">scm</msg>
<status status="PASS" starttime="20230915 20:35:19.217" endtime="20230915 20:35:19.218"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:19.219" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:19.218" endtime="20230915 20:35:19.219"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.207" endtime="20230915 20:35:19.219"/>
</kw>
<msg timestamp="20230915 20:35:19.219" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:19.207" endtime="20230915 20:35:19.219"/>
</kw>
<msg timestamp="20230915 20:35:19.219" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230915 20:35:19.206" endtime="20230915 20:35:19.219"/>
</kw>
<msg timestamp="20230915 20:35:19.220" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 20:35:19.206" endtime="20230915 20:35:19.220"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230915 20:35:19.220" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 20:35:19.220" endtime="20230915 20:35:19.220"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:19.225" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:19.420" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:19.420" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:35:19.223" endtime="20230915 20:35:19.421"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:19.422" level="INFO"/>
<status status="PASS" starttime="20230915 20:35:19.421" endtime="20230915 20:35:19.422"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:19.423" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:19.422" endtime="20230915 20:35:19.423"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.222" endtime="20230915 20:35:19.423"/>
</kw>
<msg timestamp="20230915 20:35:19.423" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:19.222" endtime="20230915 20:35:19.423"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.221" endtime="20230915 20:35:19.423"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.221" endtime="20230915 20:35:19.423"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.205" endtime="20230915 20:35:19.424"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.204" endtime="20230915 20:35:19.424"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.204" endtime="20230915 20:35:19.424"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 20:35:19.427" level="INFO">${random} = 2BgZlctqFU</msg>
<status status="PASS" starttime="20230915 20:35:19.426" endtime="20230915 20:35:19.427"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:19.433" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p 2BgZlctqFU  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:32.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:32.958" level="INFO">${output} = 2023-09-15 20:35:23,062 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:23,271 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:19.430" endtime="20230915 20:35:32.958"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:32.960" level="INFO">2023-09-15 20:35:23,062 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:23,271 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 20:35:23,271 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 20:35:23,363 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 2BgZlctqFU and number-of-tests 1
2023-09-15 20:35:23,423 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:24,428 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:25,429 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:26,176 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-15 20:35:26,272 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-15 20:35:26,434 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:27,201 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 20:35:27,312 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 20:35:27,434 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:27,680 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 20:35:28,440 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:29,443 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:30,444 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:31,446 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:32,447 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 20:35:32,579 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5068.407726, max=5068.407726, mean=5068.407726, stddev=0.0, median=5068.407726, p75=5068.407726, p95=5068.407726, p98=5068.407726, p99=5068.407726, p999=5068.407726, mean_rate=0.16115592760853878, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 20:35:32,579 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2023-09-15 20:35:32,580 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 20:35:32,580 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 20:35:32.959" endtime="20230915 20:35:32.960"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:32.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:32.960" endtime="20230915 20:35:32.961"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.429" endtime="20230915 20:35:32.961"/>
</kw>
<msg timestamp="20230915 20:35:32.961" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:19.429" endtime="20230915 20:35:32.961"/>
</kw>
<msg timestamp="20230915 20:35:32.962" level="INFO">${result} = 2023-09-15 20:35:23,062 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:23,271 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:19.429" endtime="20230915 20:35:32.962"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:35:32.962" endtime="20230915 20:35:32.963"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.427" endtime="20230915 20:35:32.963"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:32.970" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p 2BgZlctqFU  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:44.581" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:44.581" level="INFO">${output} = 2023-09-15 20:35:37,971 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:38,099 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:32.966" endtime="20230915 20:35:44.581"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:44.582" level="INFO">2023-09-15 20:35:37,971 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:38,099 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 20:35:38,099 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 20:35:38,192 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 2BgZlctqFU and number-of-tests 1
2023-09-15 20:35:38,260 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:39,264 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:40,264 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:41,099 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 20:35:41,265 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:42,265 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:43,266 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 20:35:44,211 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=65.593059, max=65.593059, mean=65.593059, stddev=0.0, median=65.593059, p75=65.593059, p95=65.593059, p98=65.593059, p99=65.593059, p999=65.593059, mean_rate=0.9242292088290018, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 20:35:44,214 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-15 20:35:44,215 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 20:35:44,215 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 20:35:44.581" endtime="20230915 20:35:44.582"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:44.583" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:44.583" endtime="20230915 20:35:44.583"/>
</kw>
<status status="PASS" starttime="20230915 20:35:32.966" endtime="20230915 20:35:44.583"/>
</kw>
<msg timestamp="20230915 20:35:44.583" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:32.965" endtime="20230915 20:35:44.584"/>
</kw>
<msg timestamp="20230915 20:35:44.584" level="INFO">${result} = 2023-09-15 20:35:37,971 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:38,099 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:32.965" endtime="20230915 20:35:44.584"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:35:44.584" endtime="20230915 20:35:44.585"/>
</kw>
<status status="PASS" starttime="20230915 20:35:32.963" endtime="20230915 20:35:44.585"/>
</kw>
<status status="PASS" starttime="20230915 20:35:19.425" endtime="20230915 20:35:44.585"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:44.591" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:47.484" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:47.484" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230915 20:35:44.587" endtime="20230915 20:35:47.484"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:47.486" level="INFO">40s</msg>
<status status="PASS" starttime="20230915 20:35:47.485" endtime="20230915 20:35:47.486"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:47.486" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:47.486" endtime="20230915 20:35:47.487"/>
</kw>
<status status="PASS" starttime="20230915 20:35:44.586" endtime="20230915 20:35:47.487"/>
</kw>
<msg timestamp="20230915 20:35:47.487" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:44.586" endtime="20230915 20:35:47.487"/>
</kw>
<msg timestamp="20230915 20:35:47.487" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230915 20:35:44.585" endtime="20230915 20:35:47.488"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230915 20:35:47.489" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230915 20:35:47.488" endtime="20230915 20:35:47.489"/>
</kw>
<msg timestamp="20230915 20:35:47.489" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230915 20:35:44.585" endtime="20230915 20:35:47.489"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230915 20:35:47.491" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 20:35:47.490" endtime="20230915 20:35:47.491"/>
</kw>
<msg timestamp="20230915 20:35:47.491" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 20:35:47.490" endtime="20230915 20:35:47.491"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:47.497" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:47.773" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:47.773" level="INFO">${output} = 015490EA6ABD</msg>
<status status="PASS" starttime="20230915 20:35:47.494" endtime="20230915 20:35:47.773"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:47.775" level="INFO">015490EA6ABD</msg>
<status status="PASS" starttime="20230915 20:35:47.774" endtime="20230915 20:35:47.775"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:47.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:47.775" endtime="20230915 20:35:47.776"/>
</kw>
<status status="PASS" starttime="20230915 20:35:47.493" endtime="20230915 20:35:47.776"/>
</kw>
<msg timestamp="20230915 20:35:47.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:47.493" endtime="20230915 20:35:47.776"/>
</kw>
<msg timestamp="20230915 20:35:47.776" level="INFO">${certSerial} = 015490EA6ABD</msg>
<status status="PASS" starttime="20230915 20:35:47.492" endtime="20230915 20:35:47.776"/>
</kw>
<msg timestamp="20230915 20:35:47.777" level="INFO">${certId1} = 015490EA6ABD</msg>
<status status="PASS" starttime="20230915 20:35:47.491" endtime="20230915 20:35:47.777"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:47.783" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:48.183" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:48.183" level="INFO">${output} = 0156EBA4AE76</msg>
<status status="PASS" starttime="20230915 20:35:47.780" endtime="20230915 20:35:48.183"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:48.185" level="INFO">0156EBA4AE76</msg>
<status status="PASS" starttime="20230915 20:35:48.184" endtime="20230915 20:35:48.185"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:48.186" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:48.185" endtime="20230915 20:35:48.186"/>
</kw>
<status status="PASS" starttime="20230915 20:35:47.779" endtime="20230915 20:35:48.186"/>
</kw>
<msg timestamp="20230915 20:35:48.186" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:47.779" endtime="20230915 20:35:48.186"/>
</kw>
<msg timestamp="20230915 20:35:48.187" level="INFO">${certSerial} = 0156EBA4AE76</msg>
<status status="PASS" starttime="20230915 20:35:47.778" endtime="20230915 20:35:48.187"/>
</kw>
<msg timestamp="20230915 20:35:48.187" level="INFO">${newCertId} = 0156EBA4AE76</msg>
<status status="PASS" starttime="20230915 20:35:47.778" endtime="20230915 20:35:48.187"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230915 20:35:48.187" endtime="20230915 20:35:48.188"/>
</kw>
<status status="PASS" starttime="20230915 20:35:47.778" endtime="20230915 20:35:48.188"/>
</kw>
<status status="PASS" starttime="20230915 20:35:47.777" endtime="20230915 20:35:48.188"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 20:35:48.189" level="INFO">${random} = hVu5tTGgNE</msg>
<status status="PASS" starttime="20230915 20:35:48.189" endtime="20230915 20:35:48.189"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:48.196" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p hVu5tTGgNE  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:35:59.656" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:35:59.656" level="INFO">${output} = 2023-09-15 20:35:51,214 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:51,416 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:48.193" endtime="20230915 20:35:59.656"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:35:59.657" level="INFO">2023-09-15 20:35:51,214 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:51,416 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 20:35:51,416 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 20:35:51,523 [main] INFO freon.BaseFreonGenerator: Executing test with prefix hVu5tTGgNE and number-of-tests 1
2023-09-15 20:35:51,586 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:52,594 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:53,594 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:54,595 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:55,596 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:56,596 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:56,658 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 20:35:56,734 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 20:35:57,090 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 20:35:57,597 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:35:58,598 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 20:35:59,298 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2269.394424, max=2269.394424, mean=2269.394424, stddev=0.0, median=2269.394424, p75=2269.394424, p95=2269.394424, p98=2269.394424, p99=2269.394424, p999=2269.394424, mean_rate=0.3199150045720941, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 20:35:59,298 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-15 20:35:59,299 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 20:35:59,299 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 20:35:59.656" endtime="20230915 20:35:59.658"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:35:59.658" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:35:59.658" endtime="20230915 20:35:59.658"/>
</kw>
<status status="PASS" starttime="20230915 20:35:48.192" endtime="20230915 20:35:59.659"/>
</kw>
<msg timestamp="20230915 20:35:59.659" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:48.192" endtime="20230915 20:35:59.659"/>
</kw>
<msg timestamp="20230915 20:35:59.659" level="INFO">${result} = 2023-09-15 20:35:51,214 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:35:51,416 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:48.191" endtime="20230915 20:35:59.659"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:35:59.659" endtime="20230915 20:35:59.660"/>
</kw>
<status status="PASS" starttime="20230915 20:35:48.189" endtime="20230915 20:35:59.660"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:35:59.666" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p hVu5tTGgNE  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:11.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:11.397" level="INFO">${output} = 2023-09-15 20:36:02,750 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:36:02,927 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:59.663" endtime="20230915 20:36:11.397"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:11.398" level="INFO">2023-09-15 20:36:02,750 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:36:02,927 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 20:36:02,927 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 20:36:03,031 [main] INFO freon.BaseFreonGenerator: Executing test with prefix hVu5tTGgNE and number-of-tests 1
2023-09-15 20:36:03,117 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:04,130 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:05,130 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:06,132 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:07,133 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:08,133 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:08,243 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 20:36:09,133 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 20:36:10,134 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 20:36:11,029 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=47.620481, max=47.620481, mean=47.620481, stddev=0.0, median=47.620481, p75=47.620481, p95=47.620481, p98=47.620481, p99=47.620481, p999=47.620481, mean_rate=0.7737091968458606, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 20:36:11,030 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-15 20:36:11,030 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 20:36:11,030 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 20:36:11.397" endtime="20230915 20:36:11.398"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:11.399" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:11.398" endtime="20230915 20:36:11.399"/>
</kw>
<status status="PASS" starttime="20230915 20:35:59.663" endtime="20230915 20:36:11.399"/>
</kw>
<msg timestamp="20230915 20:36:11.399" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:35:59.663" endtime="20230915 20:36:11.400"/>
</kw>
<msg timestamp="20230915 20:36:11.400" level="INFO">${result} = 2023-09-15 20:36:02,750 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 20:36:02,927 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 20:35:59.662" endtime="20230915 20:36:11.400"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:36:11.400" endtime="20230915 20:36:11.401"/>
</kw>
<status status="PASS" starttime="20230915 20:35:59.660" endtime="20230915 20:36:11.401"/>
</kw>
<status status="PASS" starttime="20230915 20:35:48.188" endtime="20230915 20:36:11.401"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 20:35:19.424" endtime="20230915 20:36:11.401"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230915 20:35:19.154" endtime="20230915 20:36:11.403"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:11.419" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:19.975" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:19.975" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:11.416" endtime="20230915 20:36:19.975"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:19.976" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:19.975" endtime="20230915 20:36:19.976"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:19.977" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:19.977" endtime="20230915 20:36:19.977"/>
</kw>
<status status="PASS" starttime="20230915 20:36:11.415" endtime="20230915 20:36:19.978"/>
</kw>
<msg timestamp="20230915 20:36:19.978" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:36:11.415" endtime="20230915 20:36:19.978"/>
</kw>
<msg timestamp="20230915 20:36:19.978" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:11.414" endtime="20230915 20:36:19.978"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:36:19.978" endtime="20230915 20:36:19.979"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:19.984" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:28.115" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:28.115" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:19.980" endtime="20230915 20:36:28.115"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:28.117" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:28.116" endtime="20230915 20:36:28.117"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:28.118" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:28.117" endtime="20230915 20:36:28.118"/>
</kw>
<status status="PASS" starttime="20230915 20:36:19.980" endtime="20230915 20:36:28.118"/>
</kw>
<msg timestamp="20230915 20:36:28.118" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:36:19.980" endtime="20230915 20:36:28.118"/>
</kw>
<msg timestamp="20230915 20:36:28.119" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:19.979" endtime="20230915 20:36:28.119"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:36:28.119" endtime="20230915 20:36:28.120"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 20:36:11.414" endtime="20230915 20:36:28.120"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:28.127" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230915 20:36:28.129" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:28.129" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:28.123" endtime="20230915 20:36:28.129"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:28.131" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:28.130" endtime="20230915 20:36:28.131"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:28.131" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:28.131" endtime="20230915 20:36:28.131"/>
</kw>
<status status="PASS" starttime="20230915 20:36:28.123" endtime="20230915 20:36:28.132"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:28.137" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:39.376" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:39.376" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:28.134" endtime="20230915 20:36:39.376"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:39.378" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:39.377" endtime="20230915 20:36:39.378"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:39.379" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:39.378" endtime="20230915 20:36:39.379"/>
</kw>
<status status="PASS" starttime="20230915 20:36:28.133" endtime="20230915 20:36:39.379"/>
</kw>
<msg timestamp="20230915 20:36:39.379" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:36:28.133" endtime="20230915 20:36:39.379"/>
</kw>
<msg timestamp="20230915 20:36:39.380" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:28.132" endtime="20230915 20:36:39.380"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:36:39.380" endtime="20230915 20:36:39.380"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:39.384" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:39.388" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:39.388" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:39.381" endtime="20230915 20:36:39.388"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:39.390" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:39.389" endtime="20230915 20:36:39.390"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:39.391" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:39.390" endtime="20230915 20:36:39.391"/>
</kw>
<status status="PASS" starttime="20230915 20:36:39.381" endtime="20230915 20:36:39.391"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 20:36:28.122" endtime="20230915 20:36:39.392"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 20:36:39.395" level="INFO">${random} = 47755</msg>
<status status="PASS" starttime="20230915 20:36:39.394" endtime="20230915 20:36:39.395"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:39.400" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-47755 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:49.617" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:49.617" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:39.397" endtime="20230915 20:36:49.617"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:49.619" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:49.618" endtime="20230915 20:36:49.619"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:49.620" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:49.619" endtime="20230915 20:36:49.620"/>
</kw>
<status status="PASS" starttime="20230915 20:36:39.396" endtime="20230915 20:36:49.620"/>
</kw>
<msg timestamp="20230915 20:36:49.620" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 20:36:39.396" endtime="20230915 20:36:49.621"/>
</kw>
<msg timestamp="20230915 20:36:49.621" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:39.395" endtime="20230915 20:36:49.621"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:36:49.621" endtime="20230915 20:36:49.621"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:49.626" level="INFO">Running command 'cat /tmp/key-47755 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:49.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:49.629" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 20:36:49.622" endtime="20230915 20:36:49.629"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:49.630" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 20:36:49.630" endtime="20230915 20:36:49.631"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:49.631" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:49.631" endtime="20230915 20:36:49.631"/>
</kw>
<msg timestamp="20230915 20:36:49.632" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 20:36:49.622" endtime="20230915 20:36:49.632"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 20:36:49.632" endtime="20230915 20:36:49.633"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 20:36:49.636" level="INFO">Running command 'rm /tmp/key-47755 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 20:36:49.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 20:36:49.640" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 20:36:49.634" endtime="20230915 20:36:49.640"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 20:36:49.641" level="INFO"/>
<status status="PASS" starttime="20230915 20:36:49.640" endtime="20230915 20:36:49.641"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 20:36:49.642" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 20:36:49.641" endtime="20230915 20:36:49.642"/>
</kw>
<status status="PASS" starttime="20230915 20:36:49.633" endtime="20230915 20:36:49.642"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 20:36:39.393" endtime="20230915 20:36:49.642"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230915 20:36:11.405" endtime="20230915 20:36:49.644"/>
</suite>
<status status="PASS" starttime="20230915 20:35:19.116" endtime="20230915 20:36:49.646"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
