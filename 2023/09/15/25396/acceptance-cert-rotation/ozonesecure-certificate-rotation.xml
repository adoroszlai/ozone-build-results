<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230915 06:24:07.839" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:22:33.611" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:22:33.616" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:22:33.616" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230915 06:22:33.609" endtime="20230915 06:22:33.616"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:22:33.618" level="INFO">scm</msg>
<status status="PASS" starttime="20230915 06:22:33.616" endtime="20230915 06:22:33.618"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:22:33.619" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:22:33.618" endtime="20230915 06:22:33.619"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.608" endtime="20230915 06:22:33.619"/>
</kw>
<msg timestamp="20230915 06:22:33.619" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:22:33.608" endtime="20230915 06:22:33.619"/>
</kw>
<msg timestamp="20230915 06:22:33.619" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230915 06:22:33.605" endtime="20230915 06:22:33.619"/>
</kw>
<msg timestamp="20230915 06:22:33.619" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 06:22:33.604" endtime="20230915 06:22:33.620"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230915 06:22:33.620" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230915 06:22:33.620" endtime="20230915 06:22:33.620"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:22:33.624" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:22:33.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:22:33.661" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:22:33.622" endtime="20230915 06:22:33.661"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:22:33.662" level="INFO"/>
<status status="PASS" starttime="20230915 06:22:33.661" endtime="20230915 06:22:33.662"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:22:33.663" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:22:33.662" endtime="20230915 06:22:33.663"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.622" endtime="20230915 06:22:33.663"/>
</kw>
<msg timestamp="20230915 06:22:33.663" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:22:33.621" endtime="20230915 06:22:33.663"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.621" endtime="20230915 06:22:33.663"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.620" endtime="20230915 06:22:33.663"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.604" endtime="20230915 06:22:33.663"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.603" endtime="20230915 06:22:33.663"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.603" endtime="20230915 06:22:33.663"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 06:22:33.666" level="INFO">${random} = 2LPXwZcXzv</msg>
<status status="PASS" starttime="20230915 06:22:33.665" endtime="20230915 06:22:33.666"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:22:33.679" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p 2LPXwZcXzv  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:22:48.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:22:48.763" level="INFO">${output} = 2023-09-15 06:22:37,436 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:22:37,754 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:22:33.669" endtime="20230915 06:22:48.763"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:22:48.764" level="INFO">2023-09-15 06:22:37,436 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:22:37,754 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 06:22:37,754 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 06:22:37,947 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 2LPXwZcXzv and number-of-tests 1
2023-09-15 06:22:38,207 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:39,243 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:40,244 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:40,932 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-15 06:22:41,118 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-15 06:22:41,244 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:41,774 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 06:22:41,824 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 06:22:42,074 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 06:22:42,260 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:43,261 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:44,262 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:45,263 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:46,263 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:47,264 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:48,264 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 06:22:48,404 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=6483.232543, max=6483.232543, mean=6483.232543, stddev=0.0, median=6483.232543, p75=6483.232543, p95=6483.232543, p98=6483.232543, p99=6483.232543, p999=6483.232543, mean_rate=0.13934335388948832, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 06:22:48,405 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-09-15 06:22:48,405 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 06:22:48,405 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 06:22:48.763" endtime="20230915 06:22:48.764"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:22:48.765" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:22:48.764" endtime="20230915 06:22:48.765"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.668" endtime="20230915 06:22:48.765"/>
</kw>
<msg timestamp="20230915 06:22:48.765" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:22:33.668" endtime="20230915 06:22:48.765"/>
</kw>
<msg timestamp="20230915 06:22:48.766" level="INFO">${result} = 2023-09-15 06:22:37,436 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:22:37,754 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:22:33.667" endtime="20230915 06:22:48.766"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:22:48.766" endtime="20230915 06:22:48.766"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.666" endtime="20230915 06:22:48.766"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:22:48.771" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p 2LPXwZcXzv  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:22:59.492" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:22:59.493" level="INFO">${output} = 2023-09-15 06:22:51,382 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:22:51,620 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:22:48.769" endtime="20230915 06:22:59.493"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:22:59.494" level="INFO">2023-09-15 06:22:51,382 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:22:51,620 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 06:22:51,620 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 06:22:51,830 [main] INFO freon.BaseFreonGenerator: Executing test with prefix 2LPXwZcXzv and number-of-tests 1
2023-09-15 06:22:51,938 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:52,946 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:53,947 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:54,947 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:55,949 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:56,291 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 06:22:56,950 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:57,950 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:22:58,950 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 06:22:59,143 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=57.717015, max=57.717015, mean=57.717015, stddev=0.0, median=57.717015, p75=57.717015, p95=57.717015, p98=57.717015, p99=57.717015, p999=57.717015, mean_rate=0.9082363396109364, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 06:22:59,144 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2023-09-15 06:22:59,144 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 06:22:59,145 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 06:22:59.493" endtime="20230915 06:22:59.494"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:22:59.495" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:22:59.494" endtime="20230915 06:22:59.495"/>
</kw>
<status status="PASS" starttime="20230915 06:22:48.769" endtime="20230915 06:22:59.495"/>
</kw>
<msg timestamp="20230915 06:22:59.495" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:22:48.768" endtime="20230915 06:22:59.495"/>
</kw>
<msg timestamp="20230915 06:22:59.495" level="INFO">${result} = 2023-09-15 06:22:51,382 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:22:51,620 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:22:48.768" endtime="20230915 06:22:59.495"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:22:59.496" endtime="20230915 06:22:59.496"/>
</kw>
<status status="PASS" starttime="20230915 06:22:48.766" endtime="20230915 06:22:59.496"/>
</kw>
<status status="PASS" starttime="20230915 06:22:33.665" endtime="20230915 06:22:59.496"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:22:59.501" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:00.865" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:00.865" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230915 06:22:59.498" endtime="20230915 06:23:00.865"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:00.867" level="INFO">40s</msg>
<status status="PASS" starttime="20230915 06:23:00.866" endtime="20230915 06:23:00.867"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:00.867" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:00.867" endtime="20230915 06:23:00.868"/>
</kw>
<status status="PASS" starttime="20230915 06:22:59.498" endtime="20230915 06:23:00.868"/>
</kw>
<msg timestamp="20230915 06:23:00.868" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:22:59.497" endtime="20230915 06:23:00.868"/>
</kw>
<msg timestamp="20230915 06:23:00.868" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230915 06:22:59.497" endtime="20230915 06:23:00.868"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230915 06:23:00.870" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230915 06:23:00.869" endtime="20230915 06:23:00.870"/>
</kw>
<msg timestamp="20230915 06:23:00.870" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230915 06:22:59.496" endtime="20230915 06:23:00.870"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230915 06:23:00.871" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 06:23:00.871" endtime="20230915 06:23:00.871"/>
</kw>
<msg timestamp="20230915 06:23:00.871" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230915 06:23:00.870" endtime="20230915 06:23:00.871"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:00.876" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:00.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:00.958" level="INFO">${output} = B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.873" endtime="20230915 06:23:00.959"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:00.960" level="INFO">B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.959" endtime="20230915 06:23:00.960"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:00.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:00.960" endtime="20230915 06:23:00.961"/>
</kw>
<status status="PASS" starttime="20230915 06:23:00.873" endtime="20230915 06:23:00.961"/>
</kw>
<msg timestamp="20230915 06:23:00.961" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:00.872" endtime="20230915 06:23:00.961"/>
</kw>
<msg timestamp="20230915 06:23:00.962" level="INFO">${certSerial} = B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.872" endtime="20230915 06:23:00.962"/>
</kw>
<msg timestamp="20230915 06:23:00.962" level="INFO">${certId1} = B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.872" endtime="20230915 06:23:00.962"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:00.967" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:01.039" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:01.039" level="INFO">${output} = B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.965" endtime="20230915 06:23:01.039"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:01.041" level="INFO">B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:01.040" endtime="20230915 06:23:01.041"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:01.042" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:01.042" endtime="20230915 06:23:01.042"/>
</kw>
<status status="PASS" starttime="20230915 06:23:00.964" endtime="20230915 06:23:01.042"/>
</kw>
<msg timestamp="20230915 06:23:01.042" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:00.964" endtime="20230915 06:23:01.043"/>
</kw>
<msg timestamp="20230915 06:23:01.043" level="INFO">${certSerial} = B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.963" endtime="20230915 06:23:01.043"/>
</kw>
<msg timestamp="20230915 06:23:01.043" level="INFO">${newCertId} = B57295264F</msg>
<status status="PASS" starttime="20230915 06:23:00.963" endtime="20230915 06:23:01.043"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<msg timestamp="20230915 06:23:01.044" level="FAIL">B57295264F == B57295264F</msg>
<status status="FAIL" starttime="20230915 06:23:01.043" endtime="20230915 06:23:01.044"/>
</kw>
<status status="FAIL" starttime="20230915 06:23:00.963" endtime="20230915 06:23:01.044"/>
</kw>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:06.053" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:06.197" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:06.197" level="INFO">${output} = B3C7FF4CCA</msg>
<status status="PASS" starttime="20230915 06:23:06.048" endtime="20230915 06:23:06.197"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:06.198" level="INFO">B3C7FF4CCA</msg>
<status status="PASS" starttime="20230915 06:23:06.197" endtime="20230915 06:23:06.198"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:06.202" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:06.201" endtime="20230915 06:23:06.202"/>
</kw>
<status status="PASS" starttime="20230915 06:23:06.047" endtime="20230915 06:23:06.202"/>
</kw>
<msg timestamp="20230915 06:23:06.202" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:06.047" endtime="20230915 06:23:06.202"/>
</kw>
<msg timestamp="20230915 06:23:06.203" level="INFO">${certSerial} = B3C7FF4CCA</msg>
<status status="PASS" starttime="20230915 06:23:06.046" endtime="20230915 06:23:06.203"/>
</kw>
<msg timestamp="20230915 06:23:06.203" level="INFO">${newCertId} = B3C7FF4CCA</msg>
<status status="PASS" starttime="20230915 06:23:06.045" endtime="20230915 06:23:06.203"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230915 06:23:06.203" endtime="20230915 06:23:06.209"/>
</kw>
<status status="PASS" starttime="20230915 06:23:06.045" endtime="20230915 06:23:06.209"/>
</kw>
<status status="PASS" starttime="20230915 06:23:00.962" endtime="20230915 06:23:06.209"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 06:23:06.211" level="INFO">${random} = VaQclgxtqk</msg>
<status status="PASS" starttime="20230915 06:23:06.210" endtime="20230915 06:23:06.211"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:06.224" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p VaQclgxtqk  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:15.920" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:15.920" level="INFO">${output} = 2023-09-15 06:23:09,672 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:23:09,857 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:23:06.219" endtime="20230915 06:23:15.920"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:15.922" level="INFO">2023-09-15 06:23:09,672 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:23:09,857 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 06:23:09,860 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 06:23:09,955 [main] INFO freon.BaseFreonGenerator: Executing test with prefix VaQclgxtqk and number-of-tests 1
2023-09-15 06:23:10,013 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:11,015 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:12,015 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:12,362 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 06:23:12,408 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-15 06:23:12,706 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-15 06:23:13,015 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:14,016 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:15,016 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 06:23:15,464 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2430.099159, max=2430.099159, mean=2430.099159, stddev=0.0, median=2430.099159, p75=2430.099159, p95=2430.099159, p98=2430.099159, p99=2430.099159, p999=2430.099159, mean_rate=0.2853589089421054, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 06:23:15,465 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2023-09-15 06:23:15,468 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 06:23:15,468 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 06:23:15.921" endtime="20230915 06:23:15.922"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:15.922" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:15.922" endtime="20230915 06:23:15.922"/>
</kw>
<status status="PASS" starttime="20230915 06:23:06.218" endtime="20230915 06:23:15.923"/>
</kw>
<msg timestamp="20230915 06:23:15.923" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:06.218" endtime="20230915 06:23:15.923"/>
</kw>
<msg timestamp="20230915 06:23:15.923" level="INFO">${result} = 2023-09-15 06:23:09,672 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:23:09,857 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:23:06.212" endtime="20230915 06:23:15.923"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:15.923" endtime="20230915 06:23:15.924"/>
</kw>
<status status="PASS" starttime="20230915 06:23:06.211" endtime="20230915 06:23:15.924"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:15.929" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p VaQclgxtqk  2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:23.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:23.971" level="INFO">${output} = 2023-09-15 06:23:18,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:23:18,928 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:23:15.927" endtime="20230915 06:23:23.971"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:23.973" level="INFO">2023-09-15 06:23:18,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:23:18,928 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-15 06:23:18,928 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-15 06:23:19,036 [main] INFO freon.BaseFreonGenerator: Executing test with prefix VaQclgxtqk and number-of-tests 1
2023-09-15 06:23:19,101 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:20,103 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:21,104 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:21,237 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-15 06:23:22,104 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-15 06:23:23,104 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-15 06:23:23,551 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=53.061571, max=53.061571, mean=53.061571, stddev=0.0, median=53.061571, p75=53.061571, p95=53.061571, p98=53.061571, p99=53.061571, p999=53.061571, mean_rate=0.9475366217692862, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-15 06:23:23,553 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 4
2023-09-15 06:23:23,553 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-15 06:23:23,553 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230915 06:23:23.972" endtime="20230915 06:23:23.973"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:23.973" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:23.973" endtime="20230915 06:23:23.974"/>
</kw>
<status status="PASS" starttime="20230915 06:23:15.926" endtime="20230915 06:23:23.974"/>
</kw>
<msg timestamp="20230915 06:23:23.974" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:15.926" endtime="20230915 06:23:23.974"/>
</kw>
<msg timestamp="20230915 06:23:23.974" level="INFO">${result} = 2023-09-15 06:23:18,774 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-15 06:23:18,928 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230915 06:23:15.925" endtime="20230915 06:23:23.974"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:23.974" endtime="20230915 06:23:23.975"/>
</kw>
<status status="PASS" starttime="20230915 06:23:15.924" endtime="20230915 06:23:23.975"/>
</kw>
<status status="PASS" starttime="20230915 06:23:06.209" endtime="20230915 06:23:23.975"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 06:22:33.664" endtime="20230915 06:23:23.975"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230915 06:22:33.521" endtime="20230915 06:23:23.977"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:23.989" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:29.616" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:29.617" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:23.987" endtime="20230915 06:23:29.617"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:29.618" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:29.617" endtime="20230915 06:23:29.618"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:29.619" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:29.618" endtime="20230915 06:23:29.619"/>
</kw>
<status status="PASS" starttime="20230915 06:23:23.986" endtime="20230915 06:23:29.619"/>
</kw>
<msg timestamp="20230915 06:23:29.619" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:23.986" endtime="20230915 06:23:29.620"/>
</kw>
<msg timestamp="20230915 06:23:29.620" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:23.986" endtime="20230915 06:23:29.620"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:29.620" endtime="20230915 06:23:29.620"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:29.624" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:34.603" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:34.603" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:29.622" endtime="20230915 06:23:34.603"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:34.604" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:34.603" endtime="20230915 06:23:34.604"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:34.605" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:34.605" endtime="20230915 06:23:34.605"/>
</kw>
<status status="PASS" starttime="20230915 06:23:29.621" endtime="20230915 06:23:34.605"/>
</kw>
<msg timestamp="20230915 06:23:34.605" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:29.621" endtime="20230915 06:23:34.606"/>
</kw>
<msg timestamp="20230915 06:23:34.606" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:29.620" endtime="20230915 06:23:34.606"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:34.606" endtime="20230915 06:23:34.606"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 06:23:23.985" endtime="20230915 06:23:34.607"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:34.612" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230915 06:23:34.614" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:34.614" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:34.609" endtime="20230915 06:23:34.614"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:34.615" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:34.614" endtime="20230915 06:23:34.615"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:34.616" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:34.615" endtime="20230915 06:23:34.616"/>
</kw>
<status status="PASS" starttime="20230915 06:23:34.609" endtime="20230915 06:23:34.616"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:34.620" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:42.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:42.968" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:34.618" endtime="20230915 06:23:42.968"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:42.969" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:42.968" endtime="20230915 06:23:42.969"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:42.970" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:42.969" endtime="20230915 06:23:42.970"/>
</kw>
<status status="PASS" starttime="20230915 06:23:34.617" endtime="20230915 06:23:42.970"/>
</kw>
<msg timestamp="20230915 06:23:42.970" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:34.617" endtime="20230915 06:23:42.970"/>
</kw>
<msg timestamp="20230915 06:23:42.970" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:34.616" endtime="20230915 06:23:42.970"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:42.971" endtime="20230915 06:23:42.971"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:42.974" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:42.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:42.977" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:42.972" endtime="20230915 06:23:42.977"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:42.978" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:42.978" endtime="20230915 06:23:42.978"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:42.979" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:42.978" endtime="20230915 06:23:42.979"/>
</kw>
<status status="PASS" starttime="20230915 06:23:42.971" endtime="20230915 06:23:42.979"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 06:23:34.608" endtime="20230915 06:23:42.979"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230915 06:23:42.981" level="INFO">${random} = 13357</msg>
<status status="PASS" starttime="20230915 06:23:42.981" endtime="20230915 06:23:42.981"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:42.985" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-13357 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:51.462" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:51.462" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:42.983" endtime="20230915 06:23:51.462"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:51.463" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:51.462" endtime="20230915 06:23:51.463"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:51.464" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:51.463" endtime="20230915 06:23:51.464"/>
</kw>
<status status="PASS" starttime="20230915 06:23:42.982" endtime="20230915 06:23:51.464"/>
</kw>
<msg timestamp="20230915 06:23:51.464" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230915 06:23:42.982" endtime="20230915 06:23:51.464"/>
</kw>
<msg timestamp="20230915 06:23:51.464" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:42.981" endtime="20230915 06:23:51.464"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:51.465" endtime="20230915 06:23:51.465"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:51.469" level="INFO">Running command 'cat /tmp/key-13357 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:51.471" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:51.471" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 06:23:51.466" endtime="20230915 06:23:51.471"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:51.473" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 06:23:51.472" endtime="20230915 06:23:51.473"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:51.473" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:51.473" endtime="20230915 06:23:51.473"/>
</kw>
<msg timestamp="20230915 06:23:51.474" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230915 06:23:51.465" endtime="20230915 06:23:51.474"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230915 06:23:51.474" endtime="20230915 06:23:51.474"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230915 06:23:51.477" level="INFO">Running command 'rm /tmp/key-13357 2&gt;&amp;1'.</msg>
<msg timestamp="20230915 06:23:51.480" level="INFO">${rc} = 0</msg>
<msg timestamp="20230915 06:23:51.480" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230915 06:23:51.475" endtime="20230915 06:23:51.480"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230915 06:23:51.481" level="INFO"/>
<status status="PASS" starttime="20230915 06:23:51.481" endtime="20230915 06:23:51.481"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230915 06:23:51.482" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230915 06:23:51.481" endtime="20230915 06:23:51.482"/>
</kw>
<status status="PASS" starttime="20230915 06:23:51.474" endtime="20230915 06:23:51.482"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230915 06:23:42.980" endtime="20230915 06:23:51.482"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230915 06:23:23.978" endtime="20230915 06:23:51.483"/>
</suite>
<status status="PASS" starttime="20230915 06:22:33.460" endtime="20230915 06:23:51.486"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
