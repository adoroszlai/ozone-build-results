<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.8.10 on linux)" generated="20230919 09:35:21.033" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:33:25.905" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/' 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:33:25.917" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:33:25.919" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20230919 09:33:25.900" endtime="20230919 09:33:25.919"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:33:25.921" level="INFO">scm</msg>
<status status="PASS" starttime="20230919 09:33:25.919" endtime="20230919 09:33:25.921"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:33:25.923" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:33:25.921" endtime="20230919 09:33:25.923"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.899" endtime="20230919 09:33:25.923"/>
</kw>
<msg timestamp="20230919 09:33:25.923" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:33:25.899" endtime="20230919 09:33:25.924"/>
</kw>
<msg timestamp="20230919 09:33:25.924" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20230919 09:33:25.899" endtime="20230919 09:33:25.924"/>
</kw>
<msg timestamp="20230919 09:33:25.924" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230919 09:33:25.898" endtime="20230919 09:33:25.924"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20230919 09:33:25.926" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20230919 09:33:25.924" endtime="20230919 09:33:25.926"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:33:25.936" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:33:26.195" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:33:26.195" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:33:25.931" endtime="20230919 09:33:26.195"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:33:26.197" level="INFO"/>
<status status="PASS" starttime="20230919 09:33:26.196" endtime="20230919 09:33:26.197"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:33:26.197" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:33:26.197" endtime="20230919 09:33:26.197"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.930" endtime="20230919 09:33:26.198"/>
</kw>
<msg timestamp="20230919 09:33:26.198" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:33:25.930" endtime="20230919 09:33:26.198"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.928" endtime="20230919 09:33:26.208"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.927" endtime="20230919 09:33:26.209"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.896" endtime="20230919 09:33:26.209"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.895" endtime="20230919 09:33:26.209"/>
</kw>
<status status="PASS" starttime="20230919 09:33:25.895" endtime="20230919 09:33:26.209"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230919 09:33:26.214" level="INFO">${random} = zgaQvur47I</msg>
<status status="PASS" starttime="20230919 09:33:26.214" endtime="20230919 09:33:26.214"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:33:26.231" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p zgaQvur47I  2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:33:43.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:33:43.504" level="INFO">${output} = 2023-09-19 09:33:33,022 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:33:33,250 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:33:26.223" endtime="20230919 09:33:43.504"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:33:43.506" level="INFO">2023-09-19 09:33:33,022 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:33:33,250 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-19 09:33:33,250 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-19 09:33:33,361 [main] INFO freon.BaseFreonGenerator: Executing test with prefix zgaQvur47I and number-of-tests 1
2023-09-19 09:33:33,429 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:34,431 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:35,433 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:36,433 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:36,611 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2023-09-19 09:33:36,867 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2023-09-19 09:33:37,434 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:37,572 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-19 09:33:37,645 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-19 09:33:38,025 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-19 09:33:38,434 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:39,435 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:40,438 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:41,442 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:42,442 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-19 09:33:43,113 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=5007.56732, max=5007.56732, mean=5007.56732, stddev=0.0, median=5007.56732, p75=5007.56732, p95=5007.56732, p98=5007.56732, p99=5007.56732, p999=5007.56732, mean_rate=0.1619755024161884, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-19 09:33:43,113 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 10
2023-09-19 09:33:43,114 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-19 09:33:43,114 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230919 09:33:43.505" endtime="20230919 09:33:43.506"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:33:43.507" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:33:43.506" endtime="20230919 09:33:43.507"/>
</kw>
<status status="PASS" starttime="20230919 09:33:26.222" endtime="20230919 09:33:43.507"/>
</kw>
<msg timestamp="20230919 09:33:43.507" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:33:26.222" endtime="20230919 09:33:43.507"/>
</kw>
<msg timestamp="20230919 09:33:43.508" level="INFO">${result} = 2023-09-19 09:33:33,022 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:33:33,250 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:33:26.221" endtime="20230919 09:33:43.508"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:33:43.508" endtime="20230919 09:33:43.508"/>
</kw>
<status status="PASS" starttime="20230919 09:33:26.214" endtime="20230919 09:33:43.508"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:33:43.515" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p zgaQvur47I  2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:33:58.723" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:33:58.723" level="INFO">${output} = 2023-09-19 09:33:51,772 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:33:51,991 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:33:43.512" endtime="20230919 09:33:58.723"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:33:58.725" level="INFO">2023-09-19 09:33:51,772 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:33:51,991 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-19 09:33:51,991 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-19 09:33:52,079 [main] INFO freon.BaseFreonGenerator: Executing test with prefix zgaQvur47I and number-of-tests 1
2023-09-19 09:33:52,137 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:53,142 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:54,143 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:55,009 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-19 09:33:55,192 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:56,193 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:57,194 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:33:58,194 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-19 09:33:58,334 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=131.744466, max=131.744466, mean=131.744466, stddev=0.0, median=131.744466, p75=131.744466, p95=131.744466, p98=131.744466, p99=131.744466, p999=131.744466, mean_rate=0.8866040236298237, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-19 09:33:58,335 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-19 09:33:58,335 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-19 09:33:58,335 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230919 09:33:58.724" endtime="20230919 09:33:58.725"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:33:58.726" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:33:58.725" endtime="20230919 09:33:58.726"/>
</kw>
<status status="PASS" starttime="20230919 09:33:43.511" endtime="20230919 09:33:58.726"/>
</kw>
<msg timestamp="20230919 09:33:58.726" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:33:43.511" endtime="20230919 09:33:58.726"/>
</kw>
<msg timestamp="20230919 09:33:58.726" level="INFO">${result} = 2023-09-19 09:33:51,772 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:33:51,991 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:33:43.510" endtime="20230919 09:33:58.727"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:33:58.727" endtime="20230919 09:33:58.727"/>
</kw>
<status status="PASS" starttime="20230919 09:33:43.509" endtime="20230919 09:33:58.727"/>
</kw>
<status status="PASS" starttime="20230919 09:33:26.213" endtime="20230919 09:33:58.728"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:33:58.735" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:00.527" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:00.527" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20230919 09:33:58.730" endtime="20230919 09:34:00.527"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:00.529" level="INFO">40s</msg>
<status status="PASS" starttime="20230919 09:34:00.528" endtime="20230919 09:34:00.529"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:00.530" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:00.529" endtime="20230919 09:34:00.530"/>
</kw>
<status status="PASS" starttime="20230919 09:33:58.729" endtime="20230919 09:34:00.530"/>
</kw>
<msg timestamp="20230919 09:34:00.530" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:33:58.729" endtime="20230919 09:34:00.530"/>
</kw>
<msg timestamp="20230919 09:34:00.531" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20230919 09:33:58.728" endtime="20230919 09:34:00.531"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20230919 09:34:00.532" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20230919 09:34:00.531" endtime="20230919 09:34:00.532"/>
</kw>
<msg timestamp="20230919 09:34:00.533" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20230919 09:33:58.728" endtime="20230919 09:34:00.533"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20230919 09:34:00.534" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230919 09:34:00.533" endtime="20230919 09:34:00.534"/>
</kw>
<msg timestamp="20230919 09:34:00.534" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20230919 09:34:00.533" endtime="20230919 09:34:00.534"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:00.540" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:00.838" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:00.838" level="INFO">${output} = 0115D18DEC65</msg>
<status status="PASS" starttime="20230919 09:34:00.536" endtime="20230919 09:34:00.838"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:00.842" level="INFO">0115D18DEC65</msg>
<status status="PASS" starttime="20230919 09:34:00.840" endtime="20230919 09:34:00.842"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:00.844" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:00.843" endtime="20230919 09:34:00.844"/>
</kw>
<status status="PASS" starttime="20230919 09:34:00.536" endtime="20230919 09:34:00.844"/>
</kw>
<msg timestamp="20230919 09:34:00.844" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:00.536" endtime="20230919 09:34:00.844"/>
</kw>
<msg timestamp="20230919 09:34:00.845" level="INFO">${certSerial} = 0115D18DEC65</msg>
<status status="PASS" starttime="20230919 09:34:00.535" endtime="20230919 09:34:00.845"/>
</kw>
<msg timestamp="20230919 09:34:00.845" level="INFO">${certId1} = 0115D18DEC65</msg>
<status status="PASS" starttime="20230919 09:34:00.535" endtime="20230919 09:34:00.845"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:00.863" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:01.108" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:01.108" level="INFO">${output} = 01165B5DE900</msg>
<status status="PASS" starttime="20230919 09:34:00.859" endtime="20230919 09:34:01.108"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:01.110" level="INFO">01165B5DE900</msg>
<status status="PASS" starttime="20230919 09:34:01.109" endtime="20230919 09:34:01.110"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:01.111" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:01.110" endtime="20230919 09:34:01.111"/>
</kw>
<status status="PASS" starttime="20230919 09:34:00.858" endtime="20230919 09:34:01.112"/>
</kw>
<msg timestamp="20230919 09:34:01.112" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:00.857" endtime="20230919 09:34:01.112"/>
</kw>
<msg timestamp="20230919 09:34:01.112" level="INFO">${certSerial} = 01165B5DE900</msg>
<status status="PASS" starttime="20230919 09:34:00.854" endtime="20230919 09:34:01.112"/>
</kw>
<msg timestamp="20230919 09:34:01.113" level="INFO">${newCertId} = 01165B5DE900</msg>
<status status="PASS" starttime="20230919 09:34:00.850" endtime="20230919 09:34:01.113"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20230919 09:34:01.113" endtime="20230919 09:34:01.114"/>
</kw>
<status status="PASS" starttime="20230919 09:34:00.846" endtime="20230919 09:34:01.114"/>
</kw>
<status status="PASS" starttime="20230919 09:34:00.845" endtime="20230919 09:34:01.115"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230919 09:34:01.117" level="INFO">${random} = RxOGlDEaxL</msg>
<status status="PASS" starttime="20230919 09:34:01.116" endtime="20230919 09:34:01.117"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:01.129" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p RxOGlDEaxL  2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:13.446" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:13.446" level="INFO">${output} = 2023-09-19 09:34:04,200 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:34:04,358 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:34:01.125" endtime="20230919 09:34:13.446"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:13.448" level="INFO">2023-09-19 09:34:04,200 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:34:04,358 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-19 09:34:04,358 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-19 09:34:04,512 [main] INFO freon.BaseFreonGenerator: Executing test with prefix RxOGlDEaxL and number-of-tests 1
2023-09-19 09:34:04,698 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:05,733 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:06,733 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:07,735 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:08,736 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:09,737 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:09,786 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-19 09:34:09,860 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2023-09-19 09:34:10,214 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2023-09-19 09:34:10,738 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:11,739 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:12,740 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-19 09:34:13,088 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2367.515504, max=2367.515504, mean=2367.515504, stddev=0.0, median=2367.515504, p75=2367.515504, p95=2367.515504, p98=2367.515504, p99=2367.515504, p999=2367.515504, mean_rate=0.2672382583015357, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-19 09:34:13,089 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2023-09-19 09:34:13,089 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-19 09:34:13,089 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230919 09:34:13.447" endtime="20230919 09:34:13.448"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:13.449" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:13.448" endtime="20230919 09:34:13.449"/>
</kw>
<status status="PASS" starttime="20230919 09:34:01.124" endtime="20230919 09:34:13.449"/>
</kw>
<msg timestamp="20230919 09:34:13.449" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:01.123" endtime="20230919 09:34:13.449"/>
</kw>
<msg timestamp="20230919 09:34:13.450" level="INFO">${result} = 2023-09-19 09:34:04,200 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:34:04,358 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:34:01.122" endtime="20230919 09:34:13.450"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:34:13.450" endtime="20230919 09:34:13.450"/>
</kw>
<status status="PASS" starttime="20230919 09:34:01.117" endtime="20230919 09:34:13.450"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:13.457" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p RxOGlDEaxL  2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:24.457" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:24.457" level="INFO">${output} = 2023-09-19 09:34:17,597 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:34:18,143 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:34:13.454" endtime="20230919 09:34:24.457"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:24.459" level="INFO">2023-09-19 09:34:17,597 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:34:18,143 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2023-09-19 09:34:18,143 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2023-09-19 09:34:18,427 [main] INFO freon.BaseFreonGenerator: Executing test with prefix RxOGlDEaxL and number-of-tests 1
2023-09-19 09:34:18,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:19,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:20,537 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:21,458 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2023-09-19 09:34:21,538 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:22,538 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2023-09-19 09:34:23,539 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2023-09-19 09:34:24,061 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=60.463279, max=60.463279, mean=60.463279, stddev=0.0, median=60.463279, p75=60.463279, p95=60.463279, p98=60.463279, p99=60.463279, p999=60.463279, mean_rate=0.9179104235872695, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2023-09-19 09:34:24,063 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2023-09-19 09:34:24,071 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2023-09-19 09:34:24,071 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20230919 09:34:24.458" endtime="20230919 09:34:24.460"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:24.461" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:24.460" endtime="20230919 09:34:24.461"/>
</kw>
<status status="PASS" starttime="20230919 09:34:13.453" endtime="20230919 09:34:24.461"/>
</kw>
<msg timestamp="20230919 09:34:24.461" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:13.453" endtime="20230919 09:34:24.462"/>
</kw>
<msg timestamp="20230919 09:34:24.462" level="INFO">${result} = 2023-09-19 09:34:17,597 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2023-09-19 09:34:18,143 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20230919 09:34:13.452" endtime="20230919 09:34:24.462"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:34:24.462" endtime="20230919 09:34:24.463"/>
</kw>
<status status="PASS" starttime="20230919 09:34:13.450" endtime="20230919 09:34:24.463"/>
</kw>
<status status="PASS" starttime="20230919 09:34:01.115" endtime="20230919 09:34:24.464"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230919 09:33:26.209" endtime="20230919 09:34:24.464"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20230919 09:33:25.795" endtime="20230919 09:34:24.466"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:24.482" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:32.983" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:32.983" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:24.478" endtime="20230919 09:34:32.983"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:32.985" level="INFO"/>
<status status="PASS" starttime="20230919 09:34:32.984" endtime="20230919 09:34:32.985"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:32.986" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:32.985" endtime="20230919 09:34:32.986"/>
</kw>
<status status="PASS" starttime="20230919 09:34:24.478" endtime="20230919 09:34:32.987"/>
</kw>
<msg timestamp="20230919 09:34:32.987" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:24.478" endtime="20230919 09:34:32.987"/>
</kw>
<msg timestamp="20230919 09:34:32.987" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:24.477" endtime="20230919 09:34:32.988"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:34:32.988" endtime="20230919 09:34:32.988"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:32.993" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:42.103" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:42.103" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:32.991" endtime="20230919 09:34:42.103"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:42.105" level="INFO"/>
<status status="PASS" starttime="20230919 09:34:42.104" endtime="20230919 09:34:42.105"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:42.106" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:42.105" endtime="20230919 09:34:42.106"/>
</kw>
<status status="PASS" starttime="20230919 09:34:32.990" endtime="20230919 09:34:42.106"/>
</kw>
<msg timestamp="20230919 09:34:42.106" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:32.989" endtime="20230919 09:34:42.106"/>
</kw>
<msg timestamp="20230919 09:34:42.106" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:32.989" endtime="20230919 09:34:42.106"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:34:42.107" endtime="20230919 09:34:42.107"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230919 09:34:24.476" endtime="20230919 09:34:42.107"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:42.113" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20230919 09:34:42.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:42.117" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:42.110" endtime="20230919 09:34:42.117"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:42.118" level="INFO"/>
<status status="PASS" starttime="20230919 09:34:42.117" endtime="20230919 09:34:42.118"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:42.119" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:42.118" endtime="20230919 09:34:42.119"/>
</kw>
<status status="PASS" starttime="20230919 09:34:42.109" endtime="20230919 09:34:42.119"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:42.125" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:53.333" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:53.333" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:42.122" endtime="20230919 09:34:53.333"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:53.334" level="INFO"/>
<status status="PASS" starttime="20230919 09:34:53.334" endtime="20230919 09:34:53.335"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:53.335" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:53.335" endtime="20230919 09:34:53.336"/>
</kw>
<status status="PASS" starttime="20230919 09:34:42.121" endtime="20230919 09:34:53.336"/>
</kw>
<msg timestamp="20230919 09:34:53.336" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:42.120" endtime="20230919 09:34:53.336"/>
</kw>
<msg timestamp="20230919 09:34:53.336" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:42.119" endtime="20230919 09:34:53.336"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:34:53.336" endtime="20230919 09:34:53.337"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:53.341" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:34:53.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:34:53.344" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:53.338" endtime="20230919 09:34:53.345"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:34:53.346" level="INFO"/>
<status status="PASS" starttime="20230919 09:34:53.345" endtime="20230919 09:34:53.346"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:34:53.347" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:34:53.346" endtime="20230919 09:34:53.347"/>
</kw>
<status status="PASS" starttime="20230919 09:34:53.337" endtime="20230919 09:34:53.347"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230919 09:34:42.108" endtime="20230919 09:34:53.348"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230919 09:34:53.350" level="INFO">${random} = 17843</msg>
<status status="PASS" starttime="20230919 09:34:53.350" endtime="20230919 09:34:53.350"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:34:53.355" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-17843 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:35:03.269" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:35:03.269" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:53.352" endtime="20230919 09:35:03.269"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:35:03.270" level="INFO"/>
<status status="PASS" starttime="20230919 09:35:03.269" endtime="20230919 09:35:03.270"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:35:03.271" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:35:03.271" endtime="20230919 09:35:03.271"/>
</kw>
<status status="PASS" starttime="20230919 09:34:53.352" endtime="20230919 09:35:03.271"/>
</kw>
<msg timestamp="20230919 09:35:03.271" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20230919 09:34:53.352" endtime="20230919 09:35:03.272"/>
</kw>
<msg timestamp="20230919 09:35:03.272" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:34:53.351" endtime="20230919 09:35:03.272"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:35:03.272" endtime="20230919 09:35:03.273"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:35:03.276" level="INFO">Running command 'cat /tmp/key-17843 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:35:03.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:35:03.280" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230919 09:35:03.273" endtime="20230919 09:35:03.280"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:35:03.281" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230919 09:35:03.280" endtime="20230919 09:35:03.281"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:35:03.282" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:35:03.281" endtime="20230919 09:35:03.282"/>
</kw>
<msg timestamp="20230919 09:35:03.282" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20230919 09:35:03.273" endtime="20230919 09:35:03.282"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20230919 09:35:03.282" endtime="20230919 09:35:03.283"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20230919 09:35:03.287" level="INFO">Running command 'rm /tmp/key-17843 2&gt;&amp;1'.</msg>
<msg timestamp="20230919 09:35:03.289" level="INFO">${rc} = 0</msg>
<msg timestamp="20230919 09:35:03.289" level="INFO">${output} = </msg>
<status status="PASS" starttime="20230919 09:35:03.284" endtime="20230919 09:35:03.289"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230919 09:35:03.291" level="INFO"/>
<status status="PASS" starttime="20230919 09:35:03.290" endtime="20230919 09:35:03.291"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20230919 09:35:03.291" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230919 09:35:03.291" endtime="20230919 09:35:03.291"/>
</kw>
<status status="PASS" starttime="20230919 09:35:03.283" endtime="20230919 09:35:03.292"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20230919 09:34:53.349" endtime="20230919 09:35:03.292"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20230919 09:34:24.468" endtime="20230919 09:35:03.293"/>
</suite>
<status status="PASS" starttime="20230919 09:33:25.715" endtime="20230919 09:35:03.296"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
