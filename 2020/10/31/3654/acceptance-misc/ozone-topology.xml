<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20201031 13:15:24.383" generator="Rebot 3.2.2 (Python 2.7.17 on linux2)">
<suite id="s1" name="ozone-topology">
<suite source="/opt/hadoop/smoketest/basic/basic.robot" id="s1-s1" name="Basic">
<test id="s1-s1-t1" name="Check webui static resources">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<status status="PASS" endtime="20201031 13:12:19.211" starttime="20201031 13:12:19.210"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:12:19.216" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:12:19.304" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:12:19.304" level="INFO">${output} = HTTP/1.1 200 OK
Date: Sat, 31 Oct 2020 13:12:19 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Sat, 31 Oct 2020 12:36:28 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201031 13:12:19.304" starttime="20201031 13:12:19.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:12:19.305" level="INFO">HTTP/1.1 200 OK
Date: Sat, 31 Oct 2020 13:12:19 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Sat, 31 Oct 2020 12:36:28 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" endtime="20201031 13:12:19.305" starttime="20201031 13:12:19.305"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:12:19.306" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:12:19.306" starttime="20201031 13:12:19.306"></status>
</kw>
<status status="PASS" endtime="20201031 13:12:19.307" starttime="20201031 13:12:19.212"></status>
</kw>
<msg timestamp="20201031 13:12:19.307" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:12:19.307" starttime="20201031 13:12:19.211"></status>
</kw>
<msg timestamp="20201031 13:12:19.307" level="INFO">${result} = HTTP/1.1 200 OK
Date: Sat, 31 Oct 2020 13:12:19 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Sat, 31 Oct 2020 12:36:28 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201031 13:12:19.307" starttime="20201031 13:12:19.211"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20201031 13:12:19.308" starttime="20201031 13:12:19.307"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:12:19.308" critical="yes" starttime="20201031 13:12:19.209"></status>
</test>
<test id="s1-s1-t2" name="Start freon testing">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<status status="PASS" endtime="20201031 13:12:19.311" starttime="20201031 13:12:19.311"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:12:19.315" level="INFO">Running command 'ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:13:36.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:13:36.339" level="INFO">${output} = 2020-10-31 13:12:20,943 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-10-31 13:12:21,145 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201031 13:13:36.339" starttime="20201031 13:12:19.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:13:36.342" level="INFO">2020-10-31 13:12:20,943 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-10-31 13:12:21,145 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-10-31 13:12:21,146 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-10-31 13:12:23,089 [main] INFO freon.RandomKeyGenerator: Number of Threads: 1
2020-10-31 13:12:23,090 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 5.
2020-10-31 13:12:23,090 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 5.
2020-10-31 13:12:23,090 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 5.
2020-10-31 13:12:23,090 [main] INFO freon.RandomKeyGenerator: Key size: 10240 bytes
2020-10-31 13:12:23,091 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-10-31 13:12:23,091 [main] INFO freon.RandomKeyGenerator: validateWrites : true
2020-10-31 13:12:23,093 [main] INFO freon.RandomKeyGenerator: Data validation is enabled.
2020-10-31 13:12:23,094 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-10-31 13:12:23,106 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-10-31 13:12:23,149 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-70452, with hadoop as owner.
2020-10-31 13:12:23,443 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-1-04940, with hadoop as owner.
2020-10-31 13:12:23,480 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-2-80353, with hadoop as owner.
2020-10-31 13:12:23,491 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-3-05856, with hadoop as owner.
2020-10-31 13:12:23,507 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-4-01258, with hadoop as owner.
2020-10-31 13:12:23,534 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-70452/bucket-0-07864, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,623 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-04940/bucket-0-55700, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,635 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-80353/bucket-0-08397, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,654 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-05856/bucket-0-74675, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,664 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-01258/bucket-0-25710, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,674 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-70452/bucket-1-27207, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,684 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-04940/bucket-1-93563, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,691 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-80353/bucket-1-62137, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,701 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-05856/bucket-1-35532, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,712 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-01258/bucket-1-53037, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,718 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-70452/bucket-2-06964, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,724 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-04940/bucket-2-45520, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,738 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-80353/bucket-2-06265, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,746 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-05856/bucket-2-04866, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,754 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-01258/bucket-2-96292, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,762 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-70452/bucket-3-65726, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,770 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-04940/bucket-3-53856, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,777 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-80353/bucket-3-71980, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,786 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-05856/bucket-3-07995, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,795 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-01258/bucket-3-81918, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,808 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-70452/bucket-4-88936, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,817 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-04940/bucket-4-38470, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,821 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-80353/bucket-4-83919, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,825 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-05856/bucket-4-12783, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:23,829 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-01258/bucket-4-55481, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 13:12:24,109 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-10-31 13:12:25,025 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-10-31 13:12:25,109 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-10-31 13:12:25,359 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2020-10-31 13:12:25,359 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-18B9CB03C249-&gt;400ab978-1d6f-48cb-8d82-f18bc2e59d7f
2020-10-31 13:12:25,360 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-10-31 13:12:26,109 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-10-31 13:12:27,110 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-10-31 13:12:28,022 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-E569DB3C80B9-&gt;f4fbde0b-e34c-43b9-aec0-4596166d2774
2020-10-31 13:12:28,022 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-10-31 13:12:28,115 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-10-31 13:12:29,116 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-10-31 13:12:30,117 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-10-31 13:12:31,117 [Thread-7] INFO freon.ProgressBar: Progress: 2.40 % (3 out of 125)
2020-10-31 13:12:31,122 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-74490FBE09E6-&gt;f4fbde0b-e34c-43b9-aec0-4596166d2774
2020-10-31 13:12:31,122 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-10-31 13:12:32,118 [Thread-7] INFO freon.ProgressBar: Progress: 7.20 % (9 out of 125)
2020-10-31 13:12:33,118 [Thread-7] INFO freon.ProgressBar: Progress: 12.00 % (15 out of 125)
2020-10-31 13:12:34,118 [Thread-7] INFO freon.ProgressBar: Progress: 12.00 % (15 out of 125)
2020-10-31 13:12:35,119 [Thread-7] INFO freon.ProgressBar: Progress: 12.00 % (15 out of 125)
2020-10-31 13:12:36,120 [Thread-7] INFO freon.ProgressBar: Progress: 17.60 % (22 out of 125)
2020-10-31 13:12:37,121 [Thread-7] INFO freon.ProgressBar: Progress: 20.00 % (25 out of 125)
2020-10-31 13:12:38,121 [Thread-7] INFO freon.ProgressBar: Progress: 20.00 % (25 out of 125)
2020-10-31 13:12:39,122 [Thread-7] INFO freon.ProgressBar: Progress: 20.80 % (26 out of 125)
2020-10-31 13:12:40,123 [Thread-7] INFO freon.ProgressBar: Progress: 20.80 % (26 out of 125)
2020-10-31 13:12:41,123 [Thread-7] INFO freon.ProgressBar: Progress: 20.80 % (26 out of 125)
2020-10-31 13:12:42,124 [Thread-7] INFO freon.ProgressBar: Progress: 22.40 % (28 out of 125)
2020-10-31 13:12:43,124 [Thread-7] INFO freon.ProgressBar: Progress: 22.40 % (28 out of 125)
2020-10-31 13:12:44,125 [Thread-7] INFO freon.ProgressBar: Progress: 23.20 % (29 out of 125)
2020-10-31 13:12:45,126 [Thread-7] INFO freon.ProgressBar: Progress: 33.60 % (42 out of 125)
2020-10-31 13:12:46,126 [Thread-7] INFO freon.ProgressBar: Progress: 36.80 % (46 out of 125)
2020-10-31 13:12:47,127 [Thread-7] INFO freon.ProgressBar: Progress: 36.80 % (46 out of 125)
2020-10-31 13:12:48,127 [Thread-7] INFO freon.ProgressBar: Progress: 38.40 % (48 out of 125)
2020-10-31 13:12:49,128 [Thread-7] INFO freon.ProgressBar: Progress: 43.20 % (54 out of 125)
2020-10-31 13:12:50,128 [Thread-7] INFO freon.ProgressBar: Progress: 43.20 % (54 out of 125)
2020-10-31 13:12:51,129 [Thread-7] INFO freon.ProgressBar: Progress: 43.20 % (54 out of 125)
2020-10-31 13:12:52,129 [Thread-7] INFO freon.ProgressBar: Progress: 44.00 % (55 out of 125)
2020-10-31 13:12:53,130 [Thread-7] INFO freon.ProgressBar: Progress: 44.00 % (55 out of 125)
2020-10-31 13:12:54,133 [Thread-7] INFO freon.ProgressBar: Progress: 48.80 % (61 out of 125)
2020-10-31 13:12:55,134 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-10-31 13:12:56,134 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-10-31 13:12:57,135 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-10-31 13:12:58,135 [Thread-7] INFO freon.ProgressBar: Progress: 61.60 % (77 out of 125)
2020-10-31 13:12:59,136 [Thread-7] INFO freon.ProgressBar: Progress: 61.60 % (77 out of 125)
2020-10-31 13:13:00,136 [Thread-7] INFO freon.ProgressBar: Progress: 61.60 % (77 out of 125)
2020-10-31 13:13:01,136 [Thread-7] INFO freon.ProgressBar: Progress: 66.40 % (83 out of 125)
2020-10-31 13:13:02,137 [Thread-7] INFO freon.ProgressBar: Progress: 66.40 % (83 out of 125)
2020-10-31 13:13:03,137 [Thread-7] INFO freon.ProgressBar: Progress: 66.40 % (83 out of 125)
2020-10-31 13:13:04,138 [Thread-7] INFO freon.ProgressBar: Progress: 67.20 % (84 out of 125)
2020-10-31 13:13:05,138 [Thread-7] INFO freon.ProgressBar: Progress: 67.20 % (84 out of 125)
2020-10-31 13:13:06,139 [Thread-7] INFO freon.ProgressBar: Progress: 69.60 % (87 out of 125)
2020-10-31 13:13:07,139 [Thread-7] INFO freon.ProgressBar: Progress: 69.60 % (87 out of 125)
2020-10-31 13:13:08,140 [Thread-7] INFO freon.ProgressBar: Progress: 69.60 % (87 out of 125)
2020-10-31 13:13:09,140 [Thread-7] INFO freon.ProgressBar: Progress: 72.80 % (91 out of 125)
2020-10-31 13:13:10,141 [Thread-7] INFO freon.ProgressBar: Progress: 72.80 % (91 out of 125)
2020-10-31 13:13:11,141 [Thread-7] INFO freon.ProgressBar: Progress: 72.80 % (91 out of 125)
2020-10-31 13:13:12,142 [Thread-7] INFO freon.ProgressBar: Progress: 80.00 % (100 out of 125)
2020-10-31 13:13:13,142 [Thread-7] INFO freon.ProgressBar: Progress: 80.00 % (100 out of 125)
2020-10-31 13:13:14,143 [Thread-7] INFO freon.ProgressBar: Progress: 80.00 % (100 out of 125)
2020-10-31 13:13:15,143 [Thread-7] INFO freon.ProgressBar: Progress: 81.60 % (102 out of 125)
2020-10-31 13:13:16,144 [Thread-7] INFO freon.ProgressBar: Progress: 81.60 % (102 out of 125)
2020-10-31 13:13:17,144 [Thread-7] INFO freon.ProgressBar: Progress: 84.80 % (106 out of 125)
2020-10-31 13:13:18,145 [Thread-7] INFO freon.ProgressBar: Progress: 85.60 % (107 out of 125)
2020-10-31 13:13:19,145 [Thread-7] INFO freon.ProgressBar: Progress: 85.60 % (107 out of 125)
2020-10-31 13:13:20,145 [Thread-7] INFO freon.ProgressBar: Progress: 86.40 % (108 out of 125)
2020-10-31 13:13:21,146 [Thread-7] INFO freon.ProgressBar: Progress: 86.40 % (108 out of 125)
2020-10-31 13:13:22,146 [Thread-7] INFO freon.ProgressBar: Progress: 86.40 % (108 out of 125)
2020-10-31 13:13:23,147 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-10-31 13:13:24,147 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-10-31 13:13:25,148 [Thread-7] INFO freon.ProgressBar: Progress: 90.40 % (113 out of 125)
2020-10-31 13:13:26,148 [Thread-7] INFO freon.ProgressBar: Progress: 90.40 % (113 out of 125)
2020-10-31 13:13:27,149 [Thread-7] INFO freon.ProgressBar: Progress: 90.40 % (113 out of 125)
2020-10-31 13:13:27,669 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-633498C1A9C1-&gt;f4fbde0b-e34c-43b9-aec0-4596166d2774
2020-10-31 13:13:27,669 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-10-31 13:13:28,149 [Thread-7] INFO freon.ProgressBar: Progress: 96.00 % (120 out of 125)
2020-10-31 13:13:29,150 [Thread-7] INFO freon.ProgressBar: Progress: 96.00 % (120 out of 125)
2020-10-31 13:13:30,150 [Thread-7] INFO freon.ProgressBar: Progress: 96.00 % (120 out of 125)
2020-10-31 13:13:31,151 [Thread-7] INFO freon.ProgressBar: Progress: 100.00 % (125 out of 125)

***************************************************
Status: Success
Git Base Revision: b3cbbb467e22ea829b3808f4b7b01d07e0bf3842
Number of Volumes created: 5
Number of Buckets created: 25
Number of Keys added: 125
Ratis replication factor: THREE
Ratis replication type: RATIS
Average Time spent in volume creation: 00:00:00,347
Average Time spent in bucket creation: 00:00:00,194
Average Time spent in key creation: 00:00:02,272
Average Time spent in key write: 00:00:01,007
Total bytes written: 1280000
Total number of writes validated: 125
Writes validated: 100.0 %
Successful validation: 125
Unsuccessful validation: 0
Total Execution time: 00:01:14,690
***************************************************</msg>
<status status="PASS" endtime="20201031 13:13:36.342" starttime="20201031 13:13:36.341"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:13:36.343" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:13:36.343" starttime="20201031 13:13:36.342"></status>
</kw>
<status status="PASS" endtime="20201031 13:13:36.343" starttime="20201031 13:12:19.312"></status>
</kw>
<msg timestamp="20201031 13:13:36.343" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:13:36.343" starttime="20201031 13:12:19.312"></status>
</kw>
<msg timestamp="20201031 13:13:36.344" level="INFO">${result} = 2020-10-31 13:12:20,943 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-10-31 13:12:21,145 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201031 13:13:36.344" starttime="20201031 13:12:19.311"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:36.345" starttime="20201031 13:13:36.344"></status>
</kw>
<status status="PASS" endtime="20201031 13:13:36.345" starttime="20201031 13:13:36.344"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Status: Success</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:36.345" starttime="20201031 13:13:36.345"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:13:36.345" critical="yes" starttime="20201031 13:12:19.310"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 13:13:36.346" starttime="20201031 13:12:19.162"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/cli.robot" id="s1-s2" name="Cli">
<test id="s1-s2-t1" name="Run printTopology">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:13:41.037" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:13:43.743" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:13:43.743" level="INFO">${output} = State = HEALTHY
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201031 13:13:43.743" starttime="20201031 13:13:41.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:13:43.744" level="INFO">State = HEALTHY
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1</msg>
<status status="PASS" endtime="20201031 13:13:43.744" starttime="20201031 13:13:43.744"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:13:43.745" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:13:43.745" starttime="20201031 13:13:43.745"></status>
</kw>
<status status="PASS" endtime="20201031 13:13:43.745" starttime="20201031 13:13:41.032"></status>
</kw>
<msg timestamp="20201031 13:13:43.746" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:13:43.746" starttime="20201031 13:13:41.032"></status>
</kw>
<msg timestamp="20201031 13:13:43.746" level="INFO">${output} = State = HEALTHY
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201031 13:13:43.746" starttime="20201031 13:13:41.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
<arg>/rack2</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:43.747" starttime="20201031 13:13:43.746"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:13:43.747" critical="yes" starttime="20201031 13:13:41.031"></status>
</test>
<test id="s1-s2-t2" name="Run printTopology -o">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology -o</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:13:43.753" level="INFO">Running command 'ozone admin printTopology -o 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:13:46.194" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:13:46.194" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201031 13:13:46.194" starttime="20201031 13:13:43.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:13:46.195" level="INFO">State = HEALTHY
Location: /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
Location: /rack2
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net)
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net)</msg>
<status status="PASS" endtime="20201031 13:13:46.195" starttime="20201031 13:13:46.194"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:13:46.196" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:13:46.196" starttime="20201031 13:13:46.195"></status>
</kw>
<status status="PASS" endtime="20201031 13:13:46.196" starttime="20201031 13:13:43.749"></status>
</kw>
<msg timestamp="20201031 13:13:46.196" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:13:46.196" starttime="20201031 13:13:43.749"></status>
</kw>
<msg timestamp="20201031 13:13:46.196" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201031 13:13:46.196" starttime="20201031 13:13:43.748"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Location: /rack2</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:46.197" starttime="20201031 13:13:46.197"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:46.197" starttime="20201031 13:13:46.197"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:13:46.198" critical="yes" starttime="20201031 13:13:43.748"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 13:13:46.199" starttime="20201031 13:13:40.981"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/loaddata.robot" id="s1-s3" name="Loaddata">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh volume create topvol1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:13:50.823" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:13:53.684" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:13:53.684" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:13:53.684" starttime="20201031 13:13:50.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:13:53.685" level="INFO"></msg>
<status status="PASS" endtime="20201031 13:13:53.686" starttime="20201031 13:13:53.685"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:13:53.686" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:13:53.686" starttime="20201031 13:13:53.686"></status>
</kw>
<status status="PASS" endtime="20201031 13:13:53.687" starttime="20201031 13:13:50.818"></status>
</kw>
<msg timestamp="20201031 13:13:53.687" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:13:53.687" starttime="20201031 13:13:50.818"></status>
</kw>
<msg timestamp="20201031 13:13:53.687" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:13:53.687" starttime="20201031 13:13:50.818"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:53.687" starttime="20201031 13:13:53.687"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:13:53.691" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:13:56.395" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:13:56.395" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:13:56.396" starttime="20201031 13:13:53.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:13:56.397" level="INFO"></msg>
<status status="PASS" endtime="20201031 13:13:56.397" starttime="20201031 13:13:56.396"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:13:56.397" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:13:56.397" starttime="20201031 13:13:56.397"></status>
</kw>
<status status="PASS" endtime="20201031 13:13:56.398" starttime="20201031 13:13:53.688"></status>
</kw>
<msg timestamp="20201031 13:13:56.398" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:13:56.398" starttime="20201031 13:13:53.688"></status>
</kw>
<msg timestamp="20201031 13:13:56.398" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:13:56.398" starttime="20201031 13:13:53.688"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 13:13:56.399" starttime="20201031 13:13:56.398"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:13:56.403" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:14:01.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:14:01.409" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:14:01.409" starttime="20201031 13:13:56.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:14:01.410" level="INFO"></msg>
<status status="PASS" endtime="20201031 13:14:01.410" starttime="20201031 13:14:01.409"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:14:01.411" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:14:01.411" starttime="20201031 13:14:01.410"></status>
</kw>
<status status="PASS" endtime="20201031 13:14:01.411" starttime="20201031 13:13:56.400"></status>
</kw>
<msg timestamp="20201031 13:14:01.411" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:14:01.411" starttime="20201031 13:13:56.399"></status>
</kw>
<msg timestamp="20201031 13:14:01.412" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:14:01.412" starttime="20201031 13:13:56.399"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 13:14:01.412" starttime="20201031 13:14:01.412"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:14:01.412" critical="yes" starttime="20201031 13:13:50.817"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 13:14:01.414" starttime="20201031 13:13:50.762"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s4" name="readdata-second-half">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201031 13:15:12.871" level="INFO">${random} = 94259</msg>
<status status="PASS" endtime="20201031 13:15:12.871" starttime="20201031 13:15:12.870"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:15:12.877" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-94259 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:15:17.896" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:15:17.896" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:15:17.896" starttime="20201031 13:15:12.872"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:15:17.897" level="INFO"></msg>
<status status="PASS" endtime="20201031 13:15:17.897" starttime="20201031 13:15:17.896"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:15:17.898" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:15:17.898" starttime="20201031 13:15:17.897"></status>
</kw>
<status status="PASS" endtime="20201031 13:15:17.898" starttime="20201031 13:15:12.872"></status>
</kw>
<msg timestamp="20201031 13:15:17.898" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:15:17.898" starttime="20201031 13:15:12.871"></status>
</kw>
<msg timestamp="20201031 13:15:17.899" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:15:17.899" starttime="20201031 13:15:12.871"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 13:15:17.899" starttime="20201031 13:15:17.899"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:15:17.899" critical="yes" starttime="20201031 13:15:12.869"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 13:15:17.900" starttime="20201031 13:15:12.821"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s5" name="readdata-first-half">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201031 13:14:08.084" level="INFO">${random} = 67076</msg>
<status status="PASS" endtime="20201031 13:14:08.084" starttime="20201031 13:14:08.083"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 13:14:08.091" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-67076 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 13:14:42.920" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 13:14:42.920" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:14:42.920" starttime="20201031 13:14:08.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 13:14:42.921" level="INFO"></msg>
<status status="PASS" endtime="20201031 13:14:42.921" starttime="20201031 13:14:42.920"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 13:14:42.922" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 13:14:42.922" starttime="20201031 13:14:42.921"></status>
</kw>
<status status="PASS" endtime="20201031 13:14:42.922" starttime="20201031 13:14:08.085"></status>
</kw>
<msg timestamp="20201031 13:14:42.922" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 13:14:42.922" starttime="20201031 13:14:08.084"></status>
</kw>
<msg timestamp="20201031 13:14:42.923" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 13:14:42.923" starttime="20201031 13:14:08.084"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 13:14:42.923" starttime="20201031 13:14:42.923"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 13:14:42.924" critical="yes" starttime="20201031 13:14:08.082"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 13:14:42.925" starttime="20201031 13:14:08.034"></status>
</suite>
<status status="PASS" elapsedtime="133024" endtime="N/A" starttime="N/A"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="7">Critical Tests</stat>
<stat fail="0" pass="7">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-topology" pass="7">ozone-topology</stat>
<stat fail="0" id="s1-s1" name="Basic" pass="2">ozone-topology.Basic</stat>
<stat fail="0" id="s1-s2" name="Cli" pass="2">ozone-topology.Cli</stat>
<stat fail="0" id="s1-s3" name="Loaddata" pass="1">ozone-topology.Loaddata</stat>
<stat fail="0" id="s1-s4" name="readdata-second-half" pass="1">ozone-topology.readdata-second-half</stat>
<stat fail="0" id="s1-s5" name="readdata-first-half" pass="1">ozone-topology.readdata-first-half</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
