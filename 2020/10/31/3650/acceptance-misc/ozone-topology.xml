<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20201031 01:32:59.456" generator="Rebot 3.2.2 (Python 2.7.17 on linux2)">
<suite id="s1" name="ozone-topology">
<suite source="/opt/hadoop/smoketest/basic/basic.robot" id="s1-s1" name="Basic">
<test id="s1-s1-t1" name="Check webui static resources">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<status status="PASS" endtime="20201031 01:30:23.731" starttime="20201031 01:30:23.730"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:30:23.737" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:30:23.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:30:23.826" level="INFO">${output} = HTTP/1.1 200 OK
Date: Sat, 31 Oct 2020 01:30:23 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Sat, 31 Oct 2020 00:53:22 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201031 01:30:23.826" starttime="20201031 01:30:23.733"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:30:23.827" level="INFO">HTTP/1.1 200 OK
Date: Sat, 31 Oct 2020 01:30:23 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Sat, 31 Oct 2020 00:53:22 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" endtime="20201031 01:30:23.827" starttime="20201031 01:30:23.826"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:30:23.828" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:30:23.828" starttime="20201031 01:30:23.827"></status>
</kw>
<status status="PASS" endtime="20201031 01:30:23.828" starttime="20201031 01:30:23.733"></status>
</kw>
<msg timestamp="20201031 01:30:23.828" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:30:23.829" starttime="20201031 01:30:23.732"></status>
</kw>
<msg timestamp="20201031 01:30:23.829" level="INFO">${result} = HTTP/1.1 200 OK
Date: Sat, 31 Oct 2020 01:30:23 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Sat, 31 Oct 2020 00:53:22 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201031 01:30:23.829" starttime="20201031 01:30:23.731"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20201031 01:30:23.829" starttime="20201031 01:30:23.829"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:30:23.830" critical="yes" starttime="20201031 01:30:23.729"></status>
</test>
<test id="s1-s1-t2" name="Start freon testing">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<status status="PASS" endtime="20201031 01:30:23.834" starttime="20201031 01:30:23.834"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:30:23.839" level="INFO">Running command 'ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:31:16.576" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:31:16.576" level="INFO">${output} = 2020-10-31 01:30:25,490 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-10-31 01:30:25,642 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201031 01:31:16.576" starttime="20201031 01:30:23.836"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:31:16.577" level="INFO">2020-10-31 01:30:25,490 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-10-31 01:30:25,642 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-10-31 01:30:25,642 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-10-31 01:30:27,823 [main] INFO freon.RandomKeyGenerator: Number of Threads: 1
2020-10-31 01:30:27,825 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 5.
2020-10-31 01:30:27,825 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 5.
2020-10-31 01:30:27,826 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 5.
2020-10-31 01:30:27,827 [main] INFO freon.RandomKeyGenerator: Key size: 10240 bytes
2020-10-31 01:30:27,827 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-10-31 01:30:27,827 [main] INFO freon.RandomKeyGenerator: validateWrites : true
2020-10-31 01:30:27,840 [main] INFO freon.RandomKeyGenerator: Data validation is enabled.
2020-10-31 01:30:27,842 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-10-31 01:30:27,850 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-10-31 01:30:27,885 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-67140, with hadoop as owner.
2020-10-31 01:30:28,222 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-1-14565, with hadoop as owner.
2020-10-31 01:30:28,234 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-2-90664, with hadoop as owner.
2020-10-31 01:30:28,244 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-3-22629, with hadoop as owner.
2020-10-31 01:30:28,251 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-4-40432, with hadoop as owner.
2020-10-31 01:30:28,270 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-67140/bucket-0-12602, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,337 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-14565/bucket-0-63166, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,354 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-90664/bucket-0-42183, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,364 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-22629/bucket-0-16825, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,372 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-40432/bucket-0-75508, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,380 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-67140/bucket-1-90945, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,385 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-14565/bucket-1-42763, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,395 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-90664/bucket-1-79297, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,404 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-22629/bucket-1-25622, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,412 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-40432/bucket-1-07857, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,417 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-67140/bucket-2-40929, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,426 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-14565/bucket-2-57317, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,431 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-90664/bucket-2-40213, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,436 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-22629/bucket-2-75060, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,440 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-40432/bucket-2-91979, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,445 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-67140/bucket-3-43166, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,454 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-14565/bucket-3-99570, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,459 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-90664/bucket-3-64631, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,465 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-22629/bucket-3-98402, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,469 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-40432/bucket-3-39305, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,472 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-67140/bucket-4-24182, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,480 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-14565/bucket-4-07194, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,488 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-90664/bucket-4-32514, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,492 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-22629/bucket-4-85964, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,499 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-40432/bucket-4-75028, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-10-31 01:30:28,851 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-10-31 01:30:29,636 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-10-31 01:30:29,854 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-10-31 01:30:29,997 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2020-10-31 01:30:29,997 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-4DFC19C61D64-&gt;f6f0e194-7333-4e5d-9c83-bd66cd8e0af2
2020-10-31 01:30:29,999 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-10-31 01:30:30,855 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-10-31 01:30:31,855 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-10-31 01:30:32,628 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-80409E8678BF-&gt;fc6a40e6-2e48-4c9d-a739-734efc48a768
2020-10-31 01:30:32,628 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-10-31 01:30:32,856 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-10-31 01:30:33,857 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-10-31 01:30:34,857 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-10-31 01:30:35,858 [Thread-7] INFO freon.ProgressBar: Progress: 7.20 % (9 out of 125)
2020-10-31 01:30:36,859 [Thread-7] INFO freon.ProgressBar: Progress: 13.60 % (17 out of 125)
2020-10-31 01:30:37,860 [Thread-7] INFO freon.ProgressBar: Progress: 14.40 % (18 out of 125)
2020-10-31 01:30:38,861 [Thread-7] INFO freon.ProgressBar: Progress: 14.40 % (18 out of 125)
2020-10-31 01:30:39,862 [Thread-7] INFO freon.ProgressBar: Progress: 16.00 % (20 out of 125)
2020-10-31 01:30:40,863 [Thread-7] INFO freon.ProgressBar: Progress: 16.00 % (20 out of 125)
2020-10-31 01:30:41,863 [Thread-7] INFO freon.ProgressBar: Progress: 16.00 % (20 out of 125)
2020-10-31 01:30:42,864 [Thread-7] INFO freon.ProgressBar: Progress: 20.00 % (25 out of 125)
2020-10-31 01:30:43,864 [Thread-7] INFO freon.ProgressBar: Progress: 20.00 % (25 out of 125)
2020-10-31 01:30:44,865 [Thread-7] INFO freon.ProgressBar: Progress: 20.00 % (25 out of 125)
2020-10-31 01:30:45,866 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-10-31 01:30:46,866 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-10-31 01:30:47,867 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-10-31 01:30:48,867 [Thread-7] INFO freon.ProgressBar: Progress: 31.20 % (39 out of 125)
2020-10-31 01:30:49,876 [Thread-7] INFO freon.ProgressBar: Progress: 40.80 % (51 out of 125)
2020-10-31 01:30:50,877 [Thread-7] INFO freon.ProgressBar: Progress: 43.20 % (54 out of 125)
2020-10-31 01:30:51,878 [Thread-7] INFO freon.ProgressBar: Progress: 43.20 % (54 out of 125)
2020-10-31 01:30:52,886 [Thread-7] INFO freon.ProgressBar: Progress: 45.60 % (57 out of 125)
2020-10-31 01:30:53,886 [Thread-7] INFO freon.ProgressBar: Progress: 48.80 % (61 out of 125)
2020-10-31 01:30:54,887 [Thread-7] INFO freon.ProgressBar: Progress: 48.80 % (61 out of 125)
2020-10-31 01:30:55,888 [Thread-7] INFO freon.ProgressBar: Progress: 49.60 % (62 out of 125)
2020-10-31 01:30:56,888 [Thread-7] INFO freon.ProgressBar: Progress: 52.80 % (66 out of 125)
2020-10-31 01:30:57,889 [Thread-7] INFO freon.ProgressBar: Progress: 52.80 % (66 out of 125)
2020-10-31 01:30:58,893 [Thread-7] INFO freon.ProgressBar: Progress: 55.20 % (69 out of 125)
2020-10-31 01:30:59,893 [Thread-7] INFO freon.ProgressBar: Progress: 57.60 % (72 out of 125)
2020-10-31 01:31:00,894 [Thread-7] INFO freon.ProgressBar: Progress: 57.60 % (72 out of 125)
2020-10-31 01:31:01,898 [Thread-7] INFO freon.ProgressBar: Progress: 60.00 % (75 out of 125)
2020-10-31 01:31:02,898 [Thread-7] INFO freon.ProgressBar: Progress: 69.60 % (87 out of 125)
2020-10-31 01:31:03,898 [Thread-7] INFO freon.ProgressBar: Progress: 72.00 % (90 out of 125)
2020-10-31 01:31:04,899 [Thread-7] INFO freon.ProgressBar: Progress: 72.00 % (90 out of 125)
2020-10-31 01:31:05,900 [Thread-7] INFO freon.ProgressBar: Progress: 75.20 % (94 out of 125)
2020-10-31 01:31:06,900 [Thread-7] INFO freon.ProgressBar: Progress: 83.20 % (104 out of 125)
2020-10-31 01:31:07,901 [Thread-7] INFO freon.ProgressBar: Progress: 93.60 % (117 out of 125)
2020-10-31 01:31:08,901 [Thread-7] INFO freon.ProgressBar: Progress: 100.00 % (125 out of 125)

***************************************************
Status: Success
Git Base Revision: b3cbbb467e22ea829b3808f4b7b01d07e0bf3842
Number of Volumes created: 5
Number of Buckets created: 25
Number of Keys added: 125
Ratis replication factor: THREE
Ratis replication type: RATIS
Average Time spent in volume creation: 00:00:00,370
Average Time spent in bucket creation: 00:00:00,163
Average Time spent in key creation: 00:00:02,227
Average Time spent in key write: 00:00:00,982
Total bytes written: 1280000
Total number of writes validated: 125
Writes validated: 100.0 %
Successful validation: 125
Unsuccessful validation: 0
Total Execution time: 00:00:50,443
***************************************************</msg>
<status status="PASS" endtime="20201031 01:31:16.578" starttime="20201031 01:31:16.577"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:31:16.578" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:31:16.578" starttime="20201031 01:31:16.578"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:16.579" starttime="20201031 01:30:23.835"></status>
</kw>
<msg timestamp="20201031 01:31:16.579" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:31:16.579" starttime="20201031 01:30:23.835"></status>
</kw>
<msg timestamp="20201031 01:31:16.579" level="INFO">${result} = 2020-10-31 01:30:25,490 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-10-31 01:30:25,642 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201031 01:31:16.579" starttime="20201031 01:30:23.834"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:16.580" starttime="20201031 01:31:16.580"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:16.580" starttime="20201031 01:31:16.580"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Status: Success</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:16.581" starttime="20201031 01:31:16.581"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:31:16.581" critical="yes" starttime="20201031 01:30:23.831"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 01:31:16.583" starttime="20201031 01:30:23.680"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/cli.robot" id="s1-s2" name="Cli">
<test id="s1-s2-t1" name="Run printTopology">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:31:21.375" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:31:23.931" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:31:23.931" level="INFO">${output} = State = HEALTHY
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201031 01:31:23.931" starttime="20201031 01:31:21.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:31:23.932" level="INFO">State = HEALTHY
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1</msg>
<status status="PASS" endtime="20201031 01:31:23.932" starttime="20201031 01:31:23.931"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:31:23.933" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:31:23.933" starttime="20201031 01:31:23.932"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:23.933" starttime="20201031 01:31:21.369"></status>
</kw>
<msg timestamp="20201031 01:31:23.933" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:31:23.933" starttime="20201031 01:31:21.368"></status>
</kw>
<msg timestamp="20201031 01:31:23.934" level="INFO">${output} = State = HEALTHY
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201031 01:31:23.934" starttime="20201031 01:31:21.368"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
<arg>/rack2</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:23.934" starttime="20201031 01:31:23.934"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:31:23.935" critical="yes" starttime="20201031 01:31:21.366"></status>
</test>
<test id="s1-s2-t2" name="Run printTopology -o">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology -o</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:31:23.941" level="INFO">Running command 'ozone admin printTopology -o 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:31:26.438" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:31:26.438" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201031 01:31:26.438" starttime="20201031 01:31:23.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:31:26.439" level="INFO">State = HEALTHY
Location: /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
Location: /rack2
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net)
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net)</msg>
<status status="PASS" endtime="20201031 01:31:26.439" starttime="20201031 01:31:26.438"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:31:26.440" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:31:26.440" starttime="20201031 01:31:26.439"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:26.440" starttime="20201031 01:31:23.938"></status>
</kw>
<msg timestamp="20201031 01:31:26.440" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:31:26.440" starttime="20201031 01:31:23.937"></status>
</kw>
<msg timestamp="20201031 01:31:26.440" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201031 01:31:26.440" starttime="20201031 01:31:23.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Location: /rack2</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:26.441" starttime="20201031 01:31:26.441"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:26.441" starttime="20201031 01:31:26.441"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:31:26.442" critical="yes" starttime="20201031 01:31:23.936"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 01:31:26.443" starttime="20201031 01:31:21.315"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/loaddata.robot" id="s1-s3" name="Loaddata">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh volume create topvol1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:31:31.246" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:31:34.509" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:31:34.509" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:31:34.509" starttime="20201031 01:31:31.241"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:31:34.510" level="INFO"></msg>
<status status="PASS" endtime="20201031 01:31:34.510" starttime="20201031 01:31:34.509"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:31:34.511" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:31:34.511" starttime="20201031 01:31:34.510"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:34.511" starttime="20201031 01:31:31.241"></status>
</kw>
<msg timestamp="20201031 01:31:34.511" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:31:34.511" starttime="20201031 01:31:31.240"></status>
</kw>
<msg timestamp="20201031 01:31:34.512" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:31:34.512" starttime="20201031 01:31:31.240"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:34.512" starttime="20201031 01:31:34.512"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:31:34.518" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:31:37.657" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:31:37.657" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:31:37.658" starttime="20201031 01:31:34.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:31:37.659" level="INFO"></msg>
<status status="PASS" endtime="20201031 01:31:37.659" starttime="20201031 01:31:37.658"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:31:37.659" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:31:37.659" starttime="20201031 01:31:37.659"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:37.660" starttime="20201031 01:31:34.514"></status>
</kw>
<msg timestamp="20201031 01:31:37.660" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:31:37.660" starttime="20201031 01:31:34.513"></status>
</kw>
<msg timestamp="20201031 01:31:37.660" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:31:37.660" starttime="20201031 01:31:34.513"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:37.661" starttime="20201031 01:31:37.660"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:31:37.665" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:31:43.107" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:31:43.107" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:31:43.108" starttime="20201031 01:31:37.662"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:31:43.109" level="INFO"></msg>
<status status="PASS" endtime="20201031 01:31:43.109" starttime="20201031 01:31:43.108"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:31:43.109" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:31:43.110" starttime="20201031 01:31:43.109"></status>
</kw>
<status status="PASS" endtime="20201031 01:31:43.110" starttime="20201031 01:31:37.662"></status>
</kw>
<msg timestamp="20201031 01:31:43.110" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:31:43.110" starttime="20201031 01:31:37.661"></status>
</kw>
<msg timestamp="20201031 01:31:43.110" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:31:43.110" starttime="20201031 01:31:37.661"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 01:31:43.111" starttime="20201031 01:31:43.110"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:31:43.111" critical="yes" starttime="20201031 01:31:31.239"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 01:31:43.113" starttime="20201031 01:31:31.188"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s4" name="readdata-second-half">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201031 01:32:48.053" level="INFO">${random} = 93203</msg>
<status status="PASS" endtime="20201031 01:32:48.053" starttime="20201031 01:32:48.053"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:32:48.059" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-93203 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:32:52.960" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:32:52.960" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:32:52.960" starttime="20201031 01:32:48.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:32:52.961" level="INFO"></msg>
<status status="PASS" endtime="20201031 01:32:52.963" starttime="20201031 01:32:52.960"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:32:52.963" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:32:52.964" starttime="20201031 01:32:52.963"></status>
</kw>
<status status="PASS" endtime="20201031 01:32:52.964" starttime="20201031 01:32:48.054"></status>
</kw>
<msg timestamp="20201031 01:32:52.964" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:32:52.964" starttime="20201031 01:32:48.054"></status>
</kw>
<msg timestamp="20201031 01:32:52.964" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:32:52.964" starttime="20201031 01:32:48.053"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 01:32:52.965" starttime="20201031 01:32:52.965"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:32:52.965" critical="yes" starttime="20201031 01:32:48.052"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 01:32:52.968" starttime="20201031 01:32:48.003"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s5" name="readdata-first-half">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201031 01:31:49.895" level="INFO">${random} = 51154</msg>
<status status="PASS" endtime="20201031 01:31:49.895" starttime="20201031 01:31:49.894"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201031 01:31:49.900" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-51154 2&gt;&amp;1'.</msg>
<msg timestamp="20201031 01:32:13.281" level="INFO">${rc} = 0</msg>
<msg timestamp="20201031 01:32:13.281" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:32:13.281" starttime="20201031 01:31:49.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201031 01:32:13.282" level="INFO"></msg>
<status status="PASS" endtime="20201031 01:32:13.282" starttime="20201031 01:32:13.281"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201031 01:32:13.283" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201031 01:32:13.283" starttime="20201031 01:32:13.282"></status>
</kw>
<status status="PASS" endtime="20201031 01:32:13.283" starttime="20201031 01:31:49.896"></status>
</kw>
<msg timestamp="20201031 01:32:13.283" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201031 01:32:13.284" starttime="20201031 01:31:49.896"></status>
</kw>
<msg timestamp="20201031 01:32:13.284" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201031 01:32:13.284" starttime="20201031 01:31:49.895"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201031 01:32:13.284" starttime="20201031 01:32:13.284"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201031 01:32:13.285" critical="yes" starttime="20201031 01:31:49.893"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201031 01:32:13.286" starttime="20201031 01:31:49.843"></status>
</suite>
<status status="PASS" elapsedtime="98364" endtime="N/A" starttime="N/A"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="7">Critical Tests</stat>
<stat fail="0" pass="7">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-topology" pass="7">ozone-topology</stat>
<stat fail="0" id="s1-s1" name="Basic" pass="2">ozone-topology.Basic</stat>
<stat fail="0" id="s1-s2" name="Cli" pass="2">ozone-topology.Cli</stat>
<stat fail="0" id="s1-s3" name="Loaddata" pass="1">ozone-topology.Loaddata</stat>
<stat fail="0" id="s1-s4" name="readdata-second-half" pass="1">ozone-topology.readdata-second-half</stat>
<stat fail="0" id="s1-s5" name="readdata-first-half" pass="1">ozone-topology.readdata-first-half</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
