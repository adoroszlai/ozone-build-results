<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20201202 12:03:13.642" generator="Rebot 3.2.2 (Python 2.7.17 on linux2)">
<suite id="s1" name="ozone-topology">
<suite source="/opt/hadoop/smoketest/basic/basic.robot" id="s1-s1" name="Basic">
<test id="s1-s1-t1" name="Check webui static resources">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<status status="PASS" endtime="20201202 12:00:02.896" starttime="20201202 12:00:02.895"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:00:02.903" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:00:03.003" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:00:03.003" level="INFO">${output} = HTTP/1.1 200 OK
Date: Wed, 02 Dec 2020 12:00:02 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Wed, 02 Dec 2020 11:05:50 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201202 12:00:03.003" starttime="20201202 12:00:02.898"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:00:03.004" level="INFO">HTTP/1.1 200 OK
Date: Wed, 02 Dec 2020 12:00:02 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Wed, 02 Dec 2020 11:05:50 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" endtime="20201202 12:00:03.004" starttime="20201202 12:00:03.003"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:00:03.005" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:00:03.005" starttime="20201202 12:00:03.004"></status>
</kw>
<status status="PASS" endtime="20201202 12:00:03.005" starttime="20201202 12:00:02.897"></status>
</kw>
<msg timestamp="20201202 12:00:03.005" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:00:03.006" starttime="20201202 12:00:02.897"></status>
</kw>
<msg timestamp="20201202 12:00:03.006" level="INFO">${result} = HTTP/1.1 200 OK
Date: Wed, 02 Dec 2020 12:00:02 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Wed, 02 Dec 2020 11:05:50 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201202 12:00:03.006" starttime="20201202 12:00:02.896"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20201202 12:00:03.006" starttime="20201202 12:00:03.006"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:00:03.007" critical="yes" starttime="20201202 12:00:02.894"></status>
</test>
<test id="s1-s1-t2" name="Start freon testing">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<status status="PASS" endtime="20201202 12:00:03.011" starttime="20201202 12:00:03.010"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:00:03.019" level="INFO">Running command 'ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:09.980" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:09.981" level="INFO">${output} = 2020-12-02 12:00:05,030 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-12-02 12:00:05,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201202 12:01:09.981" starttime="20201202 12:00:03.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:09.982" level="INFO">2020-12-02 12:00:05,030 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-12-02 12:00:05,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-12-02 12:00:05,244 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-12-02 12:00:07,572 [main] INFO freon.RandomKeyGenerator: Number of Threads: 1
2020-12-02 12:00:07,573 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 5.
2020-12-02 12:00:07,573 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 5.
2020-12-02 12:00:07,573 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 5.
2020-12-02 12:00:07,573 [main] INFO freon.RandomKeyGenerator: Key size: 10240 bytes
2020-12-02 12:00:07,573 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-12-02 12:00:07,573 [main] INFO freon.RandomKeyGenerator: validateWrites : true
2020-12-02 12:00:07,579 [main] INFO freon.RandomKeyGenerator: Data validation is enabled.
2020-12-02 12:00:07,584 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-12-02 12:00:07,594 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-12-02 12:00:07,646 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-76157, with hadoop as owner.
2020-12-02 12:00:08,004 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-1-03978, with hadoop as owner.
2020-12-02 12:00:08,026 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-2-07587, with hadoop as owner.
2020-12-02 12:00:08,044 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-3-91119, with hadoop as owner.
2020-12-02 12:00:08,068 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-4-99076, with hadoop as owner.
2020-12-02 12:00:08,097 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-76157/bucket-0-22594, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,201 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-03978/bucket-0-53075, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,214 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-07587/bucket-0-85262, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,225 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-91119/bucket-0-10827, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,237 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-99076/bucket-0-56034, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,251 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-76157/bucket-1-29682, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,261 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-03978/bucket-1-75348, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,270 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-07587/bucket-1-61759, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,298 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-91119/bucket-1-03361, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,316 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-99076/bucket-1-60269, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,341 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-76157/bucket-2-55517, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,362 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-03978/bucket-2-25635, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,370 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-07587/bucket-2-54998, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,387 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-91119/bucket-2-71602, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,402 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-99076/bucket-2-43052, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,411 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-76157/bucket-3-93017, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,418 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-03978/bucket-3-36782, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,429 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-07587/bucket-3-10339, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,445 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-91119/bucket-3-02621, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,455 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-99076/bucket-3-90875, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,461 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-76157/bucket-4-76892, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,469 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-03978/bucket-4-19199, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,479 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-07587/bucket-4-07832, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,487 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-91119/bucket-4-84583, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,492 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-99076/bucket-4-62120, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-12-02 12:00:08,609 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-12-02 12:00:09,609 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-12-02 12:00:10,061 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-12-02 12:00:10,561 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2020-12-02 12:00:10,563 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-5AF8D70325DA-&gt;2541113f-d521-4b16-b9aa-73a6ed5284ab
2020-12-02 12:00:10,564 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReporterRegistration(...) before.
2020-12-02 12:00:10,610 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-12-02 12:00:11,610 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-12-02 12:00:12,611 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-12-02 12:00:13,611 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-12-02 12:00:13,970 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-09F7E0F203E4-&gt;49a795c8-1eb4-4095-8d39-560012d4f7e4
2020-12-02 12:00:13,970 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReporterRegistration(...) before.
2020-12-02 12:00:14,618 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-12-02 12:00:15,619 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-12-02 12:00:16,619 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-12-02 12:00:17,620 [Thread-7] INFO freon.ProgressBar: Progress: 4.00 % (5 out of 125)
2020-12-02 12:00:18,630 [Thread-7] INFO freon.ProgressBar: Progress: 8.80 % (11 out of 125)
2020-12-02 12:00:19,638 [Thread-7] INFO freon.ProgressBar: Progress: 14.40 % (18 out of 125)
2020-12-02 12:00:20,639 [Thread-7] INFO freon.ProgressBar: Progress: 16.00 % (20 out of 125)
2020-12-02 12:00:21,639 [Thread-7] INFO freon.ProgressBar: Progress: 16.00 % (20 out of 125)
2020-12-02 12:00:22,641 [Thread-7] INFO freon.ProgressBar: Progress: 17.60 % (22 out of 125)
2020-12-02 12:00:23,642 [Thread-7] INFO freon.ProgressBar: Progress: 17.60 % (22 out of 125)
2020-12-02 12:00:24,642 [Thread-7] INFO freon.ProgressBar: Progress: 17.60 % (22 out of 125)
2020-12-02 12:00:25,643 [Thread-7] INFO freon.ProgressBar: Progress: 21.60 % (27 out of 125)
2020-12-02 12:00:26,643 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-12-02 12:00:27,644 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-12-02 12:00:28,651 [Thread-7] INFO freon.ProgressBar: Progress: 26.40 % (33 out of 125)
2020-12-02 12:00:29,652 [Thread-7] INFO freon.ProgressBar: Progress: 27.20 % (34 out of 125)
2020-12-02 12:00:30,653 [Thread-7] INFO freon.ProgressBar: Progress: 27.20 % (34 out of 125)
2020-12-02 12:00:31,653 [Thread-7] INFO freon.ProgressBar: Progress: 29.60 % (37 out of 125)
2020-12-02 12:00:32,654 [Thread-7] INFO freon.ProgressBar: Progress: 30.40 % (38 out of 125)
2020-12-02 12:00:33,654 [Thread-7] INFO freon.ProgressBar: Progress: 30.40 % (38 out of 125)
2020-12-02 12:00:34,654 [Thread-7] INFO freon.ProgressBar: Progress: 32.00 % (40 out of 125)
2020-12-02 12:00:35,655 [Thread-7] INFO freon.ProgressBar: Progress: 32.00 % (40 out of 125)
2020-12-02 12:00:36,655 [Thread-7] INFO freon.ProgressBar: Progress: 32.00 % (40 out of 125)
2020-12-02 12:00:37,668 [Thread-7] INFO freon.ProgressBar: Progress: 39.20 % (49 out of 125)
2020-12-02 12:00:38,668 [Thread-7] INFO freon.ProgressBar: Progress: 44.00 % (55 out of 125)
2020-12-02 12:00:39,669 [Thread-7] INFO freon.ProgressBar: Progress: 44.00 % (55 out of 125)
2020-12-02 12:00:40,669 [Thread-7] INFO freon.ProgressBar: Progress: 44.00 % (55 out of 125)
2020-12-02 12:00:41,670 [Thread-7] INFO freon.ProgressBar: Progress: 49.60 % (62 out of 125)
2020-12-02 12:00:42,670 [Thread-7] INFO freon.ProgressBar: Progress: 49.60 % (62 out of 125)
2020-12-02 12:00:43,670 [Thread-7] INFO freon.ProgressBar: Progress: 49.60 % (62 out of 125)
2020-12-02 12:00:44,671 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-12-02 12:00:45,671 [Thread-7] INFO freon.ProgressBar: Progress: 63.20 % (79 out of 125)
2020-12-02 12:00:46,672 [Thread-7] INFO freon.ProgressBar: Progress: 63.20 % (79 out of 125)
2020-12-02 12:00:47,672 [Thread-7] INFO freon.ProgressBar: Progress: 63.20 % (79 out of 125)
2020-12-02 12:00:48,673 [Thread-7] INFO freon.ProgressBar: Progress: 68.00 % (85 out of 125)
2020-12-02 12:00:49,673 [Thread-7] INFO freon.ProgressBar: Progress: 72.80 % (91 out of 125)
2020-12-02 12:00:50,674 [Thread-7] INFO freon.ProgressBar: Progress: 72.80 % (91 out of 125)
2020-12-02 12:00:51,674 [Thread-7] INFO freon.ProgressBar: Progress: 72.80 % (91 out of 125)
2020-12-02 12:00:52,677 [Thread-7] INFO freon.ProgressBar: Progress: 76.00 % (95 out of 125)
2020-12-02 12:00:53,678 [Thread-7] INFO freon.ProgressBar: Progress: 76.00 % (95 out of 125)
2020-12-02 12:00:54,679 [Thread-7] INFO freon.ProgressBar: Progress: 78.40 % (98 out of 125)
2020-12-02 12:00:55,679 [Thread-7] INFO freon.ProgressBar: Progress: 84.00 % (105 out of 125)
2020-12-02 12:00:56,680 [Thread-7] INFO freon.ProgressBar: Progress: 84.00 % (105 out of 125)
2020-12-02 12:00:57,680 [Thread-7] INFO freon.ProgressBar: Progress: 84.00 % (105 out of 125)
2020-12-02 12:00:58,681 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-12-02 12:00:59,681 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-12-02 12:01:00,682 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-12-02 12:01:01,683 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-12-02 12:01:02,683 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-12-02 12:01:03,684 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-12-02 12:01:04,684 [Thread-7] INFO freon.ProgressBar: Progress: 100.00 % (125 out of 125)

***************************************************
Status: Success
Git Base Revision: b3cbbb467e22ea829b3808f4b7b01d07e0bf3842
Number of Volumes created: 5
Number of Buckets created: 25
Number of Keys added: 125
Ratis replication factor: THREE
Ratis replication type: RATIS
Average Time spent in volume creation: 00:00:00,431
Average Time spent in bucket creation: 00:00:00,292
Average Time spent in key creation: 00:00:02,931
Average Time spent in key write: 00:00:01,494
Total bytes written: 1280000
Total number of writes validated: 125
Writes validated: 100.0 %
Successful validation: 125
Unsuccessful validation: 0
Total Execution time: 00:01:04,065
***************************************************</msg>
<status status="PASS" endtime="20201202 12:01:09.983" starttime="20201202 12:01:09.981"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:09.983" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:09.983" starttime="20201202 12:01:09.983"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:09.984" starttime="20201202 12:00:03.012"></status>
</kw>
<msg timestamp="20201202 12:01:09.984" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:09.984" starttime="20201202 12:00:03.012"></status>
</kw>
<msg timestamp="20201202 12:01:09.984" level="INFO">${result} = 2020-12-02 12:00:05,030 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-12-02 12:00:05,244 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201202 12:01:09.985" starttime="20201202 12:00:03.011"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:09.986" starttime="20201202 12:01:09.985"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:09.986" starttime="20201202 12:01:09.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Status: Success</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:09.986" starttime="20201202 12:01:09.986"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:01:09.987" critical="yes" starttime="20201202 12:00:03.009"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201202 12:01:09.988" starttime="20201202 12:00:02.830"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/cli.robot" id="s1-s2" name="Cli">
<test id="s1-s2-t1" name="Run printTopology">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:01:15.224" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:18.211" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:18.211" level="INFO">${output} = State = HEALTHY
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201202 12:01:18.211" starttime="20201202 12:01:15.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:18.213" level="INFO">State = HEALTHY
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2</msg>
<status status="PASS" endtime="20201202 12:01:18.213" starttime="20201202 12:01:18.211"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:18.213" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:18.214" starttime="20201202 12:01:18.213"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:18.214" starttime="20201202 12:01:15.219"></status>
</kw>
<msg timestamp="20201202 12:01:18.214" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:18.214" starttime="20201202 12:01:15.218"></status>
</kw>
<msg timestamp="20201202 12:01:18.215" level="INFO">${output} = State = HEALTHY
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201202 12:01:18.215" starttime="20201202 12:01:15.218"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
<arg>/rack2</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:18.215" starttime="20201202 12:01:18.215"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:01:18.216" critical="yes" starttime="20201202 12:01:15.217"></status>
</test>
<test id="s1-s2-t2" name="Run printTopology -o">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology -o</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:01:18.224" level="INFO">Running command 'ozone admin printTopology -o 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:21.122" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:21.122" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201202 12:01:21.122" starttime="20201202 12:01:18.220"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:21.124" level="INFO">State = HEALTHY
Location: /rack1
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
Location: /rack2
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net)
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net)
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</msg>
<status status="PASS" endtime="20201202 12:01:21.124" starttime="20201202 12:01:21.123"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:21.124" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:21.125" starttime="20201202 12:01:21.124"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:21.125" starttime="20201202 12:01:18.219"></status>
</kw>
<msg timestamp="20201202 12:01:21.125" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:21.125" starttime="20201202 12:01:18.219"></status>
</kw>
<msg timestamp="20201202 12:01:21.125" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201202 12:01:21.125" starttime="20201202 12:01:18.218"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Location: /rack2</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:21.126" starttime="20201202 12:01:21.126"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:21.127" starttime="20201202 12:01:21.126"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:01:21.127" critical="yes" starttime="20201202 12:01:18.217"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201202 12:01:21.128" starttime="20201202 12:01:15.153"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/loaddata.robot" id="s1-s3" name="Loaddata">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh volume create topvol1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:01:26.386" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:29.876" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:29.876" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:29.876" starttime="20201202 12:01:26.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:29.877" level="INFO"></msg>
<status status="PASS" endtime="20201202 12:01:29.877" starttime="20201202 12:01:29.876"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:29.878" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:29.878" starttime="20201202 12:01:29.877"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:29.878" starttime="20201202 12:01:26.380"></status>
</kw>
<msg timestamp="20201202 12:01:29.879" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:29.879" starttime="20201202 12:01:26.380"></status>
</kw>
<msg timestamp="20201202 12:01:29.879" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:29.879" starttime="20201202 12:01:26.379"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:29.880" starttime="20201202 12:01:29.879"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:01:29.885" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:33.496" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:33.496" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:33.496" starttime="20201202 12:01:29.881"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:33.497" level="INFO"></msg>
<status status="PASS" endtime="20201202 12:01:33.497" starttime="20201202 12:01:33.497"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:33.498" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:33.498" starttime="20201202 12:01:33.498"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:33.499" starttime="20201202 12:01:29.881"></status>
</kw>
<msg timestamp="20201202 12:01:33.499" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:33.499" starttime="20201202 12:01:29.880"></status>
</kw>
<msg timestamp="20201202 12:01:33.499" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:33.499" starttime="20201202 12:01:29.880"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:33.500" starttime="20201202 12:01:33.499"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:01:33.505" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:39.449" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:39.449" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:39.449" starttime="20201202 12:01:33.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:39.450" level="INFO"></msg>
<status status="PASS" endtime="20201202 12:01:39.450" starttime="20201202 12:01:39.450"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:39.451" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:39.451" starttime="20201202 12:01:39.451"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:39.452" starttime="20201202 12:01:33.501"></status>
</kw>
<msg timestamp="20201202 12:01:39.452" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:39.452" starttime="20201202 12:01:33.501"></status>
</kw>
<msg timestamp="20201202 12:01:39.452" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:39.452" starttime="20201202 12:01:33.500"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:39.453" starttime="20201202 12:01:39.452"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:01:39.453" critical="yes" starttime="20201202 12:01:26.379"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201202 12:01:39.454" starttime="20201202 12:01:26.315"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s4" name="readdata-second-half">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201202 12:02:27.611" level="INFO">${random} = 37765</msg>
<status status="PASS" endtime="20201202 12:02:27.611" starttime="20201202 12:02:27.611"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:02:27.617" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-37765 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:03:06.187" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:03:06.187" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:03:06.188" starttime="20201202 12:02:27.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:03:06.189" level="INFO"></msg>
<status status="PASS" endtime="20201202 12:03:06.189" starttime="20201202 12:03:06.188"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:03:06.189" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:03:06.190" starttime="20201202 12:03:06.189"></status>
</kw>
<status status="PASS" endtime="20201202 12:03:06.190" starttime="20201202 12:02:27.613"></status>
</kw>
<msg timestamp="20201202 12:03:06.190" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:03:06.190" starttime="20201202 12:02:27.612"></status>
</kw>
<msg timestamp="20201202 12:03:06.190" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:03:06.191" starttime="20201202 12:02:27.611"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201202 12:03:06.191" starttime="20201202 12:03:06.191"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:03:06.191" critical="yes" starttime="20201202 12:02:27.610"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201202 12:03:06.192" starttime="20201202 12:02:27.546"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s5" name="readdata-first-half">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201202 12:01:46.627" level="INFO">${random} = 46723</msg>
<status status="PASS" endtime="20201202 12:01:46.627" starttime="20201202 12:01:46.626"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201202 12:01:46.635" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-46723 2&gt;&amp;1'.</msg>
<msg timestamp="20201202 12:01:51.970" level="INFO">${rc} = 0</msg>
<msg timestamp="20201202 12:01:51.970" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:51.970" starttime="20201202 12:01:46.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201202 12:01:51.972" level="INFO"></msg>
<status status="PASS" endtime="20201202 12:01:51.972" starttime="20201202 12:01:51.971"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201202 12:01:51.972" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201202 12:01:51.973" starttime="20201202 12:01:51.972"></status>
</kw>
<status status="PASS" endtime="20201202 12:01:51.973" starttime="20201202 12:01:46.629"></status>
</kw>
<msg timestamp="20201202 12:01:51.973" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201202 12:01:51.973" starttime="20201202 12:01:46.628"></status>
</kw>
<msg timestamp="20201202 12:01:51.974" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201202 12:01:51.974" starttime="20201202 12:01:46.627"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201202 12:01:51.974" starttime="20201202 12:01:51.974"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201202 12:01:51.975" critical="yes" starttime="20201202 12:01:46.625"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201202 12:01:51.976" starttime="20201202 12:01:46.555"></status>
</suite>
<status status="PASS" elapsedtime="130339" endtime="N/A" starttime="N/A"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="7">Critical Tests</stat>
<stat fail="0" pass="7">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-topology" pass="7">ozone-topology</stat>
<stat fail="0" id="s1-s1" name="Basic" pass="2">ozone-topology.Basic</stat>
<stat fail="0" id="s1-s2" name="Cli" pass="2">ozone-topology.Cli</stat>
<stat fail="0" id="s1-s3" name="Loaddata" pass="1">ozone-topology.Loaddata</stat>
<stat fail="0" id="s1-s4" name="readdata-second-half" pass="1">ozone-topology.readdata-second-half</stat>
<stat fail="0" id="s1-s5" name="readdata-first-half" pass="1">ozone-topology.readdata-first-half</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
