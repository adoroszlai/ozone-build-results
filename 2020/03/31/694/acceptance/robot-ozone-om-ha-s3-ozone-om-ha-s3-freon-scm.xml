<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20200331 17:57:57.630" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/freon" id="s1" name="ozone-om-ha-s3-freon">
<suite source="/opt/hadoop/smoketest/freon/freon.robot" id="s1-s1" name="Freon">
<test id="s1-s1-t1" name="Freon Randomkey Generator">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone freon rk ${OM_HA_PARAM} --numOfVolumes=1 --numOfBuckets=1 --numOfKeys=1 --numOfThreads=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200331 17:57:57.678" level="INFO">Running command 'ozone freon rk --om-service-id=id1 --numOfVolumes=1 --numOfBuckets=1 --numOfKeys=1 --numOfThreads=1 2&gt;&amp;1'.</msg>
<msg timestamp="20200331 17:58:05.025" level="INFO">${rc} = 0</msg>
<msg timestamp="20200331 17:58:05.025" level="INFO">${output} = 2020-03-31 17:57:58,526 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:57:58,683 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:05.026" starttime="20200331 17:57:57.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200331 17:58:05.026" level="INFO">2020-03-31 17:57:58,526 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:57:58,683 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-03-31 17:57:58,683 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-03-31 17:57:59,671 [main] INFO freon.RandomKeyGenerator: Number of Threads: 1
2020-03-31 17:57:59,672 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 1.
2020-03-31 17:57:59,672 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 1.
2020-03-31 17:57:59,672 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 1.
2020-03-31 17:57:59,672 [main] INFO freon.RandomKeyGenerator: Key size: 10240 bytes
2020-03-31 17:57:59,672 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-03-31 17:57:59,672 [main] INFO freon.RandomKeyGenerator: validateWrites : false
2020-03-31 17:57:59,674 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-03-31 17:57:59,683 [Thread-8] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2020-03-31 17:57:59,712 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-65620, with hadoop as owner.
2020-03-31 17:57:59,745 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-65620/bucket-0-82910, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-03-31 17:58:00,231 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-03-31 17:58:00,688 [Thread-8] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)

***************************************************
Status: Success
Git Base Revision: e97acb3bd8f3befd27418996fa5d4b50bf2e17bf
Number of Volumes created: 1
Number of Buckets created: 1
Number of Keys added: 1
Ratis replication factor: ONE
Ratis replication type: STAND_ALONE
Average Time spent in volume creation: 00:00:00,051
Average Time spent in bucket creation: 00:00:00,023
Average Time spent in key creation: 00:00:00,079
Average Time spent in key write: 00:00:00,622
Total bytes written: 10240
Total Execution time: 00:00:05,735
***************************************************</msg>
<status status="PASS" endtime="20200331 17:58:05.026" starttime="20200331 17:58:05.026"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200331 17:58:05.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200331 17:58:05.027" starttime="20200331 17:58:05.027"></status>
</kw>
<msg timestamp="20200331 17:58:05.027" level="INFO">${result} = 2020-03-31 17:57:58,526 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:57:58,683 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:05.027" starttime="20200331 17:57:57.675"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Number of Keys added: 1</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Number of Keys added: 1</arg>
</arguments>
<status status="PASS" endtime="20200331 17:58:05.028" starttime="20200331 17:58:05.028"></status>
</kw>
<status status="PASS" endtime="20200331 17:58:05.028" starttime="20200331 17:58:05.027"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20200331 17:58:05.028" critical="yes" starttime="20200331 17:57:57.674"></status>
</test>
<test id="s1-s1-t2" name="Freon Ozone Key Generator">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone freon ockg ${OM_HA_PARAM} -t=1 -n=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200331 17:58:05.031" level="INFO">Running command 'ozone freon ockg --om-service-id=id1 -t=1 -n=1 2&gt;&amp;1'.</msg>
<msg timestamp="20200331 17:58:09.482" level="INFO">${rc} = 0</msg>
<msg timestamp="20200331 17:58:09.482" level="INFO">${output} = 2020-03-31 17:58:05,839 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:06,019 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:09.482" starttime="20200331 17:58:05.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200331 17:58:09.483" level="INFO">2020-03-31 17:58:05,839 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:06,019 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-03-31 17:58:06,019 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-03-31 17:58:06,283 [main] INFO freon.BaseFreonGenerator: Executing test with prefix sBS6KPKx1t
2020-03-31 17:58:06,307 [Thread-6] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2020-03-31 17:58:07,048 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hadoop as owner.
2020-03-31 17:58:07,074 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-03-31 17:58:07,317 [Thread-6] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2020-03-31 17:58:07,496 [pool-1-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-03-31 17:58:08,318 [Thread-6] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2020-03-31 17:58:09,149 [Thread-5] INFO metrics: type=TIMER, name=key-create, count=1, min=1211.665179, max=1211.665179, mean=1211.665179, stddev=0.0, median=1211.665179, p75=1211.665179, p95=1211.665179, p98=1211.665179, p99=1211.665179, p999=1211.665179, mean_rate=0.48768397952499387, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2020-03-31 17:58:09,149 [Thread-5] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2020-03-31 17:58:09,150 [Thread-5] INFO freon.BaseFreonGenerator: Failures: 0
2020-03-31 17:58:09,150 [Thread-5] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" endtime="20200331 17:58:09.484" starttime="20200331 17:58:09.483"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200331 17:58:09.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200331 17:58:09.484" starttime="20200331 17:58:09.484"></status>
</kw>
<msg timestamp="20200331 17:58:09.484" level="INFO">${result} = 2020-03-31 17:58:05,839 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:06,019 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:09.484" starttime="20200331 17:58:05.029"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Successful executions: 1</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Successful executions: 1</arg>
</arguments>
<status status="PASS" endtime="20200331 17:58:09.485" starttime="20200331 17:58:09.485"></status>
</kw>
<status status="PASS" endtime="20200331 17:58:09.486" starttime="20200331 17:58:09.485"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20200331 17:58:09.486" critical="yes" starttime="20200331 17:58:05.029"></status>
</test>
<test id="s1-s1-t3" name="Freon OM Key Generator">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone freon omkg ${OM_HA_PARAM} -t=1 -n=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200331 17:58:09.488" level="INFO">Running command 'ozone freon omkg --om-service-id=id1 -t=1 -n=1 2&gt;&amp;1'.</msg>
<msg timestamp="20200331 17:58:12.612" level="INFO">${rc} = 0</msg>
<msg timestamp="20200331 17:58:12.612" level="INFO">${output} = 2020-03-31 17:58:10,315 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:10,466 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:12.612" starttime="20200331 17:58:09.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200331 17:58:12.612" level="INFO">2020-03-31 17:58:10,315 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:10,466 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-03-31 17:58:10,466 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-03-31 17:58:10,811 [main] INFO freon.BaseFreonGenerator: Executing test with prefix XlQqJVp6Z4
2020-03-31 17:58:10,827 [Thread-6] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2020-03-31 17:58:11,832 [Thread-6] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2020-03-31 17:58:12,587 [Thread-5] INFO metrics: type=TIMER, name=key-create, count=1, min=57.416897, max=57.416897, mean=57.416897, stddev=0.0, median=57.416897, p75=57.416897, p95=57.416897, p98=57.416897, p99=57.416897, p999=57.416897, mean_rate=0.983318345480391, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2020-03-31 17:58:12,591 [Thread-5] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2020-03-31 17:58:12,591 [Thread-5] INFO freon.BaseFreonGenerator: Failures: 0
2020-03-31 17:58:12,591 [Thread-5] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" endtime="20200331 17:58:12.613" starttime="20200331 17:58:12.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200331 17:58:12.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200331 17:58:12.613" starttime="20200331 17:58:12.613"></status>
</kw>
<msg timestamp="20200331 17:58:12.613" level="INFO">${result} = 2020-03-31 17:58:10,315 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:10,466 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:12.613" starttime="20200331 17:58:09.487"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Successful executions: 1</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Successful executions: 1</arg>
</arguments>
<status status="PASS" endtime="20200331 17:58:12.614" starttime="20200331 17:58:12.614"></status>
</kw>
<status status="PASS" endtime="20200331 17:58:12.614" starttime="20200331 17:58:12.614"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20200331 17:58:12.615" critical="yes" starttime="20200331 17:58:09.486"></status>
</test>
<test id="s1-s1-t4" name="Freon OM Bucket Generator">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone freon ombg ${OM_HA_PARAM} -t=1 -n=1</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200331 17:58:12.618" level="INFO">Running command 'ozone freon ombg --om-service-id=id1 -t=1 -n=1 2&gt;&amp;1'.</msg>
<msg timestamp="20200331 17:58:15.645" level="INFO">${rc} = 0</msg>
<msg timestamp="20200331 17:58:15.645" level="INFO">${output} = 2020-03-31 17:58:13,454 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:13,655 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:15.645" starttime="20200331 17:58:12.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200331 17:58:15.646" level="INFO">2020-03-31 17:58:13,454 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:13,655 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-03-31 17:58:13,655 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-03-31 17:58:13,923 [main] INFO freon.BaseFreonGenerator: Executing test with prefix z4SArFksLD
2020-03-31 17:58:13,932 [Thread-6] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2020-03-31 17:58:14,935 [Thread-6] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2020-03-31 17:58:15,633 [Thread-5] INFO metrics: type=TIMER, name=bucket-create, count=1, min=27.784236, max=27.784236, mean=27.784236, stddev=0.0, median=27.784236, p75=27.784236, p95=27.784236, p98=27.784236, p99=27.784236, p999=27.784236, mean_rate=0.988899849382345, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2020-03-31 17:58:15,634 [Thread-5] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2020-03-31 17:58:15,634 [Thread-5] INFO freon.BaseFreonGenerator: Failures: 0
2020-03-31 17:58:15,634 [Thread-5] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" endtime="20200331 17:58:15.646" starttime="20200331 17:58:15.645"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200331 17:58:15.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200331 17:58:15.647" starttime="20200331 17:58:15.646"></status>
</kw>
<msg timestamp="20200331 17:58:15.647" level="INFO">${result} = 2020-03-31 17:58:13,454 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-03-31 17:58:13,655 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20200331 17:58:15.647" starttime="20200331 17:58:12.616"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Successful executions: 1</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Successful executions: 1</arg>
</arguments>
<status status="PASS" endtime="20200331 17:58:15.648" starttime="20200331 17:58:15.648"></status>
</kw>
<status status="PASS" endtime="20200331 17:58:15.648" starttime="20200331 17:58:15.647"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20200331 17:58:15.648" critical="yes" starttime="20200331 17:58:12.615"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20200331 17:58:15.649" starttime="20200331 17:57:57.653"></status>
</suite>
<status status="PASS" endtime="20200331 17:58:15.651" starttime="20200331 17:57:57.631"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="4">Critical Tests</stat>
<stat fail="0" pass="4">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-om-ha-s3-freon" pass="4">ozone-om-ha-s3-freon</stat>
<stat fail="0" id="s1-s1" name="Freon" pass="4">ozone-om-ha-s3-freon.Freon</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
