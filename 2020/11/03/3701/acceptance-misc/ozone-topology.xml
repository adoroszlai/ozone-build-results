<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20201103 16:52:17.632" generator="Rebot 3.2.2 (Python 2.7.17 on linux2)">
<suite id="s1" name="ozone-topology">
<suite source="/opt/hadoop/smoketest/basic/basic.robot" id="s1-s1" name="Basic">
<test id="s1-s1-t1" name="Check webui static resources">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<status status="PASS" endtime="20201103 16:49:26.984" starttime="20201103 16:49:26.984"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:49:26.989" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:49:27.065" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:49:27.065" level="INFO">${output} = HTTP/1.1 200 OK
Date: Tue, 03 Nov 2020 16:49:27 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Tue, 03 Nov 2020 16:13:56 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201103 16:49:27.065" starttime="20201103 16:49:26.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:49:27.066" level="INFO">HTTP/1.1 200 OK
Date: Tue, 03 Nov 2020 16:49:27 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Tue, 03 Nov 2020 16:13:56 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" endtime="20201103 16:49:27.066" starttime="20201103 16:49:27.065"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:49:27.067" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:49:27.067" starttime="20201103 16:49:27.066"></status>
</kw>
<status status="PASS" endtime="20201103 16:49:27.067" starttime="20201103 16:49:26.985"></status>
</kw>
<msg timestamp="20201103 16:49:27.067" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:49:27.067" starttime="20201103 16:49:26.985"></status>
</kw>
<msg timestamp="20201103 16:49:27.068" level="INFO">${result} = HTTP/1.1 200 OK
Date: Tue, 03 Nov 2020 16:49:27 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Tue, 03 Nov 2020 16:13:56 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201103 16:49:27.068" starttime="20201103 16:49:26.984"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20201103 16:49:27.068" starttime="20201103 16:49:27.068"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:49:27.068" critical="yes" starttime="20201103 16:49:26.983"></status>
</test>
<test id="s1-s1-t2" name="Start freon testing">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<status status="PASS" endtime="20201103 16:49:27.070" starttime="20201103 16:49:27.070"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:49:27.076" level="INFO">Running command 'ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:50:27.752" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:50:27.753" level="INFO">${output} = 2020-11-03 16:49:28,746 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-11-03 16:49:28,900 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201103 16:50:27.753" starttime="20201103 16:49:27.072"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:50:27.754" level="INFO">2020-11-03 16:49:28,746 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-11-03 16:49:28,900 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-11-03 16:49:28,900 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-11-03 16:49:30,884 [main] INFO freon.RandomKeyGenerator: Number of Threads: 1
2020-11-03 16:49:30,885 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 5.
2020-11-03 16:49:30,885 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 5.
2020-11-03 16:49:30,886 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 5.
2020-11-03 16:49:30,886 [main] INFO freon.RandomKeyGenerator: Key size: 10240 bytes
2020-11-03 16:49:30,886 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-11-03 16:49:30,886 [main] INFO freon.RandomKeyGenerator: validateWrites : true
2020-11-03 16:49:30,890 [main] INFO freon.RandomKeyGenerator: Data validation is enabled.
2020-11-03 16:49:30,897 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-11-03 16:49:30,910 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-11-03 16:49:30,944 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-68089, with hadoop as owner.
2020-11-03 16:49:31,341 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-1-01752, with hadoop as owner.
2020-11-03 16:49:31,368 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-2-45431, with hadoop as owner.
2020-11-03 16:49:31,374 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-3-52615, with hadoop as owner.
2020-11-03 16:49:31,380 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-4-62655, with hadoop as owner.
2020-11-03 16:49:31,392 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-68089/bucket-0-83519, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,445 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-01752/bucket-0-72245, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,459 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-45431/bucket-0-02629, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,466 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-52615/bucket-0-71053, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,475 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-62655/bucket-0-67572, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,484 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-68089/bucket-1-97822, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,489 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-01752/bucket-1-89357, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,499 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-45431/bucket-1-09985, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,505 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-52615/bucket-1-03103, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,512 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-62655/bucket-1-52368, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,516 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-68089/bucket-2-40981, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,520 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-01752/bucket-2-82619, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,532 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-45431/bucket-2-46278, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,541 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-52615/bucket-2-95481, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,547 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-62655/bucket-2-91059, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,551 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-68089/bucket-3-73345, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,556 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-01752/bucket-3-01879, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,559 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-45431/bucket-3-13486, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,566 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-52615/bucket-3-22802, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,571 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-62655/bucket-3-24133, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,581 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-68089/bucket-4-91836, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,588 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-01752/bucket-4-28631, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,607 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-45431/bucket-4-58441, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,615 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-52615/bucket-4-18657, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,622 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-62655/bucket-4-00783, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-03 16:49:31,920 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-11-03 16:49:32,609 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-11-03 16:49:32,921 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-11-03 16:49:32,958 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2020-11-03 16:49:32,958 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-FD7AFBA5ECD1-&gt;b6f83b3c-8942-4d34-bbf7-96a061abb87d
2020-11-03 16:49:32,960 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-11-03 16:49:33,921 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-11-03 16:49:34,922 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-11-03 16:49:35,445 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-B32FFCC2EAF5-&gt;c74acc30-95c7-4686-ae9d-d737a8d92a3b
2020-11-03 16:49:35,445 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-11-03 16:49:35,922 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-11-03 16:49:36,923 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-11-03 16:49:37,924 [Thread-7] INFO freon.ProgressBar: Progress: 1.60 % (2 out of 125)
2020-11-03 16:49:38,925 [Thread-7] INFO freon.ProgressBar: Progress: 7.20 % (9 out of 125)
2020-11-03 16:49:39,925 [Thread-7] INFO freon.ProgressBar: Progress: 8.80 % (11 out of 125)
2020-11-03 16:49:40,926 [Thread-7] INFO freon.ProgressBar: Progress: 8.80 % (11 out of 125)
2020-11-03 16:49:41,926 [Thread-7] INFO freon.ProgressBar: Progress: 11.20 % (14 out of 125)
2020-11-03 16:49:42,927 [Thread-7] INFO freon.ProgressBar: Progress: 18.40 % (23 out of 125)
2020-11-03 16:49:43,927 [Thread-7] INFO freon.ProgressBar: Progress: 18.40 % (23 out of 125)
2020-11-03 16:49:44,928 [Thread-7] INFO freon.ProgressBar: Progress: 18.40 % (23 out of 125)
2020-11-03 16:49:45,931 [Thread-7] INFO freon.ProgressBar: Progress: 27.20 % (34 out of 125)
2020-11-03 16:49:46,932 [Thread-7] INFO freon.ProgressBar: Progress: 29.60 % (37 out of 125)
2020-11-03 16:49:47,932 [Thread-7] INFO freon.ProgressBar: Progress: 29.60 % (37 out of 125)
2020-11-03 16:49:48,934 [Thread-7] INFO freon.ProgressBar: Progress: 32.00 % (40 out of 125)
2020-11-03 16:49:49,935 [Thread-7] INFO freon.ProgressBar: Progress: 36.00 % (45 out of 125)
2020-11-03 16:49:50,935 [Thread-7] INFO freon.ProgressBar: Progress: 36.00 % (45 out of 125)
2020-11-03 16:49:51,935 [Thread-7] INFO freon.ProgressBar: Progress: 36.80 % (46 out of 125)
2020-11-03 16:49:52,936 [Thread-7] INFO freon.ProgressBar: Progress: 47.20 % (59 out of 125)
2020-11-03 16:49:53,936 [Thread-7] INFO freon.ProgressBar: Progress: 52.80 % (66 out of 125)
2020-11-03 16:49:54,937 [Thread-7] INFO freon.ProgressBar: Progress: 52.80 % (66 out of 125)
2020-11-03 16:49:55,937 [Thread-7] INFO freon.ProgressBar: Progress: 52.80 % (66 out of 125)
2020-11-03 16:49:56,938 [Thread-7] INFO freon.ProgressBar: Progress: 55.20 % (69 out of 125)
2020-11-03 16:49:57,938 [Thread-7] INFO freon.ProgressBar: Progress: 55.20 % (69 out of 125)
2020-11-03 16:49:58,939 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-11-03 16:49:59,939 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-11-03 16:50:00,940 [Thread-7] INFO freon.ProgressBar: Progress: 56.00 % (70 out of 125)
2020-11-03 16:50:01,940 [Thread-7] INFO freon.ProgressBar: Progress: 62.40 % (78 out of 125)
2020-11-03 16:50:02,941 [Thread-7] INFO freon.ProgressBar: Progress: 62.40 % (78 out of 125)
2020-11-03 16:50:03,941 [Thread-7] INFO freon.ProgressBar: Progress: 62.40 % (78 out of 125)
2020-11-03 16:50:04,943 [Thread-7] INFO freon.ProgressBar: Progress: 71.20 % (89 out of 125)
2020-11-03 16:50:05,943 [Thread-7] INFO freon.ProgressBar: Progress: 76.00 % (95 out of 125)
2020-11-03 16:50:06,944 [Thread-7] INFO freon.ProgressBar: Progress: 76.00 % (95 out of 125)
2020-11-03 16:50:07,956 [Thread-7] INFO freon.ProgressBar: Progress: 77.60 % (97 out of 125)
2020-11-03 16:50:08,956 [Thread-7] INFO freon.ProgressBar: Progress: 80.80 % (101 out of 125)
2020-11-03 16:50:09,957 [Thread-7] INFO freon.ProgressBar: Progress: 80.80 % (101 out of 125)
2020-11-03 16:50:10,957 [Thread-7] INFO freon.ProgressBar: Progress: 83.20 % (104 out of 125)
2020-11-03 16:50:11,958 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-11-03 16:50:12,958 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-11-03 16:50:13,958 [Thread-7] INFO freon.ProgressBar: Progress: 89.60 % (112 out of 125)
2020-11-03 16:50:14,959 [Thread-7] INFO freon.ProgressBar: Progress: 93.60 % (117 out of 125)
2020-11-03 16:50:15,959 [Thread-7] INFO freon.ProgressBar: Progress: 93.60 % (117 out of 125)
2020-11-03 16:50:16,960 [Thread-7] INFO freon.ProgressBar: Progress: 96.80 % (121 out of 125)
2020-11-03 16:50:17,960 [Thread-7] INFO freon.ProgressBar: Progress: 96.80 % (121 out of 125)
2020-11-03 16:50:18,960 [Thread-7] INFO freon.ProgressBar: Progress: 96.80 % (121 out of 125)
2020-11-03 16:50:19,961 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-11-03 16:50:20,961 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-11-03 16:50:21,962 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-11-03 16:50:22,963 [Thread-7] INFO freon.ProgressBar: Progress: 100.00 % (125 out of 125)

***************************************************
Status: Success
Git Base Revision: b3cbbb467e22ea829b3808f4b7b01d07e0bf3842
Number of Volumes created: 5
Number of Buckets created: 25
Number of Keys added: 125
Ratis replication factor: THREE
Ratis replication type: RATIS
Average Time spent in volume creation: 00:00:00,438
Average Time spent in bucket creation: 00:00:00,145
Average Time spent in key creation: 00:00:02,110
Average Time spent in key write: 00:00:00,875
Total bytes written: 1280000
Total number of writes validated: 125
Writes validated: 100.0 %
Successful validation: 125
Unsuccessful validation: 0
Total Execution time: 00:00:58,336
***************************************************</msg>
<status status="PASS" endtime="20201103 16:50:27.754" starttime="20201103 16:50:27.753"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:50:27.755" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:50:27.756" starttime="20201103 16:50:27.755"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:27.756" starttime="20201103 16:49:27.071"></status>
</kw>
<msg timestamp="20201103 16:50:27.756" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:50:27.757" starttime="20201103 16:49:27.071"></status>
</kw>
<msg timestamp="20201103 16:50:27.757" level="INFO">${result} = 2020-11-03 16:49:28,746 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-11-03 16:49:28,900 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201103 16:50:27.757" starttime="20201103 16:49:27.070"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:27.760" starttime="20201103 16:50:27.758"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:27.760" starttime="20201103 16:50:27.757"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Status: Success</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:27.761" starttime="20201103 16:50:27.760"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:50:27.761" critical="yes" starttime="20201103 16:49:27.069"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201103 16:50:27.762" starttime="20201103 16:49:26.936"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/cli.robot" id="s1-s2" name="Cli">
<test id="s1-s2-t1" name="Run printTopology">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:50:32.444" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:50:34.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:50:34.887" level="INFO">${output} = State = HEALTHY
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201103 16:50:34.887" starttime="20201103 16:50:32.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:50:34.888" level="INFO">State = HEALTHY
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1</msg>
<status status="PASS" endtime="20201103 16:50:34.888" starttime="20201103 16:50:34.887"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:50:34.888" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:50:34.889" starttime="20201103 16:50:34.888"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:34.889" starttime="20201103 16:50:32.439"></status>
</kw>
<msg timestamp="20201103 16:50:34.889" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:50:34.889" starttime="20201103 16:50:32.439"></status>
</kw>
<msg timestamp="20201103 16:50:34.889" level="INFO">${output} = State = HEALTHY
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201103 16:50:34.889" starttime="20201103 16:50:32.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
<arg>/rack2</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:34.890" starttime="20201103 16:50:34.890"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:50:34.890" critical="yes" starttime="20201103 16:50:32.438"></status>
</test>
<test id="s1-s2-t2" name="Run printTopology -o">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology -o</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:50:34.896" level="INFO">Running command 'ozone admin printTopology -o 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:50:37.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:50:37.287" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201103 16:50:37.287" starttime="20201103 16:50:34.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:50:37.288" level="INFO">State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
Location: /rack2
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net)
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net)</msg>
<status status="PASS" endtime="20201103 16:50:37.288" starttime="20201103 16:50:37.288"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:50:37.289" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:50:37.289" starttime="20201103 16:50:37.289"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:37.289" starttime="20201103 16:50:34.893"></status>
</kw>
<msg timestamp="20201103 16:50:37.290" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:50:37.290" starttime="20201103 16:50:34.893"></status>
</kw>
<msg timestamp="20201103 16:50:37.290" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201103 16:50:37.290" starttime="20201103 16:50:34.892"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Location: /rack2</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:37.291" starttime="20201103 16:50:37.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:37.291" starttime="20201103 16:50:37.291"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:50:37.291" critical="yes" starttime="20201103 16:50:34.892"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201103 16:50:37.293" starttime="20201103 16:50:32.393"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/loaddata.robot" id="s1-s3" name="Loaddata">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh volume create topvol1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:50:41.957" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:50:44.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:50:44.803" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:50:44.804" starttime="20201103 16:50:41.953"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:50:44.805" level="INFO"></msg>
<status status="PASS" endtime="20201103 16:50:44.805" starttime="20201103 16:50:44.804"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:50:44.805" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:50:44.805" starttime="20201103 16:50:44.805"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:44.806" starttime="20201103 16:50:41.952"></status>
</kw>
<msg timestamp="20201103 16:50:44.806" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:50:44.806" starttime="20201103 16:50:41.952"></status>
</kw>
<msg timestamp="20201103 16:50:44.806" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:50:44.806" starttime="20201103 16:50:41.952"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:44.807" starttime="20201103 16:50:44.806"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:50:44.813" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:50:47.852" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:50:47.852" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:50:47.852" starttime="20201103 16:50:44.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:50:47.853" level="INFO"></msg>
<status status="PASS" endtime="20201103 16:50:47.853" starttime="20201103 16:50:47.852"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:50:47.854" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:50:47.854" starttime="20201103 16:50:47.853"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:47.854" starttime="20201103 16:50:44.808"></status>
</kw>
<msg timestamp="20201103 16:50:47.854" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:50:47.854" starttime="20201103 16:50:44.807"></status>
</kw>
<msg timestamp="20201103 16:50:47.855" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:50:47.855" starttime="20201103 16:50:44.807"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:47.855" starttime="20201103 16:50:47.855"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:50:47.860" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:50:53.063" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:50:53.064" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:50:53.064" starttime="20201103 16:50:47.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:50:53.065" level="INFO"></msg>
<status status="PASS" endtime="20201103 16:50:53.065" starttime="20201103 16:50:53.064"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:50:53.065" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:50:53.065" starttime="20201103 16:50:53.065"></status>
</kw>
<status status="PASS" endtime="20201103 16:50:53.066" starttime="20201103 16:50:47.856"></status>
</kw>
<msg timestamp="20201103 16:50:53.066" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:50:53.066" starttime="20201103 16:50:47.856"></status>
</kw>
<msg timestamp="20201103 16:50:53.066" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:50:53.066" starttime="20201103 16:50:47.855"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201103 16:50:53.067" starttime="20201103 16:50:53.066"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:50:53.067" critical="yes" starttime="20201103 16:50:41.951"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201103 16:50:53.068" starttime="20201103 16:50:41.901"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s4" name="readdata-second-half">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201103 16:51:35.683" level="INFO">${random} = 94944</msg>
<status status="PASS" endtime="20201103 16:51:35.683" starttime="20201103 16:51:35.683"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:51:35.689" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-94944 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:52:10.804" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:52:10.804" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:52:10.804" starttime="20201103 16:51:35.685"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:52:10.805" level="INFO"></msg>
<status status="PASS" endtime="20201103 16:52:10.805" starttime="20201103 16:52:10.804"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:52:10.806" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:52:10.806" starttime="20201103 16:52:10.805"></status>
</kw>
<status status="PASS" endtime="20201103 16:52:10.806" starttime="20201103 16:51:35.684"></status>
</kw>
<msg timestamp="20201103 16:52:10.806" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:52:10.806" starttime="20201103 16:51:35.684"></status>
</kw>
<msg timestamp="20201103 16:52:10.807" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:52:10.807" starttime="20201103 16:51:35.683"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201103 16:52:10.807" starttime="20201103 16:52:10.807"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:52:10.808" critical="yes" starttime="20201103 16:51:35.682"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201103 16:52:10.809" starttime="20201103 16:51:35.633"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s5" name="readdata-first-half">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201103 16:50:59.627" level="INFO">${random} = 92989</msg>
<status status="PASS" endtime="20201103 16:50:59.627" starttime="20201103 16:50:59.627"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201103 16:50:59.633" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-92989 2&gt;&amp;1'.</msg>
<msg timestamp="20201103 16:51:04.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20201103 16:51:04.242" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:51:04.242" starttime="20201103 16:50:59.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201103 16:51:04.243" level="INFO"></msg>
<status status="PASS" endtime="20201103 16:51:04.243" starttime="20201103 16:51:04.242"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201103 16:51:04.244" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201103 16:51:04.244" starttime="20201103 16:51:04.243"></status>
</kw>
<status status="PASS" endtime="20201103 16:51:04.244" starttime="20201103 16:50:59.628"></status>
</kw>
<msg timestamp="20201103 16:51:04.244" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201103 16:51:04.244" starttime="20201103 16:50:59.628"></status>
</kw>
<msg timestamp="20201103 16:51:04.245" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201103 16:51:04.245" starttime="20201103 16:50:59.627"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201103 16:51:04.245" starttime="20201103 16:51:04.245"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201103 16:51:04.245" critical="yes" starttime="20201103 16:50:59.626"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201103 16:51:04.247" starttime="20201103 16:50:59.576"></status>
</suite>
<status status="PASS" elapsedtime="116740" endtime="N/A" starttime="N/A"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="7">Critical Tests</stat>
<stat fail="0" pass="7">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-topology" pass="7">ozone-topology</stat>
<stat fail="0" id="s1-s1" name="Basic" pass="2">ozone-topology.Basic</stat>
<stat fail="0" id="s1-s2" name="Cli" pass="2">ozone-topology.Cli</stat>
<stat fail="0" id="s1-s3" name="Loaddata" pass="1">ozone-topology.Loaddata</stat>
<stat fail="0" id="s1-s4" name="readdata-second-half" pass="1">ozone-topology.readdata-second-half</stat>
<stat fail="0" id="s1-s5" name="readdata-first-half" pass="1">ozone-topology.readdata-first-half</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
