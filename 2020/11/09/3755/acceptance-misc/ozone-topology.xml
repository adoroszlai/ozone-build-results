<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20201109 13:23:58.683" generator="Rebot 3.2.2 (Python 2.7.17 on linux2)">
<suite id="s1" name="ozone-topology">
<suite source="/opt/hadoop/smoketest/basic/basic.robot" id="s1-s1" name="Basic">
<test id="s1-s1-t1" name="Check webui static resources">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<status status="PASS" endtime="20201109 13:21:12.986" starttime="20201109 13:21:12.985"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:21:12.992" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:21:13.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:21:13.085" level="INFO">${output} = HTTP/1.1 200 OK
Date: Mon, 09 Nov 2020 13:21:13 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Mon, 09 Nov 2020 12:46:08 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201109 13:21:13.085" starttime="20201109 13:21:12.987"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:21:13.086" level="INFO">HTTP/1.1 200 OK
Date: Mon, 09 Nov 2020 13:21:13 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Mon, 09 Nov 2020 12:46:08 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" endtime="20201109 13:21:13.086" starttime="20201109 13:21:13.085"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:21:13.087" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:21:13.087" starttime="20201109 13:21:13.086"></status>
</kw>
<status status="PASS" endtime="20201109 13:21:13.087" starttime="20201109 13:21:12.986"></status>
</kw>
<msg timestamp="20201109 13:21:13.087" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:21:13.087" starttime="20201109 13:21:12.986"></status>
</kw>
<msg timestamp="20201109 13:21:13.088" level="INFO">${result} = HTTP/1.1 200 OK
Date: Mon, 09 Nov 2020 13:21:13 GMT
X-Content-Type-Options: nosniff
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Last-Modified: Mon, 09 Nov 2020 12:46:08 GMT
Content-Typ...</msg>
<status status="PASS" endtime="20201109 13:21:13.088" starttime="20201109 13:21:12.986"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20201109 13:21:13.088" starttime="20201109 13:21:13.088"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:21:13.088" critical="yes" starttime="20201109 13:21:12.984"></status>
</test>
<test id="s1-s1-t2" name="Start freon testing">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<status status="PASS" endtime="20201109 13:21:13.091" starttime="20201109 13:21:13.091"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:21:13.095" level="INFO">Running command 'ozone freon randomkeys --num-of-volumes 5 --num-of-buckets 5 --num-of-keys 5 --num-of-threads 1 --replication-type RATIS --factor THREE --validate-writes 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:11.796" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:11.796" level="INFO">${output} = 2020-11-09 13:21:14,699 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-11-09 13:21:14,853 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201109 13:22:11.796" starttime="20201109 13:21:13.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:11.797" level="INFO">2020-11-09 13:21:14,699 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-11-09 13:21:14,853 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-11-09 13:21:14,853 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2020-11-09 13:21:16,995 [main] INFO freon.RandomKeyGenerator: Number of Threads: 1
2020-11-09 13:21:16,998 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 5.
2020-11-09 13:21:16,998 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 5.
2020-11-09 13:21:16,999 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 5.
2020-11-09 13:21:16,999 [main] INFO freon.RandomKeyGenerator: Key size: 10240 bytes
2020-11-09 13:21:16,999 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-11-09 13:21:16,999 [main] INFO freon.RandomKeyGenerator: validateWrites : true
2020-11-09 13:21:17,011 [main] INFO freon.RandomKeyGenerator: Data validation is enabled.
2020-11-09 13:21:17,013 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-11-09 13:21:17,024 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-11-09 13:21:17,088 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-14280, with hadoop as owner.
2020-11-09 13:21:17,412 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-1-40182, with hadoop as owner.
2020-11-09 13:21:17,425 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-2-14807, with hadoop as owner.
2020-11-09 13:21:17,432 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-3-46803, with hadoop as owner.
2020-11-09 13:21:17,438 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-4-15578, with hadoop as owner.
2020-11-09 13:21:17,451 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-14280/bucket-0-32892, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,528 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-40182/bucket-0-35912, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,544 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-14807/bucket-0-20729, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,554 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-46803/bucket-0-34398, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,561 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-15578/bucket-0-31861, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,572 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-14280/bucket-1-70183, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,579 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-40182/bucket-1-27407, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,586 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-14807/bucket-1-29075, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,593 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-46803/bucket-1-12880, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,600 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-15578/bucket-1-29079, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,606 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-14280/bucket-2-03183, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,615 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-40182/bucket-2-82724, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,623 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-14807/bucket-2-33044, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,630 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-46803/bucket-2-09854, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,638 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-15578/bucket-2-08981, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,643 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-14280/bucket-3-45962, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,649 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-40182/bucket-3-42969, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,656 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-14807/bucket-3-15533, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,660 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-46803/bucket-3-66972, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,664 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-15578/bucket-3-33187, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,669 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-0-14280/bucket-4-91567, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,676 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-1-40182/bucket-4-67362, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,680 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-2-14807/bucket-4-38646, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,685 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-3-46803/bucket-4-04495, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:17,690 [pool-2-thread-1] INFO rpc.RpcClient: Creating Bucket: vol-4-15578/bucket-4-03582, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-11-09 13:21:18,028 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 125)
2020-11-09 13:21:18,603 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-11-09 13:21:18,945 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.impl.MetricRegistriesImpl
2020-11-09 13:21:18,946 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-E00F46947A62-&gt;da38a12f-9471-4948-8c5e-07cf8576f346
2020-11-09 13:21:18,947 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-11-09 13:21:19,028 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-11-09 13:21:20,029 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-11-09 13:21:21,029 [Thread-7] INFO freon.ProgressBar: Progress: 0.80 % (1 out of 125)
2020-11-09 13:21:21,958 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-C353B2820EEF-&gt;0197e2af-8d93-45ce-9f5e-07df4b6ed48f
2020-11-09 13:21:21,958 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-11-09 13:21:22,055 [Thread-7] INFO freon.ProgressBar: Progress: 3.20 % (4 out of 125)
2020-11-09 13:21:23,056 [Thread-7] INFO freon.ProgressBar: Progress: 3.20 % (4 out of 125)
2020-11-09 13:21:24,057 [Thread-7] INFO freon.ProgressBar: Progress: 4.80 % (6 out of 125)
2020-11-09 13:21:25,057 [Thread-7] INFO freon.ProgressBar: Progress: 4.80 % (6 out of 125)
2020-11-09 13:21:26,058 [Thread-7] INFO freon.ProgressBar: Progress: 4.80 % (6 out of 125)
2020-11-09 13:21:26,356 [pool-2-thread-1] INFO metrics.RatisMetrics: Creating Metrics Registry : ratis.client_message_metrics.client-7F20FF7CE29A-&gt;48d8b68f-0dea-41d9-b57f-ed6b370c89a7
2020-11-09 13:21:26,356 [pool-2-thread-1] WARN impl.MetricRegistriesImpl: First MetricRegistry has been created without registering reporters. You may need to call MetricRegistries.global().addReportRegistration(...) before.
2020-11-09 13:21:27,058 [Thread-7] INFO freon.ProgressBar: Progress: 5.60 % (7 out of 125)
2020-11-09 13:21:28,059 [Thread-7] INFO freon.ProgressBar: Progress: 6.40 % (8 out of 125)
2020-11-09 13:21:29,059 [Thread-7] INFO freon.ProgressBar: Progress: 6.40 % (8 out of 125)
2020-11-09 13:21:30,060 [Thread-7] INFO freon.ProgressBar: Progress: 9.60 % (12 out of 125)
2020-11-09 13:21:31,066 [Thread-7] INFO freon.ProgressBar: Progress: 18.40 % (23 out of 125)
2020-11-09 13:21:32,066 [Thread-7] INFO freon.ProgressBar: Progress: 21.60 % (27 out of 125)
2020-11-09 13:21:33,066 [Thread-7] INFO freon.ProgressBar: Progress: 21.60 % (27 out of 125)
2020-11-09 13:21:34,068 [Thread-7] INFO freon.ProgressBar: Progress: 22.40 % (28 out of 125)
2020-11-09 13:21:35,068 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-11-09 13:21:36,069 [Thread-7] INFO freon.ProgressBar: Progress: 24.00 % (30 out of 125)
2020-11-09 13:21:37,072 [Thread-7] INFO freon.ProgressBar: Progress: 28.00 % (35 out of 125)
2020-11-09 13:21:38,073 [Thread-7] INFO freon.ProgressBar: Progress: 37.60 % (47 out of 125)
2020-11-09 13:21:39,073 [Thread-7] INFO freon.ProgressBar: Progress: 38.40 % (48 out of 125)
2020-11-09 13:21:40,073 [Thread-7] INFO freon.ProgressBar: Progress: 38.40 % (48 out of 125)
2020-11-09 13:21:41,075 [Thread-7] INFO freon.ProgressBar: Progress: 42.40 % (53 out of 125)
2020-11-09 13:21:42,075 [Thread-7] INFO freon.ProgressBar: Progress: 47.20 % (59 out of 125)
2020-11-09 13:21:43,076 [Thread-7] INFO freon.ProgressBar: Progress: 47.20 % (59 out of 125)
2020-11-09 13:21:44,076 [Thread-7] INFO freon.ProgressBar: Progress: 47.20 % (59 out of 125)
2020-11-09 13:21:45,077 [Thread-7] INFO freon.ProgressBar: Progress: 56.80 % (71 out of 125)
2020-11-09 13:21:46,077 [Thread-7] INFO freon.ProgressBar: Progress: 56.80 % (71 out of 125)
2020-11-09 13:21:47,078 [Thread-7] INFO freon.ProgressBar: Progress: 56.80 % (71 out of 125)
2020-11-09 13:21:48,079 [Thread-7] INFO freon.ProgressBar: Progress: 64.00 % (80 out of 125)
2020-11-09 13:21:49,080 [Thread-7] INFO freon.ProgressBar: Progress: 68.80 % (86 out of 125)
2020-11-09 13:21:50,080 [Thread-7] INFO freon.ProgressBar: Progress: 68.80 % (86 out of 125)
2020-11-09 13:21:51,083 [Thread-7] INFO freon.ProgressBar: Progress: 70.40 % (88 out of 125)
2020-11-09 13:21:52,083 [Thread-7] INFO freon.ProgressBar: Progress: 75.20 % (94 out of 125)
2020-11-09 13:21:53,084 [Thread-7] INFO freon.ProgressBar: Progress: 75.20 % (94 out of 125)
2020-11-09 13:21:54,084 [Thread-7] INFO freon.ProgressBar: Progress: 76.80 % (96 out of 125)
2020-11-09 13:21:55,084 [Thread-7] INFO freon.ProgressBar: Progress: 76.80 % (96 out of 125)
2020-11-09 13:21:56,085 [Thread-7] INFO freon.ProgressBar: Progress: 76.80 % (96 out of 125)
2020-11-09 13:21:57,085 [Thread-7] INFO freon.ProgressBar: Progress: 81.60 % (102 out of 125)
2020-11-09 13:21:58,086 [Thread-7] INFO freon.ProgressBar: Progress: 81.60 % (102 out of 125)
2020-11-09 13:21:59,086 [Thread-7] INFO freon.ProgressBar: Progress: 81.60 % (102 out of 125)
2020-11-09 13:22:00,087 [Thread-7] INFO freon.ProgressBar: Progress: 86.40 % (108 out of 125)
2020-11-09 13:22:01,088 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-11-09 13:22:02,088 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-11-09 13:22:03,089 [Thread-7] INFO freon.ProgressBar: Progress: 98.40 % (123 out of 125)
2020-11-09 13:22:04,089 [Thread-7] INFO freon.ProgressBar: Progress: 99.20 % (124 out of 125)
2020-11-09 13:22:05,090 [Thread-7] INFO freon.ProgressBar: Progress: 99.20 % (124 out of 125)
2020-11-09 13:22:06,090 [Thread-7] INFO freon.ProgressBar: Progress: 99.20 % (124 out of 125)
2020-11-09 13:22:07,091 [Thread-7] INFO freon.ProgressBar: Progress: 100.00 % (125 out of 125)

***************************************************
Status: Success
Git Base Revision: b3cbbb467e22ea829b3808f4b7b01d07e0bf3842
Number of Volumes created: 5
Number of Buckets created: 25
Number of Keys added: 125
Ratis replication factor: THREE
Ratis replication type: RATIS
Average Time spent in volume creation: 00:00:00,402
Average Time spent in bucket creation: 00:00:00,167
Average Time spent in key creation: 00:00:02,181
Average Time spent in key write: 00:00:00,871
Total bytes written: 1280000
Total number of writes validated: 125
Writes validated: 100.0 %
Successful validation: 125
Unsuccessful validation: 0
Total Execution time: 00:00:56,371
***************************************************</msg>
<status status="PASS" endtime="20201109 13:22:11.798" starttime="20201109 13:22:11.797"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:11.798" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:11.798" starttime="20201109 13:22:11.798"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:11.799" starttime="20201109 13:21:13.092"></status>
</kw>
<msg timestamp="20201109 13:22:11.799" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:11.799" starttime="20201109 13:21:13.092"></status>
</kw>
<msg timestamp="20201109 13:22:11.799" level="INFO">${result} = 2020-11-09 13:21:14,699 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-11-09 13:21:14,853 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" endtime="20201109 13:22:11.799" starttime="20201109 13:21:13.091"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Number of Keys added: 125</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:11.800" starttime="20201109 13:22:11.800"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:11.800" starttime="20201109 13:22:11.799"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Status: Success</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:11.801" starttime="20201109 13:22:11.800"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:22:11.801" critical="yes" starttime="20201109 13:21:13.090"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201109 13:22:11.802" starttime="20201109 13:21:12.936"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/cli.robot" id="s1-s2" name="Cli">
<test id="s1-s2-t1" name="Run printTopology">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:22:16.469" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:18.887" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:18.887" level="INFO">${output} = State = HEALTHY
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201109 13:22:18.887" starttime="20201109 13:22:16.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:18.888" level="INFO">State = HEALTHY
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack2</msg>
<status status="PASS" endtime="20201109 13:22:18.888" starttime="20201109 13:22:18.888"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:18.889" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:18.889" starttime="20201109 13:22:18.889"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:18.890" starttime="20201109 13:22:16.465"></status>
</kw>
<msg timestamp="20201109 13:22:18.890" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:18.890" starttime="20201109 13:22:16.465"></status>
</kw>
<msg timestamp="20201109 13:22:18.890" level="INFO">${output} = State = HEALTHY
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /rack1
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net):RATIS=9858,STANDALONE=9859    /...</msg>
<status status="PASS" endtime="20201109 13:22:18.890" starttime="20201109 13:22:16.464"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
<arg>/rack2</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:18.891" starttime="20201109 13:22:18.890"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:22:18.891" critical="yes" starttime="20201109 13:22:16.463"></status>
</test>
<test id="s1-s2-t2" name="Run printTopology -o">
<kw name="Execute" library="os">
<arguments>
<arg>ozone admin printTopology -o</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:22:18.896" level="INFO">Running command 'ozone admin printTopology -o 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:21.323" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:21.323" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201109 13:22:21.323" starttime="20201109 13:22:18.894"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:21.324" level="INFO">State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topology_net)
Location: /rack2
 10.5.0.9(ozone-topology_datanode_6_1.ozone-topology_net)
 10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)
 10.5.0.8(ozone-topology_datanode_5_1.ozone-topology_net)</msg>
<status status="PASS" endtime="20201109 13:22:21.324" starttime="20201109 13:22:21.323"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:21.324" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:21.325" starttime="20201109 13:22:21.324"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:21.325" starttime="20201109 13:22:18.893"></status>
</kw>
<msg timestamp="20201109 13:22:21.325" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:21.325" starttime="20201109 13:22:18.893"></status>
</kw>
<msg timestamp="20201109 13:22:21.325" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology_datanode_3_1.ozone-topology_net)
 10.5.0.4(ozone-topology_datanode_1_1.ozone-topology_net)
 10.5.0.5(ozone-topology_datanode_2_1.ozone-topolog...</msg>
<status status="PASS" endtime="20201109 13:22:21.325" starttime="20201109 13:22:18.893"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Location: /rack2</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:21.326" starttime="20201109 13:22:21.326"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>10.5.0.7(ozone-topology_datanode_4_1.ozone-topology_net)</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:21.326" starttime="20201109 13:22:21.326"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:22:21.327" critical="yes" starttime="20201109 13:22:18.892"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201109 13:22:21.328" starttime="20201109 13:22:16.414"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/loaddata.robot" id="s1-s3" name="Loaddata">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh volume create topvol1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:22:25.949" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:28.823" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:28.823" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:28.823" starttime="20201109 13:22:25.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:28.824" level="INFO"></msg>
<status status="PASS" endtime="20201109 13:22:28.825" starttime="20201109 13:22:28.824"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:28.825" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:28.825" starttime="20201109 13:22:28.825"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:28.825" starttime="20201109 13:22:25.944"></status>
</kw>
<msg timestamp="20201109 13:22:28.826" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:28.826" starttime="20201109 13:22:25.944"></status>
</kw>
<msg timestamp="20201109 13:22:28.826" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:28.826" starttime="20201109 13:22:25.943"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:28.826" starttime="20201109 13:22:28.826"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:22:28.830" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:31.823" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:31.823" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:31.823" starttime="20201109 13:22:28.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:31.824" level="INFO"></msg>
<status status="PASS" endtime="20201109 13:22:31.824" starttime="20201109 13:22:31.823"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:31.825" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:31.825" starttime="20201109 13:22:31.824"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:31.825" starttime="20201109 13:22:28.827"></status>
</kw>
<msg timestamp="20201109 13:22:31.825" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:31.825" starttime="20201109 13:22:28.827"></status>
</kw>
<msg timestamp="20201109 13:22:31.826" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:31.826" starttime="20201109 13:22:28.827"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:31.826" starttime="20201109 13:22:31.826"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:22:31.831" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:36.997" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:36.997" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:36.997" starttime="20201109 13:22:31.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:36.999" level="INFO"></msg>
<status status="PASS" endtime="20201109 13:22:36.999" starttime="20201109 13:22:36.997"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:37.000" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:37.000" starttime="20201109 13:22:36.999"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:37.000" starttime="20201109 13:22:31.827"></status>
</kw>
<msg timestamp="20201109 13:22:37.000" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:37.000" starttime="20201109 13:22:31.827"></status>
</kw>
<msg timestamp="20201109 13:22:37.000" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:37.000" starttime="20201109 13:22:31.826"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:37.001" starttime="20201109 13:22:37.001"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:22:37.001" critical="yes" starttime="20201109 13:22:25.942"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201109 13:22:37.003" starttime="20201109 13:22:25.888"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s4" name="readdata-second-half">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201109 13:23:17.783" level="INFO">${random} = 59239</msg>
<status status="PASS" endtime="20201109 13:23:17.783" starttime="20201109 13:23:17.782"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:23:17.789" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-59239 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:23:52.245" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:23:52.246" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:23:52.246" starttime="20201109 13:23:17.784"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:23:52.247" level="INFO"></msg>
<status status="PASS" endtime="20201109 13:23:52.247" starttime="20201109 13:23:52.246"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:23:52.247" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:23:52.248" starttime="20201109 13:23:52.247"></status>
</kw>
<status status="PASS" endtime="20201109 13:23:52.248" starttime="20201109 13:23:17.784"></status>
</kw>
<msg timestamp="20201109 13:23:52.248" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:23:52.248" starttime="20201109 13:23:17.784"></status>
</kw>
<msg timestamp="20201109 13:23:52.248" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:23:52.248" starttime="20201109 13:23:17.783"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201109 13:23:52.249" starttime="20201109 13:23:52.248"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:23:52.249" critical="yes" starttime="20201109 13:23:17.781"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201109 13:23:52.250" starttime="20201109 13:23:17.733"></status>
</suite>
<suite source="/opt/hadoop/smoketest/topology/readdata.robot" id="s1-s5" name="readdata-first-half">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>5</arg>
<arg>[NUMBERS]</arg>
</arguments>
<assign>
<var>${random}</var>
</assign>
<msg timestamp="20201109 13:22:43.582" level="INFO">${random} = 40984</msg>
<status status="PASS" endtime="20201109 13:22:43.582" starttime="20201109 13:22:43.581"></status>
</kw>
<kw name="Execute" library="os">
<arguments>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Execute and checkrc" library="os">
<arguments>
<arg>${command}</arg>
<arg>0</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20201109 13:22:43.591" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-40984 2&gt;&amp;1'.</msg>
<msg timestamp="20201109 13:22:48.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20201109 13:22:48.105" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:48.105" starttime="20201109 13:22:43.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201109 13:22:48.106" level="INFO"></msg>
<status status="PASS" endtime="20201109 13:22:48.106" starttime="20201109 13:22:48.105"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
</arguments>
<msg timestamp="20201109 13:22:48.107" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20201109 13:22:48.107" starttime="20201109 13:22:48.106"></status>
</kw>
<status status="PASS" endtime="20201109 13:22:48.107" starttime="20201109 13:22:43.583"></status>
</kw>
<msg timestamp="20201109 13:22:48.107" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20201109 13:22:48.107" starttime="20201109 13:22:43.583"></status>
</kw>
<msg timestamp="20201109 13:22:48.108" level="INFO">${output} = </msg>
<status status="PASS" endtime="20201109 13:22:48.108" starttime="20201109 13:22:43.582"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Failed</arg>
</arguments>
<status status="PASS" endtime="20201109 13:22:48.108" starttime="20201109 13:22:48.108"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" endtime="20201109 13:22:48.108" critical="yes" starttime="20201109 13:22:43.580"></status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" endtime="20201109 13:22:48.109" starttime="20201109 13:22:43.531"></status>
</suite>
<status status="PASS" elapsedtime="113990" endtime="N/A" starttime="N/A"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="7">Critical Tests</stat>
<stat fail="0" pass="7">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="ozone-topology" pass="7">ozone-topology</stat>
<stat fail="0" id="s1-s1" name="Basic" pass="2">ozone-topology.Basic</stat>
<stat fail="0" id="s1-s2" name="Cli" pass="2">ozone-topology.Cli</stat>
<stat fail="0" id="s1-s3" name="Loaddata" pass="1">ozone-topology.Loaddata</stat>
<stat fail="0" id="s1-s4" name="readdata-second-half" pass="1">ozone-topology.readdata-second-half</stat>
<stat fail="0" id="s1-s5" name="readdata-first-half" pass="1">ozone-topology.readdata-first-half</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
