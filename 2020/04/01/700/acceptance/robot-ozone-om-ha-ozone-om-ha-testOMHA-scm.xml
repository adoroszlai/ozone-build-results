<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20200401 13:00:55.520" generator="Robot 3.1.2 (Python 2.7.5 on linux2)">
<suite source="/opt/hadoop/smoketest/omha/testOMHA.robot" id="s1" name="ozone-om-ha-testOMHA">
<test id="s1-t1" name="Stop Leader OM and Verify Failover">
<kw name="Create volume and bucket">
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:00:55.857" level="INFO">Running command 'ozone sh volume create o3://omservice/volume1 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:05.822" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:05.822" level="INFO">${output} = </msg>
<status status="PASS" endtime="20200401 13:01:05.822" starttime="20200401 13:00:55.855"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:05.823" level="INFO"></msg>
<status status="PASS" endtime="20200401 13:01:05.823" starttime="20200401 13:01:05.823"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:05.824" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:05.824" starttime="20200401 13:01:05.824"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:05.824" starttime="20200401 13:00:55.855"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:05.828" level="INFO">Running command 'ozone sh bucket create o3://omservice/volume1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:08.808" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:08.809" level="INFO">${output} = </msg>
<status status="PASS" endtime="20200401 13:01:08.809" starttime="20200401 13:01:05.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:08.810" level="INFO"></msg>
<status status="PASS" endtime="20200401 13:01:08.810" starttime="20200401 13:01:08.809"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:08.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:08.811" starttime="20200401 13:01:08.810"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:08.811" starttime="20200401 13:01:05.824"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:08.811" starttime="20200401 13:00:55.854"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:01:08.812" level="INFO">${writeFileCount} = 1</msg>
<status status="PASS" endtime="20200401 13:01:08.812" starttime="20200401 13:01:08.812"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:01:08.813" level="INFO">${WRITE_FILE_COUNT} = 1</msg>
<status status="PASS" endtime="20200401 13:01:08.813" starttime="20200401 13:01:08.812"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:01:08.814" level="INFO">${fileName} = omha-1.txt</msg>
<status status="PASS" endtime="20200401 13:01:08.814" starttime="20200401 13:01:08.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:01:08.815" level="INFO">${testFilePath} = /tmp/omha-1.txt</msg>
<status status="PASS" endtime="20200401 13:01:08.815" starttime="20200401 13:01:08.814"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:01:08.820" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-1.txt"&gt;/tmp/omha-1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:01:08.820" starttime="20200401 13:01:08.816"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:08.823" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-1.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:14.212" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:14.212" level="INFO">${output} = 2020-04-01 13:01:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:01:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020...</msg>
<status status="PASS" endtime="20200401 13:01:14.212" starttime="20200401 13:01:08.821"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:14.213" level="INFO">2020-04-01 13:01:12 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:01:12 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:01:12 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:01:14.214" starttime="20200401 13:01:14.213"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:14.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:14.214" starttime="20200401 13:01:14.214"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:14.215" starttime="20200401 13:01:08.820"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:14.217" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:16.611" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:16.611" level="INFO">${output} = omha-1.txt</msg>
<status status="PASS" endtime="20200401 13:01:16.611" starttime="20200401 13:01:14.216"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:16.612" level="INFO">omha-1.txt</msg>
<status status="PASS" endtime="20200401 13:01:16.613" starttime="20200401 13:01:16.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:16.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:16.613" starttime="20200401 13:01:16.613"></status>
</kw>
<msg timestamp="20200401 13:01:16.614" level="INFO">${result} = omha-1.txt</msg>
<status status="PASS" endtime="20200401 13:01:16.614" starttime="20200401 13:01:14.215"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:16.614" starttime="20200401 13:01:16.614"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:01:16.615" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-1.txt"&gt;/tmp/omha-1.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:01:16.615" starttime="20200401 13:01:16.615"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:16.615" starttime="20200401 13:01:08.811"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:16.618" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:18.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:18.902" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:18.903" starttime="20200401 13:01:16.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:18.904" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:18.904" starttime="20200401 13:01:18.903"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:18.905" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:18.905" starttime="20200401 13:01:18.904"></status>
</kw>
<msg timestamp="20200401 13:01:18.905" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:18.906" starttime="20200401 13:01:16.616"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:01:18.906" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:18.906" starttime="20200401 13:01:18.906"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:18.907" starttime="20200401 13:01:18.907"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:18.908" starttime="20200401 13:01:18.907"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:01:18.908" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:01:18.909" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:18.909" starttime="20200401 13:01:18.908"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:01:18.909" level="INFO">${split1} = om2 </msg>
<msg timestamp="20200401 13:01:18.909" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:01:18.909" starttime="20200401 13:01:18.909"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:01:18.910" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:01:18.910" starttime="20200401 13:01:18.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:01:18.911" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20200401 13:01:18.911" starttime="20200401 13:01:18.910"></status>
</kw>
<msg timestamp="20200401 13:01:18.911" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:01:18.911" starttime="20200401 13:01:16.616"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:01:18.912" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:01:18.912" starttime="20200401 13:01:18.912"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:18.913" starttime="20200401 13:01:18.913"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:01:18.914" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:01:20.112" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:01:20.113" starttime="20200401 13:01:18.914"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:20.113" starttime="20200401 13:01:18.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:01:20.114" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:01:21.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:21.212" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:01:21.212" starttime="20200401 13:01:20.113"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:21.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:21.213" starttime="20200401 13:01:21.212"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:01:21.213" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:01:21.309" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:21.310" level="INFO">${stopMsg} = hadoop      399  0.0  0.0   9564  2328 ?        Ss   13:01   0:00 bash -c sudo ps aux | grep om
hadoop      401  0.0  0.0   9096   852 ?        S    13:01   0:00 grep om</msg>
<msg timestamp="20200401 13:01:21.310" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:01:21.310" starttime="20200401 13:01:21.213"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:21.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:21.311" starttime="20200401 13:01:21.310"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:01:21.376" starttime="20200401 13:01:21.311"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:21.376" starttime="20200401 13:01:21.376"></status>
</kw>
<msg timestamp="20200401 13:01:21.377" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20200401 13:01:21.377" starttime="20200401 13:01:18.911"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:21.379" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:23.621" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:23.621" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:23.621" starttime="20200401 13:01:21.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:23.622" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:23.622" starttime="20200401 13:01:23.621"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:23.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:23.623" starttime="20200401 13:01:23.622"></status>
</kw>
<msg timestamp="20200401 13:01:23.623" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:23.623" starttime="20200401 13:01:21.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:01:23.624" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:23.624" starttime="20200401 13:01:23.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:23.624" starttime="20200401 13:01:23.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:23.625" starttime="20200401 13:01:23.625"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:01:23.626" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:01:23.626" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:23.626" starttime="20200401 13:01:23.625"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:01:23.626" level="INFO">${split1} = om3 </msg>
<msg timestamp="20200401 13:01:23.627" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:01:23.627" starttime="20200401 13:01:23.626"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:01:23.627" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:01:23.627" starttime="20200401 13:01:23.627"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:01:23.628" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20200401 13:01:23.628" starttime="20200401 13:01:23.627"></status>
</kw>
<msg timestamp="20200401 13:01:23.628" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:01:23.628" starttime="20200401 13:01:21.377"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:23.629" starttime="20200401 13:01:23.628"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:01:23.630" level="INFO">${writeFileCount} = 2</msg>
<status status="PASS" endtime="20200401 13:01:23.630" starttime="20200401 13:01:23.630"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:01:23.631" level="INFO">${WRITE_FILE_COUNT} = 2</msg>
<status status="PASS" endtime="20200401 13:01:23.631" starttime="20200401 13:01:23.630"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:01:23.632" level="INFO">${fileName} = omha-2.txt</msg>
<status status="PASS" endtime="20200401 13:01:23.632" starttime="20200401 13:01:23.631"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:01:23.632" level="INFO">${testFilePath} = /tmp/omha-2.txt</msg>
<status status="PASS" endtime="20200401 13:01:23.632" starttime="20200401 13:01:23.632"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:01:23.634" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-2.txt"&gt;/tmp/omha-2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:01:23.634" starttime="20200401 13:01:23.633"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:23.637" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-2.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:28.816" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:28.816" level="INFO">${output} = 2020-04-01 13:01:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:01:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020...</msg>
<status status="PASS" endtime="20200401 13:01:28.816" starttime="20200401 13:01:23.635"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:28.817" level="INFO">2020-04-01 13:01:26 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:01:26 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:01:26 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:01:28.817" starttime="20200401 13:01:28.816"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:28.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:28.818" starttime="20200401 13:01:28.817"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:28.818" starttime="20200401 13:01:23.634"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:28.820" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:31.248" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:31.248" level="INFO">${output} = omha-1.txt
omha-2.txt</msg>
<status status="PASS" endtime="20200401 13:01:31.248" starttime="20200401 13:01:28.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:31.250" level="INFO">omha-1.txt
omha-2.txt</msg>
<status status="PASS" endtime="20200401 13:01:31.250" starttime="20200401 13:01:31.249"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:31.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:31.251" starttime="20200401 13:01:31.250"></status>
</kw>
<msg timestamp="20200401 13:01:31.251" level="INFO">${result} = omha-1.txt
omha-2.txt</msg>
<status status="PASS" endtime="20200401 13:01:31.251" starttime="20200401 13:01:28.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:31.252" starttime="20200401 13:01:31.251"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:01:31.253" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-2.txt"&gt;/tmp/omha-2.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:01:31.253" starttime="20200401 13:01:31.252"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:31.253" starttime="20200401 13:01:23.629"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:01:31.254" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:01:31.254" starttime="20200401 13:01:31.254"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:31.255" starttime="20200401 13:01:31.255"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:01:31.256" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:01:32.463" level="INFO">Read output: Last login: Wed Apr  1 13:01:19 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:01:32.464" starttime="20200401 13:01:31.256"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:32.464" starttime="20200401 13:01:31.254"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:01:32.465" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20200401 13:01:34.587" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:34.587" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:01:34.587" starttime="20200401 13:01:32.464"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:34.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:34.588" starttime="20200401 13:01:34.587"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${startMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:01:34.589" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:01:34.684" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:34.685" level="INFO">${startMsg} = hadoop      449  178  2.1 3649996 154528 ?      Sl   13:01   0:03 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -...</msg>
<msg timestamp="20200401 13:01:34.685" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:01:34.685" starttime="20200401 13:01:34.588"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:34.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:34.686" starttime="20200401 13:01:34.685"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:01:34.750" starttime="20200401 13:01:34.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:34.751" starttime="20200401 13:01:34.751"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:34.752" starttime="20200401 13:01:31.253"></status>
</kw>
<timeout value="8 minutes"></timeout>
<status status="PASS" endtime="20200401 13:01:34.752" critical="yes" starttime="20200401 13:00:55.852"></status>
</test>
<test id="s1-t2" name="Test Multiple Failovers">
<kw type="for" name="${INDEX} IN RANGE [ 5 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:34.757" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:38.680" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:38.680" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:38.680" starttime="20200401 13:01:34.755"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:38.682" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:38.682" starttime="20200401 13:01:38.681"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:38.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:38.682" starttime="20200401 13:01:38.682"></status>
</kw>
<msg timestamp="20200401 13:01:38.683" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:38.683" starttime="20200401 13:01:34.754"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:01:38.683" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:38.683" starttime="20200401 13:01:38.683"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:38.684" starttime="20200401 13:01:38.684"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:38.686" starttime="20200401 13:01:38.685"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:01:38.689" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:01:38.689" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:38.689" starttime="20200401 13:01:38.689"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:01:38.694" level="INFO">${split1} = om3 </msg>
<msg timestamp="20200401 13:01:38.695" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:01:38.695" starttime="20200401 13:01:38.690"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:01:38.695" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:01:38.695" starttime="20200401 13:01:38.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:01:38.696" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20200401 13:01:38.696" starttime="20200401 13:01:38.695"></status>
</kw>
<msg timestamp="20200401 13:01:38.696" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:01:38.696" starttime="20200401 13:01:34.754"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:01:38.698" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20200401 13:01:38.698" starttime="20200401 13:01:38.697"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:38.700" starttime="20200401 13:01:38.699"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:01:38.700" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:01:39.905" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:01:39.905" starttime="20200401 13:01:38.700"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:39.905" starttime="20200401 13:01:38.698"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:01:39.906" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:01:41.001" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:41.002" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:01:41.002" starttime="20200401 13:01:39.906"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:41.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:41.003" starttime="20200401 13:01:41.002"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:01:41.004" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:01:41.090" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:41.090" level="INFO">${stopMsg} = hadoop      435  0.0  0.0   9564  2272 ?        Ss   13:01   0:00 bash -c sudo ps aux | grep om
hadoop      437  0.0  0.0   9096   812 ?        S    13:01   0:00 grep om</msg>
<msg timestamp="20200401 13:01:41.091" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:01:41.091" starttime="20200401 13:01:41.004"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:41.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:41.091" starttime="20200401 13:01:41.091"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:01:41.156" starttime="20200401 13:01:41.091"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:41.157" starttime="20200401 13:01:41.156"></status>
</kw>
<msg timestamp="20200401 13:01:41.157" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20200401 13:01:41.157" starttime="20200401 13:01:38.696"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:41.160" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:43.954" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:43.954" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:43.954" starttime="20200401 13:01:41.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:43.955" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:43.955" starttime="20200401 13:01:43.954"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:43.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:43.956" starttime="20200401 13:01:43.955"></status>
</kw>
<msg timestamp="20200401 13:01:43.956" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:43.956" starttime="20200401 13:01:41.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:01:43.957" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:43.957" starttime="20200401 13:01:43.956"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:43.957" starttime="20200401 13:01:43.957"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:43.958" starttime="20200401 13:01:43.957"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:01:43.958" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:01:43.959" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:43.959" starttime="20200401 13:01:43.958"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:01:43.959" level="INFO">${split1} = om2 </msg>
<msg timestamp="20200401 13:01:43.959" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:01:43.959" starttime="20200401 13:01:43.959"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:01:43.960" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:01:43.960" starttime="20200401 13:01:43.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:01:43.961" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20200401 13:01:43.961" starttime="20200401 13:01:43.960"></status>
</kw>
<msg timestamp="20200401 13:01:43.961" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:01:43.961" starttime="20200401 13:01:41.157"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:43.962" starttime="20200401 13:01:43.961"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:01:43.963" level="INFO">${writeFileCount} = 3</msg>
<status status="PASS" endtime="20200401 13:01:43.963" starttime="20200401 13:01:43.962"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:01:43.964" level="INFO">${WRITE_FILE_COUNT} = 3</msg>
<status status="PASS" endtime="20200401 13:01:43.964" starttime="20200401 13:01:43.963"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:01:43.964" level="INFO">${fileName} = omha-3.txt</msg>
<status status="PASS" endtime="20200401 13:01:43.964" starttime="20200401 13:01:43.964"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:01:43.965" level="INFO">${testFilePath} = /tmp/omha-3.txt</msg>
<status status="PASS" endtime="20200401 13:01:43.965" starttime="20200401 13:01:43.965"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:01:43.967" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-3.txt"&gt;/tmp/omha-3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:01:43.967" starttime="20200401 13:01:43.965"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:43.969" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-3.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:49.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:49.057" level="INFO">${output} = 2020-04-01 13:01:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:01:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020...</msg>
<status status="PASS" endtime="20200401 13:01:49.057" starttime="20200401 13:01:43.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:49.059" level="INFO">2020-04-01 13:01:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:01:47 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:01:47 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:01:49.059" starttime="20200401 13:01:49.058"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:49.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:49.060" starttime="20200401 13:01:49.059"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:49.060" starttime="20200401 13:01:43.967"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:49.062" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:51.411" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:51.411" level="INFO">${output} = omha-1.txt
omha-2.txt
omha-3.txt</msg>
<status status="PASS" endtime="20200401 13:01:51.411" starttime="20200401 13:01:49.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:51.412" level="INFO">omha-1.txt
omha-2.txt
omha-3.txt</msg>
<status status="PASS" endtime="20200401 13:01:51.412" starttime="20200401 13:01:51.411"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:51.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:51.413" starttime="20200401 13:01:51.412"></status>
</kw>
<msg timestamp="20200401 13:01:51.413" level="INFO">${result} = omha-1.txt
omha-2.txt
omha-3.txt</msg>
<status status="PASS" endtime="20200401 13:01:51.413" starttime="20200401 13:01:49.060"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:51.414" starttime="20200401 13:01:51.414"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:01:51.415" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-3.txt"&gt;/tmp/omha-3.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:01:51.415" starttime="20200401 13:01:51.414"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:51.415" starttime="20200401 13:01:43.962"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:01:51.416" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20200401 13:01:51.416" starttime="20200401 13:01:51.416"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:51.417" starttime="20200401 13:01:51.417"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:01:51.418" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:01:52.616" level="INFO">Read output: Last login: Wed Apr  1 13:01:38 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:01:52.616" starttime="20200401 13:01:51.418"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:52.617" starttime="20200401 13:01:51.416"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:01:52.617" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20200401 13:01:54.775" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:54.775" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:01:54.775" starttime="20200401 13:01:52.617"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:54.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:54.776" starttime="20200401 13:01:54.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${startMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:01:54.777" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:01:54.903" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:01:54.903" level="INFO">${startMsg} = hadoop      485  123  2.2 3651656 160888 ?      Sl   13:01   0:03 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -...</msg>
<msg timestamp="20200401 13:01:54.903" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:01:54.903" starttime="20200401 13:01:54.776"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:54.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:54.904" starttime="20200401 13:01:54.903"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:01:54.970" starttime="20200401 13:01:54.904"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:54.971" starttime="20200401 13:01:54.970"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:54.971" starttime="20200401 13:01:51.415"></status>
</kw>
<status status="PASS" endtime="20200401 13:01:54.971" starttime="20200401 13:01:34.754"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:01:54.973" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:01:58.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:01:58.943" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:58.943" starttime="20200401 13:01:54.972"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:01:58.944" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:58.945" starttime="20200401 13:01:58.944"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:01:58.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:01:58.945" starttime="20200401 13:01:58.945"></status>
</kw>
<msg timestamp="20200401 13:01:58.945" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:58.946" starttime="20200401 13:01:54.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:01:58.946" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:58.946" starttime="20200401 13:01:58.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:58.947" starttime="20200401 13:01:58.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:58.947" starttime="20200401 13:01:58.947"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:01:58.948" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:01:58.948" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:01:58.948" starttime="20200401 13:01:58.948"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:01:58.949" level="INFO">${split1} = om2 </msg>
<msg timestamp="20200401 13:01:58.949" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:01:58.949" starttime="20200401 13:01:58.948"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:01:58.950" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:01:58.950" starttime="20200401 13:01:58.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:01:58.950" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20200401 13:01:58.951" starttime="20200401 13:01:58.950"></status>
</kw>
<msg timestamp="20200401 13:01:58.951" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:01:58.951" starttime="20200401 13:01:54.971"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:01:58.952" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:01:58.952" starttime="20200401 13:01:58.951"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:01:58.953" starttime="20200401 13:01:58.952"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:01:58.954" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:02:00.164" level="INFO">Read output: Last login: Wed Apr  1 13:01:31 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:02:00.165" starttime="20200401 13:01:58.953"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:00.165" starttime="20200401 13:01:58.952"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:02:00.166" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:02:01.279" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:02:01.279" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:02:01.279" starttime="20200401 13:02:00.165"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:01.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:01.280" starttime="20200401 13:02:01.279"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:02:01.281" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:02:01.367" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:02:01.367" level="INFO">${stopMsg} = hadoop      899  0.0  0.0   9564  2340 ?        Ss   13:02   0:00 bash -c sudo ps aux | grep om
hadoop      901  0.0  0.0   9096   824 ?        S    13:02   0:00 grep om</msg>
<msg timestamp="20200401 13:02:01.367" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:02:01.367" starttime="20200401 13:02:01.280"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:01.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:01.368" starttime="20200401 13:02:01.367"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:02:01.433" starttime="20200401 13:02:01.368"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:01.433" starttime="20200401 13:02:01.433"></status>
</kw>
<msg timestamp="20200401 13:02:01.434" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20200401 13:02:01.434" starttime="20200401 13:01:58.951"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:01.436" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:02:03.710" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:02:03.710" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:03.710" starttime="20200401 13:02:01.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:02:03.711" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:03.711" starttime="20200401 13:02:03.710"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:03.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:03.712" starttime="20200401 13:02:03.711"></status>
</kw>
<msg timestamp="20200401 13:02:03.712" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:03.712" starttime="20200401 13:02:01.434"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:02:03.713" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:03.713" starttime="20200401 13:02:03.713"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:03.714" starttime="20200401 13:02:03.713"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:03.714" starttime="20200401 13:02:03.714"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:02:03.715" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:02:03.715" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:03.715" starttime="20200401 13:02:03.715"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:02:03.716" level="INFO">${split1} = om1 </msg>
<msg timestamp="20200401 13:02:03.716" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:02:03.716" starttime="20200401 13:02:03.715"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:02:03.717" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:02:03.717" starttime="20200401 13:02:03.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:02:03.717" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20200401 13:02:03.717" starttime="20200401 13:02:03.717"></status>
</kw>
<msg timestamp="20200401 13:02:03.718" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:02:03.718" starttime="20200401 13:02:01.434"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:03.718" starttime="20200401 13:02:03.718"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:02:03.722" level="INFO">${writeFileCount} = 4</msg>
<status status="PASS" endtime="20200401 13:02:03.722" starttime="20200401 13:02:03.719"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:02:03.723" level="INFO">${WRITE_FILE_COUNT} = 4</msg>
<status status="PASS" endtime="20200401 13:02:03.723" starttime="20200401 13:02:03.722"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:02:03.723" level="INFO">${fileName} = omha-4.txt</msg>
<status status="PASS" endtime="20200401 13:02:03.723" starttime="20200401 13:02:03.723"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:02:03.724" level="INFO">${testFilePath} = /tmp/omha-4.txt</msg>
<status status="PASS" endtime="20200401 13:02:03.724" starttime="20200401 13:02:03.723"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:02:03.725" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-4.txt"&gt;/tmp/omha-4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:02:03.726" starttime="20200401 13:02:03.724"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:03.728" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-4.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:02:08.055" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:02:08.056" level="INFO">${output} = 2020-04-01 13:02:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:02:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020...</msg>
<status status="PASS" endtime="20200401 13:02:08.056" starttime="20200401 13:02:03.726"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:02:08.057" level="INFO">2020-04-01 13:02:06 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:02:06 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:02:06 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:02:08.057" starttime="20200401 13:02:08.056"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:08.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:08.058" starttime="20200401 13:02:08.057"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:08.058" starttime="20200401 13:02:03.726"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:08.060" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:02:10.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:02:10.468" level="INFO">${output} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt</msg>
<status status="PASS" endtime="20200401 13:02:10.468" starttime="20200401 13:02:08.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:02:10.470" level="INFO">omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt</msg>
<status status="PASS" endtime="20200401 13:02:10.470" starttime="20200401 13:02:10.469"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:10.470" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:10.471" starttime="20200401 13:02:10.470"></status>
</kw>
<msg timestamp="20200401 13:02:10.471" level="INFO">${result} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt</msg>
<status status="PASS" endtime="20200401 13:02:10.471" starttime="20200401 13:02:08.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:10.472" starttime="20200401 13:02:10.471"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:02:10.473" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-4.txt"&gt;/tmp/omha-4.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:02:10.473" starttime="20200401 13:02:10.472"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:10.473" starttime="20200401 13:02:03.718"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:02:10.474" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:02:10.474" starttime="20200401 13:02:10.474"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:10.475" starttime="20200401 13:02:10.475"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:02:10.476" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:02:11.674" level="INFO">Read output: Last login: Wed Apr  1 13:01:59 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:02:11.675" starttime="20200401 13:02:10.476"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:11.675" starttime="20200401 13:02:10.475"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:02:11.676" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20200401 13:02:13.803" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:02:13.803" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:02:13.803" starttime="20200401 13:02:11.675"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:13.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:13.804" starttime="20200401 13:02:13.803"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${startMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:02:13.805" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:02:13.932" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:02:13.933" level="INFO">${startMsg} = hadoop      950  180  2.2 3650380 159976 ?      Sl   13:02   0:03 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -...</msg>
<msg timestamp="20200401 13:02:13.933" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:02:13.933" starttime="20200401 13:02:13.804"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:13.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:13.934" starttime="20200401 13:02:13.933"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:02:13.999" starttime="20200401 13:02:13.934"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:14.000" starttime="20200401 13:02:14.000"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:14.000" starttime="20200401 13:02:10.473"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:14.000" starttime="20200401 13:01:54.971"></status>
</kw>
<kw type="foritem" name="${INDEX} = 2">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:14.004" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:02:18.051" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:02:18.051" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:18.051" starttime="20200401 13:02:14.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:02:18.052" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:18.052" starttime="20200401 13:02:18.051"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:18.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:18.053" starttime="20200401 13:02:18.052"></status>
</kw>
<msg timestamp="20200401 13:02:18.053" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:18.053" starttime="20200401 13:02:14.001"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:02:18.054" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:18.054" starttime="20200401 13:02:18.054"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:18.059" starttime="20200401 13:02:18.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:18.059" starttime="20200401 13:02:18.059"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:02:18.060" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:02:18.060" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:18.060" starttime="20200401 13:02:18.060"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:02:18.061" level="INFO">${split1} = om1 </msg>
<msg timestamp="20200401 13:02:18.061" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:02:18.061" starttime="20200401 13:02:18.060"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:02:18.062" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:02:18.062" starttime="20200401 13:02:18.061"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:02:18.064" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20200401 13:02:18.065" starttime="20200401 13:02:18.062"></status>
</kw>
<msg timestamp="20200401 13:02:18.065" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:02:18.065" starttime="20200401 13:02:14.001"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:02:18.066" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20200401 13:02:18.066" starttime="20200401 13:02:18.066"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:18.067" starttime="20200401 13:02:18.067"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:02:18.068" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:02:19.278" level="INFO">Read output: -bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:02:19.279" starttime="20200401 13:02:18.068"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:19.279" starttime="20200401 13:02:18.066"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:02:19.280" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:02:20.386" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:02:20.386" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:02:20.386" starttime="20200401 13:02:19.279"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:20.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:20.387" starttime="20200401 13:02:20.386"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:02:20.388" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:02:20.474" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:02:20.474" level="INFO">${stopMsg} = hadoop      570  0.0  0.0   9564  2304 ?        Ss   13:02   0:00 bash -c sudo ps aux | grep om
hadoop      572  0.0  0.0   9096   824 ?        S    13:02   0:00 grep om</msg>
<msg timestamp="20200401 13:02:20.474" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:02:20.474" starttime="20200401 13:02:20.388"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:20.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:20.475" starttime="20200401 13:02:20.474"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:02:20.539" starttime="20200401 13:02:20.475"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:20.540" starttime="20200401 13:02:20.539"></status>
</kw>
<msg timestamp="20200401 13:02:20.540" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20200401 13:02:20.540" starttime="20200401 13:02:18.065"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:20.543" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:02:33.109" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:02:33.109" level="INFO">${output} = Retrying connect to server: om1/172.21.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om...</msg>
<status status="PASS" endtime="20200401 13:02:33.109" starttime="20200401 13:02:20.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:02:33.111" level="INFO">Retrying connect to server: om1/172.21.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:33.111" starttime="20200401 13:02:33.110"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:33.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:33.112" starttime="20200401 13:02:33.111"></status>
</kw>
<msg timestamp="20200401 13:02:33.112" level="INFO">${result} = Retrying connect to server: om1/172.21.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om...</msg>
<status status="PASS" endtime="20200401 13:02:33.112" starttime="20200401 13:02:20.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:02:33.113" level="INFO">Retrying connect to server: om1/172.21.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
Retrying connect to server: om1/172.21.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:33.113" starttime="20200401 13:02:33.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:33.113" starttime="20200401 13:02:33.113"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:33.114" starttime="20200401 13:02:33.114"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:02:33.115" level="INFO">1 out of 13 lines matched</msg>
<msg timestamp="20200401 13:02:33.115" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:02:33.115" starttime="20200401 13:02:33.114"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:02:33.115" level="INFO">${split1} = om2 </msg>
<msg timestamp="20200401 13:02:33.116" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:02:33.116" starttime="20200401 13:02:33.115"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:02:33.116" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:02:33.116" starttime="20200401 13:02:33.116"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:02:33.117" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20200401 13:02:33.117" starttime="20200401 13:02:33.116"></status>
</kw>
<msg timestamp="20200401 13:02:33.117" level="INFO">${newLeaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:02:33.117" starttime="20200401 13:02:20.540"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20200401 13:02:33.118" starttime="20200401 13:02:33.117"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:02:33.119" level="INFO">${writeFileCount} = 5</msg>
<status status="PASS" endtime="20200401 13:02:33.119" starttime="20200401 13:02:33.118"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:02:33.120" level="INFO">${WRITE_FILE_COUNT} = 5</msg>
<status status="PASS" endtime="20200401 13:02:33.120" starttime="20200401 13:02:33.119"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:02:33.121" level="INFO">${fileName} = omha-5.txt</msg>
<status status="PASS" endtime="20200401 13:02:33.121" starttime="20200401 13:02:33.120"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:02:33.121" level="INFO">${testFilePath} = /tmp/omha-5.txt</msg>
<status status="PASS" endtime="20200401 13:02:33.121" starttime="20200401 13:02:33.121"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:02:33.123" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-5.txt"&gt;/tmp/omha-5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:02:33.123" starttime="20200401 13:02:33.121"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:33.125" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-5.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:02:47.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:02:47.678" level="INFO">${output} = 2020-04-01 13:02:36 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLI...</msg>
<status status="PASS" endtime="20200401 13:02:47.678" starttime="20200401 13:02:33.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:02:47.679" level="INFO">2020-04-01 13:02:36 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 0 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:37 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 1 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:38 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 2 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:39 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 3 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:40 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 4 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:41 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 5 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:42 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 6 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:43 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 7 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:44 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 8 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:45 INFO  Client:948 - Retrying connect to server: om1/172.21.0.2:9862. Already tried 9 time(s); retry policy is RetryUpToMaximumCountWithFixedSleep(maxRetries=10, sleepTime=1000 MILLISECONDS)
2020-04-01 13:02:46 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:02:46 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:02:46 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:02:47.679" starttime="20200401 13:02:47.678"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:02:47.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:02:47.680" starttime="20200401 13:02:47.679"></status>
</kw>
<status status="PASS" endtime="20200401 13:02:47.680" starttime="20200401 13:02:33.123"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:02:47.682" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:00.069" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:00.069" level="INFO">${output} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt</msg>
<status status="PASS" endtime="20200401 13:03:00.069" starttime="20200401 13:02:47.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:00.070" level="INFO">omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt</msg>
<status status="PASS" endtime="20200401 13:03:00.071" starttime="20200401 13:03:00.070"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:00.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:00.073" starttime="20200401 13:03:00.071"></status>
</kw>
<msg timestamp="20200401 13:03:00.073" level="INFO">${result} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt</msg>
<status status="PASS" endtime="20200401 13:03:00.073" starttime="20200401 13:02:47.680"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:00.074" starttime="20200401 13:03:00.073"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:03:00.074" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-5.txt"&gt;/tmp/omha-5.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:03:00.074" starttime="20200401 13:03:00.074"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:00.075" starttime="20200401 13:02:33.118"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:00.076" level="INFO">${HOST} = om1</msg>
<status status="PASS" endtime="20200401 13:03:00.076" starttime="20200401 13:03:00.075"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:00.077" starttime="20200401 13:03:00.076"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:00.077" level="INFO">Logging into 'om1:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:01.279" level="INFO">Read output: Last login: Wed Apr  1 13:02:18 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:01.280" starttime="20200401 13:03:00.077"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:01.280" starttime="20200401 13:03:00.076"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:03:01.281" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20200401 13:03:03.417" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:03.417" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:03:03.417" starttime="20200401 13:03:01.280"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:03.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:03.418" starttime="20200401 13:03:03.417"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${startMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:03:03.419" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:03:03.543" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:03.543" level="INFO">${startMsg} = hadoop      620  174  2.0 3650416 148404 ?      Sl   13:03   0:03 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -...</msg>
<msg timestamp="20200401 13:03:03.543" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:03:03.543" starttime="20200401 13:03:03.418"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:03.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:03.544" starttime="20200401 13:03:03.543"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:03.609" starttime="20200401 13:03:03.544"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:03.610" starttime="20200401 13:03:03.610"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:03.610" starttime="20200401 13:03:00.075"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:03.610" starttime="20200401 13:02:14.001"></status>
</kw>
<kw type="foritem" name="${INDEX} = 3">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:03.613" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:08.192" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:08.192" level="INFO">${output} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:08.192" starttime="20200401 13:03:03.612"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:08.193" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:08.193" starttime="20200401 13:03:08.193"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:08.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:08.194" starttime="20200401 13:03:08.194"></status>
</kw>
<msg timestamp="20200401 13:03:08.197" level="INFO">${result} = om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:08.197" starttime="20200401 13:03:03.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:03:08.198" level="INFO">om1 : FOLLOWER
om3 : FOLLOWER
om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:08.198" starttime="20200401 13:03:08.198"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:08.199" starttime="20200401 13:03:08.198"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:08.199" starttime="20200401 13:03:08.199"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:03:08.200" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:03:08.200" level="INFO">${omLine} = om2 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:08.200" starttime="20200401 13:03:08.200"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:03:08.201" level="INFO">${split1} = om2 </msg>
<msg timestamp="20200401 13:03:08.201" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:03:08.201" starttime="20200401 13:03:08.200"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:03:08.201" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:03:08.202" starttime="20200401 13:03:08.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:03:08.202" level="INFO">Leader OM: om2</msg>
<status status="PASS" endtime="20200401 13:03:08.210" starttime="20200401 13:03:08.202"></status>
</kw>
<msg timestamp="20200401 13:03:08.210" level="INFO">${leaderOM} = om2</msg>
<status status="PASS" endtime="20200401 13:03:08.210" starttime="20200401 13:03:03.611"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:08.212" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:03:08.212" starttime="20200401 13:03:08.211"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:08.213" starttime="20200401 13:03:08.212"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:08.213" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:09.420" level="INFO">Read output: Last login: Wed Apr  1 13:02:10 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:09.420" starttime="20200401 13:03:08.213"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:09.420" starttime="20200401 13:03:08.212"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:03:09.421" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:03:10.538" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:10.538" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:03:10.538" starttime="20200401 13:03:09.421"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:10.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:10.539" starttime="20200401 13:03:10.538"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:03:10.540" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:03:10.626" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:10.626" level="INFO">${stopMsg} = hadoop     1405  0.0  0.0   9564  2332 ?        Ss   13:03   0:00 bash -c sudo ps aux | grep om
hadoop     1407  0.0  0.0   9096   812 ?        S    13:03   0:00 grep om</msg>
<msg timestamp="20200401 13:03:10.626" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:03:10.626" starttime="20200401 13:03:10.539"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:10.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:10.627" starttime="20200401 13:03:10.627"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:10.692" starttime="20200401 13:03:10.628"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:10.693" starttime="20200401 13:03:10.692"></status>
</kw>
<msg timestamp="20200401 13:03:10.693" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20200401 13:03:10.693" starttime="20200401 13:03:08.211"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:10.696" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:13.350" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:13.350" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:13.350" starttime="20200401 13:03:10.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:13.351" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:13.351" starttime="20200401 13:03:13.350"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:13.352" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:13.352" starttime="20200401 13:03:13.352"></status>
</kw>
<msg timestamp="20200401 13:03:13.352" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:13.352" starttime="20200401 13:03:10.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:03:13.353" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:13.353" starttime="20200401 13:03:13.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:13.354" starttime="20200401 13:03:13.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:13.354" starttime="20200401 13:03:13.354"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:03:13.355" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:03:13.355" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:13.355" starttime="20200401 13:03:13.355"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:03:13.356" level="INFO">${split1} = om3 </msg>
<msg timestamp="20200401 13:03:13.356" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:03:13.356" starttime="20200401 13:03:13.355"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:03:13.357" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:03:13.357" starttime="20200401 13:03:13.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:03:13.357" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20200401 13:03:13.357" starttime="20200401 13:03:13.357"></status>
</kw>
<msg timestamp="20200401 13:03:13.358" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:03:13.358" starttime="20200401 13:03:10.693"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:13.358" starttime="20200401 13:03:13.358"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:03:13.360" level="INFO">${writeFileCount} = 6</msg>
<status status="PASS" endtime="20200401 13:03:13.360" starttime="20200401 13:03:13.359"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:03:13.361" level="INFO">${WRITE_FILE_COUNT} = 6</msg>
<status status="PASS" endtime="20200401 13:03:13.361" starttime="20200401 13:03:13.360"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:03:13.361" level="INFO">${fileName} = omha-6.txt</msg>
<status status="PASS" endtime="20200401 13:03:13.361" starttime="20200401 13:03:13.361"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:03:13.362" level="INFO">${testFilePath} = /tmp/omha-6.txt</msg>
<status status="PASS" endtime="20200401 13:03:13.362" starttime="20200401 13:03:13.361"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:03:13.363" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-6.txt"&gt;/tmp/omha-6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:03:13.364" starttime="20200401 13:03:13.362"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:13.366" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-6.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:18.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:18.045" level="INFO">${output} = 2020-04-01 13:03:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:03:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020...</msg>
<status status="PASS" endtime="20200401 13:03:18.045" starttime="20200401 13:03:13.365"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:18.046" level="INFO">2020-04-01 13:03:16 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:03:16 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:03:16 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:03:18.046" starttime="20200401 13:03:18.045"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:18.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:18.047" starttime="20200401 13:03:18.047"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:18.047" starttime="20200401 13:03:13.364"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:18.052" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:20.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:20.634" level="INFO">${output} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt
omha-6.txt</msg>
<status status="PASS" endtime="20200401 13:03:20.634" starttime="20200401 13:03:18.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:20.635" level="INFO">omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt
omha-6.txt</msg>
<status status="PASS" endtime="20200401 13:03:20.636" starttime="20200401 13:03:20.635"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:20.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:20.636" starttime="20200401 13:03:20.636"></status>
</kw>
<msg timestamp="20200401 13:03:20.637" level="INFO">${result} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt
omha-6.txt</msg>
<status status="PASS" endtime="20200401 13:03:20.637" starttime="20200401 13:03:18.048"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:20.637" starttime="20200401 13:03:20.637"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:03:20.638" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-6.txt"&gt;/tmp/omha-6.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:03:20.638" starttime="20200401 13:03:20.637"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:20.638" starttime="20200401 13:03:13.358"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:20.640" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:03:20.640" starttime="20200401 13:03:20.639"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:20.641" starttime="20200401 13:03:20.640"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:20.642" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:21.839" level="INFO">Read output: Last login: Wed Apr  1 13:03:08 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:21.840" starttime="20200401 13:03:20.641"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:21.840" starttime="20200401 13:03:20.640"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:03:21.840" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20200401 13:03:23.955" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:23.956" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:03:23.956" starttime="20200401 13:03:21.840"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:23.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:23.957" starttime="20200401 13:03:23.956"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${startMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:03:23.957" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:03:24.074" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:24.074" level="INFO">${startMsg} = hadoop     1457  186  2.2 3653364 159372 ?      Sl   13:03   0:03 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -...</msg>
<msg timestamp="20200401 13:03:24.074" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:03:24.074" starttime="20200401 13:03:23.957"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:24.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:24.075" starttime="20200401 13:03:24.075"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:24.140" starttime="20200401 13:03:24.075"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:24.140" starttime="20200401 13:03:24.140"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:24.141" starttime="20200401 13:03:20.639"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:24.141" starttime="20200401 13:03:03.611"></status>
</kw>
<kw type="foritem" name="${INDEX} = 4">
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:24.144" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:28.327" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:28.327" level="INFO">${output} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:28.328" starttime="20200401 13:03:24.142"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:28.329" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:28.329" starttime="20200401 13:03:28.328"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:28.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:28.330" starttime="20200401 13:03:28.329"></status>
</kw>
<msg timestamp="20200401 13:03:28.330" level="INFO">${result} = om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:28.330" starttime="20200401 13:03:24.141"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:03:28.331" level="INFO">om1 : FOLLOWER
om2 : FOLLOWER
om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:28.331" starttime="20200401 13:03:28.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:28.332" starttime="20200401 13:03:28.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:28.332" starttime="20200401 13:03:28.332"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:03:28.333" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:03:28.333" level="INFO">${omLine} = om3 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:28.333" starttime="20200401 13:03:28.332"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:03:28.334" level="INFO">${split1} = om3 </msg>
<msg timestamp="20200401 13:03:28.334" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:03:28.334" starttime="20200401 13:03:28.333"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:03:28.334" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:03:28.334" starttime="20200401 13:03:28.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:03:28.335" level="INFO">Leader OM: om3</msg>
<status status="PASS" endtime="20200401 13:03:28.335" starttime="20200401 13:03:28.335"></status>
</kw>
<msg timestamp="20200401 13:03:28.335" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" endtime="20200401 13:03:28.335" starttime="20200401 13:03:24.141"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<assign>
<var>${stopOMResult}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:28.337" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20200401 13:03:28.337" starttime="20200401 13:03:28.336"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:28.338" starttime="20200401 13:03:28.337"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:28.338" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:29.551" level="INFO">Read output: Last login: Wed Apr  1 13:01:51 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:29.551" starttime="20200401 13:03:28.338"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:29.552" starttime="20200401 13:03:28.337"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:03:29.552" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:03:30.660" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:30.660" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:03:30.660" starttime="20200401 13:03:29.552"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:30.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:30.662" starttime="20200401 13:03:30.661"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:03:30.662" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:03:30.749" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:30.749" level="INFO">${stopMsg} = hadoop     1090  0.0  0.0   9564  2216 ?        Ss   13:03   0:00 bash -c sudo ps aux | grep om
hadoop     1092  0.0  0.0   9096   840 ?        S    13:03   0:00 grep om</msg>
<msg timestamp="20200401 13:03:30.749" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:03:30.749" starttime="20200401 13:03:30.662"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:30.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:30.750" starttime="20200401 13:03:30.750"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:30.816" starttime="20200401 13:03:30.751"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:30.816" starttime="20200401 13:03:30.816"></status>
</kw>
<msg timestamp="20200401 13:03:30.817" level="INFO">${stopOMResult} = None</msg>
<status status="PASS" endtime="20200401 13:03:30.817" starttime="20200401 13:03:28.336"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${newLeaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:30.820" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:33.446" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:33.446" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:33.446" starttime="20200401 13:03:30.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:33.447" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:33.447" starttime="20200401 13:03:33.446"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:33.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:33.448" starttime="20200401 13:03:33.447"></status>
</kw>
<msg timestamp="20200401 13:03:33.448" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:33.448" starttime="20200401 13:03:30.817"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:03:33.449" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:33.449" starttime="20200401 13:03:33.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:33.449" starttime="20200401 13:03:33.449"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:33.450" starttime="20200401 13:03:33.450"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:03:33.451" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:03:33.451" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:33.451" starttime="20200401 13:03:33.450"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:03:33.452" level="INFO">${split1} = om1 </msg>
<msg timestamp="20200401 13:03:33.452" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:03:33.452" starttime="20200401 13:03:33.451"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:03:33.452" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:03:33.452" starttime="20200401 13:03:33.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:03:33.453" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20200401 13:03:33.453" starttime="20200401 13:03:33.453"></status>
</kw>
<msg timestamp="20200401 13:03:33.453" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:03:33.453" starttime="20200401 13:03:30.817"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<arg>OMs did not failover</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:33.454" starttime="20200401 13:03:33.454"></status>
</kw>
<kw name="Write Test File">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}+1</arg>
</arguments>
<assign>
<var>${writeFileCount}</var>
</assign>
<msg timestamp="20200401 13:03:33.455" level="INFO">${writeFileCount} = 7</msg>
<status status="PASS" endtime="20200401 13:03:33.455" starttime="20200401 13:03:33.455"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${WRITE_FILE_COUNT}</arg>
<arg>${writeFileCount}</arg>
</arguments>
<msg timestamp="20200401 13:03:33.456" level="INFO">${WRITE_FILE_COUNT} = 7</msg>
<status status="PASS" endtime="20200401 13:03:33.456" starttime="20200401 13:03:33.456"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>omha-${WRITE_FILE_COUNT}.txt</arg>
</arguments>
<assign>
<var>${fileName}</var>
</assign>
<msg timestamp="20200401 13:03:33.457" level="INFO">${fileName} = omha-7.txt</msg>
<status status="PASS" endtime="20200401 13:03:33.457" starttime="20200401 13:03:33.456"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${TEMPDIR}/${fileName}</arg>
</arguments>
<assign>
<var>${testFilePath}</var>
</assign>
<msg timestamp="20200401 13:03:33.457" level="INFO">${testFilePath} = /tmp/omha-7.txt</msg>
<status status="PASS" endtime="20200401 13:03:33.458" starttime="20200401 13:03:33.457"></status>
</kw>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${TEST_FILE}</arg>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:03:33.459" html="yes" level="INFO">Copied file from '&lt;a href="file:///opt/hadoop/NOTICE.txt"&gt;/opt/hadoop/NOTICE.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/omha-7.txt"&gt;/tmp/omha-7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:03:33.459" starttime="20200401 13:03:33.458"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone fs -copyFromLocal ${testFilePath} o3fs://${BUCKET}.${VOLUME}.${OM_SERVICE_ID}/</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:33.462" level="INFO">Running command 'ozone fs -copyFromLocal /tmp/omha-7.txt o3fs://bucket1.volume1.omservice/ 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:38.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:38.116" level="INFO">${output} = 2020-04-01 13:03:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:03:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020...</msg>
<status status="PASS" endtime="20200401 13:03:38.116" starttime="20200401 13:03:33.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:38.117" level="INFO">2020-04-01 13:03:36 INFO  MetricsConfig:118 - Loaded properties from hadoop-metrics2.properties
2020-04-01 13:03:36 INFO  MetricsSystemImpl:374 - Scheduled Metric snapshot period at 10 second(s).
2020-04-01 13:03:36 INFO  MetricsSystemImpl:191 - XceiverClientMetrics metrics system started</msg>
<status status="PASS" endtime="20200401 13:03:38.117" starttime="20200401 13:03:38.117"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:38.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:38.118" starttime="20200401 13:03:38.117"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:38.118" starttime="20200401 13:03:33.459"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key list o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} | jq -r '.name'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:38.121" level="INFO">Running command 'ozone sh key list o3://omservice/volume1/bucket1 | jq -r '.name' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:40.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:40.517" level="INFO">${output} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt
omha-6.txt
omha-7.txt</msg>
<status status="PASS" endtime="20200401 13:03:40.517" starttime="20200401 13:03:38.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:40.519" level="INFO">omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt
omha-6.txt
omha-7.txt</msg>
<status status="PASS" endtime="20200401 13:03:40.519" starttime="20200401 13:03:40.517"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:40.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:40.522" starttime="20200401 13:03:40.520"></status>
</kw>
<msg timestamp="20200401 13:03:40.522" level="INFO">${result} = omha-1.txt
omha-2.txt
omha-3.txt
omha-4.txt
omha-5.txt
omha-6.txt
omha-7.txt</msg>
<status status="PASS" endtime="20200401 13:03:40.522" starttime="20200401 13:03:38.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>${fileName}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:40.523" starttime="20200401 13:03:40.522"></status>
</kw>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${testFilePath}</arg>
</arguments>
<msg timestamp="20200401 13:03:40.524" html="yes" level="INFO">Removed file '&lt;a href="file:///tmp/omha-7.txt"&gt;/tmp/omha-7.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20200401 13:03:40.524" starttime="20200401 13:03:40.523"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:40.524" starttime="20200401 13:03:33.454"></status>
</kw>
<kw name="Start OM">
<arguments>
<arg>${leaderOM}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:40.525" level="INFO">${HOST} = om3</msg>
<status status="PASS" endtime="20200401 13:03:40.525" starttime="20200401 13:03:40.525"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:40.526" starttime="20200401 13:03:40.526"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:40.527" level="INFO">Logging into 'om3:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:41.726" level="INFO">Read output: Last login: Wed Apr  1 13:03:28 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:41.726" starttime="20200401 13:03:40.527"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:41.726" starttime="20200401 13:03:40.525"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/startOM.sh --restart</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:03:41.727" level="INFO">Executing command '/opt/startOM.sh --restart'.</msg>
<msg timestamp="20200401 13:03:43.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:43.899" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:03:43.899" starttime="20200401 13:03:41.727"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:43.900" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:43.900" starttime="20200401 13:03:43.900"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${startMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:03:43.901" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:03:44.027" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:44.028" level="INFO">${startMsg} = hadoop     1141  173  2.1 3647024 150588 ?      Sl   13:03   0:03 /usr/lib/jvm/jre/bin/java -Dproc_om -Djava.net.preferIPv4Stack=true -Dlog4j.configurationFile=/etc/hadoop/om-audit-log4j2.properties -...</msg>
<msg timestamp="20200401 13:03:44.028" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:03:44.028" starttime="20200401 13:03:43.901"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:44.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:44.029" starttime="20200401 13:03:44.028"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:44.061" starttime="20200401 13:03:44.029"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${startMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:44.062" starttime="20200401 13:03:44.062"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:44.062" starttime="20200401 13:03:40.524"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:44.062" starttime="20200401 13:03:24.141"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:44.062" starttime="20200401 13:01:34.753"></status>
</kw>
<timeout value="8 minutes"></timeout>
<status status="PASS" endtime="20200401 13:03:44.063" critical="yes" starttime="20200401 13:01:34.753"></status>
</test>
<test id="s1-t3" name="Restart OM and Verify Ratis Logs">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${OM_HOST}</arg>
<arg>om2</arg>
</arguments>
<msg timestamp="20200401 13:03:44.066" level="INFO">${OM_HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:03:44.066" starttime="20200401 13:03:44.064"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyBase}</arg>
<arg>testOMRestart_</arg>
</arguments>
<msg timestamp="20200401 13:03:44.068" level="INFO">${keyBase} = testOMRestart_</msg>
<status status="PASS" endtime="20200401 13:03:44.068" starttime="20200401 13:03:44.066"></status>
</kw>
<kw name="Stop OM">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:44.069" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:03:44.069" starttime="20200401 13:03:44.068"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:44.070" starttime="20200401 13:03:44.069"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:44.074" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:45.275" level="INFO">Read output: Last login: Wed Apr  1 13:03:20 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:45.275" starttime="20200401 13:03:44.073"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:45.276" starttime="20200401 13:03:44.069"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>/opt/stopOM.sh</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc1}</var>
</assign>
<msg timestamp="20200401 13:03:45.276" level="INFO">Executing command '/opt/stopOM.sh'.</msg>
<msg timestamp="20200401 13:03:46.408" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:46.408" level="INFO">${rc1} = 0</msg>
<status status="PASS" endtime="20200401 13:03:46.408" starttime="20200401 13:03:45.276"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc1}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:46.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:46.409" starttime="20200401 13:03:46.409"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo ps aux | grep om</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${stopMsg}</var>
<var>${rc2}</var>
</assign>
<msg timestamp="20200401 13:03:46.410" level="INFO">Executing command 'sudo ps aux | grep om'.</msg>
<msg timestamp="20200401 13:03:46.467" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:46.467" level="INFO">${stopMsg} = hadoop     1933  0.0  0.0   9564  2348 ?        Ss   13:03   0:00 bash -c sudo ps aux | grep om
hadoop     1935  0.0  0.0   9096   924 ?        S    13:03   0:00 grep om</msg>
<msg timestamp="20200401 13:03:46.467" level="INFO">${rc2} = 0</msg>
<status status="PASS" endtime="20200401 13:03:46.467" starttime="20200401 13:03:46.410"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc2}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:46.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:46.468" starttime="20200401 13:03:46.468"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:46.533" starttime="20200401 13:03:46.468"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${stopMsg}</arg>
<arg>OzoneManagerStarter</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:46.534" starttime="20200401 13:03:46.533"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:46.534" starttime="20200401 13:03:44.068"></status>
</kw>
<kw name="Get Ratis Logs">
<arguments>
<arg>${OM_HOST}</arg>
</arguments>
<assign>
<var>${numLogsBefore}</var>
<var>@{logsBefore}</var>
</assign>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>${OM_HOST}</arg>
</arguments>
<msg timestamp="20200401 13:03:46.535" level="INFO">${HOST} = om2</msg>
<status status="PASS" endtime="20200401 13:03:46.535" starttime="20200401 13:03:46.534"></status>
</kw>
<kw name="Open Connection And Log In">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:46.536" starttime="20200401 13:03:46.536"></status>
</kw>
<kw name="Login With Public Key" library="SSHLibrary">
<doc>Logs into the SSH server using key-based authentication.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PUBLIC_KEY}</arg>
</arguments>
<msg timestamp="20200401 13:03:46.537" level="INFO">Logging into 'om2:22' as 'hadoop'.</msg>
<msg timestamp="20200401 13:03:47.742" level="INFO">Read output: Last login: Wed Apr  1 13:03:44 2020 from ozone-om-ha_scm_1.ozone-om-ha_default
-bash-4.2$</msg>
<status status="PASS" endtime="20200401 13:03:47.742" starttime="20200401 13:03:46.536"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:47.742" starttime="20200401 13:03:46.535"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${RATIS_DIR} | grep -v 'snapshot'</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${groupId}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20200401 13:03:47.743" level="INFO">Executing command 'ls /data/metadata/ratis | grep -v 'snapshot''.</msg>
<msg timestamp="20200401 13:03:47.757" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20200401 13:03:47.757" level="INFO">${groupId} = 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<msg timestamp="20200401 13:03:47.757" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20200401 13:03:47.757" starttime="20200401 13:03:47.743"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:47.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:47.758" starttime="20200401 13:03:47.757"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Ratis GroupId: ${groupId}</arg>
</arguments>
<msg timestamp="20200401 13:03:47.758" level="INFO">Ratis GroupId: 5cb24680-b9e7-3c90-a862-d66704efc61c</msg>
<status status="PASS" endtime="20200401 13:03:47.759" starttime="20200401 13:03:47.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${RATIS_DIR}</arg>
<arg>/</arg>
<arg>${groupId}</arg>
<arg>/current/</arg>
</arguments>
<assign>
<var>${currDir}</var>
</assign>
<msg timestamp="20200401 13:03:47.759" level="INFO">${currDir} = /data/metadata/ratis/5cb24680-b9e7-3c90-a862-d66704efc61c/current/</msg>
<status status="PASS" endtime="20200401 13:03:47.759" starttime="20200401 13:03:47.759"></status>
</kw>
<kw name="List Files In Directory" library="SSHLibrary">
<doc>A wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${currDir}</arg>
<arg>log_*</arg>
</arguments>
<assign>
<var>@{logs}</var>
</assign>
<msg timestamp="20200401 13:03:47.831" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20200401 13:03:47.839" level="INFO">7 files:
log_0-10
log_11-18
log_19-26
log_27-34
log_35-42
log_43-50
log_inprogress_51</msg>
<msg timestamp="20200401 13:03:47.840" level="INFO">@{logs} = [ log_0-10 | log_11-18 | log_19-26 | log_27-34 | log_35-42 | log_43-50 | log_inprogress_51 ]</msg>
<status status="PASS" endtime="20200401 13:03:47.840" starttime="20200401 13:03:47.759"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20200401 13:03:47.905" starttime="20200401 13:03:47.840"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${logs}</arg>
</arguments>
<assign>
<var>${numLogs}</var>
</assign>
<msg timestamp="20200401 13:03:47.905" level="INFO">Length is 7</msg>
<msg timestamp="20200401 13:03:47.906" level="INFO">${numLogs} = 7</msg>
<status status="PASS" endtime="20200401 13:03:47.906" starttime="20200401 13:03:47.905"></status>
</kw>
<msg timestamp="20200401 13:03:47.906" level="INFO">${numLogsBefore} = 7</msg>
<msg timestamp="20200401 13:03:47.906" level="INFO">@{logsBefore} = [ [u'log_0-10', u'log_11-18', u'log_19-26', u'log_27-34', u'log_35-42', u'log_43-50', u'log_inprogress_51'] ]</msg>
<status status="PASS" endtime="20200401 13:03:47.906" starttime="20200401 13:03:46.534"></status>
</kw>
<kw name="Get OM Leader Node">
<assign>
<var>${leaderOM}</var>
</assign>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone admin om getserviceroles --service-id=omservice</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:47.910" level="INFO">Running command 'ozone admin om getserviceroles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:50.003" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:50.003" level="INFO">${output} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:50.003" starttime="20200401 13:03:47.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:50.006" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:50.006" starttime="20200401 13:03:50.006"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:50.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:50.007" starttime="20200401 13:03:50.007"></status>
</kw>
<msg timestamp="20200401 13:03:50.008" level="INFO">${result} = om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:50.008" starttime="20200401 13:03:47.907"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200401 13:03:50.009" level="INFO">om2 : FOLLOWER
om3 : FOLLOWER
om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:50.009" starttime="20200401 13:03:50.008"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:50.010" starttime="20200401 13:03:50.009"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:50.010" starttime="20200401 13:03:50.010"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${result}</arg>
<arg>LEADER</arg>
</arguments>
<assign>
<var>${omLine}</var>
</assign>
<msg timestamp="20200401 13:03:50.011" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20200401 13:03:50.011" level="INFO">${omLine} = om1 : LEADER</msg>
<status status="PASS" endtime="20200401 13:03:50.011" starttime="20200401 13:03:50.010"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${omLine}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${split1}</var>
<var>${split2}</var>
</assign>
<msg timestamp="20200401 13:03:50.012" level="INFO">${split1} = om1 </msg>
<msg timestamp="20200401 13:03:50.012" level="INFO">${split2} =  LEADER</msg>
<status status="PASS" endtime="20200401 13:03:50.012" starttime="20200401 13:03:50.011"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${split1}</arg>
</arguments>
<assign>
<var>${leaderOM}</var>
</assign>
<msg timestamp="20200401 13:03:50.012" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:03:50.012" starttime="20200401 13:03:50.012"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Leader OM: ${leaderOM}</arg>
</arguments>
<msg timestamp="20200401 13:03:50.013" level="INFO">Leader OM: om1</msg>
<status status="PASS" endtime="20200401 13:03:50.013" starttime="20200401 13:03:50.013"></status>
</kw>
<msg timestamp="20200401 13:03:50.013" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" endtime="20200401 13:03:50.013" starttime="20200401 13:03:47.907"></status>
</kw>
<kw type="for" name="${INDEX} IN RANGE [ 20 ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${keyPrefix}</arg>
<arg>${keyBase}${INDEX}</arg>
</arguments>
<msg timestamp="20200401 13:03:50.015" level="INFO">${keyPrefix} = testOMRestart_0</msg>
<status status="PASS" endtime="20200401 13:03:50.016" starttime="20200401 13:03:50.014"></status>
</kw>
<kw name="Put Multiple Keys">
<arguments>
<arg>5</arg>
<arg>${keyPrefix}</arg>
<arg>${TEST_FILE}</arg>
</arguments>
<kw type="for" name="${INDEX} IN RANGE [ ${NUM_KEYS} ]">
<kw type="foritem" name="${INDEX} = 0">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20200401 13:03:50.017" level="INFO">${tmpKey} = testOMRestart_0_0</msg>
<status status="PASS" endtime="20200401 13:03:50.018" starttime="20200401 13:03:50.017"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20200401 13:03:50.018" level="INFO">testOMRestart_0_0</msg>
<status status="PASS" endtime="20200401 13:03:50.018" starttime="20200401 13:03:50.018"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:50.021" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_0 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:54.413" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:54.413" level="INFO">${output} = </msg>
<status status="PASS" endtime="20200401 13:03:54.413" starttime="20200401 13:03:50.019"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:54.414" level="INFO"></msg>
<status status="PASS" endtime="20200401 13:03:54.414" starttime="20200401 13:03:54.414"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:54.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:54.415" starttime="20200401 13:03:54.415"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:54.415" starttime="20200401 13:03:50.019"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} | jq -r '. | select(.name=="${KEY}")'</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:54.418" level="INFO">Running command 'ozone sh key info o3://omservice/volume1/bucket1/testOMRestart_0_0 | jq -r '. | select(.name=="testOMRestart_0_0")' 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:03:56.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20200401 13:03:56.678" level="INFO">${output} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": "2020-04-01T13:03:52.214Z",
  "modificationTime": "2020-04-01T13:03:54.010...</msg>
<status status="PASS" endtime="20200401 13:03:56.678" starttime="20200401 13:03:54.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200401 13:03:56.679" level="INFO">{
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": "2020-04-01T13:03:52.214Z",
  "modificationTime": "2020-04-01T13:03:54.010Z",
  "replicationType": "RATIS",
  "replicationFactor": 1,
  "ozoneKeyLocations": [
    {
      "containerID": 8,
      "localID": 103923465074376700,
      "length": 17540,
      "offset": 0
    }
  ],
  "metadata": {},
  "fileEncryptionInfo": null
}</msg>
<status status="PASS" endtime="20200401 13:03:56.679" starttime="20200401 13:03:56.678"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200401 13:03:56.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20200401 13:03:56.680" starttime="20200401 13:03:56.679"></status>
</kw>
<msg timestamp="20200401 13:03:56.680" level="INFO">${result} = {
  "volumeName": "volume1",
  "bucketName": "bucket1",
  "name": "testOMRestart_0_0",
  "dataSize": 17540,
  "creationTime": "2020-04-01T13:03:52.214Z",
  "modificationTime": "2020-04-01T13:03:54.010...</msg>
<status status="PASS" endtime="20200401 13:03:56.680" starttime="20200401 13:03:54.416"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>creationTime</arg>
</arguments>
<status status="PASS" endtime="20200401 13:03:56.681" starttime="20200401 13:03:56.681"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:56.681" starttime="20200401 13:03:50.018"></status>
</kw>
<status status="PASS" endtime="20200401 13:03:56.681" starttime="20200401 13:03:50.017"></status>
</kw>
<kw type="foritem" name="${INDEX} = 1">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${KEY_PREFIX}</arg>
<arg>_</arg>
<arg>${INDEX}</arg>
</arguments>
<assign>
<var>${tmpKey}</var>
</assign>
<msg timestamp="20200401 13:03:56.682" level="INFO">${tmpKey} = testOMRestart_0_1</msg>
<status status="PASS" endtime="20200401 13:03:56.682" starttime="20200401 13:03:56.681"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${tmpKey}</arg>
</arguments>
<msg timestamp="20200401 13:03:56.682" level="INFO">testOMRestart_0_1</msg>
<status status="PASS" endtime="20200401 13:03:56.683" starttime="20200401 13:03:56.682"></status>
</kw>
<kw name="Put Key">
<arguments>
<arg>${FILE}</arg>
<arg>${tmpKey}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${KEY} ${FILE}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200401 13:03:56.686" level="INFO">Running command 'ozone sh key put o3://omservice/volume1/bucket1/testOMRestart_0_1 NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20200401 13:11:44.065" level="FAIL">Test timeout 8 minutes exceeded.</msg>
<status status="FAIL" endtime="20200401 13:11:44.066" starttime="20200401 13:03:56.684"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.410" starttime="20200401 13:03:56.683"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.410" starttime="20200401 13:03:56.683"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.410" starttime="20200401 13:03:56.681"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.410" starttime="20200401 13:03:50.016"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.411" starttime="20200401 13:03:50.016"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.411" starttime="20200401 13:03:50.014"></status>
</kw>
<status status="FAIL" endtime="20200401 14:07:01.411" starttime="20200401 13:03:50.013"></status>
</kw>
<timeout value="8 minutes"></timeout>
<status status="FAIL" endtime="20200401 14:07:01.411" critical="yes" starttime="20200401 13:03:44.063">Test timeout 8 minutes exceeded.</status>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="FAIL" endtime="20200401 14:07:01.413" starttime="20200401 13:00:55.521"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="ozone-om-ha-testOMHA" pass="2">ozone-om-ha-testOMHA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
