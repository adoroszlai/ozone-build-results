<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.6.8 on linux)" generated="20200716 13:58:31.910" rpa="false">
<suite id="s1" name="ozonesecure-recon" source="/opt/hadoop/smoketest/recon">
<suite id="s1-s1" name="Recon-Api" source="/opt/hadoop/smoketest/recon/recon-api.robot">
<test id="s1-s1-t1" name="Generate Freon data">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<kw name="Kinit test user" library="commonlib">
<arguments>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>hostname</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:31.974" level="INFO">Running command 'hostname 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:31.976" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:31.976" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20200716 13:58:31.969" endtime="20200716 13:58:31.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:31.977" level="INFO">scm</msg>
<status status="PASS" starttime="20200716 13:58:31.976" endtime="20200716 13:58:31.977"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:31.977" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:31.977" endtime="20200716 13:58:31.978"></status>
</kw>
<msg timestamp="20200716 13:58:31.978" level="INFO">${hostname} = scm</msg>
<status status="PASS" starttime="20200716 13:58:31.969" endtime="20200716 13:58:31.978"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_USER}</arg>
<arg>${user}/${hostname}@EXAMPLE.COM</arg>
</arguments>
<msg timestamp="20200716 13:58:31.979" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20200716 13:58:31.978" endtime="20200716 13:58:31.979"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k ${user}/${hostname}@EXAMPLE.COM -t /etc/security/keytabs/${keytab}</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>kinit -k ${user}/${hostname}@EXAMPLE.COM -t /etc/security/keytabs/${keytab}</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:31.984" level="INFO">Running command 'kinit -k testuser/scm@EXAMPLE.COM -t /etc/security/keytabs/testuser.keytab 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:31.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:31.995" level="INFO">${output} = </msg>
<status status="PASS" starttime="20200716 13:58:31.980" endtime="20200716 13:58:31.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:31.996" level="INFO"></msg>
<status status="PASS" starttime="20200716 13:58:31.995" endtime="20200716 13:58:31.996"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:31.997" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:31.996" endtime="20200716 13:58:31.997"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:31.980" endtime="20200716 13:58:31.998"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:31.979" endtime="20200716 13:58:31.998"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:31.969" endtime="20200716 13:58:31.998"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:31.968" endtime="20200716 13:58:31.998"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>ozone freon rk --replicationType=RATIS --numOfVolumes 1 --numOfBuckets 1 --numOfKeys 10 --keySize 1025</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:32.002" level="INFO">Running command 'ozone freon rk --replicationType=RATIS --numOfVolumes 1 --numOfBuckets 1 --numOfKeys 10 --keySize 1025 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:40.932" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:40.932" level="INFO">${output} = 2020-07-16 13:58:33,522 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-07-16 13:58:33,789 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20200716 13:58:31.999" endtime="20200716 13:58:40.932"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:40.933" level="INFO">2020-07-16 13:58:33,522 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2020-07-16 13:58:33,789 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2020-07-16 13:58:33,789 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.hadoop.security.authentication.util.KerberosUtil (file:/opt/hadoop/share/ozone/lib/hadoop-auth-3.2.1.jar) to method sun.security.krb5.Config.getInstance()
WARNING: Please consider reporting this to the maintainers of org.apache.hadoop.security.authentication.util.KerberosUtil
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
2020-07-16 13:58:35,392 [main] INFO freon.RandomKeyGenerator: Number of Threads: 10
2020-07-16 13:58:35,393 [main] INFO freon.RandomKeyGenerator: Number of Volumes: 1.
2020-07-16 13:58:35,393 [main] INFO freon.RandomKeyGenerator: Number of Buckets per Volume: 1.
2020-07-16 13:58:35,393 [main] INFO freon.RandomKeyGenerator: Number of Keys per Bucket: 10.
2020-07-16 13:58:35,393 [main] INFO freon.RandomKeyGenerator: Key size: 1025 bytes
2020-07-16 13:58:35,393 [main] INFO freon.RandomKeyGenerator: Buffer size: 4096 bytes
2020-07-16 13:58:35,393 [main] INFO freon.RandomKeyGenerator: validateWrites : false
2020-07-16 13:58:35,421 [main] INFO freon.RandomKeyGenerator: Starting progress bar Thread.
2020-07-16 13:58:35,433 [Thread-7] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 10)
2020-07-16 13:58:35,482 [pool-2-thread-1] INFO rpc.RpcClient: Creating Volume: vol-0-57565, with testuser/scm@EXAMPLE.COM as owner.
2020-07-16 13:58:35,521 [pool-2-thread-3] INFO rpc.RpcClient: Creating Bucket: vol-0-57565/bucket-0-57799, with Versioning false and Storage Type set to DISK and Encryption set to false 
2020-07-16 13:58:36,033 [pool-2-thread-8] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2020-07-16 13:58:36,434 [Thread-7] INFO freon.ProgressBar: Progress: 100.00 % (10 out of 10)

***************************************************
Status: Success
Git Base Revision: b3cbbb467e22ea829b3808f4b7b01d07e0bf3842
Number of Volumes created: 1
Number of Buckets created: 1
Number of Keys added: 10
Ratis replication factor: ONE
Ratis replication type: RATIS
Average Time spent in volume creation: 00:00:00,008
Average Time spent in bucket creation: 00:00:00,001
Average Time spent in key creation: 00:00:00,143
Average Time spent in key write: 00:00:00,473
Total bytes written: 10250
Total Execution time: 00:00:06,576
***************************************************</msg>
<status status="PASS" starttime="20200716 13:58:40.932" endtime="20200716 13:58:40.933"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:40.934" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:40.933" endtime="20200716 13:58:40.934"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:31.998" endtime="20200716 13:58:40.934"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" starttime="20200716 13:58:31.967" endtime="20200716 13:58:40.935" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Check if Recon picks up OM data">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Check if Recon picks up container from OM</arg>
</arguments>
<kw name="Check if Recon picks up container from OM">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<kw name="Kinit HTTP user" library="commonlib">
<kw name="Execute" library="commonlib">
<arguments>
<arg>hostname</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:40.940" level="INFO">Running command 'hostname 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:40.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:40.943" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20200716 13:58:40.938" endtime="20200716 13:58:40.943"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:40.944" level="INFO">scm</msg>
<status status="PASS" starttime="20200716 13:58:40.943" endtime="20200716 13:58:40.944"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:40.944" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:40.944" endtime="20200716 13:58:40.945"></status>
</kw>
<msg timestamp="20200716 13:58:40.945" level="INFO">${hostname} = scm</msg>
<status status="PASS" starttime="20200716 13:58:40.938" endtime="20200716 13:58:40.945"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k HTTP/${hostname}@EXAMPLE.COM -t /etc/security/keytabs/HTTP.keytab</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>kinit -k HTTP/${hostname}@EXAMPLE.COM -t /etc/security/keytabs/HTTP.keytab</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:40.948" level="INFO">Running command 'kinit -k HTTP/scm@EXAMPLE.COM -t /etc/security/keytabs/HTTP.keytab 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:40.970" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:40.970" level="INFO">${output} = </msg>
<status status="PASS" starttime="20200716 13:58:40.946" endtime="20200716 13:58:40.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:40.972" level="INFO"></msg>
<status status="PASS" starttime="20200716 13:58:40.971" endtime="20200716 13:58:40.972"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:40.972" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:40.972" endtime="20200716 13:58:40.973"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:40.946" endtime="20200716 13:58:40.973"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:40.945" endtime="20200716 13:58:40.973"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:40.937" endtime="20200716 13:58:40.973"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:40.937" endtime="20200716 13:58:40.973"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/containers</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:40.977" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.190" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.190" level="INFO">${output} = {"data":{"totalCount":4,"containers":[{"ContainerID":1,"NumberOfKeys":149},{"ContainerID":2,"NumberOfKeys":6},{"ContainerID":3,"NumberOfKeys":3},{"ContainerID":4,"NumberOfKeys":1}]}}</msg>
<status status="PASS" starttime="20200716 13:58:40.974" endtime="20200716 13:58:41.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.192" level="INFO">{"data":{"totalCount":4,"containers":[{"ContainerID":1,"NumberOfKeys":149},{"ContainerID":2,"NumberOfKeys":6},{"ContainerID":3,"NumberOfKeys":3},{"ContainerID":4,"NumberOfKeys":1}]}}</msg>
<status status="PASS" starttime="20200716 13:58:41.191" endtime="20200716 13:58:41.192"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.192" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.192" endtime="20200716 13:58:41.192"></status>
</kw>
<msg timestamp="20200716 13:58:41.193" level="INFO">${result} = {"data":{"totalCount":4,"containers":[{"ContainerID":1,"NumberOfKeys":149},{"ContainerID":2,"NumberOfKeys":6},{"ContainerID":3,"NumberOfKeys":3},{"ContainerID":4,"NumberOfKeys":1}]}}</msg>
<status status="PASS" starttime="20200716 13:58:40.973" endtime="20200716 13:58:41.193"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>\"ContainerID\":1</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.193" endtime="20200716 13:58:41.193"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/utilization/fileCount</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.198" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/utilization/fileCount 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.240" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.240" level="INFO">${output} = [{"volume":"vol-4-48131","bucket":"bucket-4-01906","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-0-12066","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-3-...</msg>
<status status="PASS" starttime="20200716 13:58:41.194" endtime="20200716 13:58:41.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.241" level="INFO">[{"volume":"vol-4-48131","bucket":"bucket-4-01906","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-0-12066","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-3-79676","fileSize":16384,"count":5},{"volume":"vol-1-64247","bucket":"bucket-3-53832","fileSize":16384,"count":5},{"volume":"vol-3-16033","bucket":"bucket-1-86600","fileSize":16384,"count":5},{"volume":"vol-2-56392","bucket":"bucket-3-97574","fileSize":16384,"count":5},{"volume":"vol-2-56392","bucket":"bucket-4-29841","fileSize":16384,"count":5},{"volume":"vol-2-56392","bucket":"bucket-0-90130","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-1-49458","fileSize":16384,"count":5},{"volume":"vol-3-16033","bucket":"bucket-0-55233","fileSize":16384,"count":5},{"volume":"vol-2-56392","bucket":"bucket-2-38504","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-4-87742","fileSize":16384,"count":5},{"volume":"vol-4-48131","bucket":"bucket-2-46619","fileSize":16384,"count":5},{"volume":"vol-1-64247","bucket":"bucket-1-52480","fileSize":16384,"count":5},{"volume":"vol-1-64247","bucket":"bucket-2-47339","fileSize":16384,"count":5},{"volume":"vol-4-48131","bucket":"bucket-0-66247","fileSize":16384,"count":5},{"volume":"vol-4-48131","bucket":"bucket-3-77345","fileSize":16384,"count":5},{"volume":"vol-3-16033","bucket":"bucket-3-43259","fileSize":16384,"count":5},{"volume":"vol-3-16033","bucket":"bucket-2-01068","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-2-72373","fileSize":16384,"count":5},{"volume":"vol-1-64247","bucket":"bucket-4-16300","fileSize":16384,"count":5},{"volume":"vol-2-56392","bucket":"bucket-1-28010","fileSize":16384,"count":5},{"volume":"vol-1-64247","bucket":"bucket-0-54233","fileSize":16384,"count":5},{"volume":"vol-3-16033","bucket":"bucket-4-47275","fileSize":16384,"count":5},{"volume":"vol-4-48131","bucket":"bucket-1-08982","fileSize":16384,"count":5},{"volume":"54816-rpcwoport","bucket":"bb1","fileSize":32768,"count":0},{"volume":"54816-rpcwoport2","bucket":"bb1","fileSize":32768,"count":1},{"volume":"54816-rpcwport","bucket":"bb1","fileSize":32768,"count":0},{"volume":"54816-rpcwoscheme","bucket":"bb1","fileSize":32768,"count":0},{"volume":"fstest322","bucket":"bk1","fileSize":32768,"count":1},{"volume":"s3v","bucket":"bucket-test123","fileSize":32768,"count":3},{"volume":"fstest1","bucket":"bucket1-ofs","fileSize":1024,"count":4},{"volume":"fstest1","bucket":"bucket1-ofs","fileSize":32768,"count":3},{"volume":"fstest1","bucket":"bucket1-o3fs","fileSize":32768,"count":3},{"volume":"fstest1","bucket":"bucket1-o3fs","fileSize":1024,"count":4},{"volume":"s3v","bucket":"bucket-97092","fileSize":1024,"count":2},{"volume":"s3v","bucket":"bucket-96807","fileSize":8388608,"count":4},{"volume":"s3v","bucket":"bucket-96807","fileSize":16777216,"count":2},{"volume":"s3v","bucket":"bucket-46897","fileSize":1024,"count":1},{"volume":"s3v","bucket":"destbucket-56480","fileSize":1024,"count":1},{"volume":"vol-0-57565","bucket":"bucket-0-57799","fileSize":2048,"count":10},{"volume":"s3v","bucket":"bucket-52135","fileSize":1024,"count":2},{"volume":"s3v","bucket":"bucket-29644","fileSize":1024,"count":1}]</msg>
<status status="PASS" starttime="20200716 13:58:41.240" endtime="20200716 13:58:41.241"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.242" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.241" endtime="20200716 13:58:41.242"></status>
</kw>
<msg timestamp="20200716 13:58:41.242" level="INFO">${result} = [{"volume":"vol-4-48131","bucket":"bucket-4-01906","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-0-12066","fileSize":16384,"count":5},{"volume":"vol-0-43397","bucket":"bucket-3-...</msg>
<status status="PASS" starttime="20200716 13:58:41.193" endtime="20200716 13:58:41.242"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>\"fileSize\":2048,\"count\":10</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.243" endtime="20200716 13:58:41.243"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:40.937" endtime="20200716 13:58:41.243"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:40.936" endtime="20200716 13:58:41.244"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" starttime="20200716 13:58:40.935" endtime="20200716 13:58:41.244" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Check if Recon picks up DN heartbeats">
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/datanodes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.250" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/datanodes 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.286" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.286" level="INFO">${output} = {"totalCount":3,"datanodes":[{"uuid":"bade3e12-c16c-4f63-9143-7eb2fede033e","hostname":"ozonesecure_datanode_3.ozonesecure_default","state":"HEALTHY","lastHeartbeat":1594907917175,"storageReport":{"ca...</msg>
<status status="PASS" starttime="20200716 13:58:41.246" endtime="20200716 13:58:41.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.287" level="INFO">{"totalCount":3,"datanodes":[{"uuid":"bade3e12-c16c-4f63-9143-7eb2fede033e","hostname":"ozonesecure_datanode_3.ozonesecure_default","state":"HEALTHY","lastHeartbeat":1594907917175,"storageReport":{"capacity":89311358976,"used":8192,"remaining":25265197056},"pipelines":[{"pipelineID":"9adb8d16-a543-44c3-a43d-d453d408bd89","replicationType":"RATIS","replicationFactor":3,"leaderNode":"ozonesecure_datanode_2.ozonesecure_default"},{"pipelineID":"1f1b97d3-c57d-4549-9b34-3e5dc8d83502","replicationType":"RATIS","replicationFactor":1,"leaderNode":"ozonesecure_datanode_3.ozonesecure_default"}],"containers":2,"leaderCount":1,"version":"0.6.0-SNAPSHOT","setupTime":1594906553142},{"uuid":"80d6d3dc-f383-4d2f-98cc-5a7e2e6e924e","hostname":"ozonesecure_datanode_2.ozonesecure_default","state":"HEALTHY","lastHeartbeat":1594907917100,"storageReport":{"capacity":89311358976,"used":8192,"remaining":25265197056},"pipelines":[{"pipelineID":"9adb8d16-a543-44c3-a43d-d453d408bd89","replicationType":"RATIS","replicationFactor":3,"leaderNode":"ozonesecure_datanode_2.ozonesecure_default"},{"pipelineID":"1b59d53c-dc87-4c8f-8aca-06a055eab975","replicationType":"RATIS","replicationFactor":1,"leaderNode":"ozonesecure_datanode_2.ozonesecure_default"}],"containers":2,"leaderCount":2,"version":"0.6.0-SNAPSHOT","setupTime":1594906549892},{"uuid":"3566c06b-6e4b-498e-8eeb-f3c9686b03d9","hostname":"ozonesecure_datanode_1.ozonesecure_default","state":"HEALTHY","lastHeartbeat":1594907917070,"storageReport":{"capacity":89311358976,"used":8192,"remaining":25265197056},"pipelines":[{"pipelineID":"9adb8d16-a543-44c3-a43d-d453d408bd89","replicationType":"RATIS","replicationFactor":3,"leaderNode":"ozonesecure_datanode_2.ozonesecure_default"},{"pipelineID":"f7021d1a-d861-4e2a-b664-f8fa280fe3f9","replicationType":"RATIS","replicationFactor":1,"leaderNode":"ozonesecure_datanode_1.ozonesecure_default"}],"containers":2,"leaderCount":1,"version":"0.6.0-SNAPSHOT","setupTime":1594906555283}]}</msg>
<status status="PASS" starttime="20200716 13:58:41.286" endtime="20200716 13:58:41.287"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.288" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.287" endtime="20200716 13:58:41.288"></status>
</kw>
<msg timestamp="20200716 13:58:41.288" level="INFO">${result} = {"totalCount":3,"datanodes":[{"uuid":"bade3e12-c16c-4f63-9143-7eb2fede033e","hostname":"ozonesecure_datanode_3.ozonesecure_default","state":"HEALTHY","lastHeartbeat":1594907917175,"storageReport":{"ca...</msg>
<status status="PASS" starttime="20200716 13:58:41.246" endtime="20200716 13:58:41.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanodes</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.288" endtime="20200716 13:58:41.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanode_1</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.289" endtime="20200716 13:58:41.289"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanode_2</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.290" endtime="20200716 13:58:41.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanode_3</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.290" endtime="20200716 13:58:41.291"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/pipelines</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.294" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/pipelines 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.328" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.328" level="INFO">${output} = {"totalCount":4,"pipelines":[{"pipelineId":"9adb8d16-a543-44c3-a43d-d453d408bd89","status":"OPEN","leaderNode":"ozonesecure_datanode_2.ozonesecure_default","datanodes":["ozonesecure_datanode_3.ozonese...</msg>
<status status="PASS" starttime="20200716 13:58:41.291" endtime="20200716 13:58:41.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.329" level="INFO">{"totalCount":4,"pipelines":[{"pipelineId":"9adb8d16-a543-44c3-a43d-d453d408bd89","status":"OPEN","leaderNode":"ozonesecure_datanode_2.ozonesecure_default","datanodes":["ozonesecure_datanode_3.ozonesecure_default","ozonesecure_datanode_2.ozonesecure_default","ozonesecure_datanode_1.ozonesecure_default"],"lastLeaderElection":0,"duration":1328415,"leaderElections":0,"replicationType":"RATIS","replicationFactor":3,"containers":1},{"pipelineId":"1b59d53c-dc87-4c8f-8aca-06a055eab975","status":"OPEN","leaderNode":"ozonesecure_datanode_2.ozonesecure_default","datanodes":["ozonesecure_datanode_2.ozonesecure_default"],"lastLeaderElection":0,"duration":1328867,"leaderElections":0,"replicationType":"RATIS","replicationFactor":1,"containers":1},{"pipelineId":"f7021d1a-d861-4e2a-b664-f8fa280fe3f9","status":"OPEN","leaderNode":"ozonesecure_datanode_1.ozonesecure_default","datanodes":["ozonesecure_datanode_1.ozonesecure_default"],"lastLeaderElection":0,"duration":1328449,"leaderElections":0,"replicationType":"RATIS","replicationFactor":1,"containers":1},{"pipelineId":"1f1b97d3-c57d-4549-9b34-3e5dc8d83502","status":"OPEN","leaderNode":"ozonesecure_datanode_3.ozonesecure_default","datanodes":["ozonesecure_datanode_3.ozonesecure_default"],"lastLeaderElection":0,"duration":1328451,"leaderElections":0,"replicationType":"RATIS","replicationFactor":1,"containers":1}]}</msg>
<status status="PASS" starttime="20200716 13:58:41.328" endtime="20200716 13:58:41.329"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.330" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.329" endtime="20200716 13:58:41.330"></status>
</kw>
<msg timestamp="20200716 13:58:41.330" level="INFO">${result} = {"totalCount":4,"pipelines":[{"pipelineId":"9adb8d16-a543-44c3-a43d-d453d408bd89","status":"OPEN","leaderNode":"ozonesecure_datanode_2.ozonesecure_default","datanodes":["ozonesecure_datanode_3.ozonese...</msg>
<status status="PASS" starttime="20200716 13:58:41.291" endtime="20200716 13:58:41.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>pipelines</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.330" endtime="20200716 13:58:41.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>RATIS</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.331" endtime="20200716 13:58:41.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>OPEN</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.331" endtime="20200716 13:58:41.332"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanode_1</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.332" endtime="20200716 13:58:41.332"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanode_2</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.332" endtime="20200716 13:58:41.333"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>datanode_3</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.333" endtime="20200716 13:58:41.333"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/clusterState</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.336" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/clusterState 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.354" level="INFO">${output} = {"pipelines":4,"totalDatanodes":3,"healthyDatanodes":3,"storageReport":{"capacity":267934076928,"used":24576,"remaining":75795591168},"containers":4,"volumes":25,"buckets":55,"keys":174}</msg>
<status status="PASS" starttime="20200716 13:58:41.334" endtime="20200716 13:58:41.354"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.355" level="INFO">{"pipelines":4,"totalDatanodes":3,"healthyDatanodes":3,"storageReport":{"capacity":267934076928,"used":24576,"remaining":75795591168},"containers":4,"volumes":25,"buckets":55,"keys":174}</msg>
<status status="PASS" starttime="20200716 13:58:41.354" endtime="20200716 13:58:41.355"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.356" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.356" endtime="20200716 13:58:41.356"></status>
</kw>
<msg timestamp="20200716 13:58:41.357" level="INFO">${result} = {"pipelines":4,"totalDatanodes":3,"healthyDatanodes":3,"storageReport":{"capacity":267934076928,"used":24576,"remaining":75795591168},"containers":4,"volumes":25,"buckets":55,"keys":174}</msg>
<status status="PASS" starttime="20200716 13:58:41.333" endtime="20200716 13:58:41.357"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>\"totalDatanodes\":3</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.357" endtime="20200716 13:58:41.357"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>\"healthyDatanodes\":3</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.357" endtime="20200716 13:58:41.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>\"pipelines\":4</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.358" endtime="20200716 13:58:41.358"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/containers/1/replicaHistory</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.361" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/containers/1/replicaHistory 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.395" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.395" level="INFO">${output} = [{"containerId":1,"datanodeHost":"ozonesecure_datanode_1.ozonesecure_default","firstReportTimestamp":1594906628998,"lastReportTimestamp":1594907888927},{"containerId":1,"datanodeHost":"ozonesecure_dat...</msg>
<status status="PASS" starttime="20200716 13:58:41.359" endtime="20200716 13:58:41.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.397" level="INFO">[{"containerId":1,"datanodeHost":"ozonesecure_datanode_1.ozonesecure_default","firstReportTimestamp":1594906628998,"lastReportTimestamp":1594907888927},{"containerId":1,"datanodeHost":"ozonesecure_datanode_2.ozonesecure_default","firstReportTimestamp":1594906628654,"lastReportTimestamp":1594907917103},{"containerId":1,"datanodeHost":"ozonesecure_datanode_3.ozonesecure_default","firstReportTimestamp":1594906629071,"lastReportTimestamp":1594907888990}]</msg>
<status status="PASS" starttime="20200716 13:58:41.396" endtime="20200716 13:58:41.397"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.397" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.397" endtime="20200716 13:58:41.398"></status>
</kw>
<msg timestamp="20200716 13:58:41.398" level="INFO">${result} = [{"containerId":1,"datanodeHost":"ozonesecure_datanode_1.ozonesecure_default","firstReportTimestamp":1594906628998,"lastReportTimestamp":1594907888927},{"containerId":1,"datanodeHost":"ozonesecure_dat...</msg>
<status status="PASS" starttime="20200716 13:58:41.358" endtime="20200716 13:58:41.398"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>\"containerId\":1</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.398" endtime="20200716 13:58:41.398"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" starttime="20200716 13:58:41.245" endtime="20200716 13:58:41.399" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Check if Recon Web UI is up">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
</arguments>
<kw name="Kinit HTTP user" library="commonlib">
<kw name="Execute" library="commonlib">
<arguments>
<arg>hostname</arg>
</arguments>
<assign>
<var>${hostname}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.409" level="INFO">Running command 'hostname 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.412" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.412" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20200716 13:58:41.406" endtime="20200716 13:58:41.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.413" level="INFO">scm</msg>
<status status="PASS" starttime="20200716 13:58:41.412" endtime="20200716 13:58:41.413"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.414" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.413" endtime="20200716 13:58:41.414"></status>
</kw>
<msg timestamp="20200716 13:58:41.414" level="INFO">${hostname} = scm</msg>
<status status="PASS" starttime="20200716 13:58:41.406" endtime="20200716 13:58:41.414"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k HTTP/${hostname}@EXAMPLE.COM -t /etc/security/keytabs/HTTP.keytab</arg>
</arguments>
<kw name="Execute" library="commonlib">
<arguments>
<arg>kinit -k HTTP/${hostname}@EXAMPLE.COM -t /etc/security/keytabs/HTTP.keytab</arg>
</arguments>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.417" level="INFO">Running command 'kinit -k HTTP/scm@EXAMPLE.COM -t /etc/security/keytabs/HTTP.keytab 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.428" level="INFO">${output} = </msg>
<status status="PASS" starttime="20200716 13:58:41.415" endtime="20200716 13:58:41.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.429" level="INFO"></msg>
<status status="PASS" starttime="20200716 13:58:41.429" endtime="20200716 13:58:41.429"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.430" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.429" endtime="20200716 13:58:41.430"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:41.415" endtime="20200716 13:58:41.430"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:41.414" endtime="20200716 13:58:41.430"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:41.406" endtime="20200716 13:58:41.430"></status>
</kw>
<status status="PASS" starttime="20200716 13:58:41.405" endtime="20200716 13:58:41.431"></status>
</kw>
<kw name="Execute" library="commonlib">
<arguments>
<arg>curl --negotiate -u : -LSs ${ENDPOINT_URL}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${command}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20200716 13:58:41.434" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888 2&gt;&amp;1'.</msg>
<msg timestamp="20200716 13:58:41.477" level="INFO">${rc} = 0</msg>
<msg timestamp="20200716 13:58:41.477" level="INFO">${output} = &lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"/&gt;&lt;link rel="shortcut icon" href="/favicon.ico"/&gt;&lt;meta name="viewport" content="width=device-width,initial-scale=1"/&gt;&lt;meta name="theme-color" ...</msg>
<status status="PASS" starttime="20200716 13:58:41.431" endtime="20200716 13:58:41.477"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20200716 13:58:41.478" level="INFO">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"/&gt;&lt;link rel="shortcut icon" href="/favicon.ico"/&gt;&lt;meta name="viewport" content="width=device-width,initial-scale=1"/&gt;&lt;meta name="theme-color" content="#000000"/&gt;&lt;link rel="manifest" href="/manifest.json"/&gt;&lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500"/&gt;&lt;title&gt;Ozone Recon&lt;/title&gt;&lt;link href="/static/css/2.91e4d86d.chunk.css" rel="stylesheet"&gt;&lt;link href="/static/css/main.eeb92191.chunk.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;&lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;&lt;div id="root"&gt;&lt;/div&gt;&lt;script&gt;!function(e){function r(r){for(var n,l,f=r[0],i=r[1],a=r[2],p=0,s=[];p&lt;f.length;p++)l=f[p],Object.prototype.hasOwnProperty.call(o,l)&amp;&amp;o[l]&amp;&amp;s.push(o[l][0]),o[l]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&amp;&amp;(e[n]=i[n]);for(c&amp;&amp;c(r);s.length;)s.shift()();return u.push.apply(u,a||[]),t()}function t(){for(var e,r=0;r&lt;u.length;r++){for(var t=u[r],n=!0,f=1;f&lt;t.length;f++){var i=t[f];0!==o[i]&amp;&amp;(n=!1)}n&amp;&amp;(u.splice(r--,1),e=l(l.s=t[0]))}return e}var n={},o={1:0},u=[];function l(r){if(n[r])return n[r].exports;var t=n[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,l),t.l=!0,t.exports}l.m=e,l.c=n,l.d=function(e,r,t){l.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},l.r=function(e){"undefined"!=typeof Symbol&amp;&amp;Symbol.toStringTag&amp;&amp;Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,r){if(1&amp;r&amp;&amp;(e=l(e)),8&amp;r)return e;if(4&amp;r&amp;&amp;"object"==typeof e&amp;&amp;e&amp;&amp;e.__esModule)return e;var t=Object.create(null);if(l.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&amp;r&amp;&amp;"string"!=typeof e)for(var n in e)l.d(t,n,function(r){return e[r]}.bind(null,n));return t},l.n=function(e){var r=e&amp;&amp;e.__esModule?function(){return e.default}:function(){return e};return l.d(r,"a",r),r},l.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},l.p="/";var f=this["webpackJsonpozone-recon"]=this["webpackJsonpozone-recon"]||[],i=f.push.bind(f);f.push=r,f=f.slice();for(var a=0;a&lt;f.length;a++)r(f[a]);var c=i;t()}([])&lt;/script&gt;&lt;script src="/static/js/2.2f7524a2.chunk.js"&gt;&lt;/script&gt;&lt;script src="/static/js/main.c0debea0.chunk.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.477" endtime="20200716 13:58:41.478"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200716 13:58:41.479" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200716 13:58:41.478" endtime="20200716 13:58:41.479"></status>
</kw>
<msg timestamp="20200716 13:58:41.479" level="INFO">${result} = &lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"/&gt;&lt;link rel="shortcut icon" href="/favicon.ico"/&gt;&lt;meta name="viewport" content="width=device-width,initial-scale=1"/&gt;&lt;meta name="theme-color" ...</msg>
<status status="PASS" starttime="20200716 13:58:41.431" endtime="20200716 13:58:41.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result}</arg>
<arg>Ozone Recon</arg>
</arguments>
<status status="PASS" starttime="20200716 13:58:41.479" endtime="20200716 13:58:41.480"></status>
</kw>
<timeout value="5 minutes"></timeout>
<status status="PASS" starttime="20200716 13:58:41.404" endtime="20200716 13:58:41.480" critical="yes"></status>
</test>
<doc>Smoke test to start cluster with docker-compose environments.</doc>
<status status="PASS" starttime="20200716 13:58:31.940" endtime="20200716 13:58:41.483"></status>
</suite>
<status status="PASS" starttime="20200716 13:58:31.911" endtime="20200716 13:58:41.486"></status>
</suite>
<statistics>
<total>
<stat pass="4" fail="0">Critical Tests</stat>
<stat pass="4" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="4" fail="0" id="s1" name="ozonesecure-recon">ozonesecure-recon</stat>
<stat pass="4" fail="0" id="s1-s1" name="Recon-Api">ozonesecure-recon.Recon-Api</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
