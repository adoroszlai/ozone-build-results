<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 4.1.2 (Python 3.6.9 on linux)" generated="20211114 13:35:49.457" rpa="false" schemaversion="2">
<suite id="s1" name="upgrade">
<suite id="s1-s1" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s1-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:25:38.282" level="INFO">${random} = 87499</msg>
<status status="PASS" starttime="20211114 13:25:38.282" endtime="20211114 13:25:38.282"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:25:38.290" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-87499 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:25:42.866" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:25:42.866" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:38.285" endtime="20211114 13:25:42.866"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:25:42.868" level="INFO"/>
<status status="PASS" starttime="20211114 13:25:42.867" endtime="20211114 13:25:42.868"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:25:42.869" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:25:42.868" endtime="20211114 13:25:42.869"/>
</kw>
<status status="PASS" starttime="20211114 13:25:38.284" endtime="20211114 13:25:42.869"/>
</kw>
<msg timestamp="20211114 13:25:42.869" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:25:38.284" endtime="20211114 13:25:42.870"/>
</kw>
<msg timestamp="20211114 13:25:42.870" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:38.283" endtime="20211114 13:25:42.870"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:25:42.870" endtime="20211114 13:25:42.871"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:25:38.281" endtime="20211114 13:25:42.871"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:25:38.217" endtime="20211114 13:25:42.872"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s2-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:30:24.619" level="INFO">${random} = 20942</msg>
<status status="PASS" starttime="20211114 13:30:24.619" endtime="20211114 13:30:24.619"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:30:24.626" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-20942 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:30:29.357" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:30:29.358" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:24.621" endtime="20211114 13:30:29.358"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:30:29.359" level="INFO"/>
<status status="PASS" starttime="20211114 13:30:29.358" endtime="20211114 13:30:29.359"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:30:29.360" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:30:29.359" endtime="20211114 13:30:29.360"/>
</kw>
<status status="PASS" starttime="20211114 13:30:24.621" endtime="20211114 13:30:29.360"/>
</kw>
<msg timestamp="20211114 13:30:29.360" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:30:24.620" endtime="20211114 13:30:29.360"/>
</kw>
<msg timestamp="20211114 13:30:29.361" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:24.619" endtime="20211114 13:30:29.361"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:30:29.361" endtime="20211114 13:30:29.361"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:30:24.618" endtime="20211114 13:30:29.362"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:30:24.549" endtime="20211114 13:30:29.364"/>
</suite>
<suite id="s1-s3" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:30:33.506" level="INFO">Running command 'ozone sh volume create old2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:30:36.125" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:30:36.126" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:33.503" endtime="20211114 13:30:36.126"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:30:36.127" level="INFO"/>
<status status="PASS" starttime="20211114 13:30:36.126" endtime="20211114 13:30:36.127"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:30:36.128" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:30:36.127" endtime="20211114 13:30:36.128"/>
</kw>
<status status="PASS" starttime="20211114 13:30:33.502" endtime="20211114 13:30:36.128"/>
</kw>
<msg timestamp="20211114 13:30:36.128" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:30:33.502" endtime="20211114 13:30:36.129"/>
</kw>
<msg timestamp="20211114 13:30:36.129" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:33.497" endtime="20211114 13:30:36.129"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:30:36.129" endtime="20211114 13:30:36.130"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:30:36.143" level="INFO">Running command 'ozone sh bucket create /old2-volume/old2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:30:38.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:30:38.994" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:36.137" endtime="20211114 13:30:38.994"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:30:38.995" level="INFO"/>
<status status="PASS" starttime="20211114 13:30:38.995" endtime="20211114 13:30:38.996"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:30:38.996" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:30:38.996" endtime="20211114 13:30:38.997"/>
</kw>
<status status="PASS" starttime="20211114 13:30:36.135" endtime="20211114 13:30:38.997"/>
</kw>
<msg timestamp="20211114 13:30:38.997" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:30:36.134" endtime="20211114 13:30:38.997"/>
</kw>
<msg timestamp="20211114 13:30:38.998" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:36.130" endtime="20211114 13:30:38.998"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:30:38.998" endtime="20211114 13:30:38.999"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:30:39.007" level="INFO">Running command 'ozone sh key put /old2-volume/old2-bucket/old2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:30:44.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:30:44.807" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:39.004" endtime="20211114 13:30:44.807"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:30:44.808" level="INFO"/>
<status status="PASS" starttime="20211114 13:30:44.807" endtime="20211114 13:30:44.808"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:30:44.809" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:30:44.808" endtime="20211114 13:30:44.809"/>
</kw>
<status status="PASS" starttime="20211114 13:30:39.001" endtime="20211114 13:30:44.810"/>
</kw>
<msg timestamp="20211114 13:30:44.810" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:30:39.000" endtime="20211114 13:30:44.810"/>
</kw>
<msg timestamp="20211114 13:30:44.810" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:38.999" endtime="20211114 13:30:44.810"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:30:44.810" endtime="20211114 13:30:44.811"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:30:33.496" endtime="20211114 13:30:44.811"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211114 13:30:33.429" endtime="20211114 13:30:44.813"/>
</suite>
<suite id="s1-s4" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:30:48.933" level="INFO">${random} = 75739</msg>
<status status="PASS" starttime="20211114 13:30:48.932" endtime="20211114 13:30:48.933"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:30:48.941" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-75739 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:30:53.385" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:30:53.385" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:48.935" endtime="20211114 13:30:53.386"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:30:53.389" level="INFO"/>
<status status="PASS" starttime="20211114 13:30:53.386" endtime="20211114 13:30:53.389"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:30:53.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:30:53.390" endtime="20211114 13:30:53.390"/>
</kw>
<status status="PASS" starttime="20211114 13:30:48.935" endtime="20211114 13:30:53.391"/>
</kw>
<msg timestamp="20211114 13:30:53.391" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:30:48.934" endtime="20211114 13:30:53.391"/>
</kw>
<msg timestamp="20211114 13:30:53.391" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:48.933" endtime="20211114 13:30:53.391"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:30:53.392" endtime="20211114 13:30:53.392"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:30:48.931" endtime="20211114 13:30:53.392"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:30:48.866" endtime="20211114 13:30:53.400"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:30:15.477" level="INFO">${random} = 03194</msg>
<status status="PASS" starttime="20211114 13:30:15.476" endtime="20211114 13:30:15.477"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:30:15.483" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-03194 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:30:20.515" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:30:20.515" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:15.479" endtime="20211114 13:30:20.516"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:30:20.517" level="INFO"/>
<status status="PASS" starttime="20211114 13:30:20.516" endtime="20211114 13:30:20.517"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:30:20.518" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:30:20.518" endtime="20211114 13:30:20.518"/>
</kw>
<status status="PASS" starttime="20211114 13:30:15.479" endtime="20211114 13:30:20.519"/>
</kw>
<msg timestamp="20211114 13:30:20.519" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:30:15.478" endtime="20211114 13:30:20.519"/>
</kw>
<msg timestamp="20211114 13:30:20.519" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:30:15.477" endtime="20211114 13:30:20.519"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:30:20.520" endtime="20211114 13:30:20.520"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:30:15.475" endtime="20211114 13:30:20.520"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:30:15.399" endtime="20211114 13:30:20.522"/>
</suite>
<suite id="s1-s6" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s6-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:25:22.719" level="INFO">Running command 'ozone sh volume create old1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:25:25.535" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:25:25.535" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:22.715" endtime="20211114 13:25:25.535"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:25:25.537" level="INFO"/>
<status status="PASS" starttime="20211114 13:25:25.536" endtime="20211114 13:25:25.537"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:25:25.537" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:25:25.537" endtime="20211114 13:25:25.538"/>
</kw>
<status status="PASS" starttime="20211114 13:25:22.714" endtime="20211114 13:25:25.538"/>
</kw>
<msg timestamp="20211114 13:25:25.538" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:25:22.714" endtime="20211114 13:25:25.538"/>
</kw>
<msg timestamp="20211114 13:25:25.539" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:22.713" endtime="20211114 13:25:25.539"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:25:25.539" endtime="20211114 13:25:25.539"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:25:25.552" level="INFO">Running command 'ozone sh bucket create /old1-volume/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:25:28.138" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:25:28.138" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:25.542" endtime="20211114 13:25:28.138"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:25:28.139" level="INFO"/>
<status status="PASS" starttime="20211114 13:25:28.139" endtime="20211114 13:25:28.139"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:25:28.140" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:25:28.140" endtime="20211114 13:25:28.140"/>
</kw>
<status status="PASS" starttime="20211114 13:25:25.541" endtime="20211114 13:25:28.141"/>
</kw>
<msg timestamp="20211114 13:25:28.141" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:25:25.540" endtime="20211114 13:25:28.141"/>
</kw>
<msg timestamp="20211114 13:25:28.141" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:25.540" endtime="20211114 13:25:28.142"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:25:28.142" endtime="20211114 13:25:28.142"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:25:28.153" level="INFO">Running command 'ozone sh key put /old1-volume/old1-bucket/old1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:25:34.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:25:34.410" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:28.148" endtime="20211114 13:25:34.410"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:25:34.411" level="INFO"/>
<status status="PASS" starttime="20211114 13:25:34.410" endtime="20211114 13:25:34.411"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:25:34.412" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:25:34.411" endtime="20211114 13:25:34.412"/>
</kw>
<status status="PASS" starttime="20211114 13:25:28.147" endtime="20211114 13:25:34.412"/>
</kw>
<msg timestamp="20211114 13:25:34.412" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:25:28.143" endtime="20211114 13:25:34.412"/>
</kw>
<msg timestamp="20211114 13:25:34.413" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211114 13:25:28.142" endtime="20211114 13:25:34.413"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:25:34.413" endtime="20211114 13:25:34.413"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:25:22.712" endtime="20211114 13:25:34.414"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211114 13:25:22.642" endtime="20211114 13:25:34.415"/>
</suite>
<suite id="s1-s7" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s7-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:10.955" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20211114 13:34:10.954" endtime="20211114 13:34:10.955"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:10.955" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:10.955" endtime="20211114 13:34:10.956"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:10.956" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:10.956" endtime="20211114 13:34:10.956"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:10.957" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:10.956" endtime="20211114 13:34:10.957"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:10.959" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:10.960" level="INFO">${version_file_contents} = #Sun Nov 14 13:32:52 UTC 2021
cTime=1636896258264
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
nodeType=SCM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d01
layoutVersion=2
</msg>
<status status="PASS" starttime="20211114 13:34:10.958" endtime="20211114 13:34:10.960"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:10.960" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211114 13:34:10.960" endtime="20211114 13:34:10.961"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:10.961" endtime="20211114 13:34:10.961"/>
</kw>
<status status="PASS" starttime="20211114 13:34:10.958" endtime="20211114 13:34:10.961"/>
</kw>
<status status="PASS" starttime="20211114 13:34:10.957" endtime="20211114 13:34:10.962"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:10.953" endtime="20211114 13:34:10.962"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:10.888" endtime="20211114 13:34:10.963"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s8-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:34:58.092" level="INFO">${random} = 36080</msg>
<status status="PASS" starttime="20211114 13:34:58.091" endtime="20211114 13:34:58.092"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:34:58.098" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-36080 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:35:04.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:35:04.634" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:58.095" endtime="20211114 13:35:04.634"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:35:04.636" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:04.635" endtime="20211114 13:35:04.636"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:35:04.637" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:35:04.636" endtime="20211114 13:35:04.637"/>
</kw>
<status status="PASS" starttime="20211114 13:34:58.094" endtime="20211114 13:35:04.637"/>
</kw>
<msg timestamp="20211114 13:35:04.637" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:34:58.093" endtime="20211114 13:35:04.637"/>
</kw>
<msg timestamp="20211114 13:35:04.638" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:58.092" endtime="20211114 13:35:04.638"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:35:04.638" endtime="20211114 13:35:04.638"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:58.090" endtime="20211114 13:35:04.639"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:34:58.018" endtime="20211114 13:35:04.640"/>
</suite>
<suite id="s1-s9" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s9-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:35:08.836" level="INFO">Running command 'ozone sh volume create new2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:35:11.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:35:11.700" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:08.832" endtime="20211114 13:35:11.700"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:35:11.702" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:11.701" endtime="20211114 13:35:11.702"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:35:11.702" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:35:11.702" endtime="20211114 13:35:11.703"/>
</kw>
<status status="PASS" starttime="20211114 13:35:08.831" endtime="20211114 13:35:11.703"/>
</kw>
<msg timestamp="20211114 13:35:11.703" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:35:08.831" endtime="20211114 13:35:11.703"/>
</kw>
<msg timestamp="20211114 13:35:11.704" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:08.830" endtime="20211114 13:35:11.704"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:35:11.704" endtime="20211114 13:35:11.707"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:35:11.713" level="INFO">Running command 'ozone sh bucket create /new2-volume/new2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:35:14.694" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:35:14.694" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:11.709" endtime="20211114 13:35:14.694"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:35:14.695" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:14.694" endtime="20211114 13:35:14.695"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:35:14.696" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:35:14.696" endtime="20211114 13:35:14.696"/>
</kw>
<status status="PASS" starttime="20211114 13:35:11.709" endtime="20211114 13:35:14.697"/>
</kw>
<msg timestamp="20211114 13:35:14.697" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:35:11.708" endtime="20211114 13:35:14.697"/>
</kw>
<msg timestamp="20211114 13:35:14.697" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:11.707" endtime="20211114 13:35:14.697"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:35:14.697" endtime="20211114 13:35:14.698"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:35:14.703" level="INFO">Running command 'ozone sh key put /new2-volume/new2-bucket/new2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:35:21.199" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:35:21.199" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:14.700" endtime="20211114 13:35:21.199"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:35:21.201" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:21.200" endtime="20211114 13:35:21.201"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:35:21.202" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:35:21.201" endtime="20211114 13:35:21.202"/>
</kw>
<status status="PASS" starttime="20211114 13:35:14.699" endtime="20211114 13:35:21.202"/>
</kw>
<msg timestamp="20211114 13:35:21.202" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:35:14.699" endtime="20211114 13:35:21.202"/>
</kw>
<msg timestamp="20211114 13:35:21.203" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:14.698" endtime="20211114 13:35:21.203"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:35:21.203" endtime="20211114 13:35:21.203"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:35:08.829" endtime="20211114 13:35:21.204"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211114 13:35:08.762" endtime="20211114 13:35:21.205"/>
</suite>
<suite id="s1-s10" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s10-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:35:25.304" level="INFO">${random} = 66693</msg>
<status status="PASS" starttime="20211114 13:35:25.303" endtime="20211114 13:35:25.304"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:35:25.310" level="INFO">Running command 'ozone sh key get /new2-volume/new2-bucket/new2-key /tmp/key-66693 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:35:30.157" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:35:30.157" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:25.306" endtime="20211114 13:35:30.157"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:35:30.158" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:30.157" endtime="20211114 13:35:30.159"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:35:30.159" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:35:30.159" endtime="20211114 13:35:30.159"/>
</kw>
<status status="PASS" starttime="20211114 13:35:25.306" endtime="20211114 13:35:30.160"/>
</kw>
<msg timestamp="20211114 13:35:30.160" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:35:25.305" endtime="20211114 13:35:30.160"/>
</kw>
<msg timestamp="20211114 13:35:30.160" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:35:25.304" endtime="20211114 13:35:30.160"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:35:30.161" endtime="20211114 13:35:30.161"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:35:25.302" endtime="20211114 13:35:30.161"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:35:25.233" endtime="20211114 13:35:30.164"/>
</suite>
<suite id="s1-s11" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s11-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:15.102" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211114 13:34:15.101" endtime="20211114 13:34:15.102"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:15.103" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:15.102" endtime="20211114 13:34:15.103"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:15.103" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:15.103" endtime="20211114 13:34:15.103"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:15.104" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:15.103" endtime="20211114 13:34:15.104"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:15.106" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:15.106" level="INFO">${version_file_contents} = #Sun Nov 14 13:32:54 UTC 2021
cTime=1636896389680
clusterID=24d5dadf-20da-4bc3-ad95-e77c6e9b39c3
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211114 13:34:15.105" endtime="20211114 13:34:15.106"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:15.107" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211114 13:34:15.106" endtime="20211114 13:34:15.107"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:15.107" endtime="20211114 13:34:15.108"/>
</kw>
<status status="PASS" starttime="20211114 13:34:15.105" endtime="20211114 13:34:15.108"/>
</kw>
<status status="PASS" starttime="20211114 13:34:15.104" endtime="20211114 13:34:15.108"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:15.100" endtime="20211114 13:34:15.108"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:15.034" endtime="20211114 13:34:15.109"/>
</suite>
<suite id="s1-s12" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s12-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:19.252" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211114 13:34:19.251" endtime="20211114 13:34:19.252"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:19.253" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:19.252" endtime="20211114 13:34:19.253"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:19.253" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:19.253" endtime="20211114 13:34:19.253"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:19.254" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:19.254" endtime="20211114 13:34:19.254"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:19.256" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:19.256" level="INFO">${version_file_contents} = #Sun Nov 14 13:32:53 UTC 2021
cTime=1636896377760
clusterID=b4301f5f-acca-40fa-ab01-08fb687ccb32
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211114 13:34:19.255" endtime="20211114 13:34:19.256"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:19.257" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211114 13:34:19.256" endtime="20211114 13:34:19.257"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:19.257" endtime="20211114 13:34:19.258"/>
</kw>
<status status="PASS" starttime="20211114 13:34:19.255" endtime="20211114 13:34:19.258"/>
</kw>
<status status="PASS" starttime="20211114 13:34:19.254" endtime="20211114 13:34:19.258"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:19.250" endtime="20211114 13:34:19.258"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:19.183" endtime="20211114 13:34:19.259"/>
</suite>
<suite id="s1-s13" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s13-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:23.415" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211114 13:34:23.415" endtime="20211114 13:34:23.416"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:23.416" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:23.416" endtime="20211114 13:34:23.416"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:23.417" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:23.417" endtime="20211114 13:34:23.417"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:23.418" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:23.418" endtime="20211114 13:34:23.418"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:23.420" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:23.420" level="INFO">${version_file_contents} = #Sun Nov 14 13:33:08 UTC 2021
cTime=1636896390250
clusterID=85192b0a-8cf0-49af-b223-0d6ef3897bc1
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211114 13:34:23.419" endtime="20211114 13:34:23.420"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:23.421" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211114 13:34:23.421" endtime="20211114 13:34:23.421"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:23.422" endtime="20211114 13:34:23.422"/>
</kw>
<status status="PASS" starttime="20211114 13:34:23.419" endtime="20211114 13:34:23.422"/>
</kw>
<status status="PASS" starttime="20211114 13:34:23.418" endtime="20211114 13:34:23.422"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:23.414" endtime="20211114 13:34:23.423"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:23.345" endtime="20211114 13:34:23.424"/>
</suite>
<suite id="s1-s14" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s14-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:27.640" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211114 13:34:27.639" endtime="20211114 13:34:27.640"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:27.641" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:27.640" endtime="20211114 13:34:27.641"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:27.641" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:27.641" endtime="20211114 13:34:27.641"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:27.642" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:27.642" endtime="20211114 13:34:27.642"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:27.644" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:27.644" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:47 UTC 2021
cTime=1636896261332
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
omUuid=78f9dd13-eb98-4d4e-b13b-632781d221c2
nodeType=OM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d0...</msg>
<status status="PASS" starttime="20211114 13:34:27.643" endtime="20211114 13:34:27.644"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:27.645" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:34:27.644" endtime="20211114 13:34:27.645"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:27.645" endtime="20211114 13:34:27.646"/>
</kw>
<status status="PASS" starttime="20211114 13:34:27.643" endtime="20211114 13:34:27.646"/>
</kw>
<status status="PASS" starttime="20211114 13:34:27.642" endtime="20211114 13:34:27.646"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:27.637" endtime="20211114 13:34:27.646"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:27.563" endtime="20211114 13:34:27.647"/>
</suite>
<suite id="s1-s15" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s15-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:31.819" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211114 13:34:31.818" endtime="20211114 13:34:31.819"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:31.819" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:31.819" endtime="20211114 13:34:31.820"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:31.820" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:31.820" endtime="20211114 13:34:31.820"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:31.822" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:31.821" endtime="20211114 13:34:31.822"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:31.825" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:31.825" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:47 UTC 2021
cTime=1636896266687
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
omUuid=bdfa9df1-e433-4515-9e13-d357abeb8284
nodeType=OM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d0...</msg>
<status status="PASS" starttime="20211114 13:34:31.825" endtime="20211114 13:34:31.825"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:31.826" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:34:31.826" endtime="20211114 13:34:31.826"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:31.826" endtime="20211114 13:34:31.827"/>
</kw>
<status status="PASS" starttime="20211114 13:34:31.824" endtime="20211114 13:34:31.827"/>
</kw>
<status status="PASS" starttime="20211114 13:34:31.822" endtime="20211114 13:34:31.827"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:31.816" endtime="20211114 13:34:31.827"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:31.741" endtime="20211114 13:34:31.829"/>
</suite>
<suite id="s1-s16" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s16-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:36.023" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211114 13:34:36.022" endtime="20211114 13:34:36.023"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:34:36.023" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:34:36.023" endtime="20211114 13:34:36.023"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:34:36.024" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:34:36.024" endtime="20211114 13:34:36.024"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:34:36.025" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211114 13:34:36.024" endtime="20211114 13:34:36.025"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:34:36.027" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:34:36.028" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:47 UTC 2021
cTime=1636896266222
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
omUuid=cb840179-4c4c-4af5-bfd5-0e89dc1236d9
nodeType=OM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d0...</msg>
<status status="PASS" starttime="20211114 13:34:36.026" endtime="20211114 13:34:36.028"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:34:36.029" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:34:36.028" endtime="20211114 13:34:36.029"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:36.029" endtime="20211114 13:34:36.029"/>
</kw>
<status status="PASS" starttime="20211114 13:34:36.026" endtime="20211114 13:34:36.030"/>
</kw>
<status status="PASS" starttime="20211114 13:34:36.025" endtime="20211114 13:34:36.030"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:36.021" endtime="20211114 13:34:36.030"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:34:35.947" endtime="20211114 13:34:36.031"/>
</suite>
<suite id="s1-s17" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s17-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:34:40.063" level="INFO">${random} = 46216</msg>
<status status="PASS" starttime="20211114 13:34:40.062" endtime="20211114 13:34:40.063"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:34:40.069" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-46216 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:34:45.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:34:45.060" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:40.065" endtime="20211114 13:34:45.060"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:34:45.061" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:45.060" endtime="20211114 13:34:45.061"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:34:45.062" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:34:45.061" endtime="20211114 13:34:45.062"/>
</kw>
<status status="PASS" starttime="20211114 13:34:40.064" endtime="20211114 13:34:45.062"/>
</kw>
<msg timestamp="20211114 13:34:45.063" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:34:40.064" endtime="20211114 13:34:45.063"/>
</kw>
<msg timestamp="20211114 13:34:45.063" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:40.063" endtime="20211114 13:34:45.063"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:45.063" endtime="20211114 13:34:45.064"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:40.061" endtime="20211114 13:34:45.064"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:34:39.992" endtime="20211114 13:34:45.065"/>
</suite>
<suite id="s1-s18" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s18-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:34:49.272" level="INFO">${random} = 23589</msg>
<status status="PASS" starttime="20211114 13:34:49.271" endtime="20211114 13:34:49.272"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:34:49.278" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-23589 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:34:53.948" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:34:53.948" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:49.274" endtime="20211114 13:34:53.948"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:34:53.950" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:53.949" endtime="20211114 13:34:53.950"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:34:53.951" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:34:53.950" endtime="20211114 13:34:53.951"/>
</kw>
<status status="PASS" starttime="20211114 13:34:49.274" endtime="20211114 13:34:53.951"/>
</kw>
<msg timestamp="20211114 13:34:53.951" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:34:49.273" endtime="20211114 13:34:53.952"/>
</kw>
<msg timestamp="20211114 13:34:53.952" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:34:49.272" endtime="20211114 13:34:53.952"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:34:53.952" endtime="20211114 13:34:53.953"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:49.270" endtime="20211114 13:34:53.953"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:34:49.205" endtime="20211114 13:34:53.955"/>
</suite>
<suite id="s1-s19" name="Finalize" source="/opt/hadoop/smoketest/upgrade/finalize.robot">
<test id="s1-s19-t1" name="Finalize SCM">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20211114 13:32:44.273" endtime="20211114 13:32:44.273"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm finalizeupgrade</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:32:44.283" level="INFO">Running command 'ozone admin scm finalizeupgrade 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:34:03.003" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:34:03.003" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed d...</msg>
<status status="PASS" starttime="20211114 13:32:44.275" endtime="20211114 13:34:03.003"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:34:03.005" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20211114 13:34:03.004" endtime="20211114 13:34:03.005"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:34:03.006" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:34:03.005" endtime="20211114 13:34:03.006"/>
</kw>
<status status="PASS" starttime="20211114 13:32:44.275" endtime="20211114 13:34:03.006"/>
</kw>
<msg timestamp="20211114 13:34:03.006" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:32:44.274" endtime="20211114 13:34:03.007"/>
</kw>
<msg timestamp="20211114 13:34:03.007" level="INFO">${result} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed d...</msg>
<status status="PASS" starttime="20211114 13:32:44.274" endtime="20211114 13:34:03.007"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:34:03.007" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20211114 13:34:03.007" endtime="20211114 13:34:03.008"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:32:44.272" endtime="20211114 13:34:03.008"/>
</test>
<test id="s1-s19-t2" name="Finalize OMs">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20211114 13:34:03.010" endtime="20211114 13:34:03.010"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om finalizeupgrade -id %{OM_SERVICE_ID}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:34:03.015" level="INFO">Running command 'ozone admin om finalizeupgrade -id omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:34:06.741" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:34:06.741" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211114 13:34:03.013" endtime="20211114 13:34:06.742"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:34:06.743" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211114 13:34:06.742" endtime="20211114 13:34:06.743"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:34:06.744" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:34:06.743" endtime="20211114 13:34:06.744"/>
</kw>
<status status="PASS" starttime="20211114 13:34:03.012" endtime="20211114 13:34:06.745"/>
</kw>
<msg timestamp="20211114 13:34:06.745" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:34:03.011" endtime="20211114 13:34:06.745"/>
</kw>
<msg timestamp="20211114 13:34:06.745" level="INFO">${result} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211114 13:34:03.011" endtime="20211114 13:34:06.745"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:34:06.746" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211114 13:34:06.746" endtime="20211114 13:34:06.746"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:34:03.009" endtime="20211114 13:34:06.747"/>
</test>
<doc>Finalize Upgrade of OMs and SCM</doc>
<status status="PASS" starttime="20211114 13:32:44.196" endtime="20211114 13:34:06.749"/>
</suite>
<suite id="s1-s20" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s20-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:36.777" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211114 13:27:36.776" endtime="20211114 13:27:36.777"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:36.778" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:36.777" endtime="20211114 13:27:36.778"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:36.778" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:36.778" endtime="20211114 13:27:36.779"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:36.779" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:36.779" endtime="20211114 13:27:36.779"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:36.781" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:36.781" level="INFO">${version_file_contents} = #Sun Nov 14 13:26:29 UTC 2021
cTime=1636896389680
clusterID=24d5dadf-20da-4bc3-ad95-e77c6e9b39c3
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211114 13:27:36.780" endtime="20211114 13:27:36.781"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:36.782" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:36.781" endtime="20211114 13:27:36.782"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:36.782" endtime="20211114 13:27:36.783"/>
</kw>
<status status="PASS" starttime="20211114 13:27:36.780" endtime="20211114 13:27:36.783"/>
</kw>
<status status="PASS" starttime="20211114 13:27:36.779" endtime="20211114 13:27:36.783"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:36.775" endtime="20211114 13:27:36.783"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:36.702" endtime="20211114 13:27:36.784"/>
</suite>
<suite id="s1-s21" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s21-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:40.957" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211114 13:27:40.956" endtime="20211114 13:27:40.957"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:40.957" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:40.957" endtime="20211114 13:27:40.957"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:40.958" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:40.958" endtime="20211114 13:27:40.958"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:40.959" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:40.958" endtime="20211114 13:27:40.959"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:40.961" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:40.961" level="INFO">${version_file_contents} = #Sun Nov 14 13:26:17 UTC 2021
cTime=1636896377760
clusterID=b4301f5f-acca-40fa-ab01-08fb687ccb32
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211114 13:27:40.960" endtime="20211114 13:27:40.961"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:40.962" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:40.961" endtime="20211114 13:27:40.962"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:40.962" endtime="20211114 13:27:40.963"/>
</kw>
<status status="PASS" starttime="20211114 13:27:40.960" endtime="20211114 13:27:40.963"/>
</kw>
<status status="PASS" starttime="20211114 13:27:40.959" endtime="20211114 13:27:40.963"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:40.955" endtime="20211114 13:27:40.964"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:40.887" endtime="20211114 13:27:40.965"/>
</suite>
<suite id="s1-s22" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s22-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:45.078" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211114 13:27:45.077" endtime="20211114 13:27:45.078"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:45.079" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:45.078" endtime="20211114 13:27:45.079"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:45.079" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:45.079" endtime="20211114 13:27:45.079"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:45.080" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:45.080" endtime="20211114 13:27:45.080"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:45.082" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:45.082" level="INFO">${version_file_contents} = #Sun Nov 14 13:26:30 UTC 2021
cTime=1636896390250
clusterID=85192b0a-8cf0-49af-b223-0d6ef3897bc1
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211114 13:27:45.082" endtime="20211114 13:27:45.083"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:45.083" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:45.083" endtime="20211114 13:27:45.083"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:45.084" endtime="20211114 13:27:45.084"/>
</kw>
<status status="PASS" starttime="20211114 13:27:45.081" endtime="20211114 13:27:45.084"/>
</kw>
<status status="PASS" starttime="20211114 13:27:45.081" endtime="20211114 13:27:45.084"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:45.076" endtime="20211114 13:27:45.085"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:45.010" endtime="20211114 13:27:45.086"/>
</suite>
<suite id="s1-s23" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s23-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:49.033" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211114 13:27:49.033" endtime="20211114 13:27:49.033"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:49.034" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:49.034" endtime="20211114 13:27:49.034"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:49.035" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:49.034" endtime="20211114 13:27:49.035"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:49.036" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:49.035" endtime="20211114 13:27:49.036"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:49.037" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:49.038" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:47 UTC 2021
cTime=1636896261332
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
omUuid=78f9dd13-eb98-4d4e-b13b-632781d221c2
nodeType=OM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d0...</msg>
<status status="PASS" starttime="20211114 13:27:49.037" endtime="20211114 13:27:49.038"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:49.038" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:49.038" endtime="20211114 13:27:49.039"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:49.039" endtime="20211114 13:27:49.039"/>
</kw>
<status status="PASS" starttime="20211114 13:27:49.036" endtime="20211114 13:27:49.039"/>
</kw>
<status status="PASS" starttime="20211114 13:27:49.036" endtime="20211114 13:27:49.040"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:49.031" endtime="20211114 13:27:49.040"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:48.969" endtime="20211114 13:27:49.041"/>
</suite>
<suite id="s1-s24" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s24-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:52.990" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211114 13:27:52.989" endtime="20211114 13:27:52.990"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:52.991" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:52.990" endtime="20211114 13:27:52.991"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:52.991" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:52.991" endtime="20211114 13:27:52.991"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:52.992" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:52.992" endtime="20211114 13:27:52.992"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:52.994" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:52.994" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:47 UTC 2021
cTime=1636896266687
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
omUuid=bdfa9df1-e433-4515-9e13-d357abeb8284
nodeType=OM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d0...</msg>
<status status="PASS" starttime="20211114 13:27:52.993" endtime="20211114 13:27:52.994"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:52.995" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:52.994" endtime="20211114 13:27:52.995"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:52.995" endtime="20211114 13:27:52.996"/>
</kw>
<status status="PASS" starttime="20211114 13:27:52.993" endtime="20211114 13:27:52.996"/>
</kw>
<status status="PASS" starttime="20211114 13:27:52.992" endtime="20211114 13:27:52.996"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:52.988" endtime="20211114 13:27:52.996"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:52.922" endtime="20211114 13:27:52.997"/>
</suite>
<suite id="s1-s25" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s25-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:57.009" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211114 13:27:57.008" endtime="20211114 13:27:57.009"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:57.010" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:57.009" endtime="20211114 13:27:57.010"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:57.011" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:57.010" endtime="20211114 13:27:57.011"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:57.012" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:57.011" endtime="20211114 13:27:57.012"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:57.013" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:57.014" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:47 UTC 2021
cTime=1636896266222
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
omUuid=cb840179-4c4c-4af5-bfd5-0e89dc1236d9
nodeType=OM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d0...</msg>
<status status="PASS" starttime="20211114 13:27:57.013" endtime="20211114 13:27:57.014"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:57.014" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:57.014" endtime="20211114 13:27:57.015"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:57.015" endtime="20211114 13:27:57.015"/>
</kw>
<status status="PASS" starttime="20211114 13:27:57.012" endtime="20211114 13:27:57.015"/>
</kw>
<status status="PASS" starttime="20211114 13:27:57.012" endtime="20211114 13:27:57.016"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:57.007" endtime="20211114 13:27:57.016"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:56.941" endtime="20211114 13:27:57.017"/>
</suite>
<suite id="s1-s26" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s26-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:28:01.132" level="INFO">${random} = 52252</msg>
<status status="PASS" starttime="20211114 13:28:01.131" endtime="20211114 13:28:01.132"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:28:01.138" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-52252 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:28:05.879" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:28:05.879" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:01.134" endtime="20211114 13:28:05.879"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:28:05.880" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:05.880" endtime="20211114 13:28:05.881"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:28:05.883" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:28:05.881" endtime="20211114 13:28:05.883"/>
</kw>
<status status="PASS" starttime="20211114 13:28:01.133" endtime="20211114 13:28:05.884"/>
</kw>
<msg timestamp="20211114 13:28:05.884" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:28:01.133" endtime="20211114 13:28:05.884"/>
</kw>
<msg timestamp="20211114 13:28:05.884" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:01.132" endtime="20211114 13:28:05.884"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:28:05.884" endtime="20211114 13:28:05.885"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:28:01.130" endtime="20211114 13:28:05.885"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:28:01.064" endtime="20211114 13:28:05.895"/>
</suite>
<suite id="s1-s27" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s27-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:28:09.996" level="INFO">Running command 'ozone sh volume create new1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:28:13.166" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:28:13.166" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:09.992" endtime="20211114 13:28:13.166"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:28:13.167" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:13.167" endtime="20211114 13:28:13.167"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:28:13.168" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:28:13.168" endtime="20211114 13:28:13.168"/>
</kw>
<status status="PASS" starttime="20211114 13:28:09.992" endtime="20211114 13:28:13.169"/>
</kw>
<msg timestamp="20211114 13:28:13.171" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:28:09.992" endtime="20211114 13:28:13.171"/>
</kw>
<msg timestamp="20211114 13:28:13.172" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:09.991" endtime="20211114 13:28:13.172"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:28:13.172" endtime="20211114 13:28:13.172"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:28:13.196" level="INFO">Running command 'ozone sh bucket create /new1-volume/new1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:28:16.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:28:16.414" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:13.189" endtime="20211114 13:28:16.414"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:28:16.415" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:16.415" endtime="20211114 13:28:16.415"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:28:16.416" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:28:16.416" endtime="20211114 13:28:16.416"/>
</kw>
<status status="PASS" starttime="20211114 13:28:13.184" endtime="20211114 13:28:16.417"/>
</kw>
<msg timestamp="20211114 13:28:16.417" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:28:13.181" endtime="20211114 13:28:16.417"/>
</kw>
<msg timestamp="20211114 13:28:16.417" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:13.172" endtime="20211114 13:28:16.417"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:28:16.418" endtime="20211114 13:28:16.418"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:28:16.423" level="INFO">Running command 'ozone sh key put /new1-volume/new1-bucket/new1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:28:22.267" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:28:22.267" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:16.421" endtime="20211114 13:28:22.267"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:28:22.268" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:22.268" endtime="20211114 13:28:22.268"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:28:22.269" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:28:22.269" endtime="20211114 13:28:22.269"/>
</kw>
<status status="PASS" starttime="20211114 13:28:16.420" endtime="20211114 13:28:22.270"/>
</kw>
<msg timestamp="20211114 13:28:22.270" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:28:16.419" endtime="20211114 13:28:22.270"/>
</kw>
<msg timestamp="20211114 13:28:22.270" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:16.418" endtime="20211114 13:28:22.270"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:28:22.271" endtime="20211114 13:28:22.271"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:28:09.990" endtime="20211114 13:28:22.271"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211114 13:28:09.918" endtime="20211114 13:28:22.273"/>
</suite>
<suite id="s1-s28" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s28-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211114 13:28:26.387" level="INFO">${random} = 11826</msg>
<status status="PASS" starttime="20211114 13:28:26.386" endtime="20211114 13:28:26.387"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211114 13:28:26.393" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-11826 2&gt;&amp;1'.</msg>
<msg timestamp="20211114 13:28:31.591" level="INFO">${rc} = 0</msg>
<msg timestamp="20211114 13:28:31.591" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:26.389" endtime="20211114 13:28:31.591"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211114 13:28:31.592" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:31.591" endtime="20211114 13:28:31.592"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211114 13:28:31.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211114 13:28:31.592" endtime="20211114 13:28:31.593"/>
</kw>
<status status="PASS" starttime="20211114 13:28:26.389" endtime="20211114 13:28:31.594"/>
</kw>
<msg timestamp="20211114 13:28:31.594" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211114 13:28:26.388" endtime="20211114 13:28:31.594"/>
</kw>
<msg timestamp="20211114 13:28:31.594" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211114 13:28:26.387" endtime="20211114 13:28:31.594"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:28:31.595" endtime="20211114 13:28:31.595"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:28:26.385" endtime="20211114 13:28:31.596"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211114 13:28:26.322" endtime="20211114 13:28:31.600"/>
</suite>
<suite id="s1-s29" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s29-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:32.608" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20211114 13:27:32.607" endtime="20211114 13:27:32.608"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211114 13:27:32.608" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211114 13:27:32.608" endtime="20211114 13:27:32.608"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211114 13:27:32.609" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211114 13:27:32.609" endtime="20211114 13:27:32.609"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211114 13:27:32.610" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20211114 13:27:32.609" endtime="20211114 13:27:32.610"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211114 13:27:32.611" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211114 13:27:32.612" level="INFO">${version_file_contents} = #Sun Nov 14 13:24:18 UTC 2021
cTime=1636896258264
clusterID=CID-0ae51c86-f1fc-43e4-b41c-3aa9acd29c67
nodeType=SCM
scmUuid=d08604b0-190d-4605-8d48-d4d3011a9d01
layoutVersion=0
</msg>
<status status="PASS" starttime="20211114 13:27:32.611" endtime="20211114 13:27:32.612"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211114 13:27:32.612" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211114 13:27:32.612" endtime="20211114 13:27:32.612"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211114 13:27:32.613" endtime="20211114 13:27:32.613"/>
</kw>
<status status="PASS" starttime="20211114 13:27:32.610" endtime="20211114 13:27:32.613"/>
</kw>
<status status="PASS" starttime="20211114 13:27:32.610" endtime="20211114 13:27:32.613"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211114 13:27:32.606" endtime="20211114 13:27:32.614"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211114 13:27:32.542" endtime="20211114 13:27:32.614"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="182212"/>
</suite>
<statistics>
<total>
<stat pass="30" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="30" fail="0" skip="0" id="s1" name="upgrade">upgrade</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s11" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s12" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s13" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s14" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s15" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s16" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s17" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s18" name="Validate">upgrade.Validate</stat>
<stat pass="2" fail="0" skip="0" id="s1-s19" name="Finalize">upgrade.Finalize</stat>
<stat pass="1" fail="0" skip="0" id="s1-s20" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s21" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s22" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s23" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s24" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s25" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s26" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s27" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s28" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s29" name="Check-Mlv">upgrade.Check-Mlv</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
