<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 4.1.1 (Python 3.6.9 on linux)" generated="20211011 05:29:50.212" rpa="false" schemaversion="2">
<suite id="s1" name="upgrade">
<suite id="s1-s1" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s1-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:20:10.230" level="INFO">${random} = 48467</msg>
<status status="PASS" starttime="20211011 05:20:10.229" endtime="20211011 05:20:10.230"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:20:10.237" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-48467 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:20:14.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:20:14.626" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:20:10.232" endtime="20211011 05:20:14.626"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:20:14.627" level="INFO"/>
<status status="PASS" starttime="20211011 05:20:14.626" endtime="20211011 05:20:14.627"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:20:14.628" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:20:14.628" endtime="20211011 05:20:14.628"/>
</kw>
<status status="PASS" starttime="20211011 05:20:10.232" endtime="20211011 05:20:14.628"/>
</kw>
<msg timestamp="20211011 05:20:14.629" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:20:10.231" endtime="20211011 05:20:14.629"/>
</kw>
<msg timestamp="20211011 05:20:14.629" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:20:10.230" endtime="20211011 05:20:14.629"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:20:14.629" endtime="20211011 05:20:14.630"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:20:10.228" endtime="20211011 05:20:14.630"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:20:10.172" endtime="20211011 05:20:14.632"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s2-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:24:39.749" level="INFO">${random} = 13417</msg>
<status status="PASS" starttime="20211011 05:24:39.749" endtime="20211011 05:24:39.749"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:24:39.756" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-13417 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:24:44.029" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:24:44.029" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:39.752" endtime="20211011 05:24:44.029"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:24:44.030" level="INFO"/>
<status status="PASS" starttime="20211011 05:24:44.029" endtime="20211011 05:24:44.030"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:24:44.031" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:24:44.030" endtime="20211011 05:24:44.031"/>
</kw>
<status status="PASS" starttime="20211011 05:24:39.751" endtime="20211011 05:24:44.031"/>
</kw>
<msg timestamp="20211011 05:24:44.031" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:24:39.751" endtime="20211011 05:24:44.032"/>
</kw>
<msg timestamp="20211011 05:24:44.032" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:39.750" endtime="20211011 05:24:44.032"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:24:44.032" endtime="20211011 05:24:44.032"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:24:39.748" endtime="20211011 05:24:44.033"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:24:39.689" endtime="20211011 05:24:44.034"/>
</suite>
<suite id="s1-s3" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:24:48.197" level="INFO">Running command 'ozone sh volume create old2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:24:50.682" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:24:50.682" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:48.193" endtime="20211011 05:24:50.683"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:24:50.684" level="INFO"/>
<status status="PASS" starttime="20211011 05:24:50.683" endtime="20211011 05:24:50.684"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:24:50.685" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:24:50.684" endtime="20211011 05:24:50.685"/>
</kw>
<status status="PASS" starttime="20211011 05:24:48.193" endtime="20211011 05:24:50.685"/>
</kw>
<msg timestamp="20211011 05:24:50.685" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:24:48.192" endtime="20211011 05:24:50.685"/>
</kw>
<msg timestamp="20211011 05:24:50.686" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:48.191" endtime="20211011 05:24:50.686"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:24:50.686" endtime="20211011 05:24:50.686"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:24:50.703" level="INFO">Running command 'ozone sh bucket create /old2-volume/old2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:24:53.432" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:24:53.433" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:50.693" endtime="20211011 05:24:53.433"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:24:53.434" level="INFO"/>
<status status="PASS" starttime="20211011 05:24:53.433" endtime="20211011 05:24:53.434"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:24:53.435" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:24:53.434" endtime="20211011 05:24:53.435"/>
</kw>
<status status="PASS" starttime="20211011 05:24:50.687" endtime="20211011 05:24:53.435"/>
</kw>
<msg timestamp="20211011 05:24:53.435" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:24:50.687" endtime="20211011 05:24:53.439"/>
</kw>
<msg timestamp="20211011 05:24:53.439" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:50.686" endtime="20211011 05:24:53.439"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:24:53.440" endtime="20211011 05:24:53.440"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:24:53.449" level="INFO">Running command 'ozone sh key put /old2-volume/old2-bucket/old2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:24:58.902" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:24:58.902" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:53.444" endtime="20211011 05:24:58.902"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:24:58.904" level="INFO"/>
<status status="PASS" starttime="20211011 05:24:58.903" endtime="20211011 05:24:58.904"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:24:58.905" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:24:58.904" endtime="20211011 05:24:58.905"/>
</kw>
<status status="PASS" starttime="20211011 05:24:53.441" endtime="20211011 05:24:58.905"/>
</kw>
<msg timestamp="20211011 05:24:58.905" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:24:53.441" endtime="20211011 05:24:58.906"/>
</kw>
<msg timestamp="20211011 05:24:58.906" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:53.440" endtime="20211011 05:24:58.906"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:24:58.906" endtime="20211011 05:24:58.906"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:24:48.191" endtime="20211011 05:24:58.907"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211011 05:24:48.136" endtime="20211011 05:24:58.908"/>
</suite>
<suite id="s1-s4" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:25:03.021" level="INFO">${random} = 04034</msg>
<status status="PASS" starttime="20211011 05:25:03.020" endtime="20211011 05:25:03.021"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:25:03.027" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-04034 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:25:07.332" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:25:07.332" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:25:03.023" endtime="20211011 05:25:07.332"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:25:07.334" level="INFO"/>
<status status="PASS" starttime="20211011 05:25:07.333" endtime="20211011 05:25:07.334"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:25:07.335" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:25:07.334" endtime="20211011 05:25:07.335"/>
</kw>
<status status="PASS" starttime="20211011 05:25:03.022" endtime="20211011 05:25:07.335"/>
</kw>
<msg timestamp="20211011 05:25:07.335" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:25:03.022" endtime="20211011 05:25:07.335"/>
</kw>
<msg timestamp="20211011 05:25:07.336" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:25:03.021" endtime="20211011 05:25:07.336"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:25:07.336" endtime="20211011 05:25:07.336"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:25:03.019" endtime="20211011 05:25:07.337"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:25:02.963" endtime="20211011 05:25:07.338"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:24:30.178" level="INFO">${random} = 16669</msg>
<status status="PASS" starttime="20211011 05:24:30.178" endtime="20211011 05:24:30.178"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:24:30.185" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-16669 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:24:35.695" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:24:35.695" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:30.180" endtime="20211011 05:24:35.695"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:24:35.697" level="INFO"/>
<status status="PASS" starttime="20211011 05:24:35.696" endtime="20211011 05:24:35.697"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:24:35.697" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:24:35.697" endtime="20211011 05:24:35.698"/>
</kw>
<status status="PASS" starttime="20211011 05:24:30.180" endtime="20211011 05:24:35.698"/>
</kw>
<msg timestamp="20211011 05:24:35.698" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:24:30.179" endtime="20211011 05:24:35.698"/>
</kw>
<msg timestamp="20211011 05:24:35.699" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:24:30.178" endtime="20211011 05:24:35.699"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:24:35.699" endtime="20211011 05:24:35.699"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:24:30.177" endtime="20211011 05:24:35.699"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:24:30.116" endtime="20211011 05:24:35.701"/>
</suite>
<suite id="s1-s6" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s6-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:19:54.254" level="INFO">Running command 'ozone sh volume create old1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:19:56.900" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:19:56.900" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:19:54.250" endtime="20211011 05:19:56.900"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:19:56.901" level="INFO"/>
<status status="PASS" starttime="20211011 05:19:56.901" endtime="20211011 05:19:56.902"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:19:56.902" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:19:56.902" endtime="20211011 05:19:56.903"/>
</kw>
<status status="PASS" starttime="20211011 05:19:54.249" endtime="20211011 05:19:56.903"/>
</kw>
<msg timestamp="20211011 05:19:56.903" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:19:54.249" endtime="20211011 05:19:56.903"/>
</kw>
<msg timestamp="20211011 05:19:56.903" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:19:54.248" endtime="20211011 05:19:56.903"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:19:56.904" endtime="20211011 05:19:56.904"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:19:56.909" level="INFO">Running command 'ozone sh bucket create /old1-volume/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:19:59.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:19:59.628" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:19:56.906" endtime="20211011 05:19:59.628"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:19:59.631" level="INFO"/>
<status status="PASS" starttime="20211011 05:19:59.628" endtime="20211011 05:19:59.631"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:19:59.632" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:19:59.632" endtime="20211011 05:19:59.632"/>
</kw>
<status status="PASS" starttime="20211011 05:19:56.905" endtime="20211011 05:19:59.633"/>
</kw>
<msg timestamp="20211011 05:19:59.633" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:19:56.905" endtime="20211011 05:19:59.633"/>
</kw>
<msg timestamp="20211011 05:19:59.633" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:19:56.904" endtime="20211011 05:19:59.633"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:19:59.634" endtime="20211011 05:19:59.634"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:19:59.639" level="INFO">Running command 'ozone sh key put /old1-volume/old1-bucket/old1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:20:06.126" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:20:06.126" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:19:59.636" endtime="20211011 05:20:06.127"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:20:06.128" level="INFO"/>
<status status="PASS" starttime="20211011 05:20:06.127" endtime="20211011 05:20:06.128"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:20:06.129" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:20:06.128" endtime="20211011 05:20:06.129"/>
</kw>
<status status="PASS" starttime="20211011 05:19:59.635" endtime="20211011 05:20:06.129"/>
</kw>
<msg timestamp="20211011 05:20:06.129" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:19:59.635" endtime="20211011 05:20:06.129"/>
</kw>
<msg timestamp="20211011 05:20:06.130" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211011 05:19:59.634" endtime="20211011 05:20:06.130"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:20:06.130" endtime="20211011 05:20:06.130"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:19:54.247" endtime="20211011 05:20:06.131"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211011 05:19:54.184" endtime="20211011 05:20:06.132"/>
</suite>
<suite id="s1-s7" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s7-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:19.175" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20211011 05:28:19.175" endtime="20211011 05:28:19.176"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:19.176" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:19.176" endtime="20211011 05:28:19.176"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:19.177" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:19.176" endtime="20211011 05:28:19.177"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:19.177" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:19.177" endtime="20211011 05:28:19.177"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:19.179" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:19.179" level="INFO">${version_file_contents} = #Mon Oct 11 05:27:00 UTC 2021
cTime=1633929524327
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
nodeType=SCM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c22
layoutVersion=2
</msg>
<status status="PASS" starttime="20211011 05:28:19.178" endtime="20211011 05:28:19.179"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:19.180" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211011 05:28:19.179" endtime="20211011 05:28:19.180"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:19.180" endtime="20211011 05:28:19.180"/>
</kw>
<status status="PASS" starttime="20211011 05:28:19.178" endtime="20211011 05:28:19.181"/>
</kw>
<status status="PASS" starttime="20211011 05:28:19.178" endtime="20211011 05:28:19.181"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:19.174" endtime="20211011 05:28:19.181"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:19.119" endtime="20211011 05:28:19.182"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s8-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:29:05.847" level="INFO">${random} = 35512</msg>
<status status="PASS" starttime="20211011 05:29:05.847" endtime="20211011 05:29:05.847"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:29:05.853" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-35512 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:29:10.438" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:29:10.438" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:05.849" endtime="20211011 05:29:10.438"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:29:10.440" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:10.439" endtime="20211011 05:29:10.440"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:29:10.441" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:29:10.440" endtime="20211011 05:29:10.441"/>
</kw>
<status status="PASS" starttime="20211011 05:29:05.849" endtime="20211011 05:29:10.441"/>
</kw>
<msg timestamp="20211011 05:29:10.441" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:29:05.849" endtime="20211011 05:29:10.441"/>
</kw>
<msg timestamp="20211011 05:29:10.442" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:05.848" endtime="20211011 05:29:10.442"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:29:10.442" endtime="20211011 05:29:10.442"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:29:05.846" endtime="20211011 05:29:10.442"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:29:05.790" endtime="20211011 05:29:10.444"/>
</suite>
<suite id="s1-s9" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s9-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:29:14.573" level="INFO">Running command 'ozone sh volume create new2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:29:17.581" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:29:17.581" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:14.569" endtime="20211011 05:29:17.581"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:29:17.582" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:17.581" endtime="20211011 05:29:17.583"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:29:17.583" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:29:17.583" endtime="20211011 05:29:17.583"/>
</kw>
<status status="PASS" starttime="20211011 05:29:14.569" endtime="20211011 05:29:17.593"/>
</kw>
<msg timestamp="20211011 05:29:17.593" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:29:14.569" endtime="20211011 05:29:17.593"/>
</kw>
<msg timestamp="20211011 05:29:17.593" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:14.568" endtime="20211011 05:29:17.593"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:29:17.594" endtime="20211011 05:29:17.595"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:29:17.609" level="INFO">Running command 'ozone sh bucket create /new2-volume/new2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:29:20.449" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:29:20.449" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:17.597" endtime="20211011 05:29:20.449"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:29:20.451" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:20.450" endtime="20211011 05:29:20.451"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:29:20.451" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:29:20.451" endtime="20211011 05:29:20.452"/>
</kw>
<status status="PASS" starttime="20211011 05:29:17.596" endtime="20211011 05:29:20.452"/>
</kw>
<msg timestamp="20211011 05:29:20.452" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:29:17.596" endtime="20211011 05:29:20.452"/>
</kw>
<msg timestamp="20211011 05:29:20.452" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:17.595" endtime="20211011 05:29:20.452"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:29:20.453" endtime="20211011 05:29:20.453"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:29:20.457" level="INFO">Running command 'ozone sh key put /new2-volume/new2-bucket/new2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:29:25.801" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:29:25.801" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:20.455" endtime="20211011 05:29:25.801"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:29:25.802" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:25.801" endtime="20211011 05:29:25.802"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:29:25.803" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:29:25.802" endtime="20211011 05:29:25.803"/>
</kw>
<status status="PASS" starttime="20211011 05:29:20.454" endtime="20211011 05:29:25.803"/>
</kw>
<msg timestamp="20211011 05:29:25.803" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:29:20.454" endtime="20211011 05:29:25.804"/>
</kw>
<msg timestamp="20211011 05:29:25.804" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:20.453" endtime="20211011 05:29:25.804"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:29:25.804" endtime="20211011 05:29:25.805"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:29:14.567" endtime="20211011 05:29:25.805"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211011 05:29:14.512" endtime="20211011 05:29:25.806"/>
</suite>
<suite id="s1-s10" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s10-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:29:29.814" level="INFO">${random} = 46061</msg>
<status status="PASS" starttime="20211011 05:29:29.813" endtime="20211011 05:29:29.814"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:29:29.820" level="INFO">Running command 'ozone sh key get /new2-volume/new2-bucket/new2-key /tmp/key-46061 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:29:35.256" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:29:35.256" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:29.816" endtime="20211011 05:29:35.256"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:29:35.258" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:35.257" endtime="20211011 05:29:35.258"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:29:35.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:29:35.258" endtime="20211011 05:29:35.259"/>
</kw>
<status status="PASS" starttime="20211011 05:29:29.815" endtime="20211011 05:29:35.259"/>
</kw>
<msg timestamp="20211011 05:29:35.259" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:29:29.815" endtime="20211011 05:29:35.259"/>
</kw>
<msg timestamp="20211011 05:29:35.259" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:29.814" endtime="20211011 05:29:35.260"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:29:35.260" endtime="20211011 05:29:35.260"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:29:29.812" endtime="20211011 05:29:35.260"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:29:29.755" endtime="20211011 05:29:35.262"/>
</suite>
<suite id="s1-s11" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s11-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:23.277" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211011 05:28:23.277" endtime="20211011 05:28:23.277"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:23.278" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:23.278" endtime="20211011 05:28:23.278"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:23.279" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:23.278" endtime="20211011 05:28:23.279"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:23.279" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:23.279" endtime="20211011 05:28:23.279"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:23.281" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:23.281" level="INFO">${version_file_contents} = #Mon Oct 11 05:27:11 UTC 2021
cTime=1633929641331
clusterID=8f81ebc4-fce2-4412-b9d3-7cdd711a25f3
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211011 05:28:23.280" endtime="20211011 05:28:23.281"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:23.282" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211011 05:28:23.281" endtime="20211011 05:28:23.282"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:23.282" endtime="20211011 05:28:23.282"/>
</kw>
<status status="PASS" starttime="20211011 05:28:23.280" endtime="20211011 05:28:23.282"/>
</kw>
<status status="PASS" starttime="20211011 05:28:23.279" endtime="20211011 05:28:23.283"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:23.276" endtime="20211011 05:28:23.283"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:23.221" endtime="20211011 05:28:23.283"/>
</suite>
<suite id="s1-s12" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s12-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:27.485" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211011 05:28:27.484" endtime="20211011 05:28:27.485"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:27.486" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:27.485" endtime="20211011 05:28:27.486"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:27.486" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:27.486" endtime="20211011 05:28:27.487"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:27.487" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:27.487" endtime="20211011 05:28:27.487"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:27.489" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:27.489" level="INFO">${version_file_contents} = #Mon Oct 11 05:27:21 UTC 2021
cTime=1633929659081
clusterID=03730c7a-875b-44c2-ba7a-2f8985774978
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211011 05:28:27.488" endtime="20211011 05:28:27.489"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:27.490" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211011 05:28:27.489" endtime="20211011 05:28:27.490"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:27.490" endtime="20211011 05:28:27.491"/>
</kw>
<status status="PASS" starttime="20211011 05:28:27.488" endtime="20211011 05:28:27.491"/>
</kw>
<status status="PASS" starttime="20211011 05:28:27.487" endtime="20211011 05:28:27.491"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:27.483" endtime="20211011 05:28:27.491"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:27.414" endtime="20211011 05:28:27.493"/>
</suite>
<suite id="s1-s13" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s13-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:31.900" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211011 05:28:31.899" endtime="20211011 05:28:31.900"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:31.901" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:31.900" endtime="20211011 05:28:31.901"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:31.901" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:31.901" endtime="20211011 05:28:31.901"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:31.902" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:31.902" endtime="20211011 05:28:31.902"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:31.904" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:31.904" level="INFO">${version_file_contents} = #Mon Oct 11 05:27:01 UTC 2021
cTime=1633929660046
clusterID=df3f3f7a-7111-413a-b2d9-caac0195515b
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211011 05:28:31.903" endtime="20211011 05:28:31.904"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:31.905" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211011 05:28:31.904" endtime="20211011 05:28:31.905"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:31.905" endtime="20211011 05:28:31.905"/>
</kw>
<status status="PASS" starttime="20211011 05:28:31.903" endtime="20211011 05:28:31.905"/>
</kw>
<status status="PASS" starttime="20211011 05:28:31.902" endtime="20211011 05:28:31.906"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:31.898" endtime="20211011 05:28:31.906"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:31.837" endtime="20211011 05:28:31.907"/>
</suite>
<suite id="s1-s14" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s14-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:36.070" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211011 05:28:36.069" endtime="20211011 05:28:36.070"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:36.071" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:36.071" endtime="20211011 05:28:36.071"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:36.072" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:36.071" endtime="20211011 05:28:36.072"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:36.072" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:36.072" endtime="20211011 05:28:36.072"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:36.074" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:36.074" level="INFO">${version_file_contents} = #Mon Oct 11 05:19:12 UTC 2021
cTime=1633929531433
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
omUuid=4438a288-f403-413a-9aa2-275123e943c7
nodeType=OM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c2...</msg>
<status status="PASS" starttime="20211011 05:28:36.073" endtime="20211011 05:28:36.074"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:36.075" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:28:36.074" endtime="20211011 05:28:36.075"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:36.075" endtime="20211011 05:28:36.076"/>
</kw>
<status status="PASS" starttime="20211011 05:28:36.073" endtime="20211011 05:28:36.076"/>
</kw>
<status status="PASS" starttime="20211011 05:28:36.073" endtime="20211011 05:28:36.076"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:36.068" endtime="20211011 05:28:36.076"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:36.011" endtime="20211011 05:28:36.077"/>
</suite>
<suite id="s1-s15" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s15-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:40.203" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211011 05:28:40.203" endtime="20211011 05:28:40.203"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:40.204" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:40.204" endtime="20211011 05:28:40.204"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:40.205" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:40.204" endtime="20211011 05:28:40.205"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:40.205" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:40.205" endtime="20211011 05:28:40.205"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:40.207" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:40.207" level="INFO">${version_file_contents} = #Mon Oct 11 05:19:12 UTC 2021
cTime=1633929531721
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
omUuid=c030c3bc-e689-4f36-b9b7-9355d1bf5ab9
nodeType=OM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c2...</msg>
<status status="PASS" starttime="20211011 05:28:40.206" endtime="20211011 05:28:40.207"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:40.208" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:28:40.207" endtime="20211011 05:28:40.208"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:40.208" endtime="20211011 05:28:40.208"/>
</kw>
<status status="PASS" starttime="20211011 05:28:40.206" endtime="20211011 05:28:40.208"/>
</kw>
<status status="PASS" starttime="20211011 05:28:40.206" endtime="20211011 05:28:40.209"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:40.202" endtime="20211011 05:28:40.209"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:40.146" endtime="20211011 05:28:40.209"/>
</suite>
<suite id="s1-s16" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s16-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:44.300" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211011 05:28:44.299" endtime="20211011 05:28:44.300"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:28:44.300" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:28:44.300" endtime="20211011 05:28:44.300"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:28:44.301" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:28:44.300" endtime="20211011 05:28:44.301"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:28:44.301" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211011 05:28:44.301" endtime="20211011 05:28:44.302"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:28:44.303" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:28:44.303" level="INFO">${version_file_contents} = #Mon Oct 11 05:19:12 UTC 2021
cTime=1633929529224
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
omUuid=8a25b2c2-054b-4bf1-a4c6-e8a4754821ac
nodeType=OM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c2...</msg>
<status status="PASS" starttime="20211011 05:28:44.303" endtime="20211011 05:28:44.303"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:28:44.304" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:28:44.303" endtime="20211011 05:28:44.304"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:44.304" endtime="20211011 05:28:44.305"/>
</kw>
<status status="PASS" starttime="20211011 05:28:44.302" endtime="20211011 05:28:44.305"/>
</kw>
<status status="PASS" starttime="20211011 05:28:44.302" endtime="20211011 05:28:44.305"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:44.298" endtime="20211011 05:28:44.305"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:28:44.243" endtime="20211011 05:28:44.306"/>
</suite>
<suite id="s1-s17" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s17-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:28:48.461" level="INFO">${random} = 32789</msg>
<status status="PASS" starttime="20211011 05:28:48.460" endtime="20211011 05:28:48.461"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:28:48.467" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-32789 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:28:52.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:28:52.994" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:28:48.463" endtime="20211011 05:28:52.994"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:28:52.996" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:28:52.995" endtime="20211011 05:28:52.996"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:28:52.996" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:28:52.996" endtime="20211011 05:28:52.997"/>
</kw>
<status status="PASS" starttime="20211011 05:28:48.462" endtime="20211011 05:28:52.997"/>
</kw>
<msg timestamp="20211011 05:28:52.997" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:28:48.462" endtime="20211011 05:28:52.997"/>
</kw>
<msg timestamp="20211011 05:28:52.997" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:28:48.461" endtime="20211011 05:28:52.997"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:28:52.998" endtime="20211011 05:28:52.998"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:48.460" endtime="20211011 05:28:52.998"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:28:48.405" endtime="20211011 05:28:53.000"/>
</suite>
<suite id="s1-s18" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s18-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:28:57.002" level="INFO">${random} = 11067</msg>
<status status="PASS" starttime="20211011 05:28:57.002" endtime="20211011 05:28:57.003"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:28:57.009" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-11067 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:29:01.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:29:01.662" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:28:57.005" endtime="20211011 05:29:01.662"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:29:01.664" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:29:01.663" endtime="20211011 05:29:01.664"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:29:01.664" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:29:01.664" endtime="20211011 05:29:01.665"/>
</kw>
<status status="PASS" starttime="20211011 05:28:57.004" endtime="20211011 05:29:01.665"/>
</kw>
<msg timestamp="20211011 05:29:01.665" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:28:57.004" endtime="20211011 05:29:01.665"/>
</kw>
<msg timestamp="20211011 05:29:01.665" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:28:57.003" endtime="20211011 05:29:01.665"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:29:01.666" endtime="20211011 05:29:01.666"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:57.001" endtime="20211011 05:29:01.666"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:28:56.946" endtime="20211011 05:29:01.668"/>
</suite>
<suite id="s1-s19" name="Finalize" source="/opt/hadoop/smoketest/upgrade/finalize.robot">
<test id="s1-s19-t1" name="Finalize SCM">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20211011 05:26:52.749" endtime="20211011 05:26:52.750"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm finalizeupgrade</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:26:52.760" level="INFO">Running command 'ozone admin scm finalizeupgrade 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:28:11.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:28:11.448" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed d...</msg>
<status status="PASS" starttime="20211011 05:26:52.752" endtime="20211011 05:28:11.448"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:28:11.449" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20211011 05:28:11.448" endtime="20211011 05:28:11.449"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:28:11.450" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:28:11.450" endtime="20211011 05:28:11.450"/>
</kw>
<status status="PASS" starttime="20211011 05:26:52.751" endtime="20211011 05:28:11.451"/>
</kw>
<msg timestamp="20211011 05:28:11.451" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:26:52.751" endtime="20211011 05:28:11.451"/>
</kw>
<msg timestamp="20211011 05:28:11.451" level="INFO">${result} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed d...</msg>
<status status="PASS" starttime="20211011 05:26:52.750" endtime="20211011 05:28:11.451"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:28:11.452" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20211011 05:28:11.451" endtime="20211011 05:28:11.452"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:26:52.748" endtime="20211011 05:28:11.452"/>
</test>
<test id="s1-s19-t2" name="Finalize OMs">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20211011 05:28:11.453" endtime="20211011 05:28:11.454"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om finalizeupgrade -id %{OM_SERVICE_ID}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:28:11.458" level="INFO">Running command 'ozone admin om finalizeupgrade -id omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:28:14.989" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:28:14.989" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211011 05:28:11.456" endtime="20211011 05:28:14.989"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:28:14.990" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211011 05:28:14.989" endtime="20211011 05:28:14.991"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:28:14.991" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:28:14.991" endtime="20211011 05:28:14.991"/>
</kw>
<status status="PASS" starttime="20211011 05:28:11.455" endtime="20211011 05:28:14.992"/>
</kw>
<msg timestamp="20211011 05:28:14.992" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:28:11.455" endtime="20211011 05:28:14.992"/>
</kw>
<msg timestamp="20211011 05:28:14.992" level="INFO">${result} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211011 05:28:11.454" endtime="20211011 05:28:14.992"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:28:14.993" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211011 05:28:14.993" endtime="20211011 05:28:14.993"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:28:11.453" endtime="20211011 05:28:14.993"/>
</test>
<doc>Finalize Upgrade of OMs and SCM</doc>
<status status="PASS" starttime="20211011 05:26:52.693" endtime="20211011 05:28:14.995"/>
</suite>
<suite id="s1-s20" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s20-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:21:59.193" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211011 05:21:59.192" endtime="20211011 05:21:59.193"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:21:59.194" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:21:59.193" endtime="20211011 05:21:59.194"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:21:59.195" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:21:59.195" endtime="20211011 05:21:59.195"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:21:59.196" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211011 05:21:59.195" endtime="20211011 05:21:59.196"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:21:59.198" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:21:59.198" level="INFO">${version_file_contents} = #Mon Oct 11 05:20:41 UTC 2021
cTime=1633929641331
clusterID=8f81ebc4-fce2-4412-b9d3-7cdd711a25f3
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211011 05:21:59.197" endtime="20211011 05:21:59.199"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:21:59.199" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:21:59.199" endtime="20211011 05:21:59.199"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:21:59.199" endtime="20211011 05:21:59.200"/>
</kw>
<status status="PASS" starttime="20211011 05:21:59.197" endtime="20211011 05:21:59.200"/>
</kw>
<status status="PASS" starttime="20211011 05:21:59.196" endtime="20211011 05:21:59.200"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:21:59.190" endtime="20211011 05:21:59.201"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:21:59.136" endtime="20211011 05:21:59.203"/>
</suite>
<suite id="s1-s21" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s21-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:03.235" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211011 05:22:03.234" endtime="20211011 05:22:03.235"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:03.236" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:22:03.235" endtime="20211011 05:22:03.236"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:22:03.237" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:22:03.236" endtime="20211011 05:22:03.237"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:22:03.237" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211011 05:22:03.237" endtime="20211011 05:22:03.237"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:22:03.239" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:22:03.239" level="INFO">${version_file_contents} = #Mon Oct 11 05:20:59 UTC 2021
cTime=1633929659081
clusterID=03730c7a-875b-44c2-ba7a-2f8985774978
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211011 05:22:03.238" endtime="20211011 05:22:03.239"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:22:03.240" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:22:03.239" endtime="20211011 05:22:03.240"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:03.240" endtime="20211011 05:22:03.240"/>
</kw>
<status status="PASS" starttime="20211011 05:22:03.238" endtime="20211011 05:22:03.240"/>
</kw>
<status status="PASS" starttime="20211011 05:22:03.237" endtime="20211011 05:22:03.240"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:03.234" endtime="20211011 05:22:03.241"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:22:03.179" endtime="20211011 05:22:03.241"/>
</suite>
<suite id="s1-s22" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s22-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:07.380" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211011 05:22:07.379" endtime="20211011 05:22:07.380"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:07.381" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:22:07.380" endtime="20211011 05:22:07.381"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:22:07.381" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:22:07.381" endtime="20211011 05:22:07.381"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:22:07.382" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211011 05:22:07.382" endtime="20211011 05:22:07.382"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:22:07.384" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:22:07.384" level="INFO">${version_file_contents} = #Mon Oct 11 05:21:00 UTC 2021
cTime=1633929660046
clusterID=df3f3f7a-7111-413a-b2d9-caac0195515b
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211011 05:22:07.383" endtime="20211011 05:22:07.384"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:22:07.385" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:22:07.384" endtime="20211011 05:22:07.385"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:07.385" endtime="20211011 05:22:07.385"/>
</kw>
<status status="PASS" starttime="20211011 05:22:07.383" endtime="20211011 05:22:07.386"/>
</kw>
<status status="PASS" starttime="20211011 05:22:07.382" endtime="20211011 05:22:07.386"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:07.378" endtime="20211011 05:22:07.386"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:22:07.319" endtime="20211011 05:22:07.387"/>
</suite>
<suite id="s1-s23" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s23-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:11.442" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211011 05:22:11.442" endtime="20211011 05:22:11.442"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:11.443" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:22:11.443" endtime="20211011 05:22:11.443"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:22:11.444" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:22:11.443" endtime="20211011 05:22:11.444"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:22:11.444" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211011 05:22:11.444" endtime="20211011 05:22:11.444"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:22:11.446" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:22:11.446" level="INFO">${version_file_contents} = #Mon Oct 11 05:19:12 UTC 2021
cTime=1633929531433
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
omUuid=4438a288-f403-413a-9aa2-275123e943c7
nodeType=OM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c2...</msg>
<status status="PASS" starttime="20211011 05:22:11.445" endtime="20211011 05:22:11.446"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:22:11.447" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:22:11.446" endtime="20211011 05:22:11.447"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:11.447" endtime="20211011 05:22:11.447"/>
</kw>
<status status="PASS" starttime="20211011 05:22:11.445" endtime="20211011 05:22:11.448"/>
</kw>
<status status="PASS" starttime="20211011 05:22:11.445" endtime="20211011 05:22:11.448"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:11.441" endtime="20211011 05:22:11.448"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:22:11.386" endtime="20211011 05:22:11.448"/>
</suite>
<suite id="s1-s24" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s24-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:15.483" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211011 05:22:15.483" endtime="20211011 05:22:15.484"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:15.484" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:22:15.484" endtime="20211011 05:22:15.484"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:22:15.485" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:22:15.484" endtime="20211011 05:22:15.485"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:22:15.486" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211011 05:22:15.485" endtime="20211011 05:22:15.486"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:22:15.487" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:22:15.488" level="INFO">${version_file_contents} = #Mon Oct 11 05:19:12 UTC 2021
cTime=1633929531721
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
omUuid=c030c3bc-e689-4f36-b9b7-9355d1bf5ab9
nodeType=OM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c2...</msg>
<status status="PASS" starttime="20211011 05:22:15.487" endtime="20211011 05:22:15.488"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:22:15.488" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:22:15.488" endtime="20211011 05:22:15.488"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:15.489" endtime="20211011 05:22:15.489"/>
</kw>
<status status="PASS" starttime="20211011 05:22:15.486" endtime="20211011 05:22:15.489"/>
</kw>
<status status="PASS" starttime="20211011 05:22:15.486" endtime="20211011 05:22:15.489"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:15.482" endtime="20211011 05:22:15.490"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:22:15.425" endtime="20211011 05:22:15.490"/>
</suite>
<suite id="s1-s25" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s25-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:19.628" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211011 05:22:19.627" endtime="20211011 05:22:19.628"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:22:19.628" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:22:19.628" endtime="20211011 05:22:19.628"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:22:19.629" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:22:19.629" endtime="20211011 05:22:19.629"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:22:19.630" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211011 05:22:19.629" endtime="20211011 05:22:19.630"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:22:19.631" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:22:19.631" level="INFO">${version_file_contents} = #Mon Oct 11 05:19:12 UTC 2021
cTime=1633929529224
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
omUuid=8a25b2c2-054b-4bf1-a4c6-e8a4754821ac
nodeType=OM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c2...</msg>
<status status="PASS" starttime="20211011 05:22:19.631" endtime="20211011 05:22:19.631"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:22:19.632" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:22:19.631" endtime="20211011 05:22:19.632"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:19.632" endtime="20211011 05:22:19.633"/>
</kw>
<status status="PASS" starttime="20211011 05:22:19.630" endtime="20211011 05:22:19.633"/>
</kw>
<status status="PASS" starttime="20211011 05:22:19.630" endtime="20211011 05:22:19.633"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:19.626" endtime="20211011 05:22:19.633"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:22:19.570" endtime="20211011 05:22:19.634"/>
</suite>
<suite id="s1-s26" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s26-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:22:23.602" level="INFO">${random} = 88022</msg>
<status status="PASS" starttime="20211011 05:22:23.602" endtime="20211011 05:22:23.602"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:22:23.609" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-88022 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:22:28.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:22:28.459" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:23.604" endtime="20211011 05:22:28.459"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:22:28.461" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:28.460" endtime="20211011 05:22:28.461"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:22:28.462" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:22:28.461" endtime="20211011 05:22:28.462"/>
</kw>
<status status="PASS" starttime="20211011 05:22:23.604" endtime="20211011 05:22:28.462"/>
</kw>
<msg timestamp="20211011 05:22:28.462" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:22:23.603" endtime="20211011 05:22:28.463"/>
</kw>
<msg timestamp="20211011 05:22:28.463" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:23.602" endtime="20211011 05:22:28.463"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:28.463" endtime="20211011 05:22:28.463"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:23.601" endtime="20211011 05:22:28.464"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:22:23.546" endtime="20211011 05:22:28.466"/>
</suite>
<suite id="s1-s27" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s27-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:22:32.601" level="INFO">Running command 'ozone sh volume create new1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:22:35.585" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:22:35.585" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:32.597" endtime="20211011 05:22:35.585"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:22:35.586" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:35.585" endtime="20211011 05:22:35.586"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:22:35.587" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:22:35.587" endtime="20211011 05:22:35.587"/>
</kw>
<status status="PASS" starttime="20211011 05:22:32.597" endtime="20211011 05:22:35.588"/>
</kw>
<msg timestamp="20211011 05:22:35.588" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:22:32.596" endtime="20211011 05:22:35.588"/>
</kw>
<msg timestamp="20211011 05:22:35.588" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:32.595" endtime="20211011 05:22:35.588"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:35.588" endtime="20211011 05:22:35.589"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:22:35.597" level="INFO">Running command 'ozone sh bucket create /new1-volume/new1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:22:38.557" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:22:38.557" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:35.592" endtime="20211011 05:22:38.557"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:22:38.558" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:38.557" endtime="20211011 05:22:38.558"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:22:38.559" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:22:38.558" endtime="20211011 05:22:38.559"/>
</kw>
<status status="PASS" starttime="20211011 05:22:35.590" endtime="20211011 05:22:38.559"/>
</kw>
<msg timestamp="20211011 05:22:38.559" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:22:35.590" endtime="20211011 05:22:38.559"/>
</kw>
<msg timestamp="20211011 05:22:38.562" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:35.589" endtime="20211011 05:22:38.562"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:38.563" endtime="20211011 05:22:38.563"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:22:38.568" level="INFO">Running command 'ozone sh key put /new1-volume/new1-bucket/new1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:22:43.889" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:22:43.889" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:38.565" endtime="20211011 05:22:43.889"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:22:43.891" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:43.890" endtime="20211011 05:22:43.891"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:22:43.892" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:22:43.891" endtime="20211011 05:22:43.892"/>
</kw>
<status status="PASS" starttime="20211011 05:22:38.565" endtime="20211011 05:22:43.892"/>
</kw>
<msg timestamp="20211011 05:22:43.892" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:22:38.564" endtime="20211011 05:22:43.892"/>
</kw>
<msg timestamp="20211011 05:22:43.892" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:38.563" endtime="20211011 05:22:43.893"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:43.893" endtime="20211011 05:22:43.893"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:32.594" endtime="20211011 05:22:43.894"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211011 05:22:32.539" endtime="20211011 05:22:43.895"/>
</suite>
<suite id="s1-s28" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s28-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211011 05:22:47.906" level="INFO">${random} = 74043</msg>
<status status="PASS" starttime="20211011 05:22:47.906" endtime="20211011 05:22:47.906"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211011 05:22:47.912" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-74043 2&gt;&amp;1'.</msg>
<msg timestamp="20211011 05:22:52.509" level="INFO">${rc} = 0</msg>
<msg timestamp="20211011 05:22:52.510" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:47.909" endtime="20211011 05:22:52.510"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211011 05:22:52.511" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:52.510" endtime="20211011 05:22:52.511"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211011 05:22:52.512" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211011 05:22:52.511" endtime="20211011 05:22:52.512"/>
</kw>
<status status="PASS" starttime="20211011 05:22:47.908" endtime="20211011 05:22:52.512"/>
</kw>
<msg timestamp="20211011 05:22:52.512" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211011 05:22:47.908" endtime="20211011 05:22:52.512"/>
</kw>
<msg timestamp="20211011 05:22:52.513" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211011 05:22:47.907" endtime="20211011 05:22:52.513"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:22:52.513" endtime="20211011 05:22:52.513"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:22:47.905" endtime="20211011 05:22:52.514"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211011 05:22:47.850" endtime="20211011 05:22:52.515"/>
</suite>
<suite id="s1-s29" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s29-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:21:55.097" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20211011 05:21:55.097" endtime="20211011 05:21:55.098"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211011 05:21:55.098" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211011 05:21:55.098" endtime="20211011 05:21:55.098"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211011 05:21:55.099" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211011 05:21:55.098" endtime="20211011 05:21:55.099"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211011 05:21:55.099" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20211011 05:21:55.099" endtime="20211011 05:21:55.099"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211011 05:21:55.101" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211011 05:21:55.101" level="INFO">${version_file_contents} = #Mon Oct 11 05:18:44 UTC 2021
cTime=1633929524327
clusterID=CID-b32fbcbf-b3a4-42c4-bb90-5c23247b82e0
nodeType=SCM
scmUuid=43c30977-666a-4a5f-81ef-2d80a58a3c22
layoutVersion=0
</msg>
<status status="PASS" starttime="20211011 05:21:55.100" endtime="20211011 05:21:55.101"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211011 05:21:55.102" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211011 05:21:55.101" endtime="20211011 05:21:55.102"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211011 05:21:55.102" endtime="20211011 05:21:55.102"/>
</kw>
<status status="PASS" starttime="20211011 05:21:55.100" endtime="20211011 05:21:55.103"/>
</kw>
<status status="PASS" starttime="20211011 05:21:55.100" endtime="20211011 05:21:55.103"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211011 05:21:55.095" endtime="20211011 05:21:55.103"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211011 05:21:55.039" endtime="20211011 05:21:55.104"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="176419"/>
</suite>
<statistics>
<total>
<stat pass="30" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="30" fail="0" skip="0" id="s1" name="upgrade">upgrade</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s11" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s12" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s13" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s14" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s15" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s16" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s17" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s18" name="Validate">upgrade.Validate</stat>
<stat pass="2" fail="0" skip="0" id="s1-s19" name="Finalize">upgrade.Finalize</stat>
<stat pass="1" fail="0" skip="0" id="s1-s20" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s21" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s22" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s23" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s24" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s25" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s26" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s27" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s28" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s29" name="Check-Mlv">upgrade.Check-Mlv</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
