<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 4.1.2 (Python 3.6.9 on linux)" generated="20211020 19:57:29.345" rpa="false" schemaversion="2">
<suite id="s1" name="upgrade">
<suite id="s1-s1" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s1-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:47:09.625" level="INFO">${random} = 39877</msg>
<status status="PASS" starttime="20211020 19:47:09.624" endtime="20211020 19:47:09.625"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:47:09.632" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-39877 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:47:15.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:47:15.405" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:47:09.628" endtime="20211020 19:47:15.405"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:47:15.407" level="INFO"/>
<status status="PASS" starttime="20211020 19:47:15.406" endtime="20211020 19:47:15.407"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:47:15.408" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:47:15.407" endtime="20211020 19:47:15.408"/>
</kw>
<status status="PASS" starttime="20211020 19:47:09.627" endtime="20211020 19:47:15.408"/>
</kw>
<msg timestamp="20211020 19:47:15.408" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:47:09.627" endtime="20211020 19:47:15.408"/>
</kw>
<msg timestamp="20211020 19:47:15.409" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:47:09.625" endtime="20211020 19:47:15.409"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:47:15.409" endtime="20211020 19:47:15.410"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:47:09.623" endtime="20211020 19:47:15.410"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:47:09.547" endtime="20211020 19:47:15.411"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s2-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:51:59.834" level="INFO">${random} = 87906</msg>
<status status="PASS" starttime="20211020 19:51:59.833" endtime="20211020 19:51:59.834"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:51:59.841" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-87906 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:52:05.635" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:52:05.635" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:51:59.836" endtime="20211020 19:52:05.635"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:52:05.636" level="INFO"/>
<status status="PASS" starttime="20211020 19:52:05.635" endtime="20211020 19:52:05.636"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:52:05.637" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:52:05.636" endtime="20211020 19:52:05.637"/>
</kw>
<status status="PASS" starttime="20211020 19:51:59.835" endtime="20211020 19:52:05.637"/>
</kw>
<msg timestamp="20211020 19:52:05.638" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:51:59.835" endtime="20211020 19:52:05.638"/>
</kw>
<msg timestamp="20211020 19:52:05.638" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:51:59.834" endtime="20211020 19:52:05.638"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:52:05.638" endtime="20211020 19:52:05.640"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:51:59.832" endtime="20211020 19:52:05.640"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:51:59.762" endtime="20211020 19:52:05.642"/>
</suite>
<suite id="s1-s3" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s3-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:52:09.840" level="INFO">Running command 'ozone sh volume create old2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:52:12.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:52:12.556" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:09.836" endtime="20211020 19:52:12.556"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:52:12.558" level="INFO"/>
<status status="PASS" starttime="20211020 19:52:12.557" endtime="20211020 19:52:12.558"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:52:12.562" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:52:12.558" endtime="20211020 19:52:12.563"/>
</kw>
<status status="PASS" starttime="20211020 19:52:09.835" endtime="20211020 19:52:12.563"/>
</kw>
<msg timestamp="20211020 19:52:12.563" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:52:09.835" endtime="20211020 19:52:12.563"/>
</kw>
<msg timestamp="20211020 19:52:12.564" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:09.834" endtime="20211020 19:52:12.564"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:52:12.564" endtime="20211020 19:52:12.565"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:52:12.624" level="INFO">Running command 'ozone sh bucket create /old2-volume/old2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:52:15.867" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:52:15.867" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:12.609" endtime="20211020 19:52:15.867"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:52:15.868" level="INFO"/>
<status status="PASS" starttime="20211020 19:52:15.867" endtime="20211020 19:52:15.868"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:52:15.869" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:52:15.869" endtime="20211020 19:52:15.869"/>
</kw>
<status status="PASS" starttime="20211020 19:52:12.568" endtime="20211020 19:52:15.870"/>
</kw>
<msg timestamp="20211020 19:52:15.870" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:52:12.568" endtime="20211020 19:52:15.870"/>
</kw>
<msg timestamp="20211020 19:52:15.870" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:12.565" endtime="20211020 19:52:15.870"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:52:15.871" endtime="20211020 19:52:15.871"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:52:15.876" level="INFO">Running command 'ozone sh key put /old2-volume/old2-bucket/old2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:52:21.517" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:52:21.517" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:15.873" endtime="20211020 19:52:21.517"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:52:21.518" level="INFO"/>
<status status="PASS" starttime="20211020 19:52:21.517" endtime="20211020 19:52:21.518"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:52:21.519" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:52:21.519" endtime="20211020 19:52:21.519"/>
</kw>
<status status="PASS" starttime="20211020 19:52:15.873" endtime="20211020 19:52:21.520"/>
</kw>
<msg timestamp="20211020 19:52:21.520" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:52:15.872" endtime="20211020 19:52:21.520"/>
</kw>
<msg timestamp="20211020 19:52:21.520" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:15.871" endtime="20211020 19:52:21.520"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:52:21.521" endtime="20211020 19:52:21.521"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:52:09.832" endtime="20211020 19:52:21.521"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211020 19:52:09.765" endtime="20211020 19:52:21.523"/>
</suite>
<suite id="s1-s4" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s4-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:52:25.869" level="INFO">${random} = 97375</msg>
<status status="PASS" starttime="20211020 19:52:25.868" endtime="20211020 19:52:25.869"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:52:25.876" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-97375 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:52:30.550" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:52:30.550" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:25.871" endtime="20211020 19:52:30.550"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:52:30.552" level="INFO"/>
<status status="PASS" starttime="20211020 19:52:30.551" endtime="20211020 19:52:30.552"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:52:30.553" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:52:30.552" endtime="20211020 19:52:30.553"/>
</kw>
<status status="PASS" starttime="20211020 19:52:25.871" endtime="20211020 19:52:30.553"/>
</kw>
<msg timestamp="20211020 19:52:30.553" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:52:25.870" endtime="20211020 19:52:30.553"/>
</kw>
<msg timestamp="20211020 19:52:30.554" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:52:25.869" endtime="20211020 19:52:30.554"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:52:30.554" endtime="20211020 19:52:30.555"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:52:25.867" endtime="20211020 19:52:30.555"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:52:25.800" endtime="20211020 19:52:30.556"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/ozone/smoketest/upgrade/validate.robot">
<test id="s1-s5-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:51:50.447" level="INFO">${random} = 19008</msg>
<status status="PASS" starttime="20211020 19:51:50.446" endtime="20211020 19:51:50.447"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:51:50.453" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-19008 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:51:55.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:51:55.571" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:51:50.449" endtime="20211020 19:51:55.571"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:51:55.572" level="INFO"/>
<status status="PASS" starttime="20211020 19:51:55.571" endtime="20211020 19:51:55.572"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:51:55.573" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:51:55.572" endtime="20211020 19:51:55.573"/>
</kw>
<status status="PASS" starttime="20211020 19:51:50.448" endtime="20211020 19:51:55.573"/>
</kw>
<msg timestamp="20211020 19:51:55.574" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:51:50.448" endtime="20211020 19:51:55.574"/>
</kw>
<msg timestamp="20211020 19:51:55.574" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:51:50.447" endtime="20211020 19:51:55.574"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:51:55.574" endtime="20211020 19:51:55.575"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:51:50.445" endtime="20211020 19:51:55.575"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:51:50.376" endtime="20211020 19:51:55.577"/>
</suite>
<suite id="s1-s6" name="Generate" source="/opt/ozone/smoketest/upgrade/generate.robot">
<test id="s1-s6-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:46:51.941" level="INFO">Running command 'ozone sh volume create old1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:46:54.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:46:54.834" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:46:51.935" endtime="20211020 19:46:54.834"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:46:54.836" level="INFO"/>
<status status="PASS" starttime="20211020 19:46:54.835" endtime="20211020 19:46:54.836"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:46:54.837" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:46:54.836" endtime="20211020 19:46:54.837"/>
</kw>
<status status="PASS" starttime="20211020 19:46:51.934" endtime="20211020 19:46:54.840"/>
</kw>
<msg timestamp="20211020 19:46:54.840" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:46:51.934" endtime="20211020 19:46:54.840"/>
</kw>
<msg timestamp="20211020 19:46:54.841" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:46:51.933" endtime="20211020 19:46:54.841"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:46:54.841" endtime="20211020 19:46:54.841"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:46:54.855" level="INFO">Running command 'ozone sh bucket create /old1-volume/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:46:58.056" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:46:58.056" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:46:54.847" endtime="20211020 19:46:58.056"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:46:58.057" level="INFO"/>
<status status="PASS" starttime="20211020 19:46:58.056" endtime="20211020 19:46:58.057"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:46:58.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:46:58.058" endtime="20211020 19:46:58.058"/>
</kw>
<status status="PASS" starttime="20211020 19:46:54.846" endtime="20211020 19:46:58.059"/>
</kw>
<msg timestamp="20211020 19:46:58.059" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:46:54.845" endtime="20211020 19:46:58.059"/>
</kw>
<msg timestamp="20211020 19:46:58.059" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:46:54.844" endtime="20211020 19:46:58.059"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:46:58.060" endtime="20211020 19:46:58.060"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:46:58.065" level="INFO">Running command 'ozone sh key put /old1-volume/old1-bucket/old1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:47:05.281" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:47:05.281" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:46:58.062" endtime="20211020 19:47:05.281"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:47:05.282" level="INFO"/>
<status status="PASS" starttime="20211020 19:47:05.281" endtime="20211020 19:47:05.282"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:47:05.283" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:47:05.282" endtime="20211020 19:47:05.283"/>
</kw>
<status status="PASS" starttime="20211020 19:46:58.062" endtime="20211020 19:47:05.283"/>
</kw>
<msg timestamp="20211020 19:47:05.284" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:46:58.061" endtime="20211020 19:47:05.284"/>
</kw>
<msg timestamp="20211020 19:47:05.284" level="INFO">${output} = </msg>
<status status="PASS" starttime="20211020 19:46:58.060" endtime="20211020 19:47:05.284"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:47:05.284" endtime="20211020 19:47:05.285"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:46:51.932" endtime="20211020 19:47:05.285"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211020 19:46:51.864" endtime="20211020 19:47:05.286"/>
</suite>
<suite id="s1-s7" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s7-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:55:53.608" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20211020 19:55:53.607" endtime="20211020 19:55:53.608"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:55:53.609" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:55:53.608" endtime="20211020 19:55:53.609"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:55:53.610" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:55:53.609" endtime="20211020 19:55:53.610"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:55:53.610" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20211020 19:55:53.610" endtime="20211020 19:55:53.610"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:55:53.612" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:55:53.612" level="INFO">${version_file_contents} = #Wed Oct 20 19:54:29 UTC 2021
cTime=1634759140098
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
nodeType=SCM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0f
layoutVersion=2
</msg>
<status status="PASS" starttime="20211020 19:55:53.612" endtime="20211020 19:55:53.612"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:55:53.613" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211020 19:55:53.613" endtime="20211020 19:55:53.613"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:55:53.613" endtime="20211020 19:55:53.614"/>
</kw>
<status status="PASS" starttime="20211020 19:55:53.611" endtime="20211020 19:55:53.614"/>
</kw>
<status status="PASS" starttime="20211020 19:55:53.611" endtime="20211020 19:55:53.614"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:55:53.606" endtime="20211020 19:55:53.615"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:55:53.536" endtime="20211020 19:55:53.615"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s8-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:56:42.388" level="INFO">${random} = 54975</msg>
<status status="PASS" starttime="20211020 19:56:42.387" endtime="20211020 19:56:42.388"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:56:42.394" level="INFO">Running command 'ozone sh key get /old2-volume/old2-bucket/old2-key /tmp/key-54975 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:56:47.415" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:56:47.415" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:42.390" endtime="20211020 19:56:47.415"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:56:47.416" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:47.416" endtime="20211020 19:56:47.416"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:56:47.417" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:56:47.417" endtime="20211020 19:56:47.417"/>
</kw>
<status status="PASS" starttime="20211020 19:56:42.389" endtime="20211020 19:56:47.418"/>
</kw>
<msg timestamp="20211020 19:56:47.418" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:56:42.389" endtime="20211020 19:56:47.418"/>
</kw>
<msg timestamp="20211020 19:56:47.418" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:42.388" endtime="20211020 19:56:47.418"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:47.419" endtime="20211020 19:56:47.419"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:42.386" endtime="20211020 19:56:47.419"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:56:42.319" endtime="20211020 19:56:47.421"/>
</suite>
<suite id="s1-s9" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s9-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:56:51.570" level="INFO">Running command 'ozone sh volume create new2-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:56:54.496" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:56:54.496" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:51.566" endtime="20211020 19:56:54.496"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:56:54.497" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:54.496" endtime="20211020 19:56:54.497"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:56:54.498" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:56:54.497" endtime="20211020 19:56:54.498"/>
</kw>
<status status="PASS" starttime="20211020 19:56:51.566" endtime="20211020 19:56:54.499"/>
</kw>
<msg timestamp="20211020 19:56:54.499" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:56:51.565" endtime="20211020 19:56:54.499"/>
</kw>
<msg timestamp="20211020 19:56:54.499" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:51.564" endtime="20211020 19:56:54.499"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:54.500" endtime="20211020 19:56:54.500"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:56:54.521" level="INFO">Running command 'ozone sh bucket create /new2-volume/new2-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:56:57.805" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:56:57.805" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:54.505" endtime="20211020 19:56:57.806"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:56:57.807" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:57.806" endtime="20211020 19:56:57.808"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:56:57.808" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:56:57.808" endtime="20211020 19:56:57.808"/>
</kw>
<status status="PASS" starttime="20211020 19:56:54.505" endtime="20211020 19:56:57.809"/>
</kw>
<msg timestamp="20211020 19:56:57.809" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:56:54.503" endtime="20211020 19:56:57.809"/>
</kw>
<msg timestamp="20211020 19:56:57.809" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:54.500" endtime="20211020 19:56:57.809"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:57.810" endtime="20211020 19:56:57.810"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:56:57.815" level="INFO">Running command 'ozone sh key put /new2-volume/new2-bucket/new2-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:57:04.780" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:57:04.780" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:57.812" endtime="20211020 19:57:04.780"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:57:04.781" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:57:04.780" endtime="20211020 19:57:04.781"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:57:04.782" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:57:04.781" endtime="20211020 19:57:04.782"/>
</kw>
<status status="PASS" starttime="20211020 19:56:57.812" endtime="20211020 19:57:04.782"/>
</kw>
<msg timestamp="20211020 19:57:04.783" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:56:57.811" endtime="20211020 19:57:04.783"/>
</kw>
<msg timestamp="20211020 19:57:04.783" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:57.810" endtime="20211020 19:57:04.783"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:57:04.783" endtime="20211020 19:57:04.784"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:51.563" endtime="20211020 19:57:04.784"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211020 19:56:51.490" endtime="20211020 19:57:04.786"/>
</suite>
<suite id="s1-s10" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s10-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:57:09.099" level="INFO">${random} = 24422</msg>
<status status="PASS" starttime="20211020 19:57:09.098" endtime="20211020 19:57:09.099"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:57:09.107" level="INFO">Running command 'ozone sh key get /new2-volume/new2-bucket/new2-key /tmp/key-24422 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:57:13.905" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:57:13.905" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:57:09.101" endtime="20211020 19:57:13.905"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:57:13.906" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:57:13.906" endtime="20211020 19:57:13.906"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:57:13.907" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:57:13.907" endtime="20211020 19:57:13.907"/>
</kw>
<status status="PASS" starttime="20211020 19:57:09.101" endtime="20211020 19:57:13.908"/>
</kw>
<msg timestamp="20211020 19:57:13.908" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:57:09.100" endtime="20211020 19:57:13.908"/>
</kw>
<msg timestamp="20211020 19:57:13.908" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:57:09.099" endtime="20211020 19:57:13.908"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:57:13.909" endtime="20211020 19:57:13.909"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:57:09.097" endtime="20211020 19:57:13.909"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:57:09.027" endtime="20211020 19:57:13.911"/>
</suite>
<suite id="s1-s11" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s11-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:55:57.954" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211020 19:55:57.953" endtime="20211020 19:55:57.954"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:55:57.955" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:55:57.954" endtime="20211020 19:55:57.955"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:55:57.955" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:55:57.955" endtime="20211020 19:55:57.956"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:55:57.956" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211020 19:55:57.956" endtime="20211020 19:55:57.956"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:55:57.958" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:55:57.958" level="INFO">${version_file_contents} = #Wed Oct 20 19:54:38 UTC 2021
cTime=1634759286254
clusterID=2b1a79a4-1136-41dd-9ac3-f5ab67e656f7
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211020 19:55:57.957" endtime="20211020 19:55:57.958"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:55:57.959" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211020 19:55:57.958" endtime="20211020 19:55:57.959"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:55:57.959" endtime="20211020 19:55:57.960"/>
</kw>
<status status="PASS" starttime="20211020 19:55:57.957" endtime="20211020 19:55:57.960"/>
</kw>
<status status="PASS" starttime="20211020 19:55:57.956" endtime="20211020 19:55:57.960"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:55:57.952" endtime="20211020 19:55:57.960"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:55:57.883" endtime="20211020 19:55:57.961"/>
</suite>
<suite id="s1-s12" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s12-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:02.531" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211020 19:56:02.530" endtime="20211020 19:56:02.531"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:02.532" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:56:02.531" endtime="20211020 19:56:02.532"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:56:02.532" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:56:02.532" endtime="20211020 19:56:02.532"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:56:02.533" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211020 19:56:02.533" endtime="20211020 19:56:02.533"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:56:02.535" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:56:02.535" level="INFO">${version_file_contents} = #Wed Oct 20 19:54:42 UTC 2021
cTime=1634759285383
clusterID=b4f36403-d55b-4ccb-bca0-196518801172
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211020 19:56:02.534" endtime="20211020 19:56:02.535"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:56:02.536" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211020 19:56:02.535" endtime="20211020 19:56:02.536"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:02.536" endtime="20211020 19:56:02.537"/>
</kw>
<status status="PASS" starttime="20211020 19:56:02.534" endtime="20211020 19:56:02.537"/>
</kw>
<status status="PASS" starttime="20211020 19:56:02.533" endtime="20211020 19:56:02.537"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:02.529" endtime="20211020 19:56:02.537"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:56:02.462" endtime="20211020 19:56:02.538"/>
</suite>
<suite id="s1-s13" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s13-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:06.917" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211020 19:56:06.916" endtime="20211020 19:56:06.917"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:06.918" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:56:06.918" endtime="20211020 19:56:06.918"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:56:06.919" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:56:06.919" endtime="20211020 19:56:06.920"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:56:06.920" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211020 19:56:06.920" endtime="20211020 19:56:06.920"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:56:06.923" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:56:06.923" level="INFO">${version_file_contents} = #Wed Oct 20 19:54:59 UTC 2021
cTime=1634759285954
clusterID=e069cf96-6537-4108-b0e0-539adae179b6
nodeType=DATANODE
layoutVersion=2
</msg>
<status status="PASS" starttime="20211020 19:56:06.922" endtime="20211020 19:56:06.923"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:56:06.928" level="INFO">${version_line} = layoutVersion=2</msg>
<status status="PASS" starttime="20211020 19:56:06.923" endtime="20211020 19:56:06.928"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:06.928" endtime="20211020 19:56:06.929"/>
</kw>
<status status="PASS" starttime="20211020 19:56:06.921" endtime="20211020 19:56:06.929"/>
</kw>
<status status="PASS" starttime="20211020 19:56:06.921" endtime="20211020 19:56:06.929"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:06.915" endtime="20211020 19:56:06.929"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:56:06.840" endtime="20211020 19:56:06.931"/>
</suite>
<suite id="s1-s14" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s14-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:11.224" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211020 19:56:11.223" endtime="20211020 19:56:11.224"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:11.224" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:56:11.224" endtime="20211020 19:56:11.225"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:56:11.225" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:56:11.225" endtime="20211020 19:56:11.225"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:56:11.226" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211020 19:56:11.226" endtime="20211020 19:56:11.226"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:56:11.228" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:56:11.228" level="INFO">${version_file_contents} = #Wed Oct 20 19:46:08 UTC 2021
cTime=1634759143601
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
omUuid=f21a8da3-bf1c-448a-ac92-c48a55bd8533
nodeType=OM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0...</msg>
<status status="PASS" starttime="20211020 19:56:11.227" endtime="20211020 19:56:11.228"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:56:11.229" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:56:11.228" endtime="20211020 19:56:11.229"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:11.229" endtime="20211020 19:56:11.230"/>
</kw>
<status status="PASS" starttime="20211020 19:56:11.227" endtime="20211020 19:56:11.230"/>
</kw>
<status status="PASS" starttime="20211020 19:56:11.226" endtime="20211020 19:56:11.230"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:11.222" endtime="20211020 19:56:11.230"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:56:11.151" endtime="20211020 19:56:11.231"/>
</suite>
<suite id="s1-s15" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s15-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:15.503" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211020 19:56:15.502" endtime="20211020 19:56:15.503"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:15.504" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:56:15.503" endtime="20211020 19:56:15.504"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:56:15.505" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:56:15.504" endtime="20211020 19:56:15.505"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:56:15.505" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211020 19:56:15.505" endtime="20211020 19:56:15.505"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:56:15.507" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:56:15.507" level="INFO">${version_file_contents} = #Wed Oct 20 19:46:08 UTC 2021
cTime=1634759143029
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
omUuid=db9bd0c7-ff92-400f-b1f6-a1bb8e1b7feb
nodeType=OM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0...</msg>
<status status="PASS" starttime="20211020 19:56:15.506" endtime="20211020 19:56:15.507"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:56:15.508" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:56:15.507" endtime="20211020 19:56:15.508"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:15.508" endtime="20211020 19:56:15.509"/>
</kw>
<status status="PASS" starttime="20211020 19:56:15.506" endtime="20211020 19:56:15.509"/>
</kw>
<status status="PASS" starttime="20211020 19:56:15.506" endtime="20211020 19:56:15.509"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:15.501" endtime="20211020 19:56:15.509"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:56:15.434" endtime="20211020 19:56:15.510"/>
</suite>
<suite id="s1-s16" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s16-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:19.701" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211020 19:56:19.700" endtime="20211020 19:56:19.701"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:56:19.701" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:56:19.701" endtime="20211020 19:56:19.702"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:56:19.702" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:56:19.702" endtime="20211020 19:56:19.702"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:56:19.703" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211020 19:56:19.703" endtime="20211020 19:56:19.703"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:56:19.705" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:56:19.705" level="INFO">${version_file_contents} = #Wed Oct 20 19:46:08 UTC 2021
cTime=1634759144174
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
omUuid=c5be3817-7e73-41b6-8f88-e7beb8ff5949
nodeType=OM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0...</msg>
<status status="PASS" starttime="20211020 19:56:19.704" endtime="20211020 19:56:19.705"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:56:19.706" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:56:19.705" endtime="20211020 19:56:19.706"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:19.706" endtime="20211020 19:56:19.707"/>
</kw>
<status status="PASS" starttime="20211020 19:56:19.704" endtime="20211020 19:56:19.707"/>
</kw>
<status status="PASS" starttime="20211020 19:56:19.703" endtime="20211020 19:56:19.707"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:19.699" endtime="20211020 19:56:19.707"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:56:19.631" endtime="20211020 19:56:19.708"/>
</suite>
<suite id="s1-s17" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s17-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:56:23.909" level="INFO">${random} = 65946</msg>
<status status="PASS" starttime="20211020 19:56:23.908" endtime="20211020 19:56:23.909"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:56:23.916" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-65946 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:56:28.990" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:56:28.990" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:23.912" endtime="20211020 19:56:28.990"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:56:28.991" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:28.990" endtime="20211020 19:56:28.991"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:56:28.992" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:56:28.992" endtime="20211020 19:56:28.992"/>
</kw>
<status status="PASS" starttime="20211020 19:56:23.911" endtime="20211020 19:56:28.993"/>
</kw>
<msg timestamp="20211020 19:56:28.993" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:56:23.910" endtime="20211020 19:56:28.993"/>
</kw>
<msg timestamp="20211020 19:56:28.993" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:23.909" endtime="20211020 19:56:28.993"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:28.994" endtime="20211020 19:56:28.994"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:23.907" endtime="20211020 19:56:28.995"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:56:23.830" endtime="20211020 19:56:28.997"/>
</suite>
<suite id="s1-s18" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s18-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:56:33.072" level="INFO">${random} = 93924</msg>
<status status="PASS" starttime="20211020 19:56:33.071" endtime="20211020 19:56:33.072"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:56:33.079" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-93924 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:56:38.186" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:56:38.186" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:33.074" endtime="20211020 19:56:38.186"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:56:38.188" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:38.187" endtime="20211020 19:56:38.188"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:56:38.189" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:56:38.188" endtime="20211020 19:56:38.189"/>
</kw>
<status status="PASS" starttime="20211020 19:56:33.073" endtime="20211020 19:56:38.189"/>
</kw>
<msg timestamp="20211020 19:56:38.189" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:56:33.073" endtime="20211020 19:56:38.190"/>
</kw>
<msg timestamp="20211020 19:56:38.190" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:56:33.072" endtime="20211020 19:56:38.190"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:56:38.190" endtime="20211020 19:56:38.191"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:56:33.070" endtime="20211020 19:56:38.191"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:56:32.999" endtime="20211020 19:56:38.193"/>
</suite>
<suite id="s1-s19" name="Finalize" source="/opt/hadoop/smoketest/upgrade/finalize.robot">
<test id="s1-s19-t1" name="Finalize SCM">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20211020 19:54:21.775" endtime="20211020 19:54:21.776"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm finalizeupgrade</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:54:21.784" level="INFO">Running command 'ozone admin scm finalizeupgrade 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:55:45.567" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:55:45.567" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed d...</msg>
<status status="PASS" starttime="20211020 19:54:21.778" endtime="20211020 19:55:45.567"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:55:45.569" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20211020 19:55:45.567" endtime="20211020 19:55:45.569"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:55:45.576" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:55:45.575" endtime="20211020 19:55:45.576"/>
</kw>
<status status="PASS" starttime="20211020 19:54:21.777" endtime="20211020 19:55:45.577"/>
</kw>
<msg timestamp="20211020 19:55:45.577" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:54:21.777" endtime="20211020 19:55:45.577"/>
</kw>
<msg timestamp="20211020 19:55:45.580" level="INFO">${result} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed d...</msg>
<status status="PASS" starttime="20211020 19:54:21.776" endtime="20211020 19:55:45.580"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:55:45.581" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Finalization started.
  Existing pipelines and containers will be closed during Upgrade.
  New pipelines creation will remain frozen until Upgrade is finalized.
No onFinalize work defined for feature: SCM_HA.
Finalization is done.
Finalization is done.
Exiting...
Finalization of Storage Container Manager's metadata upgrade finished.</msg>
<status status="PASS" starttime="20211020 19:55:45.580" endtime="20211020 19:55:45.581"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:54:21.774" endtime="20211020 19:55:45.581"/>
</test>
<test id="s1-s19-t2" name="Finalize OMs">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20211020 19:55:45.586" endtime="20211020 19:55:45.587"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om finalizeupgrade -id %{OM_SERVICE_ID}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:55:45.600" level="INFO">Running command 'ozone admin om finalizeupgrade -id omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:55:49.313" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:55:49.313" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211020 19:55:45.597" endtime="20211020 19:55:49.313"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:55:49.314" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211020 19:55:49.313" endtime="20211020 19:55:49.314"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:55:49.315" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:55:49.314" endtime="20211020 19:55:49.315"/>
</kw>
<status status="PASS" starttime="20211020 19:55:45.596" endtime="20211020 19:55:49.316"/>
</kw>
<msg timestamp="20211020 19:55:49.316" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:55:45.596" endtime="20211020 19:55:49.316"/>
</kw>
<msg timestamp="20211020 19:55:49.317" level="INFO">${result} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211020 19:55:45.587" endtime="20211020 19:55:49.317"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:55:49.317" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.
Upgrade has already been finalized.
Exiting...</msg>
<status status="PASS" starttime="20211020 19:55:49.317" endtime="20211020 19:55:49.317"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:55:45.585" endtime="20211020 19:55:49.318"/>
</test>
<doc>Finalize Upgrade of OMs and SCM</doc>
<status status="PASS" starttime="20211020 19:54:21.704" endtime="20211020 19:55:49.320"/>
</suite>
<suite id="s1-s20" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s20-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:13.571" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211020 19:49:13.570" endtime="20211020 19:49:13.571"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:13.572" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:13.571" endtime="20211020 19:49:13.572"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:13.573" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:13.572" endtime="20211020 19:49:13.573"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:13.574" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:13.573" endtime="20211020 19:49:13.574"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:13.575" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:13.576" level="INFO">${version_file_contents} = #Wed Oct 20 19:48:06 UTC 2021
cTime=1634759286254
clusterID=2b1a79a4-1136-41dd-9ac3-f5ab67e656f7
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211020 19:49:13.575" endtime="20211020 19:49:13.576"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:13.576" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:13.576" endtime="20211020 19:49:13.576"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:13.577" endtime="20211020 19:49:13.577"/>
</kw>
<status status="PASS" starttime="20211020 19:49:13.574" endtime="20211020 19:49:13.577"/>
</kw>
<status status="PASS" starttime="20211020 19:49:13.574" endtime="20211020 19:49:13.577"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:13.569" endtime="20211020 19:49:13.578"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:13.500" endtime="20211020 19:49:13.579"/>
</suite>
<suite id="s1-s21" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s21-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:17.765" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211020 19:49:17.764" endtime="20211020 19:49:17.765"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:17.766" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:17.765" endtime="20211020 19:49:17.766"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:17.767" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:17.766" endtime="20211020 19:49:17.767"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:17.767" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:17.767" endtime="20211020 19:49:17.768"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:17.769" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:17.769" level="INFO">${version_file_contents} = #Wed Oct 20 19:48:05 UTC 2021
cTime=1634759285383
clusterID=b4f36403-d55b-4ccb-bca0-196518801172
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211020 19:49:17.769" endtime="20211020 19:49:17.769"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:17.770" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:17.770" endtime="20211020 19:49:17.770"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:17.770" endtime="20211020 19:49:17.771"/>
</kw>
<status status="PASS" starttime="20211020 19:49:17.768" endtime="20211020 19:49:17.771"/>
</kw>
<status status="PASS" starttime="20211020 19:49:17.768" endtime="20211020 19:49:17.771"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:17.763" endtime="20211020 19:49:17.771"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:17.695" endtime="20211020 19:49:17.773"/>
</suite>
<suite id="s1-s22" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s22-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:21.948" level="INFO">Length is 38</msg>
<status status="PASS" starttime="20211020 19:49:21.947" endtime="20211020 19:49:21.948"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:21.949" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:21.948" endtime="20211020 19:49:21.949"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:21.950" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:21.949" endtime="20211020 19:49:21.950"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:21.950" level="INFO" html="true">File '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;' contains 131 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:21.950" endtime="20211020 19:49:21.951"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:21.952" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/dnlayoutversion/VERSION"&gt;/data/metadata/dnlayoutversion/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:21.952" level="INFO">${version_file_contents} = #Wed Oct 20 19:48:06 UTC 2021
cTime=1634759285954
clusterID=e069cf96-6537-4108-b0e0-539adae179b6
nodeType=DATANODE
layoutVersion=0
</msg>
<status status="PASS" starttime="20211020 19:49:21.952" endtime="20211020 19:49:21.953"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:21.953" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:21.953" endtime="20211020 19:49:21.953"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:21.953" endtime="20211020 19:49:21.954"/>
</kw>
<status status="PASS" starttime="20211020 19:49:21.951" endtime="20211020 19:49:21.954"/>
</kw>
<status status="PASS" starttime="20211020 19:49:21.951" endtime="20211020 19:49:21.954"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:21.946" endtime="20211020 19:49:21.955"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:21.875" endtime="20211020 19:49:21.956"/>
</suite>
<suite id="s1-s23" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s23-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:26.137" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211020 19:49:26.136" endtime="20211020 19:49:26.137"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:26.138" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:26.138" endtime="20211020 19:49:26.138"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:26.139" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:26.138" endtime="20211020 19:49:26.139"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:26.139" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:26.139" endtime="20211020 19:49:26.140"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:26.141" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:26.141" level="INFO">${version_file_contents} = #Wed Oct 20 19:46:08 UTC 2021
cTime=1634759143601
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
omUuid=f21a8da3-bf1c-448a-ac92-c48a55bd8533
nodeType=OM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0...</msg>
<status status="PASS" starttime="20211020 19:49:26.141" endtime="20211020 19:49:26.141"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:26.142" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:26.142" endtime="20211020 19:49:26.142"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:26.142" endtime="20211020 19:49:26.143"/>
</kw>
<status status="PASS" starttime="20211020 19:49:26.140" endtime="20211020 19:49:26.143"/>
</kw>
<status status="PASS" starttime="20211020 19:49:26.140" endtime="20211020 19:49:26.143"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:26.135" endtime="20211020 19:49:26.143"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:26.069" endtime="20211020 19:49:26.145"/>
</suite>
<suite id="s1-s24" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s24-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:30.325" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211020 19:49:30.325" endtime="20211020 19:49:30.326"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:30.326" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:30.326" endtime="20211020 19:49:30.326"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:30.327" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:30.326" endtime="20211020 19:49:30.327"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:30.328" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:30.327" endtime="20211020 19:49:30.328"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:30.329" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:30.330" level="INFO">${version_file_contents} = #Wed Oct 20 19:46:08 UTC 2021
cTime=1634759143029
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
omUuid=db9bd0c7-ff92-400f-b1f6-a1bb8e1b7feb
nodeType=OM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0...</msg>
<status status="PASS" starttime="20211020 19:49:30.329" endtime="20211020 19:49:30.330"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:30.331" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:30.330" endtime="20211020 19:49:30.331"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:30.331" endtime="20211020 19:49:30.331"/>
</kw>
<status status="PASS" starttime="20211020 19:49:30.328" endtime="20211020 19:49:30.332"/>
</kw>
<status status="PASS" starttime="20211020 19:49:30.328" endtime="20211020 19:49:30.332"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:30.324" endtime="20211020 19:49:30.332"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:30.255" endtime="20211020 19:49:30.333"/>
</suite>
<suite id="s1-s25" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s25-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:34.562" level="INFO">Length is 33</msg>
<status status="PASS" starttime="20211020 19:49:34.561" endtime="20211020 19:49:34.562"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:34.563" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:34.562" endtime="20211020 19:49:34.563"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:34.563" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:34.563" endtime="20211020 19:49:34.564"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:34.564" level="INFO" html="true">File '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;' contains 218 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:34.564" endtime="20211020 19:49:34.564"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:34.566" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/om/current/VERSION"&gt;/data/metadata/om/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:34.566" level="INFO">${version_file_contents} = #Wed Oct 20 19:46:08 UTC 2021
cTime=1634759144174
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
omUuid=c5be3817-7e73-41b6-8f88-e7beb8ff5949
nodeType=OM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0...</msg>
<status status="PASS" starttime="20211020 19:49:34.565" endtime="20211020 19:49:34.566"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:34.567" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:34.566" endtime="20211020 19:49:34.567"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:34.567" endtime="20211020 19:49:34.568"/>
</kw>
<status status="PASS" starttime="20211020 19:49:34.565" endtime="20211020 19:49:34.568"/>
</kw>
<status status="PASS" starttime="20211020 19:49:34.565" endtime="20211020 19:49:34.568"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:34.560" endtime="20211020 19:49:34.568"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:34.491" endtime="20211020 19:49:34.569"/>
</suite>
<suite id="s1-s26" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s26-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:49:38.752" level="INFO">${random} = 56855</msg>
<status status="PASS" starttime="20211020 19:49:38.752" endtime="20211020 19:49:38.752"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:49:38.758" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-56855 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:49:44.096" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:49:44.096" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:38.754" endtime="20211020 19:49:44.097"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:49:44.098" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:44.097" endtime="20211020 19:49:44.098"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:49:44.099" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:49:44.098" endtime="20211020 19:49:44.099"/>
</kw>
<status status="PASS" starttime="20211020 19:49:38.754" endtime="20211020 19:49:44.099"/>
</kw>
<msg timestamp="20211020 19:49:44.099" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:49:38.753" endtime="20211020 19:49:44.100"/>
</kw>
<msg timestamp="20211020 19:49:44.100" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:38.752" endtime="20211020 19:49:44.100"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:44.100" endtime="20211020 19:49:44.101"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:38.751" endtime="20211020 19:49:44.101"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:49:38.686" endtime="20211020 19:49:44.103"/>
</suite>
<suite id="s1-s27" name="Generate" source="/opt/hadoop/smoketest/upgrade/generate.robot">
<test id="s1-s27-t1" name="Create a volume, bucket and key">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:49:48.249" level="INFO">Running command 'ozone sh volume create new1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:49:51.262" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:49:51.262" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:48.245" endtime="20211020 19:49:51.262"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:49:51.263" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:51.263" endtime="20211020 19:49:51.264"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:49:51.264" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:49:51.264" endtime="20211020 19:49:51.264"/>
</kw>
<status status="PASS" starttime="20211020 19:49:48.244" endtime="20211020 19:49:51.265"/>
</kw>
<msg timestamp="20211020 19:49:51.265" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:49:48.244" endtime="20211020 19:49:51.265"/>
</kw>
<msg timestamp="20211020 19:49:51.265" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:48.243" endtime="20211020 19:49:51.266"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:51.266" endtime="20211020 19:49:51.266"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:49:51.286" level="INFO">Running command 'ozone sh bucket create /new1-volume/new1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:49:54.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:49:54.468" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:51.280" endtime="20211020 19:49:54.468"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:49:54.470" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:54.469" endtime="20211020 19:49:54.470"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:49:54.471" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:49:54.470" endtime="20211020 19:49:54.471"/>
</kw>
<status status="PASS" starttime="20211020 19:49:51.279" endtime="20211020 19:49:54.471"/>
</kw>
<msg timestamp="20211020 19:49:54.471" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:49:51.276" endtime="20211020 19:49:54.472"/>
</kw>
<msg timestamp="20211020 19:49:54.472" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:51.266" endtime="20211020 19:49:54.472"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:54.472" endtime="20211020 19:49:54.473"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:49:54.477" level="INFO">Running command 'ozone sh key put /new1-volume/new1-bucket/new1-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:50:00.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:50:00.379" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:54.475" endtime="20211020 19:50:00.379"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:50:00.381" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:50:00.380" endtime="20211020 19:50:00.381"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:50:00.382" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:50:00.381" endtime="20211020 19:50:00.382"/>
</kw>
<status status="PASS" starttime="20211020 19:49:54.474" endtime="20211020 19:50:00.383"/>
</kw>
<msg timestamp="20211020 19:50:00.383" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:49:54.474" endtime="20211020 19:50:00.383"/>
</kw>
<msg timestamp="20211020 19:50:00.383" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:49:54.473" endtime="20211020 19:50:00.384"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:50:00.384" endtime="20211020 19:50:00.385"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:48.241" endtime="20211020 19:50:00.385"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20211020 19:49:48.174" endtime="20211020 19:50:00.387"/>
</suite>
<suite id="s1-s28" name="Validate" source="/opt/hadoop/smoketest/upgrade/validate.robot">
<test id="s1-s28-t1" name="Read data from previously created key">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20211020 19:50:04.781" level="INFO">${random} = 79827</msg>
<status status="PASS" starttime="20211020 19:50:04.780" endtime="20211020 19:50:04.781"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20211020 19:50:04.788" level="INFO">Running command 'ozone sh key get /new1-volume/new1-bucket/new1-key /tmp/key-79827 2&gt;&amp;1'.</msg>
<msg timestamp="20211020 19:50:09.720" level="INFO">${rc} = 0</msg>
<msg timestamp="20211020 19:50:09.720" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:50:04.783" endtime="20211020 19:50:09.720"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20211020 19:50:09.722" level="INFO">WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:50:09.721" endtime="20211020 19:50:09.722"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20211020 19:50:09.722" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20211020 19:50:09.722" endtime="20211020 19:50:09.723"/>
</kw>
<status status="PASS" starttime="20211020 19:50:04.783" endtime="20211020 19:50:09.723"/>
</kw>
<msg timestamp="20211020 19:50:09.723" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20211020 19:50:04.782" endtime="20211020 19:50:09.723"/>
</kw>
<msg timestamp="20211020 19:50:09.723" level="INFO">${output} = WARNING: HADOOP_CONF_DIR has been deprecated by OZONE_CONF_DIR.
WARNING: HADOOP_LOG_DIR has been deprecated by OZONE_LOG_DIR.</msg>
<status status="PASS" starttime="20211020 19:50:04.781" endtime="20211020 19:50:09.724"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:50:09.724" endtime="20211020 19:50:09.724"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:50:04.779" endtime="20211020 19:50:09.725"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20211020 19:50:04.715" endtime="20211020 19:50:09.726"/>
</suite>
<suite id="s1-s29" name="Check-Mlv" source="/opt/hadoop/smoketest/upgrade/check-mlv.robot">
<test id="s1-s29-t1" name="Check MLV">
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION_FILE}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:09.231" level="INFO">Length is 34</msg>
<status status="PASS" starttime="20211020 19:49:09.230" endtime="20211020 19:49:09.231"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${VERSION}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20211020 19:49:09.232" level="INFO">Length is 1</msg>
<status status="PASS" starttime="20211020 19:49:09.232" endtime="20211020 19:49:09.232"/>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<msg timestamp="20211020 19:49:09.233" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20211020 19:49:09.232" endtime="20211020 19:49:09.233"/>
</kw>
<kw name="File Should Not Be Empty" library="OperatingSystem">
<arg>${VERSION_FILE}</arg>
<doc>Fails if the specified directory is empty.</doc>
<msg timestamp="20211020 19:49:09.234" level="INFO" html="true">File '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;' contains 175 bytes.</msg>
<status status="PASS" starttime="20211020 19:49:09.233" endtime="20211020 19:49:09.234"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Check version</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check version">
<kw name="Get File" library="OperatingSystem">
<var>${version_file_contents}</var>
<arg>${VERSION_FILE}</arg>
<doc>Returns the contents of a specified file.</doc>
<msg timestamp="20211020 19:49:09.235" level="INFO" html="true">Getting file '&lt;a href="file:///data/metadata/scm/current/VERSION"&gt;/data/metadata/scm/current/VERSION&lt;/a&gt;'.</msg>
<msg timestamp="20211020 19:49:09.235" level="INFO">${version_file_contents} = #Wed Oct 20 19:45:40 UTC 2021
cTime=1634759140098
clusterID=CID-847673f7-37bb-4a6d-ae0f-fe1469b3c239
nodeType=SCM
scmUuid=40fe780e-2f17-4478-8e41-7bfd83f0cc0f
layoutVersion=0
</msg>
<status status="PASS" starttime="20211020 19:49:09.235" endtime="20211020 19:49:09.236"/>
</kw>
<kw name="Catenate" library="BuiltIn">
<var>${version_line}</var>
<arg>SEPARATOR=</arg>
<arg>${version_prefix}</arg>
<arg>${VERSION}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20211020 19:49:09.236" level="INFO">${version_line} = layoutVersion=0</msg>
<status status="PASS" starttime="20211020 19:49:09.236" endtime="20211020 19:49:09.236"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${version_file_contents}</arg>
<arg>${version_line}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20211020 19:49:09.236" endtime="20211020 19:49:09.237"/>
</kw>
<status status="PASS" starttime="20211020 19:49:09.234" endtime="20211020 19:49:09.237"/>
</kw>
<status status="PASS" starttime="20211020 19:49:09.234" endtime="20211020 19:49:09.237"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20211020 19:49:09.229" endtime="20211020 19:49:09.238"/>
</test>
<doc>Check Metadata layout version present in a version file.</doc>
<status status="PASS" starttime="20211020 19:49:09.164" endtime="20211020 19:49:09.238"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="191882"/>
</suite>
<statistics>
<total>
<stat pass="30" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="30" fail="0" skip="0" id="s1" name="upgrade">upgrade</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s11" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s12" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s13" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s14" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s15" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s16" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s17" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s18" name="Validate">upgrade.Validate</stat>
<stat pass="2" fail="0" skip="0" id="s1-s19" name="Finalize">upgrade.Finalize</stat>
<stat pass="1" fail="0" skip="0" id="s1-s20" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s21" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s22" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s23" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s24" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s25" name="Check-Mlv">upgrade.Check-Mlv</stat>
<stat pass="1" fail="0" skip="0" id="s1-s26" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s27" name="Generate">upgrade.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s28" name="Validate">upgrade.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s29" name="Check-Mlv">upgrade.Check-Mlv</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
