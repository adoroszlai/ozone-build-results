<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.6.8 on linux)" generated="20241013 16:40:56.511" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-om-bootstrap">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:38:45.211" endtime="20241013 16:38:45.211"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:45.215" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:45.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:45.219" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:38:45.213" endtime="20241013 16:38:45.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:45.219" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:38:45.219" endtime="20241013 16:38:45.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:45.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:45.220" endtime="20241013 16:38:45.220"/>
</kw>
<status status="PASS" starttime="20241013 16:38:45.212" endtime="20241013 16:38:45.220"/>
</kw>
<msg timestamp="20241013 16:38:45.220" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:45.212" endtime="20241013 16:38:45.220"/>
</kw>
<msg timestamp="20241013 16:38:45.221" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:38:45.212" endtime="20241013 16:38:45.221"/>
</kw>
<msg timestamp="20241013 16:38:45.221" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:38:45.211" endtime="20241013 16:38:45.221"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:38:45.221" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:38:45.221" endtime="20241013 16:38:45.221"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:45.225" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:45.510" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:45.510" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:38:45.223" endtime="20241013 16:38:45.510"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:45.511" level="INFO"/>
<status status="PASS" starttime="20241013 16:38:45.511" endtime="20241013 16:38:45.511"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:45.512" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:45.512" endtime="20241013 16:38:45.512"/>
</kw>
<status status="PASS" starttime="20241013 16:38:45.222" endtime="20241013 16:38:45.512"/>
</kw>
<msg timestamp="20241013 16:38:45.512" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:45.222" endtime="20241013 16:38:45.512"/>
</kw>
<status status="PASS" starttime="20241013 16:38:45.222" endtime="20241013 16:38:45.512"/>
</kw>
<status status="PASS" starttime="20241013 16:38:45.221" endtime="20241013 16:38:45.512"/>
</kw>
<status status="PASS" starttime="20241013 16:38:45.210" endtime="20241013 16:38:45.512"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20241013 16:38:45.209" endtime="20241013 16:38:45.513"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20241013 16:38:45.171" endtime="20241013 16:38:45.514"/>
</suite>
<suite id="s1-s2" name="Data-Creation-Before-Om-Bootstrap" source="/opt/hadoop/smoketest/omha/data-creation-before-om-bootstrap.robot">
<test id="s1-s2-t1" name="Volume-bucket init" line="64">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:38:46.309" endtime="20241013 16:38:46.309"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:46.312" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:46.316" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:46.316" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:38:46.310" endtime="20241013 16:38:46.316"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:46.317" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:38:46.316" endtime="20241013 16:38:46.317"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:46.317" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:46.317" endtime="20241013 16:38:46.317"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.310" endtime="20241013 16:38:46.317"/>
</kw>
<msg timestamp="20241013 16:38:46.318" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:46.310" endtime="20241013 16:38:46.318"/>
</kw>
<msg timestamp="20241013 16:38:46.318" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:38:46.309" endtime="20241013 16:38:46.318"/>
</kw>
<msg timestamp="20241013 16:38:46.318" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:38:46.309" endtime="20241013 16:38:46.318"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:38:46.318" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:38:46.318" endtime="20241013 16:38:46.318"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:46.322" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:46.676" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:46.676" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:38:46.320" endtime="20241013 16:38:46.676"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:46.677" level="INFO"/>
<status status="PASS" starttime="20241013 16:38:46.676" endtime="20241013 16:38:46.677"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:46.677" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:46.677" endtime="20241013 16:38:46.678"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.320" endtime="20241013 16:38:46.678"/>
</kw>
<msg timestamp="20241013 16:38:46.678" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:46.319" endtime="20241013 16:38:46.678"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.319" endtime="20241013 16:38:46.678"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.319" endtime="20241013 16:38:46.678"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.308" endtime="20241013 16:38:46.678"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.308" endtime="20241013 16:38:46.678"/>
</kw>
<kw name="Create volume and bucket">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<kw name="Execute" library="os">
<var>${vol_res}</var>
<arg>ozone sh volume create /${volume}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:46.682" level="INFO">Running command 'ozone sh volume create /vol1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:50.832" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:50.832" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:38:46.680" endtime="20241013 16:38:50.833"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:50.834" level="INFO"/>
<status status="PASS" starttime="20241013 16:38:50.833" endtime="20241013 16:38:50.834"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:50.834" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:50.834" endtime="20241013 16:38:50.834"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.679" endtime="20241013 16:38:50.834"/>
</kw>
<msg timestamp="20241013 16:38:50.834" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:46.679" endtime="20241013 16:38:50.834"/>
</kw>
<msg timestamp="20241013 16:38:50.835" level="INFO">${vol_res} = </msg>
<status status="PASS" starttime="20241013 16:38:46.679" endtime="20241013 16:38:50.835"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${vol_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20241013 16:38:50.835" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20241013 16:38:50.835" endtime="20241013 16:38:50.835"/>
</kw>
<kw name="Execute" library="os">
<var>${bucket_res}</var>
<arg>ozone sh bucket create /${volume}/${bucket}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:50.838" level="INFO">Running command 'ozone sh bucket create /vol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:54.544" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:54.544" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:38:50.836" endtime="20241013 16:38:54.544"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:54.545" level="INFO"/>
<status status="PASS" starttime="20241013 16:38:54.545" endtime="20241013 16:38:54.545"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:54.546" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:54.545" endtime="20241013 16:38:54.546"/>
</kw>
<status status="PASS" starttime="20241013 16:38:50.836" endtime="20241013 16:38:54.546"/>
</kw>
<msg timestamp="20241013 16:38:54.546" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:50.836" endtime="20241013 16:38:54.546"/>
</kw>
<msg timestamp="20241013 16:38:54.546" level="INFO">${bucket_res} = </msg>
<status status="PASS" starttime="20241013 16:38:50.835" endtime="20241013 16:38:54.546"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${bucket_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20241013 16:38:54.547" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20241013 16:38:54.546" endtime="20241013 16:38:54.547"/>
</kw>
<status status="PASS" starttime="20241013 16:38:46.678" endtime="20241013 16:38:54.547"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:38:46.307" endtime="20241013 16:38:54.547"/>
</test>
<test id="s1-s2-t2" name="Create 100 metadata keys under /vol1/bucket1" line="67">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:38:54.549" endtime="20241013 16:38:54.549"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:54.553" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:54.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:54.557" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:38:54.551" endtime="20241013 16:38:54.557"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:54.557" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:38:54.557" endtime="20241013 16:38:54.557"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:54.558" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:54.558" endtime="20241013 16:38:54.558"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.550" endtime="20241013 16:38:54.558"/>
</kw>
<msg timestamp="20241013 16:38:54.558" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:54.550" endtime="20241013 16:38:54.558"/>
</kw>
<msg timestamp="20241013 16:38:54.558" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:38:54.549" endtime="20241013 16:38:54.558"/>
</kw>
<msg timestamp="20241013 16:38:54.559" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:38:54.549" endtime="20241013 16:38:54.559"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:38:54.559" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:38:54.559" endtime="20241013 16:38:54.559"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:54.562" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:38:54.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:38:54.712" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:38:54.560" endtime="20241013 16:38:54.712"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:38:54.713" level="INFO"/>
<status status="PASS" starttime="20241013 16:38:54.712" endtime="20241013 16:38:54.713"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:38:54.713" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:38:54.713" endtime="20241013 16:38:54.713"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.560" endtime="20241013 16:38:54.713"/>
</kw>
<msg timestamp="20241013 16:38:54.713" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:54.560" endtime="20241013 16:38:54.714"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.559" endtime="20241013 16:38:54.714"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.559" endtime="20241013 16:38:54.714"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.549" endtime="20241013 16:38:54.714"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.548" endtime="20241013 16:38:54.714"/>
</kw>
<kw name="Create metadata keys">
<arg>10</arg>
<arg>100</arg>
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<kw name="Execute" library="os">
<var>${freon_res}</var>
<arg>ozone freon omkg -t ${threads} -n ${key_num} -v ${volume} -b ${bucket}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:38:54.718" level="INFO">Running command 'ozone freon omkg -t 10 -n 100 -v vol1 -b bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:02.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:02.159" level="INFO">${output} = 2024-10-13 16:38:56,777 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-10-13 16:38:56,867 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20241013 16:38:54.716" endtime="20241013 16:39:02.159"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:02.160" level="INFO">2024-10-13 16:38:56,777 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-10-13 16:38:56,867 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2024-10-13 16:38:56,867 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2024-10-13 16:38:56,974 [main] INFO freon.BaseFreonGenerator: Executing test with prefix jqpnu8i4rl and number-of-tests 100
2024-10-13 16:38:57,051 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2024-10-13 16:38:57,055 [main] INFO utils.LeakDetector: Starting leak detector thread OzoneClientObject0.
2024-10-13 16:38:58,052 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2024-10-13 16:38:58,917 [pool-2-thread-7] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #11 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,917 [pool-2-thread-10] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,918 [pool-2-thread-10] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #10 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,923 [pool-2-thread-9] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,923 [pool-2-thread-9] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #13 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,925 [pool-2-thread-6] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,925 [pool-2-thread-6] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #8 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,926 [pool-2-thread-8] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,926 [pool-2-thread-8] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #9 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,926 [pool-2-thread-5] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,926 [pool-2-thread-5] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #4 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,927 [pool-2-thread-1] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,928 [pool-2-thread-1] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #7 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,928 [pool-2-thread-3] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,928 [pool-2-thread-3] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #5 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:58,929 [pool-2-thread-4] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Suggested leader is OM:om2[om2/172.25.0.112].
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:788)
	at org.apache.hadoop.ozone.om.OzoneManager.checkLeaderStatus(OzoneManager.java:4257)
	at org.apache.hadoop.ozone.om.ratis.utils.OzoneManagerRatisUtils.checkLeaderStatus(OzoneManagerRatisUtils.java:495)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:208)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:162)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:153)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1227)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1094)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1017)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:439)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1899)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3048)
, while invoking $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862. Trying to failover immediately. Current retry count: 0.
2024-10-13 16:38:58,929 [pool-2-thread-4] WARN retry.RetryInvocationHandler: A failover has occurred since the start of call #6 $Proxy25.submitRequest over nodeId=om2,nodeAddress=om2:9862
2024-10-13 16:38:59,052 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2024-10-13 16:39:00,053 [Thread-5] INFO freon.ProgressBar: Progress: 30.00 % (30 out of 100)
2024-10-13 16:39:01,054 [Thread-5] INFO freon.ProgressBar: Progress: 75.00 % (75 out of 100)
2024-10-13 16:39:02,054 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2024-10-13 16:39:02,069 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=100, min=118.54587, max=585.684724, mean=253.13421410844083, stddev=110.7687823007535, median=210.527389, p75=287.430297, p95=534.377908, p98=560.649494, p99=574.724046, p999=585.684724, mean_rate=30.87785871515727, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2024-10-13 16:39:02,070 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2024-10-13 16:39:02,070 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2024-10-13 16:39:02,070 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20241013 16:39:02.159" endtime="20241013 16:39:02.160"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:02.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:02.160" endtime="20241013 16:39:02.161"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.715" endtime="20241013 16:39:02.161"/>
</kw>
<msg timestamp="20241013 16:39:02.161" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:38:54.715" endtime="20241013 16:39:02.161"/>
</kw>
<msg timestamp="20241013 16:39:02.161" level="INFO">${freon_res} = 2024-10-13 16:38:56,777 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-10-13 16:38:56,867 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20241013 16:38:54.715" endtime="20241013 16:39:02.162"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${freon_res}</arg>
<arg>Successful executions: ${key_num}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:39:02.162" endtime="20241013 16:39:02.162"/>
</kw>
<status status="PASS" starttime="20241013 16:38:54.714" endtime="20241013 16:39:02.162"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:38:54.548" endtime="20241013 16:39:02.162"/>
</test>
<test id="s1-s2-t3" name="Create snapshot 'snap1'" line="70">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:39:02.165" endtime="20241013 16:39:02.166"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:02.170" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:02.175" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:02.175" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:39:02.168" endtime="20241013 16:39:02.175"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:02.175" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:39:02.175" endtime="20241013 16:39:02.176"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:02.176" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:02.176" endtime="20241013 16:39:02.176"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.168" endtime="20241013 16:39:02.176"/>
</kw>
<msg timestamp="20241013 16:39:02.176" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:02.167" endtime="20241013 16:39:02.176"/>
</kw>
<msg timestamp="20241013 16:39:02.177" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:39:02.166" endtime="20241013 16:39:02.177"/>
</kw>
<msg timestamp="20241013 16:39:02.177" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:02.166" endtime="20241013 16:39:02.177"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:39:02.177" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:02.177" endtime="20241013 16:39:02.177"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:02.181" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:02.264" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:02.264" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:02.179" endtime="20241013 16:39:02.264"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:02.265" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:02.265" endtime="20241013 16:39:02.265"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:02.266" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:02.266" endtime="20241013 16:39:02.266"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.178" endtime="20241013 16:39:02.266"/>
</kw>
<msg timestamp="20241013 16:39:02.266" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:02.178" endtime="20241013 16:39:02.266"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.178" endtime="20241013 16:39:02.267"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.177" endtime="20241013 16:39:02.267"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.165" endtime="20241013 16:39:02.267"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.165" endtime="20241013 16:39:02.267"/>
</kw>
<kw name="Create snapshot">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_1}</arg>
<kw name="Execute" library="os">
<var>${snap_res}</var>
<arg>ozone sh snapshot create /${volume}/${bucket} ${snapshot}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:02.272" level="INFO">Running command 'ozone sh snapshot create /vol1/bucket1 snap1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:06.452" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:06.452" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:02.269" endtime="20241013 16:39:06.452"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:06.456" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:06.455" endtime="20241013 16:39:06.456"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:06.457" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:06.456" endtime="20241013 16:39:06.457"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.269" endtime="20241013 16:39:06.457"/>
</kw>
<msg timestamp="20241013 16:39:06.457" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:02.268" endtime="20241013 16:39:06.457"/>
</kw>
<msg timestamp="20241013 16:39:06.457" level="INFO">${snap_res} = </msg>
<status status="PASS" starttime="20241013 16:39:02.268" endtime="20241013 16:39:06.457"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${snap_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20241013 16:39:06.458" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20241013 16:39:06.457" endtime="20241013 16:39:06.458"/>
</kw>
<status status="PASS" starttime="20241013 16:39:02.267" endtime="20241013 16:39:06.458"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:39:02.164" endtime="20241013 16:39:06.458"/>
</test>
<test id="s1-s2-t4" name="Create 2 actual keys with prefix 'sn', key contents the same as the key name" line="73">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:39:06.460" endtime="20241013 16:39:06.460"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:06.466" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:06.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:06.469" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:39:06.462" endtime="20241013 16:39:06.469"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:06.469" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:39:06.469" endtime="20241013 16:39:06.469"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:06.470" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:06.469" endtime="20241013 16:39:06.470"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.461" endtime="20241013 16:39:06.470"/>
</kw>
<msg timestamp="20241013 16:39:06.470" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:06.461" endtime="20241013 16:39:06.470"/>
</kw>
<msg timestamp="20241013 16:39:06.470" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:39:06.461" endtime="20241013 16:39:06.470"/>
</kw>
<msg timestamp="20241013 16:39:06.470" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:06.460" endtime="20241013 16:39:06.470"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:39:06.471" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:06.471" endtime="20241013 16:39:06.471"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:06.474" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:06.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:06.626" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:06.472" endtime="20241013 16:39:06.626"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:06.627" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:06.626" endtime="20241013 16:39:06.627"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:06.627" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:06.627" endtime="20241013 16:39:06.627"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.472" endtime="20241013 16:39:06.627"/>
</kw>
<msg timestamp="20241013 16:39:06.627" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:06.472" endtime="20241013 16:39:06.627"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.471" endtime="20241013 16:39:06.628"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.471" endtime="20241013 16:39:06.628"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.460" endtime="20241013 16:39:06.628"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.459" endtime="20241013 16:39:06.628"/>
</kw>
<kw name="Create actual keys">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${KEY_PREFIX}</arg>
<arg>${KEY_1}</arg>
<arg>${KEY_2}</arg>
<arg>${TMP_FILE}</arg>
<kw name="Create a key and set contents same as the keyName">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${key_prefix}</arg>
<arg>${key_1}</arg>
<arg>${tmp_file}</arg>
<kw name="Execute" library="os">
<arg>echo "${key_prefix}/${key_name}" &gt; ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:06.632" level="INFO">Running command 'echo "sn/key1" &gt; /tmp/tmp.txt'.</msg>
<msg timestamp="20241013 16:39:06.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:06.634" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:06.630" endtime="20241013 16:39:06.635"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:06.635" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:06.635" endtime="20241013 16:39:06.635"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:06.636" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:06.636" endtime="20241013 16:39:06.636"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.630" endtime="20241013 16:39:06.636"/>
</kw>
<msg timestamp="20241013 16:39:06.636" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:06.630" endtime="20241013 16:39:06.636"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.629" endtime="20241013 16:39:06.636"/>
</kw>
<kw name="Execute" library="os">
<var>${key_res}</var>
<arg>ozone sh key put /${volume}/${bucket}/${key_prefix}/${key_name} ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:06.640" level="INFO">Running command 'ozone sh key put /vol1/bucket1/sn/key1 /tmp/tmp.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:13.399" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:13.400" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:06.638" endtime="20241013 16:39:13.400"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:13.400" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:13.400" endtime="20241013 16:39:13.401"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:13.401" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:13.401" endtime="20241013 16:39:13.401"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.637" endtime="20241013 16:39:13.401"/>
</kw>
<msg timestamp="20241013 16:39:13.401" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:06.637" endtime="20241013 16:39:13.401"/>
</kw>
<msg timestamp="20241013 16:39:13.402" level="INFO">${key_res} = </msg>
<status status="PASS" starttime="20241013 16:39:06.636" endtime="20241013 16:39:13.402"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${key_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20241013 16:39:13.402" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20241013 16:39:13.402" endtime="20241013 16:39:13.402"/>
</kw>
<kw name="Execute" library="os">
<var>${key_cat_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/${key_prefix}/${key_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:13.406" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/sn/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:19.560" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:19.560" level="INFO">${output} = sn/key1</msg>
<status status="PASS" starttime="20241013 16:39:13.403" endtime="20241013 16:39:19.560"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:19.561" level="INFO">sn/key1</msg>
<status status="PASS" starttime="20241013 16:39:19.561" endtime="20241013 16:39:19.561"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:19.562" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:19.561" endtime="20241013 16:39:19.562"/>
</kw>
<status status="PASS" starttime="20241013 16:39:13.403" endtime="20241013 16:39:19.562"/>
</kw>
<msg timestamp="20241013 16:39:19.562" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:13.403" endtime="20241013 16:39:19.562"/>
</kw>
<msg timestamp="20241013 16:39:19.562" level="INFO">${key_cat_res} = sn/key1</msg>
<status status="PASS" starttime="20241013 16:39:13.402" endtime="20241013 16:39:19.562"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_cat_res}</arg>
<arg>${key_prefix}/${key_name}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:39:19.562" endtime="20241013 16:39:19.563"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.629" endtime="20241013 16:39:19.563"/>
</kw>
<kw name="Create a key and set contents same as the keyName">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${key_prefix}</arg>
<arg>${key_2}</arg>
<arg>${tmp_file}</arg>
<kw name="Execute" library="os">
<arg>echo "${key_prefix}/${key_name}" &gt; ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:19.566" level="INFO">Running command 'echo "sn/key2" &gt; /tmp/tmp.txt'.</msg>
<msg timestamp="20241013 16:39:19.569" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:19.569" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:19.564" endtime="20241013 16:39:19.569"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:19.569" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:19.569" endtime="20241013 16:39:19.570"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:19.570" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:19.570" endtime="20241013 16:39:19.570"/>
</kw>
<status status="PASS" starttime="20241013 16:39:19.564" endtime="20241013 16:39:19.570"/>
</kw>
<msg timestamp="20241013 16:39:19.570" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:19.564" endtime="20241013 16:39:19.570"/>
</kw>
<status status="PASS" starttime="20241013 16:39:19.563" endtime="20241013 16:39:19.570"/>
</kw>
<kw name="Execute" library="os">
<var>${key_res}</var>
<arg>ozone sh key put /${volume}/${bucket}/${key_prefix}/${key_name} ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:19.574" level="INFO">Running command 'ozone sh key put /vol1/bucket1/sn/key2 /tmp/tmp.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:25.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:25.705" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:19.572" endtime="20241013 16:39:25.705"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:25.706" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:25.705" endtime="20241013 16:39:25.706"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:25.707" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:25.706" endtime="20241013 16:39:25.707"/>
</kw>
<status status="PASS" starttime="20241013 16:39:19.571" endtime="20241013 16:39:25.707"/>
</kw>
<msg timestamp="20241013 16:39:25.707" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:19.571" endtime="20241013 16:39:25.707"/>
</kw>
<msg timestamp="20241013 16:39:25.707" level="INFO">${key_res} = </msg>
<status status="PASS" starttime="20241013 16:39:19.571" endtime="20241013 16:39:25.707"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${key_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20241013 16:39:25.708" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20241013 16:39:25.707" endtime="20241013 16:39:25.708"/>
</kw>
<kw name="Execute" library="os">
<var>${key_cat_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/${key_prefix}/${key_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:25.711" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/sn/key2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:31.291" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:31.291" level="INFO">${output} = sn/key2</msg>
<status status="PASS" starttime="20241013 16:39:25.709" endtime="20241013 16:39:31.291"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:31.292" level="INFO">sn/key2</msg>
<status status="PASS" starttime="20241013 16:39:31.291" endtime="20241013 16:39:31.292"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:31.292" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:31.292" endtime="20241013 16:39:31.293"/>
</kw>
<status status="PASS" starttime="20241013 16:39:25.708" endtime="20241013 16:39:31.293"/>
</kw>
<msg timestamp="20241013 16:39:31.293" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:25.708" endtime="20241013 16:39:31.293"/>
</kw>
<msg timestamp="20241013 16:39:31.293" level="INFO">${key_cat_res} = sn/key2</msg>
<status status="PASS" starttime="20241013 16:39:25.708" endtime="20241013 16:39:31.293"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_cat_res}</arg>
<arg>${key_prefix}/${key_name}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:39:31.293" endtime="20241013 16:39:31.294"/>
</kw>
<status status="PASS" starttime="20241013 16:39:19.563" endtime="20241013 16:39:31.294"/>
</kw>
<status status="PASS" starttime="20241013 16:39:06.628" endtime="20241013 16:39:31.294"/>
</kw>
<kw name="Remove File" library="OperatingSystem" type="TEARDOWN">
<arg>${TMP_FILE}</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20241013 16:39:31.294" level="INFO" html="true">Removed file '&lt;a href="file:///tmp/tmp.txt"&gt;/tmp/tmp.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20241013 16:39:31.294" endtime="20241013 16:39:31.294"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:39:06.459" endtime="20241013 16:39:31.294"/>
</test>
<test id="s1-s2-t5" name="Create snapshot 'snap2'" line="77">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:39:31.297" endtime="20241013 16:39:31.297"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:31.301" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:31.305" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:31.305" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:39:31.298" endtime="20241013 16:39:31.305"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:31.306" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:39:31.305" endtime="20241013 16:39:31.306"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:31.306" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:31.306" endtime="20241013 16:39:31.306"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.298" endtime="20241013 16:39:31.306"/>
</kw>
<msg timestamp="20241013 16:39:31.306" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:31.298" endtime="20241013 16:39:31.306"/>
</kw>
<msg timestamp="20241013 16:39:31.307" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:39:31.297" endtime="20241013 16:39:31.307"/>
</kw>
<msg timestamp="20241013 16:39:31.307" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:31.297" endtime="20241013 16:39:31.307"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:39:31.308" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:31.307" endtime="20241013 16:39:31.308"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:31.311" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:31.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:31.394" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:31.309" endtime="20241013 16:39:31.394"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:31.395" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:31.395" endtime="20241013 16:39:31.395"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:31.396" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:31.395" endtime="20241013 16:39:31.396"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.309" endtime="20241013 16:39:31.396"/>
</kw>
<msg timestamp="20241013 16:39:31.396" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:31.308" endtime="20241013 16:39:31.396"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.308" endtime="20241013 16:39:31.396"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.308" endtime="20241013 16:39:31.396"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.296" endtime="20241013 16:39:31.396"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.296" endtime="20241013 16:39:31.397"/>
</kw>
<kw name="Create snapshot">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_2}</arg>
<kw name="Execute" library="os">
<var>${snap_res}</var>
<arg>ozone sh snapshot create /${volume}/${bucket} ${snapshot}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:31.401" level="INFO">Running command 'ozone sh snapshot create /vol1/bucket1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:35.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:35.465" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:31.398" endtime="20241013 16:39:35.465"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:35.466" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:35.465" endtime="20241013 16:39:35.466"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:35.466" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:35.466" endtime="20241013 16:39:35.467"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.398" endtime="20241013 16:39:35.467"/>
</kw>
<msg timestamp="20241013 16:39:35.467" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:31.398" endtime="20241013 16:39:35.467"/>
</kw>
<msg timestamp="20241013 16:39:35.467" level="INFO">${snap_res} = </msg>
<status status="PASS" starttime="20241013 16:39:31.397" endtime="20241013 16:39:35.467"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${snap_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20241013 16:39:35.468" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20241013 16:39:35.467" endtime="20241013 16:39:35.468"/>
</kw>
<status status="PASS" starttime="20241013 16:39:31.397" endtime="20241013 16:39:35.468"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:39:31.295" endtime="20241013 16:39:35.468"/>
</test>
<doc>Smoke test for creating data needed for om bootstrap load test.</doc>
<status status="PASS" starttime="20241013 16:38:46.263" endtime="20241013 16:39:35.469"/>
</suite>
<suite id="s1-s3" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s3-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:39:51.157" endtime="20241013 16:39:51.158"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:51.162" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:51.165" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:51.165" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:39:51.159" endtime="20241013 16:39:51.166"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:51.166" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:39:51.166" endtime="20241013 16:39:51.166"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:51.167" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:51.167" endtime="20241013 16:39:51.167"/>
</kw>
<status status="PASS" starttime="20241013 16:39:51.159" endtime="20241013 16:39:51.167"/>
</kw>
<msg timestamp="20241013 16:39:51.167" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:51.158" endtime="20241013 16:39:51.167"/>
</kw>
<msg timestamp="20241013 16:39:51.167" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:39:51.158" endtime="20241013 16:39:51.168"/>
</kw>
<msg timestamp="20241013 16:39:51.168" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:51.158" endtime="20241013 16:39:51.168"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:39:51.168" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:51.168" endtime="20241013 16:39:51.168"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:51.172" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:51.321" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:51.321" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:51.170" endtime="20241013 16:39:51.321"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:51.322" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:51.322" endtime="20241013 16:39:51.322"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:51.323" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:51.323" endtime="20241013 16:39:51.323"/>
</kw>
<status status="PASS" starttime="20241013 16:39:51.169" endtime="20241013 16:39:51.323"/>
</kw>
<msg timestamp="20241013 16:39:51.323" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:51.169" endtime="20241013 16:39:51.323"/>
</kw>
<status status="PASS" starttime="20241013 16:39:51.169" endtime="20241013 16:39:51.323"/>
</kw>
<status status="PASS" starttime="20241013 16:39:51.168" endtime="20241013 16:39:51.324"/>
</kw>
<status status="PASS" starttime="20241013 16:39:51.157" endtime="20241013 16:39:51.324"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20241013 16:39:51.156" endtime="20241013 16:39:51.324"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20241013 16:39:51.115" endtime="20241013 16:39:51.325"/>
</suite>
<suite id="s1-s4" name="Data-Validation-After-Om-Bootstrap" source="/opt/hadoop/smoketest/omha/data-validation-after-om-bootstrap.robot">
<test id="s1-s4-t1" name="Check number of checkpoints made" line="85">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:39:52.124" endtime="20241013 16:39:52.124"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:52.128" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:52.132" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:52.132" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:39:52.126" endtime="20241013 16:39:52.132"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:52.133" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:39:52.132" endtime="20241013 16:39:52.133"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:52.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:52.133" endtime="20241013 16:39:52.133"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.125" endtime="20241013 16:39:52.134"/>
</kw>
<msg timestamp="20241013 16:39:52.134" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:52.125" endtime="20241013 16:39:52.134"/>
</kw>
<msg timestamp="20241013 16:39:52.134" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:39:52.125" endtime="20241013 16:39:52.134"/>
</kw>
<msg timestamp="20241013 16:39:52.134" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:52.124" endtime="20241013 16:39:52.134"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:39:52.134" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:52.134" endtime="20241013 16:39:52.135"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:52.138" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:52.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:52.312" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:52.136" endtime="20241013 16:39:52.312"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:52.313" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:52.312" endtime="20241013 16:39:52.313"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:52.313" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:52.313" endtime="20241013 16:39:52.314"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.136" endtime="20241013 16:39:52.314"/>
</kw>
<msg timestamp="20241013 16:39:52.314" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:52.136" endtime="20241013 16:39:52.314"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.135" endtime="20241013 16:39:52.314"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.135" endtime="20241013 16:39:52.314"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.124" endtime="20241013 16:39:52.314"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.123" endtime="20241013 16:39:52.314"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>5sec</arg>
<arg>Number of checkpoints equals 2</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Number of checkpoints equals 2">
<kw name="Execute" library="os">
<var>${checkpoints}</var>
<arg>ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:52.318" level="INFO">Running command 'ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:52.324" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:52.324" level="INFO">${output} = 0</msg>
<status status="PASS" starttime="20241013 16:39:52.316" endtime="20241013 16:39:52.324"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:52.325" level="INFO">0</msg>
<status status="PASS" starttime="20241013 16:39:52.324" endtime="20241013 16:39:52.325"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:52.325" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:52.325" endtime="20241013 16:39:52.325"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.316" endtime="20241013 16:39:52.325"/>
</kw>
<msg timestamp="20241013 16:39:52.325" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:52.315" endtime="20241013 16:39:52.325"/>
</kw>
<msg timestamp="20241013 16:39:52.326" level="INFO">${checkpoints} = 0</msg>
<status status="PASS" starttime="20241013 16:39:52.315" endtime="20241013 16:39:52.326"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${checkpoints} == 2</arg>
<doc>Fails if the given condition is not true.</doc>
<msg timestamp="20241013 16:39:52.326" level="FAIL">'0 == 2' should be true.</msg>
<status status="FAIL" starttime="20241013 16:39:52.326" endtime="20241013 16:39:52.326"/>
</kw>
<status status="FAIL" starttime="20241013 16:39:52.315" endtime="20241013 16:39:52.326"/>
</kw>
<kw name="Number of checkpoints equals 2">
<kw name="Execute" library="os">
<var>${checkpoints}</var>
<arg>ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:57.331" level="INFO">Running command 'ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:57.344" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:57.344" level="INFO">${output} = 2</msg>
<status status="PASS" starttime="20241013 16:39:57.329" endtime="20241013 16:39:57.344"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:57.345" level="INFO">2</msg>
<status status="PASS" starttime="20241013 16:39:57.344" endtime="20241013 16:39:57.345"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:57.346" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:57.345" endtime="20241013 16:39:57.346"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.328" endtime="20241013 16:39:57.346"/>
</kw>
<msg timestamp="20241013 16:39:57.346" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:57.328" endtime="20241013 16:39:57.346"/>
</kw>
<msg timestamp="20241013 16:39:57.346" level="INFO">${checkpoints} = 2</msg>
<status status="PASS" starttime="20241013 16:39:57.328" endtime="20241013 16:39:57.346"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${checkpoints} == 2</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20241013 16:39:57.347" endtime="20241013 16:39:57.347"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.327" endtime="20241013 16:39:57.347"/>
</kw>
<status status="PASS" starttime="20241013 16:39:52.314" endtime="20241013 16:39:57.347"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:39:52.123" endtime="20241013 16:39:57.348"/>
</test>
<test id="s1-s4-t2" name="Check current leader and transfer leadership to 'om3'" line="88">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:39:57.350" endtime="20241013 16:39:57.350"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:57.355" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:57.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:57.359" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:39:57.352" endtime="20241013 16:39:57.359"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:57.360" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:39:57.359" endtime="20241013 16:39:57.360"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:57.360" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:57.360" endtime="20241013 16:39:57.360"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.351" endtime="20241013 16:39:57.360"/>
</kw>
<msg timestamp="20241013 16:39:57.360" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:57.351" endtime="20241013 16:39:57.360"/>
</kw>
<msg timestamp="20241013 16:39:57.361" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:39:57.351" endtime="20241013 16:39:57.361"/>
</kw>
<msg timestamp="20241013 16:39:57.361" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:57.350" endtime="20241013 16:39:57.361"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:39:57.361" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:39:57.361" endtime="20241013 16:39:57.361"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:57.365" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:39:57.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:39:57.381" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:39:57.363" endtime="20241013 16:39:57.381"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:39:57.382" level="INFO"/>
<status status="PASS" starttime="20241013 16:39:57.381" endtime="20241013 16:39:57.382"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:39:57.382" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:39:57.382" endtime="20241013 16:39:57.382"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.363" endtime="20241013 16:39:57.383"/>
</kw>
<msg timestamp="20241013 16:39:57.383" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:57.362" endtime="20241013 16:39:57.383"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.362" endtime="20241013 16:39:57.383"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.361" endtime="20241013 16:39:57.383"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.350" endtime="20241013 16:39:57.383"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.349" endtime="20241013 16:39:57.383"/>
</kw>
<kw name="Check current leader is different than OM">
<arg>${BOOTSTRAPPED_OM}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>ozone admin om roles -id=omservice | grep 'LEADER' | awk -F ':' '{ print $1 }'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:39:57.387" level="INFO">Running command 'ozone admin om roles -id=omservice | grep 'LEADER' | awk -F ':' '{ print $1 }' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:01.573" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:01.573" level="INFO">${output} = om2 </msg>
<status status="PASS" starttime="20241013 16:39:57.385" endtime="20241013 16:40:01.573"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:01.574" level="INFO">om2 </msg>
<status status="PASS" starttime="20241013 16:40:01.573" endtime="20241013 16:40:01.574"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:01.574" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:01.574" endtime="20241013 16:40:01.575"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.384" endtime="20241013 16:40:01.575"/>
</kw>
<msg timestamp="20241013 16:40:01.575" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:39:57.384" endtime="20241013 16:40:01.575"/>
</kw>
<msg timestamp="20241013 16:40:01.575" level="INFO">${leader} = om2 </msg>
<status status="PASS" starttime="20241013 16:39:57.384" endtime="20241013 16:40:01.575"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${leader}</arg>
<arg>${om}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:01.576" endtime="20241013 16:40:01.576"/>
</kw>
<status status="PASS" starttime="20241013 16:39:57.383" endtime="20241013 16:40:01.576"/>
</kw>
<kw name="Transfer leadership to OM">
<arg>${BOOTSTRAPPED_OM}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${new_leader}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:01.581" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:14.690" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:14.690" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20241013 16:40:01.578" endtime="20241013 16:40:14.690"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:14.691" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20241013 16:40:14.690" endtime="20241013 16:40:14.691"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:14.691" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:14.691" endtime="20241013 16:40:14.691"/>
</kw>
<status status="PASS" starttime="20241013 16:40:01.578" endtime="20241013 16:40:14.691"/>
</kw>
<msg timestamp="20241013 16:40:14.692" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:01.578" endtime="20241013 16:40:14.692"/>
</kw>
<msg timestamp="20241013 16:40:14.692" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20241013 16:40:01.577" endtime="20241013 16:40:14.692"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:14.692" endtime="20241013 16:40:14.692"/>
</kw>
<status status="PASS" starttime="20241013 16:40:01.576" endtime="20241013 16:40:14.692"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:39:57.348" endtime="20241013 16:40:14.692"/>
</test>
<test id="s1-s4-t3" name="Snapshots exist on 'om3'" line="92">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:40:14.694" endtime="20241013 16:40:14.695"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:14.699" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:14.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:14.703" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:40:14.696" endtime="20241013 16:40:14.703"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:14.704" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:40:14.703" endtime="20241013 16:40:14.704"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:14.704" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:14.704" endtime="20241013 16:40:14.704"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.696" endtime="20241013 16:40:14.704"/>
</kw>
<msg timestamp="20241013 16:40:14.704" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:14.696" endtime="20241013 16:40:14.704"/>
</kw>
<msg timestamp="20241013 16:40:14.705" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:40:14.695" endtime="20241013 16:40:14.705"/>
</kw>
<msg timestamp="20241013 16:40:14.705" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:40:14.695" endtime="20241013 16:40:14.705"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:40:14.705" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:40:14.705" endtime="20241013 16:40:14.705"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:14.709" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:14.725" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:14.725" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:40:14.707" endtime="20241013 16:40:14.725"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:14.726" level="INFO"/>
<status status="PASS" starttime="20241013 16:40:14.725" endtime="20241013 16:40:14.726"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:14.726" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:14.726" endtime="20241013 16:40:14.727"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.706" endtime="20241013 16:40:14.727"/>
</kw>
<msg timestamp="20241013 16:40:14.727" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:14.706" endtime="20241013 16:40:14.727"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.706" endtime="20241013 16:40:14.727"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.705" endtime="20241013 16:40:14.727"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.694" endtime="20241013 16:40:14.727"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.694" endtime="20241013 16:40:14.727"/>
</kw>
<kw name="Check snapshots on OM">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_1}</arg>
<arg>${SNAP_2}</arg>
<kw name="Execute" library="os">
<var>${snap_list}</var>
<arg>ozone sh snapshot list /${volume}/${bucket}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:14.731" level="INFO">Running command 'ozone sh snapshot list /vol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:19.367" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:19.367" level="INFO">${output} = [ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1728837546224,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "6b44a430-5481-4362-b5d7-bb1ba64...</msg>
<status status="PASS" starttime="20241013 16:40:14.729" endtime="20241013 16:40:19.367"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:19.369" level="INFO">[ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1728837546224,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "6b44a430-5481-4362-b5d7-bb1ba640a121",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-6b44a430-5481-4362-b5d7-bb1ba640a121",
  "referencedSize" : 0,
  "referencedReplicatedSize" : 0,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
}, {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap2",
  "creationTime" : 1728837575281,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "0e2f1529-6ee5-425d-99b7-d3ba32df1508",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-0e2f1529-6ee5-425d-99b7-d3ba32df1508",
  "referencedSize" : 16,
  "referencedReplicatedSize" : 48,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
} ]</msg>
<status status="PASS" starttime="20241013 16:40:19.368" endtime="20241013 16:40:19.369"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:19.375" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:19.369" endtime="20241013 16:40:19.375"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.729" endtime="20241013 16:40:19.376"/>
</kw>
<msg timestamp="20241013 16:40:19.376" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:14.728" endtime="20241013 16:40:19.376"/>
</kw>
<msg timestamp="20241013 16:40:19.376" level="INFO">${snap_list} = [ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1728837546224,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "6b44a430-5481-4362-b5d7-bb1ba64...</msg>
<status status="PASS" starttime="20241013 16:40:14.728" endtime="20241013 16:40:19.376"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${snap_list}</arg>
<arg>[ ]</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:19.377" endtime="20241013 16:40:19.377"/>
</kw>
<kw name="Execute" library="os">
<var>${snap1_res}</var>
<arg>echo "${snap_list}" | grep ${snap_1}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:19.381" level="INFO">Running command 'echo "[ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1728837546224,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "6b44a430-5481-4362-b5d7-bb1ba640a121",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-6b44a430-5481-4362-b5d7-bb1ba640a121",
  "referencedSize" : 0,
  "referencedReplicatedSize" : 0,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
}, {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap2",
  "creationTime" : 1728837575281,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "0e2f1529-6ee5-425d-99b7-d3ba32df1508",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-0e2f1529-6ee5-425d-99b7-d3ba32df1508",
  "referencedSize" : 16,
  "referencedReplicatedSize" : 48,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
} ]" | grep snap1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:19.384" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:19.384" level="INFO">${output} =   name : snap1,</msg>
<status status="PASS" starttime="20241013 16:40:19.379" endtime="20241013 16:40:19.384"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:19.386" level="INFO">  name : snap1,</msg>
<status status="PASS" starttime="20241013 16:40:19.385" endtime="20241013 16:40:19.386"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:19.386" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:19.386" endtime="20241013 16:40:19.386"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.378" endtime="20241013 16:40:19.386"/>
</kw>
<msg timestamp="20241013 16:40:19.386" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:19.378" endtime="20241013 16:40:19.387"/>
</kw>
<msg timestamp="20241013 16:40:19.387" level="INFO">${snap1_res} =   name : snap1,</msg>
<status status="PASS" starttime="20241013 16:40:19.377" endtime="20241013 16:40:19.387"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${snap1_res}</arg>
<arg>${snap_1}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:19.387" endtime="20241013 16:40:19.387"/>
</kw>
<kw name="Execute" library="os">
<var>${snap2_res}</var>
<arg>echo "${snap_list}" | grep ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:19.390" level="INFO">Running command 'echo "[ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1728837546224,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "6b44a430-5481-4362-b5d7-bb1ba640a121",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-6b44a430-5481-4362-b5d7-bb1ba640a121",
  "referencedSize" : 0,
  "referencedReplicatedSize" : 0,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
}, {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap2",
  "creationTime" : 1728837575281,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "0e2f1529-6ee5-425d-99b7-d3ba32df1508",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-0e2f1529-6ee5-425d-99b7-d3ba32df1508",
  "referencedSize" : 16,
  "referencedReplicatedSize" : 48,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
} ]" | grep snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:19.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:19.394" level="INFO">${output} =   name : snap2,</msg>
<status status="PASS" starttime="20241013 16:40:19.388" endtime="20241013 16:40:19.394"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:19.395" level="INFO">  name : snap2,</msg>
<status status="PASS" starttime="20241013 16:40:19.394" endtime="20241013 16:40:19.395"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:19.395" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:19.395" endtime="20241013 16:40:19.395"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.388" endtime="20241013 16:40:19.395"/>
</kw>
<msg timestamp="20241013 16:40:19.395" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:19.388" endtime="20241013 16:40:19.395"/>
</kw>
<msg timestamp="20241013 16:40:19.396" level="INFO">${snap2_res} =   name : snap2,</msg>
<status status="PASS" starttime="20241013 16:40:19.387" endtime="20241013 16:40:19.396"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${snap2_res}</arg>
<arg>${snap_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:19.396" endtime="20241013 16:40:19.396"/>
</kw>
<status status="PASS" starttime="20241013 16:40:14.727" endtime="20241013 16:40:19.396"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:40:14.693" endtime="20241013 16:40:19.396"/>
</test>
<test id="s1-s4-t4" name="Run snap diff on 'om3' and check diff keys" line="95">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:40:19.398" endtime="20241013 16:40:19.399"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:19.402" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:19.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:19.406" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:40:19.400" endtime="20241013 16:40:19.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:19.407" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:40:19.407" endtime="20241013 16:40:19.407"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:19.408" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:19.407" endtime="20241013 16:40:19.408"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.400" endtime="20241013 16:40:19.408"/>
</kw>
<msg timestamp="20241013 16:40:19.408" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:19.399" endtime="20241013 16:40:19.408"/>
</kw>
<msg timestamp="20241013 16:40:19.408" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:40:19.399" endtime="20241013 16:40:19.408"/>
</kw>
<msg timestamp="20241013 16:40:19.408" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:40:19.399" endtime="20241013 16:40:19.408"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:40:19.409" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:40:19.409" endtime="20241013 16:40:19.409"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:19.413" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:19.427" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:19.427" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:40:19.411" endtime="20241013 16:40:19.428"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:19.428" level="INFO"/>
<status status="PASS" starttime="20241013 16:40:19.428" endtime="20241013 16:40:19.429"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:19.429" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:19.429" endtime="20241013 16:40:19.429"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.410" endtime="20241013 16:40:19.430"/>
</kw>
<msg timestamp="20241013 16:40:19.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:19.410" endtime="20241013 16:40:19.430"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.409" endtime="20241013 16:40:19.430"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.409" endtime="20241013 16:40:19.430"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.398" endtime="20241013 16:40:19.430"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.398" endtime="20241013 16:40:19.430"/>
</kw>
<kw name="Run snap diff and validate results">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_1}</arg>
<arg>${SNAP_2}</arg>
<arg>${KEY_1}</arg>
<arg>${KEY_2}</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>3sec</arg>
<arg>Snap diff finished</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Snap diff finished">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Run snap diff and get response">
<var>${diff_res}</var>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Execute" library="os">
<var>${diff_res}</var>
<arg>ozone sh snapshot diff /${volume}/${bucket} ${snap_1} ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:19.436" level="INFO">Running command 'ozone sh snapshot diff /vol1/bucket1 snap1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:23.687" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:23.687" level="INFO">${output} = Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20241013 16:40:19.433" endtime="20241013 16:40:23.687"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:23.689" level="INFO">Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20241013 16:40:23.688" endtime="20241013 16:40:23.689"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:23.690" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:23.689" endtime="20241013 16:40:23.690"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.433" endtime="20241013 16:40:23.690"/>
</kw>
<msg timestamp="20241013 16:40:23.690" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:19.433" endtime="20241013 16:40:23.690"/>
</kw>
<msg timestamp="20241013 16:40:23.690" level="INFO">${diff_res} = Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20241013 16:40:19.432" endtime="20241013 16:40:23.690"/>
</kw>
<msg timestamp="20241013 16:40:23.690" level="INFO">${diff_res} = Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20241013 16:40:19.432" endtime="20241013 16:40:23.690"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${diff_res}</arg>
<arg>Difference between snapshot: ${snap_1} and snapshot: ${snap_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20241013 16:40:23.691" level="FAIL">'Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
' does not contain 'Difference between snapshot: snap1 and snapshot: snap2'</msg>
<status status="FAIL" starttime="20241013 16:40:23.690" endtime="20241013 16:40:23.691"/>
</kw>
<status status="FAIL" starttime="20241013 16:40:19.431" endtime="20241013 16:40:23.691"/>
</kw>
<kw name="Snap diff finished">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Run snap diff and get response">
<var>${diff_res}</var>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Execute" library="os">
<var>${diff_res}</var>
<arg>ozone sh snapshot diff /${volume}/${bucket} ${snap_1} ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:26.697" level="INFO">Running command 'ozone sh snapshot diff /vol1/bucket1 snap1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:30.764" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:30.764" level="INFO">${output} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:26.694" endtime="20241013 16:40:30.764"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:30.765" level="INFO">Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:30.764" endtime="20241013 16:40:30.765"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:30.766" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:30.765" endtime="20241013 16:40:30.766"/>
</kw>
<status status="PASS" starttime="20241013 16:40:26.694" endtime="20241013 16:40:30.766"/>
</kw>
<msg timestamp="20241013 16:40:30.766" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:26.694" endtime="20241013 16:40:30.766"/>
</kw>
<msg timestamp="20241013 16:40:30.766" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:26.693" endtime="20241013 16:40:30.766"/>
</kw>
<msg timestamp="20241013 16:40:30.766" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:26.693" endtime="20241013 16:40:30.766"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${diff_res}</arg>
<arg>Difference between snapshot: ${snap_1} and snapshot: ${snap_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:30.766" endtime="20241013 16:40:30.767"/>
</kw>
<status status="PASS" starttime="20241013 16:40:26.692" endtime="20241013 16:40:30.767"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.431" endtime="20241013 16:40:30.767"/>
</kw>
<kw name="Run snap diff and get response">
<var>${diff_res}</var>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Execute" library="os">
<var>${diff_res}</var>
<arg>ozone sh snapshot diff /${volume}/${bucket} ${snap_1} ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:30.771" level="INFO">Running command 'ozone sh snapshot diff /vol1/bucket1 snap1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:35.101" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:35.101" level="INFO">${output} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:30.769" endtime="20241013 16:40:35.101"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:35.102" level="INFO">Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:35.101" endtime="20241013 16:40:35.102"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:35.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:35.102" endtime="20241013 16:40:35.103"/>
</kw>
<status status="PASS" starttime="20241013 16:40:30.768" endtime="20241013 16:40:35.103"/>
</kw>
<msg timestamp="20241013 16:40:35.103" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:30.768" endtime="20241013 16:40:35.103"/>
</kw>
<msg timestamp="20241013 16:40:35.103" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:30.768" endtime="20241013 16:40:35.103"/>
</kw>
<msg timestamp="20241013 16:40:35.103" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20241013 16:40:30.767" endtime="20241013 16:40:35.103"/>
</kw>
<kw name="Execute" library="os">
<var>${key_num}</var>
<arg>echo "${diff_res}" | grep 'key' | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:35.107" level="INFO">Running command 'echo "Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
" | grep 'key' | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:35.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:35.111" level="INFO">${output} = 2</msg>
<status status="PASS" starttime="20241013 16:40:35.105" endtime="20241013 16:40:35.111"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:35.112" level="INFO">2</msg>
<status status="PASS" starttime="20241013 16:40:35.112" endtime="20241013 16:40:35.112"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:35.113" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:35.112" endtime="20241013 16:40:35.113"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.104" endtime="20241013 16:40:35.113"/>
</kw>
<msg timestamp="20241013 16:40:35.113" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:35.104" endtime="20241013 16:40:35.113"/>
</kw>
<msg timestamp="20241013 16:40:35.113" level="INFO">${key_num} = 2</msg>
<status status="PASS" starttime="20241013 16:40:35.103" endtime="20241013 16:40:35.113"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${key_num} == 2</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20241013 16:40:35.113" endtime="20241013 16:40:35.114"/>
</kw>
<kw name="Execute" library="os">
<var>${diff_key1}</var>
<arg>echo "${diff_res}" | grep ${key_1} | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:35.117" level="INFO">Running command 'echo "Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
" | grep key1 | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:35.121" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:35.121" level="INFO">${output} = 1</msg>
<status status="PASS" starttime="20241013 16:40:35.115" endtime="20241013 16:40:35.121"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:35.122" level="INFO">1</msg>
<status status="PASS" starttime="20241013 16:40:35.122" endtime="20241013 16:40:35.122"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:35.123" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:35.122" endtime="20241013 16:40:35.123"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.115" endtime="20241013 16:40:35.123"/>
</kw>
<msg timestamp="20241013 16:40:35.123" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:35.114" endtime="20241013 16:40:35.123"/>
</kw>
<msg timestamp="20241013 16:40:35.123" level="INFO">${diff_key1} = 1</msg>
<status status="PASS" starttime="20241013 16:40:35.114" endtime="20241013 16:40:35.123"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${diff_key1} == 1</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20241013 16:40:35.123" endtime="20241013 16:40:35.124"/>
</kw>
<kw name="Execute" library="os">
<var>${diff_key2}</var>
<arg>echo "${diff_res}" | grep ${key_2} | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:35.127" level="INFO">Running command 'echo "Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
" | grep key2 | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:35.132" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:35.132" level="INFO">${output} = 1</msg>
<status status="PASS" starttime="20241013 16:40:35.125" endtime="20241013 16:40:35.132"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:35.133" level="INFO">1</msg>
<status status="PASS" starttime="20241013 16:40:35.132" endtime="20241013 16:40:35.133"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:35.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:35.133" endtime="20241013 16:40:35.133"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.125" endtime="20241013 16:40:35.133"/>
</kw>
<msg timestamp="20241013 16:40:35.133" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:35.124" endtime="20241013 16:40:35.134"/>
</kw>
<msg timestamp="20241013 16:40:35.134" level="INFO">${diff_key2} = 1</msg>
<status status="PASS" starttime="20241013 16:40:35.124" endtime="20241013 16:40:35.134"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${diff_key2} == 1</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20241013 16:40:35.134" endtime="20241013 16:40:35.134"/>
</kw>
<status status="PASS" starttime="20241013 16:40:19.430" endtime="20241013 16:40:35.134"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:40:19.397" endtime="20241013 16:40:35.134"/>
</test>
<test id="s1-s4-t5" name="Cat snapshot keys and validate contents" line="98">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20241013 16:40:35.136" endtime="20241013 16:40:35.137"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:35.140" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:35.144" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:35.144" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20241013 16:40:35.138" endtime="20241013 16:40:35.144"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:35.145" level="INFO">om</msg>
<status status="PASS" starttime="20241013 16:40:35.144" endtime="20241013 16:40:35.145"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:35.146" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:35.145" endtime="20241013 16:40:35.146"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.138" endtime="20241013 16:40:35.146"/>
</kw>
<msg timestamp="20241013 16:40:35.146" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:35.137" endtime="20241013 16:40:35.146"/>
</kw>
<msg timestamp="20241013 16:40:35.146" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20241013 16:40:35.137" endtime="20241013 16:40:35.146"/>
</kw>
<msg timestamp="20241013 16:40:35.146" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:40:35.137" endtime="20241013 16:40:35.146"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20241013 16:40:35.147" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20241013 16:40:35.147" endtime="20241013 16:40:35.147"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:35.151" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:35.174" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:35.174" level="INFO">${output} = </msg>
<status status="PASS" starttime="20241013 16:40:35.149" endtime="20241013 16:40:35.174"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:35.175" level="INFO"/>
<status status="PASS" starttime="20241013 16:40:35.174" endtime="20241013 16:40:35.175"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:35.175" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:35.175" endtime="20241013 16:40:35.176"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.148" endtime="20241013 16:40:35.176"/>
</kw>
<msg timestamp="20241013 16:40:35.176" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:35.148" endtime="20241013 16:40:35.176"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.147" endtime="20241013 16:40:35.176"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.147" endtime="20241013 16:40:35.176"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.136" endtime="20241013 16:40:35.176"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.136" endtime="20241013 16:40:35.176"/>
</kw>
<kw name="Validate keys under snapshot">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_2}</arg>
<arg>${KEY_PREFIX}</arg>
<arg>${KEY_1}</arg>
<arg>${KEY_2}</arg>
<kw name="Execute" library="os">
<var>${key1_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/.snapshot/${snap}/${key_prefix}/${key_1}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:35.181" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/.snapshot/snap2/sn/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:41.393" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:41.394" level="INFO">${output} = sn/key1</msg>
<status status="PASS" starttime="20241013 16:40:35.178" endtime="20241013 16:40:41.394"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:41.395" level="INFO">sn/key1</msg>
<status status="PASS" starttime="20241013 16:40:41.394" endtime="20241013 16:40:41.395"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:41.395" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:41.395" endtime="20241013 16:40:41.396"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.178" endtime="20241013 16:40:41.396"/>
</kw>
<msg timestamp="20241013 16:40:41.396" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:35.178" endtime="20241013 16:40:41.396"/>
</kw>
<msg timestamp="20241013 16:40:41.396" level="INFO">${key1_res} = sn/key1</msg>
<status status="PASS" starttime="20241013 16:40:35.177" endtime="20241013 16:40:41.396"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key1_res}</arg>
<arg>${key_prefix}/${key_1}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:41.396" endtime="20241013 16:40:41.397"/>
</kw>
<kw name="Execute" library="os">
<var>${key2_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/.snapshot/${snap}/${key_prefix}/${key_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20241013 16:40:41.401" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/.snapshot/snap2/sn/key2 2&gt;&amp;1'.</msg>
<msg timestamp="20241013 16:40:47.810" level="INFO">${rc} = 0</msg>
<msg timestamp="20241013 16:40:47.810" level="INFO">${output} = sn/key2</msg>
<status status="PASS" starttime="20241013 16:40:41.398" endtime="20241013 16:40:47.810"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20241013 16:40:47.811" level="INFO">sn/key2</msg>
<status status="PASS" starttime="20241013 16:40:47.810" endtime="20241013 16:40:47.811"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20241013 16:40:47.811" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20241013 16:40:47.811" endtime="20241013 16:40:47.811"/>
</kw>
<status status="PASS" starttime="20241013 16:40:41.398" endtime="20241013 16:40:47.812"/>
</kw>
<msg timestamp="20241013 16:40:47.812" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20241013 16:40:41.398" endtime="20241013 16:40:47.812"/>
</kw>
<msg timestamp="20241013 16:40:47.812" level="INFO">${key2_res} = sn/key2</msg>
<status status="PASS" starttime="20241013 16:40:41.397" endtime="20241013 16:40:47.812"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key2_res}</arg>
<arg>${key_prefix}/${key_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20241013 16:40:47.812" endtime="20241013 16:40:47.813"/>
</kw>
<status status="PASS" starttime="20241013 16:40:35.176" endtime="20241013 16:40:47.813"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20241013 16:40:35.135" endtime="20241013 16:40:47.813"/>
</test>
<doc>Smoke test for validating snapshot data after om bootstrap.</doc>
<status status="PASS" starttime="20241013 16:39:52.077" endtime="20241013 16:40:47.814"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="105496"/>
</suite>
<statistics>
<total>
<stat pass="12" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="12" fail="0" skip="0" id="s1" name="ozonesecure-ha-om-bootstrap">ozonesecure-ha-om-bootstrap</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-om-bootstrap.Kinit</stat>
<stat pass="5" fail="0" skip="0" id="s1-s2" name="Data-Creation-Before-Om-Bootstrap">ozonesecure-ha-om-bootstrap.Data-Creation-Before-Om-Bootstrap</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Kinit">ozonesecure-ha-om-bootstrap.Kinit</stat>
<stat pass="5" fail="0" skip="0" id="s1-s4" name="Data-Validation-After-Om-Bootstrap">ozonesecure-ha-om-bootstrap.Data-Validation-After-Om-Bootstrap</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
