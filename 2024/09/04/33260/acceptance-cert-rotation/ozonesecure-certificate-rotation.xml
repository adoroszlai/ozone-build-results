<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.6.8 on linux)" generated="20240904 01:56:15.583" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-certificate-rotation" source="/opt/hadoop/smoketest/certrotation">
<suite id="s1-s1" name="Cert-Rotation" source="/opt/hadoop/smoketest/certrotation/cert-rotation.robot">
<kw name="Setup Test" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20240904 01:55:16.746" endtime="20240904 01:55:16.746"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:16.749" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:16.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:16.753" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20240904 01:55:16.747" endtime="20240904 01:55:16.753"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:16.754" level="INFO">scm</msg>
<status status="PASS" starttime="20240904 01:55:16.754" endtime="20240904 01:55:16.754"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:16.755" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:16.754" endtime="20240904 01:55:16.755"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.747" endtime="20240904 01:55:16.755"/>
</kw>
<msg timestamp="20240904 01:55:16.755" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:16.747" endtime="20240904 01:55:16.755"/>
</kw>
<msg timestamp="20240904 01:55:16.755" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20240904 01:55:16.746" endtime="20240904 01:55:16.755"/>
</kw>
<msg timestamp="20240904 01:55:16.755" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20240904 01:55:16.746" endtime="20240904 01:55:16.755"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20240904 01:55:16.756" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20240904 01:55:16.756" endtime="20240904 01:55:16.756"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:16.759" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:16.832" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:16.832" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:16.757" endtime="20240904 01:55:16.832"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:16.833" level="INFO"/>
<status status="PASS" starttime="20240904 01:55:16.833" endtime="20240904 01:55:16.833"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:16.834" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:16.834" endtime="20240904 01:55:16.834"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.757" endtime="20240904 01:55:16.834"/>
</kw>
<msg timestamp="20240904 01:55:16.834" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:16.757" endtime="20240904 01:55:16.834"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.756" endtime="20240904 01:55:16.834"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.756" endtime="20240904 01:55:16.834"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.746" endtime="20240904 01:55:16.834"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.745" endtime="20240904 01:55:16.834"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.745" endtime="20240904 01:55:16.834"/>
</kw>
<test id="s1-s1-t1" name="Test datanode functions before and after certificate rotation" line="55">
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20240904 01:55:16.836" level="INFO">${random} = oo7isor6Hq</msg>
<status status="PASS" starttime="20240904 01:55:16.836" endtime="20240904 01:55:16.836"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:16.841" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p oo7isor6Hq  2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:25.734" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:25.734" level="INFO">${output} = 2024-09-04 01:55:18,843 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:19,073 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:16.838" endtime="20240904 01:55:25.734"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:25.735" level="INFO">2024-09-04 01:55:18,843 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:19,073 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2024-09-04 01:55:19,073 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2024-09-04 01:55:19,188 [main] INFO freon.BaseFreonGenerator: Executing test with prefix oo7isor6Hq and number-of-tests 1
2024-09-04 01:55:19,268 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:20,269 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:21,274 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:22,062 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2024-09-04 01:55:22,243 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2024-09-04 01:55:22,278 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:22,526 [pool-2-thread-1] INFO io.KeyOutputStreamSemaphore: Initializing semaphore with maxConcurrentWritePerKey = 1
2024-09-04 01:55:22,594 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2024-09-04 01:55:22,668 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2024-09-04 01:55:22,871 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.dropwizard3.Dm3MetricRegistriesImpl
2024-09-04 01:55:23,278 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:24,279 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:25,279 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2024-09-04 01:55:25,323 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2116.33165, max=2116.33165, mean=2116.33165, stddev=0.0, median=2116.33165, p75=2116.33165, p95=2116.33165, p98=2116.33165, p99=2116.33165, p999=2116.33165, mean_rate=0.3296176742610747, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2024-09-04 01:55:25,324 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2024-09-04 01:55:25,324 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2024-09-04 01:55:25,324 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20240904 01:55:25.734" endtime="20240904 01:55:25.735"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:25.735" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:25.735" endtime="20240904 01:55:25.736"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.838" endtime="20240904 01:55:25.736"/>
</kw>
<msg timestamp="20240904 01:55:25.736" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:16.838" endtime="20240904 01:55:25.736"/>
</kw>
<msg timestamp="20240904 01:55:25.736" level="INFO">${result} = 2024-09-04 01:55:18,843 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:19,073 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:16.837" endtime="20240904 01:55:25.736"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:55:25.736" endtime="20240904 01:55:25.736"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.836" endtime="20240904 01:55:25.737"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:25.741" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p oo7isor6Hq  2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:33.379" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:33.379" level="INFO">${output} = 2024-09-04 01:55:27,921 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:28,012 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:25.739" endtime="20240904 01:55:33.379"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:33.380" level="INFO">2024-09-04 01:55:27,921 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:28,012 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2024-09-04 01:55:28,012 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2024-09-04 01:55:28,071 [main] INFO freon.BaseFreonGenerator: Executing test with prefix oo7isor6Hq and number-of-tests 1
2024-09-04 01:55:28,121 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:29,123 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:30,124 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:30,742 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2024-09-04 01:55:31,125 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:32,125 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2024-09-04 01:55:32,982 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=32.405183, max=32.405183, mean=32.405183, stddev=0.0, median=32.405183, p75=32.405183, p95=32.405183, p98=32.405183, p99=32.405183, p999=32.405183, mean_rate=0.9702572162067864, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2024-09-04 01:55:32,988 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2024-09-04 01:55:32,989 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2024-09-04 01:55:32,989 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20240904 01:55:33.379" endtime="20240904 01:55:33.380"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:33.381" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:33.380" endtime="20240904 01:55:33.381"/>
</kw>
<status status="PASS" starttime="20240904 01:55:25.738" endtime="20240904 01:55:33.381"/>
</kw>
<msg timestamp="20240904 01:55:33.381" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:25.738" endtime="20240904 01:55:33.381"/>
</kw>
<msg timestamp="20240904 01:55:33.382" level="INFO">${result} = 2024-09-04 01:55:27,921 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:28,012 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:25.738" endtime="20240904 01:55:33.382"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:55:33.382" endtime="20240904 01:55:33.382"/>
</kw>
<status status="PASS" starttime="20240904 01:55:25.737" endtime="20240904 01:55:33.382"/>
</kw>
<status status="PASS" starttime="20240904 01:55:16.835" endtime="20240904 01:55:33.382"/>
</kw>
<kw name="Find certificate duration">
<var>${certDuration}</var>
<kw name="Execute" library="os">
<var>${waitTime}</var>
<arg>ozone getconf confKey hdds.x509.default.duration | sed 's/PT//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:33.388" level="INFO">Running command 'ozone getconf confKey hdds.x509.default.duration | sed 's/PT//' 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:34.625" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:34.625" level="INFO">${output} = 40s</msg>
<status status="PASS" starttime="20240904 01:55:33.384" endtime="20240904 01:55:34.625"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:34.626" level="INFO">40s</msg>
<status status="PASS" starttime="20240904 01:55:34.625" endtime="20240904 01:55:34.626"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:34.626" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:34.626" endtime="20240904 01:55:34.626"/>
</kw>
<status status="PASS" starttime="20240904 01:55:33.384" endtime="20240904 01:55:34.626"/>
</kw>
<msg timestamp="20240904 01:55:34.626" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:33.384" endtime="20240904 01:55:34.626"/>
</kw>
<msg timestamp="20240904 01:55:34.627" level="INFO">${waitTime} = 40s</msg>
<status status="PASS" starttime="20240904 01:55:33.383" endtime="20240904 01:55:34.627"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>"${waitTime}" != "${EMPTY}"</arg>
<arg>${waitTime}</arg>
<arg>0s</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20240904 01:55:34.628" level="INFO">${result} = 40s</msg>
<status status="PASS" starttime="20240904 01:55:34.627" endtime="20240904 01:55:34.628"/>
</kw>
<msg timestamp="20240904 01:55:34.628" level="INFO">${certDuration} = 40s</msg>
<status status="PASS" starttime="20240904 01:55:33.383" endtime="20240904 01:55:34.628"/>
</kw>
<kw name="Double duration">
<var>${doubleDuration}</var>
<arg>${certDuration}</arg>
<kw name="Add Time To Time" library="DateTime">
<var>${doubleDuration}</var>
<arg>${duration}</arg>
<arg>${duration}</arg>
<doc>Adds time to another time and returns the resulting time.</doc>
<msg timestamp="20240904 01:55:34.629" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20240904 01:55:34.628" endtime="20240904 01:55:34.629"/>
</kw>
<msg timestamp="20240904 01:55:34.629" level="INFO">${doubleDuration} = 80.0</msg>
<status status="PASS" starttime="20240904 01:55:34.628" endtime="20240904 01:55:34.629"/>
</kw>
<kw name="Get datanode cert serial">
<var>${certId1}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:34.633" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:34.655" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:34.655" level="INFO">${output} = 14</msg>
<status status="PASS" starttime="20240904 01:55:34.630" endtime="20240904 01:55:34.656"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:34.657" level="INFO">14</msg>
<status status="PASS" starttime="20240904 01:55:34.656" endtime="20240904 01:55:34.657"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:34.657" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:34.657" endtime="20240904 01:55:34.657"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.630" endtime="20240904 01:55:34.657"/>
</kw>
<msg timestamp="20240904 01:55:34.658" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:34.630" endtime="20240904 01:55:34.658"/>
</kw>
<msg timestamp="20240904 01:55:34.658" level="INFO">${certSerial} = 14</msg>
<status status="PASS" starttime="20240904 01:55:34.629" endtime="20240904 01:55:34.658"/>
</kw>
<msg timestamp="20240904 01:55:34.658" level="INFO">${certId1} = 14</msg>
<status status="PASS" starttime="20240904 01:55:34.629" endtime="20240904 01:55:34.658"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>${doubleDuration}</arg>
<arg>5sec</arg>
<arg>Datanode has new certificate</arg>
<arg>${certId1}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Datanode has new certificate">
<arg>${certId1}</arg>
<kw name="Get datanode cert serial">
<var>${newCertId}</var>
<kw name="Execute" library="os">
<var>${certSerial}</var>
<arg>openssl s_client -connect "${datanode}":"${port}" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:34.663" level="INFO">Running command 'openssl s_client -connect "datanode":"9859" -showcerts | openssl x509 -noout -serial | grep serial | sed 's/serial=//' 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:34.687" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:34.687" level="INFO">${output} = 13</msg>
<status status="PASS" starttime="20240904 01:55:34.660" endtime="20240904 01:55:34.687"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:34.688" level="INFO">13</msg>
<status status="PASS" starttime="20240904 01:55:34.687" endtime="20240904 01:55:34.688"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:34.689" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:34.688" endtime="20240904 01:55:34.689"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.660" endtime="20240904 01:55:34.689"/>
</kw>
<msg timestamp="20240904 01:55:34.689" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:34.660" endtime="20240904 01:55:34.689"/>
</kw>
<msg timestamp="20240904 01:55:34.689" level="INFO">${certSerial} = 13</msg>
<status status="PASS" starttime="20240904 01:55:34.659" endtime="20240904 01:55:34.689"/>
</kw>
<msg timestamp="20240904 01:55:34.689" level="INFO">${newCertId} = 13</msg>
<status status="PASS" starttime="20240904 01:55:34.659" endtime="20240904 01:55:34.689"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${certId}</arg>
<arg>${newCertId}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20240904 01:55:34.689" endtime="20240904 01:55:34.690"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.659" endtime="20240904 01:55:34.690"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.658" endtime="20240904 01:55:34.690"/>
</kw>
<kw name="Basic key generation and validation">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20240904 01:55:34.691" level="INFO">${random} = bjokdnOPqX</msg>
<status status="PASS" starttime="20240904 01:55:34.690" endtime="20240904 01:55:34.691"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:34.695" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p bjokdnOPqX  2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:41.279" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:41.279" level="INFO">${output} = 2024-09-04 01:55:36,622 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:36,720 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:34.693" endtime="20240904 01:55:41.279"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:41.280" level="INFO">2024-09-04 01:55:36,622 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:36,720 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2024-09-04 01:55:36,720 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2024-09-04 01:55:36,795 [main] INFO freon.BaseFreonGenerator: Executing test with prefix bjokdnOPqX and number-of-tests 1
2024-09-04 01:55:36,832 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:37,833 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:38,525 [pool-2-thread-1] INFO io.KeyOutputStreamSemaphore: Initializing semaphore with maxConcurrentWritePerKey = 1
2024-09-04 01:55:38,659 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2024-09-04 01:55:38,757 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2024-09-04 01:55:38,833 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:38,987 [pool-2-thread-1] INFO metrics.MetricRegistries: Loaded MetricRegistries class org.apache.ratis.metrics.dropwizard3.Dm3MetricRegistriesImpl
2024-09-04 01:55:39,834 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:40,834 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2024-09-04 01:55:40,869 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=1590.628101, max=1590.628101, mean=1590.628101, stddev=0.0, median=1590.628101, p75=1590.628101, p95=1590.628101, p98=1590.628101, p99=1590.628101, p999=1590.628101, mean_rate=0.4028004060192646, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2024-09-04 01:55:40,869 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 4
2024-09-04 01:55:40,869 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2024-09-04 01:55:40,870 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20240904 01:55:41.279" endtime="20240904 01:55:41.280"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:41.281" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:41.280" endtime="20240904 01:55:41.281"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.693" endtime="20240904 01:55:41.281"/>
</kw>
<msg timestamp="20240904 01:55:41.281" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:34.692" endtime="20240904 01:55:41.281"/>
</kw>
<msg timestamp="20240904 01:55:41.281" level="INFO">${result} = 2024-09-04 01:55:36,622 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:36,720 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:34.692" endtime="20240904 01:55:41.282"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:55:41.282" endtime="20240904 01:55:41.282"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.691" endtime="20240904 01:55:41.282"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:41.288" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p bjokdnOPqX  2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:47.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:47.754" level="INFO">${output} = 2024-09-04 01:55:43,458 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:43,543 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:41.285" endtime="20240904 01:55:47.754"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:47.755" level="INFO">2024-09-04 01:55:43,458 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:43,543 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2024-09-04 01:55:43,543 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2024-09-04 01:55:43,595 [main] INFO freon.BaseFreonGenerator: Executing test with prefix bjokdnOPqX and number-of-tests 1
2024-09-04 01:55:43,629 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:44,629 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:45,265 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2024-09-04 01:55:45,630 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2024-09-04 01:55:46,630 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2024-09-04 01:55:47,366 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=25.747334, max=25.747334, mean=25.747334, stddev=0.0, median=25.747334, p75=25.747334, p95=25.747334, p98=25.747334, p99=25.747334, p999=25.747334, mean_rate=0.9128111822612133, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2024-09-04 01:55:47,366 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 4
2024-09-04 01:55:47,367 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2024-09-04 01:55:47,367 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20240904 01:55:47.754" endtime="20240904 01:55:47.755"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:47.755" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:47.755" endtime="20240904 01:55:47.755"/>
</kw>
<status status="PASS" starttime="20240904 01:55:41.285" endtime="20240904 01:55:47.755"/>
</kw>
<msg timestamp="20240904 01:55:47.756" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:41.284" endtime="20240904 01:55:47.756"/>
</kw>
<msg timestamp="20240904 01:55:47.756" level="INFO">${result} = 2024-09-04 01:55:43,458 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2024-09-04 01:55:43,543 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20240904 01:55:41.284" endtime="20240904 01:55:47.756"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:55:47.756" endtime="20240904 01:55:47.756"/>
</kw>
<status status="PASS" starttime="20240904 01:55:41.282" endtime="20240904 01:55:47.756"/>
</kw>
<status status="PASS" starttime="20240904 01:55:34.690" endtime="20240904 01:55:47.756"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20240904 01:55:16.835" endtime="20240904 01:55:47.757"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20240904 01:55:16.714" endtime="20240904 01:55:47.757"/>
</suite>
<suite id="s1-s2" name="Root-Ca-Rotation-Client-Checks" source="/opt/hadoop/smoketest/certrotation/root-ca-rotation-client-checks.robot">
<test id="s1-s2-t1" name="Create a volume and bucket" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:47.767" level="INFO">Running command 'ozone sh volume create rootca-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:52.248" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:52.248" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:47.765" endtime="20240904 01:55:52.249"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:52.249" level="INFO"/>
<status status="PASS" starttime="20240904 01:55:52.249" endtime="20240904 01:55:52.250"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:52.250" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:52.250" endtime="20240904 01:55:52.250"/>
</kw>
<status status="PASS" starttime="20240904 01:55:47.765" endtime="20240904 01:55:52.250"/>
</kw>
<msg timestamp="20240904 01:55:52.250" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:47.764" endtime="20240904 01:55:52.250"/>
</kw>
<msg timestamp="20240904 01:55:52.250" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:47.764" endtime="20240904 01:55:52.250"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:55:52.251" endtime="20240904 01:55:52.251"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:52.254" level="INFO">Running command 'ozone sh bucket create /rootca-volume/rootca-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:55:55.931" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:55.931" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:52.252" endtime="20240904 01:55:55.931"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:55.932" level="INFO"/>
<status status="PASS" starttime="20240904 01:55:55.931" endtime="20240904 01:55:55.932"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:55.932" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:55.932" endtime="20240904 01:55:55.933"/>
</kw>
<status status="PASS" starttime="20240904 01:55:52.252" endtime="20240904 01:55:55.933"/>
</kw>
<msg timestamp="20240904 01:55:55.933" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:52.252" endtime="20240904 01:55:55.933"/>
</kw>
<msg timestamp="20240904 01:55:55.933" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:52.251" endtime="20240904 01:55:55.933"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:55:55.933" endtime="20240904 01:55:55.934"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20240904 01:55:47.763" endtime="20240904 01:55:55.934"/>
</test>
<test id="s1-s2-t2" name="Create key" line="34">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:55.937" level="INFO">Running command 'echo "rootca: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20240904 01:55:55.939" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:55:55.939" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:55.935" endtime="20240904 01:55:55.939"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:55:55.940" level="INFO"/>
<status status="PASS" starttime="20240904 01:55:55.940" endtime="20240904 01:55:55.940"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:55:55.941" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:55:55.940" endtime="20240904 01:55:55.941"/>
</kw>
<status status="PASS" starttime="20240904 01:55:55.935" endtime="20240904 01:55:55.941"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:55:55.944" level="INFO">Running command 'ozone sh key put /rootca-volume/rootca-bucket/rootca-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:56:02.009" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:56:02.009" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:55.942" endtime="20240904 01:56:02.009"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:56:02.010" level="INFO"/>
<status status="PASS" starttime="20240904 01:56:02.009" endtime="20240904 01:56:02.010"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:56:02.010" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:56:02.010" endtime="20240904 01:56:02.010"/>
</kw>
<status status="PASS" starttime="20240904 01:55:55.942" endtime="20240904 01:56:02.011"/>
</kw>
<msg timestamp="20240904 01:56:02.011" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:55:55.942" endtime="20240904 01:56:02.011"/>
</kw>
<msg timestamp="20240904 01:56:02.011" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:55:55.941" endtime="20240904 01:56:02.011"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:56:02.011" endtime="20240904 01:56:02.011"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:56:02.014" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:56:02.018" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:56:02.018" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:56:02.012" endtime="20240904 01:56:02.018"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:56:02.018" level="INFO"/>
<status status="PASS" starttime="20240904 01:56:02.018" endtime="20240904 01:56:02.019"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:56:02.019" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:56:02.019" endtime="20240904 01:56:02.019"/>
</kw>
<status status="PASS" starttime="20240904 01:56:02.011" endtime="20240904 01:56:02.019"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20240904 01:55:55.934" endtime="20240904 01:56:02.019"/>
</test>
<test id="s1-s2-t3" name="Read data from previously created key" line="40">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20240904 01:56:02.021" level="INFO">${random} = 71650</msg>
<status status="PASS" starttime="20240904 01:56:02.021" endtime="20240904 01:56:02.021"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:56:02.024" level="INFO">Running command 'ozone sh key get /rootca-volume/rootca-bucket/rootca-key /tmp/key-71650 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:56:07.687" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:56:07.687" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:56:02.023" endtime="20240904 01:56:07.687"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:56:07.688" level="INFO"/>
<status status="PASS" starttime="20240904 01:56:07.687" endtime="20240904 01:56:07.688"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:56:07.688" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:56:07.688" endtime="20240904 01:56:07.689"/>
</kw>
<status status="PASS" starttime="20240904 01:56:02.022" endtime="20240904 01:56:07.689"/>
</kw>
<msg timestamp="20240904 01:56:07.689" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240904 01:56:02.022" endtime="20240904 01:56:07.689"/>
</kw>
<msg timestamp="20240904 01:56:07.689" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:56:02.021" endtime="20240904 01:56:07.689"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:56:07.689" endtime="20240904 01:56:07.690"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:56:07.692" level="INFO">Running command 'cat /tmp/key-71650 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:56:07.696" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:56:07.696" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20240904 01:56:07.690" endtime="20240904 01:56:07.696"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:56:07.697" level="INFO">rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20240904 01:56:07.696" endtime="20240904 01:56:07.697"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:56:07.697" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:56:07.697" endtime="20240904 01:56:07.697"/>
</kw>
<msg timestamp="20240904 01:56:07.698" level="INFO">${output} = rootca: key created using Ozone Shell</msg>
<status status="PASS" starttime="20240904 01:56:07.690" endtime="20240904 01:56:07.698"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20240904 01:56:07.698" endtime="20240904 01:56:07.698"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20240904 01:56:07.700" level="INFO">Running command 'rm /tmp/key-71650 2&gt;&amp;1'.</msg>
<msg timestamp="20240904 01:56:07.704" level="INFO">${rc} = 0</msg>
<msg timestamp="20240904 01:56:07.704" level="INFO">${output} = </msg>
<status status="PASS" starttime="20240904 01:56:07.699" endtime="20240904 01:56:07.704"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240904 01:56:07.705" level="INFO"/>
<status status="PASS" starttime="20240904 01:56:07.704" endtime="20240904 01:56:07.705"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20240904 01:56:07.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20240904 01:56:07.705" endtime="20240904 01:56:07.705"/>
</kw>
<status status="PASS" starttime="20240904 01:56:07.698" endtime="20240904 01:56:07.705"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20240904 01:56:02.020" endtime="20240904 01:56:07.706"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20240904 01:55:47.758" endtime="20240904 01:56:07.706"/>
</suite>
<status status="PASS" starttime="20240904 01:55:16.693" endtime="20240904 01:56:07.708"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">create-volume-and-bucket</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="ozonesecure-certificate-rotation">ozonesecure-certificate-rotation</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Cert-Rotation">ozonesecure-certificate-rotation.Cert-Rotation</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Root-Ca-Rotation-Client-Checks">ozonesecure-certificate-rotation.Root-Ca-Rotation-Client-Checks</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
