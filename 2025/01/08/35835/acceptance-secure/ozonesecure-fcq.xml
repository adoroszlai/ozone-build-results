<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250108 15:50:21.045" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-fcq" source="/opt/hadoop/smoketest/fcq/s3_om_fcq.robot">
<test id="s1-t1" name="Test setup headers" line="64">
<kw name="Setup headers">
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250108 15:49:30.654" endtime="20250108 15:49:30.654"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:30.657" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:30.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:30.661" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250108 15:49:30.655" endtime="20250108 15:49:30.661"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:30.662" level="INFO">s3g</msg>
<status status="PASS" starttime="20250108 15:49:30.661" endtime="20250108 15:49:30.662"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:30.662" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:30.662" endtime="20250108 15:49:30.662"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.655" endtime="20250108 15:49:30.662"/>
</kw>
<msg timestamp="20250108 15:49:30.662" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:30.655" endtime="20250108 15:49:30.662"/>
</kw>
<msg timestamp="20250108 15:49:30.662" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250108 15:49:30.655" endtime="20250108 15:49:30.662"/>
</kw>
<msg timestamp="20250108 15:49:30.663" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:30.654" endtime="20250108 15:49:30.663"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250108 15:49:30.663" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:30.663" endtime="20250108 15:49:30.663"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:30.666" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:30.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:30.705" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:30.664" endtime="20250108 15:49:30.705"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:30.705" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:30.705" endtime="20250108 15:49:30.705"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:30.706" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:30.706" endtime="20250108 15:49:30.706"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.664" endtime="20250108 15:49:30.706"/>
</kw>
<msg timestamp="20250108 15:49:30.706" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:30.664" endtime="20250108 15:49:30.706"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.663" endtime="20250108 15:49:30.706"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.663" endtime="20250108 15:49:30.706"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.654" endtime="20250108 15:49:30.706"/>
</kw>
<kw name="Setup secure v4 headers" library="commonawslib">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:30.709" level="INFO">Running command 'ozone s3 getsecret  2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:34.080" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:34.080" level="INFO">${output} = awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:30.707" endtime="20250108 15:49:34.080"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:34.081" level="INFO">awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:34.081" endtime="20250108 15:49:34.081"/>
</kw>
<msg timestamp="20250108 15:49:34.081" level="INFO">${result} = awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:30.707" endtime="20250108 15:49:34.081"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${exists}</var>
<arg>Should Contain</arg>
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20250108 15:49:34.082" level="FAIL">'awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41' does not contain 'S3_SECRET_ALREADY_EXISTS'</msg>
<status status="FAIL" starttime="20250108 15:49:34.082" endtime="20250108 15:49:34.082"/>
</kw>
<msg timestamp="20250108 15:49:34.082" level="INFO">${exists} = False</msg>
<status status="PASS" starttime="20250108 15:49:34.082" endtime="20250108 15:49:34.082"/>
</kw>
<if>
<branch type="IF" condition="${exists}">
<kw name="Execute" library="os">
<arg>ozone s3 revokesecret -y ${OM_HA_PARAM}</arg>
<status status="NOT RUN" starttime="20250108 15:49:34.083" endtime="20250108 15:49:34.083"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<status status="NOT RUN" starttime="20250108 15:49:34.083" endtime="20250108 15:49:34.083"/>
</kw>
<status status="NOT RUN" starttime="20250108 15:49:34.083" endtime="20250108 15:49:34.083"/>
</branch>
<status status="PASS" starttime="20250108 15:49:34.083" endtime="20250108 15:49:34.083"/>
</if>
<kw name="Get Regexp Matches" library="String">
<var>${accessKey}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsAccessKey=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250108 15:49:34.084" level="INFO">${accessKey} = ['testuser/s3g@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250108 15:49:34.083" endtime="20250108 15:49:34.084"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey}</arg>
<arg>testuser</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20250108 15:49:34.084" level="INFO">${accessKey} = ['testuser/s3g@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250108 15:49:34.084" endtime="20250108 15:49:34.084"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${secret}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsSecret=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250108 15:49:34.085" level="INFO">${secret} = ['001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41']</msg>
<status status="PASS" starttime="20250108 15:49:34.084" endtime="20250108 15:49:34.085"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250108 15:49:34.085" level="INFO">${accessKey} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:34.085" endtime="20250108 15:49:34.085"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${secret}</var>
<arg>${secret[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250108 15:49:34.086" level="INFO">${secret} = 001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:34.085" endtime="20250108 15:49:34.086"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.signature_version s3v4</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:34.089" level="INFO">Running command 'aws configure set default.s3.signature_version s3v4 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:34.466" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:34.466" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:34.087" endtime="20250108 15:49:34.466"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:34.467" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:34.466" endtime="20250108 15:49:34.467"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:34.467" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:34.467" endtime="20250108 15:49:34.467"/>
</kw>
<status status="PASS" starttime="20250108 15:49:34.087" endtime="20250108 15:49:34.467"/>
</kw>
<msg timestamp="20250108 15:49:34.467" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:34.086" endtime="20250108 15:49:34.467"/>
</kw>
<status status="PASS" starttime="20250108 15:49:34.086" endtime="20250108 15:49:34.467"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_access_key_id ${accessKey}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:34.470" level="INFO">Running command 'aws configure set aws_access_key_id testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:34.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:34.827" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:34.468" endtime="20250108 15:49:34.827"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:34.827" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:34.827" endtime="20250108 15:49:34.827"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:34.828" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:34.827" endtime="20250108 15:49:34.828"/>
</kw>
<status status="PASS" starttime="20250108 15:49:34.468" endtime="20250108 15:49:34.828"/>
</kw>
<msg timestamp="20250108 15:49:34.828" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:34.468" endtime="20250108 15:49:34.828"/>
</kw>
<status status="PASS" starttime="20250108 15:49:34.467" endtime="20250108 15:49:34.828"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key ${secret}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:34.831" level="INFO">Running command 'aws configure set aws_secret_access_key 001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:35.198" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:35.198" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:34.829" endtime="20250108 15:49:35.198"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:35.198" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:35.198" endtime="20250108 15:49:35.198"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:35.199" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:35.199" endtime="20250108 15:49:35.199"/>
</kw>
<status status="PASS" starttime="20250108 15:49:34.829" endtime="20250108 15:49:35.199"/>
</kw>
<msg timestamp="20250108 15:49:35.199" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:34.829" endtime="20250108 15:49:35.199"/>
</kw>
<status status="PASS" starttime="20250108 15:49:34.828" endtime="20250108 15:49:35.199"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set region us-west-1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:35.203" level="INFO">Running command 'aws configure set region us-west-1 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:35.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:35.572" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:35.200" endtime="20250108 15:49:35.572"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:35.573" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:35.573" endtime="20250108 15:49:35.573"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:35.573" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:35.573" endtime="20250108 15:49:35.574"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.200" endtime="20250108 15:49:35.574"/>
</kw>
<msg timestamp="20250108 15:49:35.574" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:35.200" endtime="20250108 15:49:35.574"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.199" endtime="20250108 15:49:35.574"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.addressing_style ${OZONE_S3_ADDRESS_STYLE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:35.577" level="INFO">Running command 'aws configure set default.s3.addressing_style path 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:35.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:35.943" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:35.575" endtime="20250108 15:49:35.943"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:35.943" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:35.943" endtime="20250108 15:49:35.943"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:35.944" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:35.944" endtime="20250108 15:49:35.944"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.575" endtime="20250108 15:49:35.944"/>
</kw>
<msg timestamp="20250108 15:49:35.944" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:35.574" endtime="20250108 15:49:35.944"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.574" endtime="20250108 15:49:35.944"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.706" endtime="20250108 15:49:35.944"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.653" endtime="20250108 15:49:35.944"/>
</kw>
<status status="PASS" starttime="20250108 15:49:30.653" endtime="20250108 15:49:35.945"/>
</test>
<test id="s1-t2" name="Test setup credentials" line="67">
<kw name="Setup aws credentials">
<kw name="Execute" library="os">
<var>${accessKey}</var>
<arg>aws configure get aws_access_key_id</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:35.948" level="INFO">Running command 'aws configure get aws_access_key_id 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:36.322" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:36.322" level="INFO">${output} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:35.947" endtime="20250108 15:49:36.322"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:36.322" level="INFO">testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:36.322" endtime="20250108 15:49:36.322"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:36.323" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:36.323" endtime="20250108 15:49:36.323"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.946" endtime="20250108 15:49:36.323"/>
</kw>
<msg timestamp="20250108 15:49:36.323" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:35.946" endtime="20250108 15:49:36.323"/>
</kw>
<msg timestamp="20250108 15:49:36.323" level="INFO">${accessKey} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:35.946" endtime="20250108 15:49:36.323"/>
</kw>
<kw name="Execute" library="os">
<var>${secret}</var>
<arg>aws configure get aws_secret_access_key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:36.326" level="INFO">Running command 'aws configure get aws_secret_access_key 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:36.679" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:36.679" level="INFO">${output} = 001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:36.324" endtime="20250108 15:49:36.679"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:36.680" level="INFO">001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:36.680" endtime="20250108 15:49:36.680"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:36.680" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:36.680" endtime="20250108 15:49:36.680"/>
</kw>
<status status="PASS" starttime="20250108 15:49:36.324" endtime="20250108 15:49:36.681"/>
</kw>
<msg timestamp="20250108 15:49:36.681" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:36.324" endtime="20250108 15:49:36.681"/>
</kw>
<msg timestamp="20250108 15:49:36.681" level="INFO">${secret} = 001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41</msg>
<status status="PASS" starttime="20250108 15:49:36.323" endtime="20250108 15:49:36.681"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>AWS_SECRET_ACCESS_KEY</arg>
<arg>${secret}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20250108 15:49:36.681" level="INFO">Environment variable 'AWS_SECRET_ACCESS_KEY' set to value '001dc91d3d56043461102a86b57c8255c952ee22b3072031d5f14e97d37fac41'.</msg>
<status status="PASS" starttime="20250108 15:49:36.681" endtime="20250108 15:49:36.681"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>AWS_ACCESS_KEY_ID</arg>
<arg>${accessKey}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20250108 15:49:36.681" level="INFO">Environment variable 'AWS_ACCESS_KEY_ID' set to value 'testuser/s3g@EXAMPLE.COM'.</msg>
<status status="PASS" starttime="20250108 15:49:36.681" endtime="20250108 15:49:36.681"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.945" endtime="20250108 15:49:36.682"/>
</kw>
<status status="PASS" starttime="20250108 15:49:35.945" endtime="20250108 15:49:36.682"/>
</test>
<test id="s1-t3" name="Test create bucket 1" line="70">
<kw name="Setup bucket1">
<kw name="Execute AWSS3APICli" library="commonawslib">
<arg>create-bucket --bucket bucket1</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${ENDPOINT_URL} ${command}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:36.686" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 create-bucket --bucket bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:38.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:38.665" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket1"
}</msg>
<status status="PASS" starttime="20250108 15:49:36.684" endtime="20250108 15:49:38.666"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:38.666" level="INFO">{
    "Location": "http://s3g:9878/bucket1"
}</msg>
<status status="PASS" starttime="20250108 15:49:38.666" endtime="20250108 15:49:38.666"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:38.667" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:38.666" endtime="20250108 15:49:38.667"/>
</kw>
<status status="PASS" starttime="20250108 15:49:36.684" endtime="20250108 15:49:38.667"/>
</kw>
<msg timestamp="20250108 15:49:38.667" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:36.684" endtime="20250108 15:49:38.667"/>
</kw>
<msg timestamp="20250108 15:49:38.667" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket1"
}</msg>
<status status="PASS" starttime="20250108 15:49:36.683" endtime="20250108 15:49:38.667"/>
</kw>
<status status="PASS" starttime="20250108 15:49:36.683" endtime="20250108 15:49:38.667"/>
</kw>
<status status="PASS" starttime="20250108 15:49:36.682" endtime="20250108 15:49:38.667"/>
</kw>
<status status="PASS" starttime="20250108 15:49:36.682" endtime="20250108 15:49:38.667"/>
</test>
<test id="s1-t4" name="Test OM JMX endpoint" line="73">
<kw name="Verify endpoint is up">
<arg>${OM_JMX_ENDPOINT}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit HTTP user" library="commonlib">
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250108 15:49:38.669" endtime="20250108 15:49:38.669"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${principal}</var>
<arg>HTTP</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:38.673" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:38.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:38.678" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250108 15:49:38.670" endtime="20250108 15:49:38.678"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:38.679" level="INFO">s3g</msg>
<status status="PASS" starttime="20250108 15:49:38.679" endtime="20250108 15:49:38.679"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:38.680" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:38.679" endtime="20250108 15:49:38.680"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.670" endtime="20250108 15:49:38.680"/>
</kw>
<msg timestamp="20250108 15:49:38.680" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:38.670" endtime="20250108 15:49:38.680"/>
</kw>
<msg timestamp="20250108 15:49:38.680" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250108 15:49:38.669" endtime="20250108 15:49:38.680"/>
</kw>
<msg timestamp="20250108 15:49:38.681" level="INFO">${principal} = HTTP/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250108 15:49:38.669" endtime="20250108 15:49:38.681"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/HTTP.keytab ${principal}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/HTTP.keytab ${principal}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:38.686" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/HTTP.keytab HTTP/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:38.718" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:38.718" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250108 15:49:38.683" endtime="20250108 15:49:38.718"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:38.719" level="INFO"/>
<status status="PASS" starttime="20250108 15:49:38.718" endtime="20250108 15:49:38.719"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:38.720" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:38.719" endtime="20250108 15:49:38.720"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.682" endtime="20250108 15:49:38.720"/>
</kw>
<msg timestamp="20250108 15:49:38.720" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:38.682" endtime="20250108 15:49:38.720"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.681" endtime="20250108 15:49:38.720"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.681" endtime="20250108 15:49:38.720"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.669" endtime="20250108 15:49:38.720"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.668" endtime="20250108 15:49:38.720"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -v -s -I ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:38.724" level="INFO">Running command 'curl --negotiate -u : -v -s -I http://om:9874/jmx 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:39.022" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:39.022" level="INFO">${output} = * Uses proxy env variable no_proxy == 'om,scm,recon,s3g,kdc,localhost,127.0.0.1'
*   Trying 172.18.0.9:9874...
* Connected to om (172.18.0.9) port 9874 (#0)
* Server auth using Negotiate with user ''
...</msg>
<status status="PASS" starttime="20250108 15:49:38.722" endtime="20250108 15:49:39.022"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:39.023" level="INFO">* Uses proxy env variable no_proxy == 'om,scm,recon,s3g,kdc,localhost,127.0.0.1'
*   Trying 172.18.0.9:9874...
* Connected to om (172.18.0.9) port 9874 (#0)
* Server auth using Negotiate with user ''
&gt; HEAD /jmx HTTP/1.1
&gt; Host: om:9874
&gt; Authorization: Negotiate YIICewYGKwYBBQUCoIICbzCCAmugDTALBgkqhkiG9xIBAgKiggJYBIICVGCCAlAGCSqGSIb3EgECAgEAboICPzCCAjugAwIBBaEDAgEOogcDBQAgAAAAo4IBT2GCAUswggFHoAMCAQWhDRsLRVhBTVBMRS5DT02iFTAToAMCAQOhDDAKGwRIVFRQGwJvbaOCARgwggEUoAMCARKhAwIBAaKCAQYEggECSSB5cv6CHeU3vMh6mHpXnC5um1SDBv5E2iQZvr8GYA9PL6EputYdYeskj/j9cnzLcTxhmKANtE9EIRaHiIsGg8re4DTZ6jqRGTOV2qkIAeKSP9NZBHpSjxqnMOMGGK+t9WmK+HNIqIEzDFcvnus+PhxB3sIJ2FafAb6cjA4Tl6zCdr3fUGBfes0RTWhg9AZGQhYyxITM/q3fUKcur/1/N9/rRAaOTm2RdPMFrPz5VlriNyZUob376gHAR4M29FhGNUsSCeoYhV/PrFNRJKQHRw9az3tZjLn1XF7CZnimu6kaSb3JsKnqGAvAP3xmSAHif6X6aoErkSW552FXGxqpApRZpIHSMIHPoAMCARKigccEgcTgy2lZIic2sKLP3m3zsZrrIKWamSgGa6Y+DlyoXWZMaO2XXJVZFxGdtSmPtQokXslO+Fva1nM8LTIgSIbg0buLqewt6vdRVNEaEbXj+kp/gZUZz70DOKlY13Bf+kZyxfVuI6Dl5frW8/65ifFLU6jpoV+SKDES8lFxVzyIX2uBm9EJhmXJ5mLzn/RaRYstWsc9RZICUOdb9MuapJTg7zwqscxEyBR0XFArbmd+vbWkJBjN5Ko0ns80ntVsjp0ZlmGBFne1
&gt; User-Agent: curl/7.76.1
&gt; Accept: */*
&gt; 
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Date: Wed, 08 Jan 2025 15:49:38 GMT
&lt; Cache-Control: no-cache
&lt; Expires: Wed, 08 Jan 2025 15:49:38 GMT
&lt; Pragma: no-cache
&lt; Content-Type: application/json; charset=utf8
&lt; X-Content-Type-Options: nosniff
&lt; X-XSS-Protection: 1; mode=block
&lt; X-FRAME-OPTIONS: SAMEORIGIN
&lt; WWW-Authenticate: Negotiate oYGFMIGCoAMKAQChCwYJKoZIhvcSAQICom4EbGBqBgkqhkiG9xIBAgICAG9bMFmgAwIBBaEDAgEPok0wS6ADAgESokQEQu3l9HMraRMGQOI0hIK5RwJIpvFQSjoYSY6ZmCd/15LfxyGv/vjppYt7VaUH5/8RUOP5yQOWn2XyI4hteFV0f2+KLA==
&lt; Set-Cookie: hadoop.auth="u=HTTP&amp;p=HTTP/s3g@EXAMPLE.COM&amp;t=kerberos&amp;e=1736387378774&amp;s=mRzPSyPS97vrx0R0Ihlpu7V66ct3O1lVemmhDvvfHHk="; Path=/; HttpOnly
&lt; Access-Control-Allow-Methods: GET
&lt; Access-Control-Allow-Origin: *
&lt; Content-Length: 414288
&lt; 
* Connection #0 to host om left intact
HTTP/1.1 200 OK
Date: Wed, 08 Jan 2025 15:49:38 GMT
Cache-Control: no-cache
Expires: Wed, 08 Jan 2025 15:49:38 GMT
Pragma: no-cache
Content-Type: application/json; charset=utf8
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
WWW-Authenticate: Negotiate oYGFMIGCoAMKAQChCwYJKoZIhvcSAQICom4EbGBqBgkqhkiG9xIBAgICAG9bMFmgAwIBBaEDAgEPok0wS6ADAgESokQEQu3l9HMraRMGQOI0hIK5RwJIpvFQSjoYSY6ZmCd/15LfxyGv/vjppYt7VaUH5/8RUOP5yQOWn2XyI4hteFV0f2+KLA==
Set-Cookie: hadoop.auth="u=HTTP&amp;p=HTTP/s3g@EXAMPLE.COM&amp;t=kerberos&amp;e=1736387378774&amp;s=mRzPSyPS97vrx0R0Ihlpu7V66ct3O1lVemmhDvvfHHk="; Path=/; HttpOnly
Access-Control-Allow-Methods: GET
Access-Control-Allow-Origin: *
Content-Length: 414288
</msg>
<status status="PASS" starttime="20250108 15:49:39.022" endtime="20250108 15:49:39.023"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:39.023" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:39.023" endtime="20250108 15:49:39.023"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.721" endtime="20250108 15:49:39.023"/>
</kw>
<msg timestamp="20250108 15:49:39.023" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:38.721" endtime="20250108 15:49:39.023"/>
</kw>
<msg timestamp="20250108 15:49:39.023" level="INFO">${result} = * Uses proxy env variable no_proxy == 'om,scm,recon,s3g,kdc,localhost,127.0.0.1'
*   Trying 172.18.0.9:9874...
* Connected to om (172.18.0.9) port 9874 (#0)
* Server auth using Negotiate with user ''
...</msg>
<status status="PASS" starttime="20250108 15:49:38.720" endtime="20250108 15:49:39.023"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200 OK</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250108 15:49:39.024" endtime="20250108 15:49:39.024"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.668" endtime="20250108 15:49:39.024"/>
</kw>
<status status="PASS" starttime="20250108 15:49:38.668" endtime="20250108 15:49:39.024"/>
</test>
<test id="s1-t5" name="Test metrics are registered" line="76">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${OM_JMX_ENDPOINT} | grep ${DECAY_RPC_SCHEDULER_METRICS_NAME}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:39.028" level="INFO">Running command 'curl --negotiate -u : -LSs http://om:9874/jmx | grep DecayRpcSchedulerMetrics2.ipc.9862 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:49:39.131" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:49:39.131" level="INFO">${output} =     "name" : "Hadoop:service=OzoneManager,name=DecayRpcSchedulerMetrics2.ipc.9862",
    "modelerType" : "DecayRpcSchedulerMetrics2.ipc.9862",</msg>
<status status="PASS" starttime="20250108 15:49:39.026" endtime="20250108 15:49:39.131"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:49:39.132" level="INFO">    "name" : "Hadoop:service=OzoneManager,name=DecayRpcSchedulerMetrics2.ipc.9862",
    "modelerType" : "DecayRpcSchedulerMetrics2.ipc.9862",</msg>
<status status="PASS" starttime="20250108 15:49:39.132" endtime="20250108 15:49:39.132"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:49:39.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:49:39.132" endtime="20250108 15:49:39.133"/>
</kw>
<status status="PASS" starttime="20250108 15:49:39.026" endtime="20250108 15:49:39.133"/>
</kw>
<msg timestamp="20250108 15:49:39.133" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:39.025" endtime="20250108 15:49:39.133"/>
</kw>
<msg timestamp="20250108 15:49:39.133" level="INFO">${result} =     "name" : "Hadoop:service=OzoneManager,name=DecayRpcSchedulerMetrics2.ipc.9862",
    "modelerType" : "DecayRpcSchedulerMetrics2.ipc.9862",</msg>
<status status="PASS" starttime="20250108 15:49:39.025" endtime="20250108 15:49:39.133"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${DECAY_RPC_SCHEDULER_METRICS_NAME}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250108 15:49:39.134" endtime="20250108 15:49:39.134"/>
</kw>
<status status="PASS" starttime="20250108 15:49:39.024" endtime="20250108 15:49:39.134"/>
</test>
<test id="s1-t6" name="Run freon s3kg" line="80">
<kw name="Freon s3kg">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon s3kg -e ${S3_ENDPOINT_URL} -t ${threads} -n ${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:49:39.140" level="INFO">Running command 'ozone freon s3kg -e http://s3g:9878 -t 10 -n 1000 -p s3bg  2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:50:13.576" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:50:13.576" level="INFO">${output} = 2025-01-08 15:49:41,033 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-01-08 15:49:41,177 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250108 15:49:39.138" endtime="20250108 15:50:13.576"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:50:13.577" level="INFO">2025-01-08 15:49:41,033 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-01-08 15:49:41,177 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-01-08 15:49:41,177 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-01-08 15:49:41,338 [main] INFO freon.BaseFreonGenerator: Executing test with prefix s3bg and number-of-tests 1000
2025-01-08 15:49:41,416 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-01-08 15:49:42,417 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-01-08 15:49:43,417 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-01-08 15:49:44,419 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-01-08 15:49:45,423 [Thread-5] INFO freon.ProgressBar: Progress: 1.40 % (14 out of 1000)
2025-01-08 15:49:46,424 [Thread-5] INFO freon.ProgressBar: Progress: 3.70 % (37 out of 1000)
2025-01-08 15:49:47,427 [Thread-5] INFO freon.ProgressBar: Progress: 6.10 % (61 out of 1000)
2025-01-08 15:49:48,428 [Thread-5] INFO freon.ProgressBar: Progress: 8.20 % (82 out of 1000)
2025-01-08 15:49:49,429 [Thread-5] INFO freon.ProgressBar: Progress: 11.20 % (112 out of 1000)
2025-01-08 15:49:50,430 [Thread-5] INFO freon.ProgressBar: Progress: 13.40 % (134 out of 1000)
2025-01-08 15:49:51,431 [Thread-5] INFO freon.ProgressBar: Progress: 16.30 % (163 out of 1000)
2025-01-08 15:49:52,433 [Thread-5] INFO freon.ProgressBar: Progress: 18.90 % (189 out of 1000)
2025-01-08 15:49:53,434 [Thread-5] INFO freon.ProgressBar: Progress: 21.20 % (212 out of 1000)
2025-01-08 15:49:54,434 [Thread-5] INFO freon.ProgressBar: Progress: 23.90 % (239 out of 1000)
2025-01-08 15:49:55,439 [Thread-5] INFO freon.ProgressBar: Progress: 26.80 % (268 out of 1000)
2025-01-08 15:49:56,440 [Thread-5] INFO freon.ProgressBar: Progress: 30.60 % (306 out of 1000)
2025-01-08 15:49:57,440 [Thread-5] INFO freon.ProgressBar: Progress: 34.20 % (342 out of 1000)
2025-01-08 15:49:58,476 [Thread-5] INFO freon.ProgressBar: Progress: 38.00 % (380 out of 1000)
2025-01-08 15:49:59,478 [Thread-5] INFO freon.ProgressBar: Progress: 41.60 % (416 out of 1000)
2025-01-08 15:50:00,479 [Thread-5] INFO freon.ProgressBar: Progress: 44.90 % (449 out of 1000)
2025-01-08 15:50:01,480 [Thread-5] INFO freon.ProgressBar: Progress: 48.90 % (489 out of 1000)
2025-01-08 15:50:02,483 [Thread-5] INFO freon.ProgressBar: Progress: 52.60 % (526 out of 1000)
2025-01-08 15:50:03,485 [Thread-5] INFO freon.ProgressBar: Progress: 56.40 % (564 out of 1000)
2025-01-08 15:50:04,495 [Thread-5] INFO freon.ProgressBar: Progress: 60.70 % (607 out of 1000)
2025-01-08 15:50:05,496 [Thread-5] INFO freon.ProgressBar: Progress: 64.60 % (646 out of 1000)
2025-01-08 15:50:06,496 [Thread-5] INFO freon.ProgressBar: Progress: 68.90 % (689 out of 1000)
2025-01-08 15:50:07,498 [Thread-5] INFO freon.ProgressBar: Progress: 73.40 % (734 out of 1000)
2025-01-08 15:50:08,500 [Thread-5] INFO freon.ProgressBar: Progress: 77.00 % (770 out of 1000)
2025-01-08 15:50:09,502 [Thread-5] INFO freon.ProgressBar: Progress: 81.10 % (811 out of 1000)
2025-01-08 15:50:10,507 [Thread-5] INFO freon.ProgressBar: Progress: 87.40 % (874 out of 1000)
2025-01-08 15:50:11,517 [Thread-5] INFO freon.ProgressBar: Progress: 92.00 % (920 out of 1000)
2025-01-08 15:50:12,529 [Thread-5] INFO freon.ProgressBar: Progress: 96.20 % (962 out of 1000)
2025-01-08 15:50:13,529 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1000 out of 1000)
2025-01-08 15:50:13,546 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1000, min=59.273882, max=2655.718047, mean=292.82928756201994, stddev=233.42322190390695, median=260.244917, p75=338.678221, p95=475.146135, p98=562.579938, p99=657.797911, p999=2655.19518, mean_rate=32.119361765601596, m1=20.58932927276692, m5=14.113544720259338, m15=12.852494215048123, rate_unit=events/second, duration_unit=milliseconds
2025-01-08 15:50:13,547 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 32
2025-01-08 15:50:13,547 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-01-08 15:50:13,547 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1000</msg>
<status status="PASS" starttime="20250108 15:50:13.576" endtime="20250108 15:50:13.577"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:50:13.577" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:50:13.577" endtime="20250108 15:50:13.577"/>
</kw>
<status status="PASS" starttime="20250108 15:49:39.137" endtime="20250108 15:50:13.577"/>
</kw>
<msg timestamp="20250108 15:50:13.578" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:49:39.137" endtime="20250108 15:50:13.578"/>
</kw>
<msg timestamp="20250108 15:50:13.578" level="INFO">${result} = 2025-01-08 15:49:41,033 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-01-08 15:49:41,177 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250108 15:49:39.136" endtime="20250108 15:50:13.578"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250108 15:50:13.578" endtime="20250108 15:50:13.578"/>
</kw>
<status status="PASS" starttime="20250108 15:49:39.135" endtime="20250108 15:50:13.578"/>
</kw>
<status status="PASS" starttime="20250108 15:49:39.135" endtime="20250108 15:50:13.578"/>
</test>
<test id="s1-t7" name="Test caller from metrics" line="83">
<kw name="Check metrics caller">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${OM_JMX_ENDPOINT} | sed -n '/${DECAY_RPC_SCHEDULER_METRICS_NAME}/,/}/p' | grep 'Caller('</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250108 15:50:13.582" level="INFO">Running command 'curl --negotiate -u : -LSs http://om:9874/jmx | sed -n '/DecayRpcSchedulerMetrics2.ipc.9862/,/}/p' | grep 'Caller(' 2&gt;&amp;1'.</msg>
<msg timestamp="20250108 15:50:13.703" level="INFO">${rc} = 0</msg>
<msg timestamp="20250108 15:50:13.703" level="INFO">${output} =     "Caller(testuser/s3g@EXAMPLE.COM).Volume" : 4002,
    "Caller(testuser/s3g@EXAMPLE.COM).Priority" : 3,</msg>
<status status="PASS" starttime="20250108 15:50:13.581" endtime="20250108 15:50:13.703"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250108 15:50:13.704" level="INFO">    "Caller(testuser/s3g@EXAMPLE.COM).Volume" : 4002,
    "Caller(testuser/s3g@EXAMPLE.COM).Priority" : 3,</msg>
<status status="PASS" starttime="20250108 15:50:13.704" endtime="20250108 15:50:13.704"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250108 15:50:13.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250108 15:50:13.704" endtime="20250108 15:50:13.705"/>
</kw>
<status status="PASS" starttime="20250108 15:50:13.580" endtime="20250108 15:50:13.705"/>
</kw>
<msg timestamp="20250108 15:50:13.705" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250108 15:50:13.580" endtime="20250108 15:50:13.705"/>
</kw>
<msg timestamp="20250108 15:50:13.705" level="INFO">${result} =     "Caller(testuser/s3g@EXAMPLE.COM).Volume" : 4002,
    "Caller(testuser/s3g@EXAMPLE.COM).Priority" : 3,</msg>
<status status="PASS" starttime="20250108 15:50:13.579" endtime="20250108 15:50:13.706"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${TEST_USER}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250108 15:50:13.706" endtime="20250108 15:50:13.706"/>
</kw>
<status status="PASS" starttime="20250108 15:50:13.579" endtime="20250108 15:50:13.706"/>
</kw>
<status status="PASS" starttime="20250108 15:50:13.579" endtime="20250108 15:50:13.706"/>
</test>
<doc>S3 gateway test with aws cli</doc>
<status status="PASS" starttime="20250108 15:49:30.594" endtime="20250108 15:50:13.708"/>
</suite>
<statistics>
<total>
<stat pass="7" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="7" fail="0" skip="0" id="s1" name="ozonesecure-fcq">ozonesecure-fcq</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
