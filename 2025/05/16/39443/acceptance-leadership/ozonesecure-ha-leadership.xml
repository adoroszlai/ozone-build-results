<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250516 09:06:29.980" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-leadership">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:03:59.358" endtime="20250516 09:03:59.359"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:03:59.362" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:03:59.366" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:03:59.366" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:03:59.360" endtime="20250516 09:03:59.366"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:03:59.367" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:03:59.366" endtime="20250516 09:03:59.367"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:03:59.367" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:03:59.367" endtime="20250516 09:03:59.367"/>
</kw>
<status status="PASS" starttime="20250516 09:03:59.359" endtime="20250516 09:03:59.367"/>
</kw>
<msg timestamp="20250516 09:03:59.367" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:03:59.359" endtime="20250516 09:03:59.367"/>
</kw>
<msg timestamp="20250516 09:03:59.368" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:03:59.359" endtime="20250516 09:03:59.368"/>
</kw>
<msg timestamp="20250516 09:03:59.368" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:03:59.359" endtime="20250516 09:03:59.368"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:03:59.368" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:03:59.368" endtime="20250516 09:03:59.368"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:03:59.372" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:03:59.444" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:03:59.445" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:03:59.370" endtime="20250516 09:03:59.445"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:03:59.445" level="INFO"/>
<status status="PASS" starttime="20250516 09:03:59.445" endtime="20250516 09:03:59.445"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:03:59.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:03:59.446" endtime="20250516 09:03:59.446"/>
</kw>
<status status="PASS" starttime="20250516 09:03:59.369" endtime="20250516 09:03:59.446"/>
</kw>
<msg timestamp="20250516 09:03:59.446" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:03:59.369" endtime="20250516 09:03:59.446"/>
</kw>
<status status="PASS" starttime="20250516 09:03:59.369" endtime="20250516 09:03:59.446"/>
</kw>
<status status="PASS" starttime="20250516 09:03:59.368" endtime="20250516 09:03:59.446"/>
</kw>
<status status="PASS" starttime="20250516 09:03:59.358" endtime="20250516 09:03:59.446"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20250516 09:03:59.357" endtime="20250516 09:03:59.447"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20250516 09:03:59.321" endtime="20250516 09:03:59.447"/>
</suite>
<suite id="s1-s2" name="Scmrole" source="/opt/hadoop/smoketest/admincli/scmrole.robot">
<test id="s1-s2-t1" name="Run scm roles" line="26">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:00.065" level="INFO">Running command 'ozone admin scm roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:01.690" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:01.690" level="INFO">${output} = scm3.org:9894:FOLLOWER:c35337ec-603e-4c35-9322-df2881f522c9:172.25.0.118
scm2.org:9894:FOLLOWER:bc53b3ca-2446-41e8-86c9-8b4260c89b01:172.25.0.117
scm1.org:9894:LEADER:9aa2cc37-1dfc-4e57-81d7-828431de2...</msg>
<status status="PASS" starttime="20250516 09:04:00.062" endtime="20250516 09:04:01.690"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:01.691" level="INFO">scm3.org:9894:FOLLOWER:c35337ec-603e-4c35-9322-df2881f522c9:172.25.0.118
scm2.org:9894:FOLLOWER:bc53b3ca-2446-41e8-86c9-8b4260c89b01:172.25.0.117
scm1.org:9894:LEADER:9aa2cc37-1dfc-4e57-81d7-828431de2031:172.25.0.116</msg>
<status status="PASS" starttime="20250516 09:04:01.690" endtime="20250516 09:04:01.691"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:01.691" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:01.691" endtime="20250516 09:04:01.692"/>
</kw>
<status status="PASS" starttime="20250516 09:04:00.062" endtime="20250516 09:04:01.692"/>
</kw>
<msg timestamp="20250516 09:04:01.692" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:00.061" endtime="20250516 09:04:01.692"/>
</kw>
<msg timestamp="20250516 09:04:01.692" level="INFO">${output} = scm3.org:9894:FOLLOWER:c35337ec-603e-4c35-9322-df2881f522c9:172.25.0.118
scm2.org:9894:FOLLOWER:bc53b3ca-2446-41e8-86c9-8b4260c89b01:172.25.0.117
scm1.org:9894:LEADER:9aa2cc37-1dfc-4e57-81d7-828431de2...</msg>
<status status="PASS" starttime="20250516 09:04:00.061" endtime="20250516 09:04:01.692"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[scm:9894(:LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:01.692" endtime="20250516 09:04:01.693"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:00.060" endtime="20250516 09:04:01.693"/>
</test>
<test id="s1-s2-t2" name="List scm roles as JSON" line="30">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:01.698" level="INFO">Running command 'ozone admin scm roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:03.346" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:03.346" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "9aa2cc37-1dfc-4e57-81d7-828431de2031",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250516 09:04:01.695" endtime="20250516 09:04:03.346"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:03.347" level="INFO">{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "9aa2cc37-1dfc-4e57-81d7-828431de2031",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "c35337ec-603e-4c35-9322-df2881f522c9",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "bc53b3ca-2446-41e8-86c9-8b4260c89b01",
    "InetAddress" : "172.25.0.117"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:03.346" endtime="20250516 09:04:03.347"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:03.348" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:03.347" endtime="20250516 09:04:03.348"/>
</kw>
<status status="PASS" starttime="20250516 09:04:01.695" endtime="20250516 09:04:03.348"/>
</kw>
<msg timestamp="20250516 09:04:03.348" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:01.695" endtime="20250516 09:04:03.348"/>
</kw>
<msg timestamp="20250516 09:04:03.348" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "9aa2cc37-1dfc-4e57-81d7-828431de2031",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250516 09:04:01.694" endtime="20250516 09:04:03.348"/>
</kw>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq -r '.[] | select(.raftPeerRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:03.351" level="INFO">Running command 'echo '{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "9aa2cc37-1dfc-4e57-81d7-828431de2031",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "c35337ec-603e-4c35-9322-df2881f522c9",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "bc53b3ca-2446-41e8-86c9-8b4260c89b01",
    "InetAddress" : "172.25.0.117"
  }
}' | jq -r '.[] | select(.raftPeerRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:03.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:03.360" level="INFO">${output} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "9aa2cc37-1dfc-4e57-81d7-828431de2031",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250516 09:04:03.349" endtime="20250516 09:04:03.360"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:03.360" level="INFO">{
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "9aa2cc37-1dfc-4e57-81d7-828431de2031",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250516 09:04:03.360" endtime="20250516 09:04:03.361"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:03.361" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:03.361" endtime="20250516 09:04:03.361"/>
</kw>
<status status="PASS" starttime="20250516 09:04:03.349" endtime="20250516 09:04:03.361"/>
</kw>
<msg timestamp="20250516 09:04:03.361" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:03.349" endtime="20250516 09:04:03.361"/>
</kw>
<msg timestamp="20250516 09:04:03.361" level="INFO">${leader} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "9aa2cc37-1dfc-4e57-81d7-828431de2031",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250516 09:04:03.348" endtime="20250516 09:04:03.361"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:04:03.361" endtime="20250516 09:04:03.362"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:01.694" endtime="20250516 09:04:03.362"/>
</test>
<test id="s1-s2-t3" name="List scm roles as TABLE" line="35">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:03.366" level="INFO">Running command 'ozone admin scm roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:04.924" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:04.924" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250516 09:04:03.364" endtime="20250516 09:04:04.924"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:04.925" level="INFO">+-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+------------+----------+--------------------------------------+--------------+
| Host Name | Ratis Port |   Role   |               Node ID                | Host Address |
+-----------+------------+----------+--------------------------------------+--------------+
| scm3.org  |    9894    | FOLLOWER | c35337ec-603e-4c35-9322-df2881f522c9 | 172.25.0.118 |
| scm2.org  |    9894    | FOLLOWER | bc53b3ca-2446-41e8-86c9-8b4260c89b01 | 172.25.0.117 |
| scm1.org  |    9894    |  LEADER  | 9aa2cc37-1dfc-4e57-81d7-828431de2031 | 172.25.0.116 |
+-----------+------------+----------+--------------------------------------+--------------+
</msg>
<status status="PASS" starttime="20250516 09:04:04.925" endtime="20250516 09:04:04.925"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:04.926" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:04.926" endtime="20250516 09:04:04.926"/>
</kw>
<status status="PASS" starttime="20250516 09:04:03.364" endtime="20250516 09:04:04.926"/>
</kw>
<msg timestamp="20250516 09:04:04.926" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:03.363" endtime="20250516 09:04:04.926"/>
</kw>
<msg timestamp="20250516 09:04:04.926" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250516 09:04:03.363" endtime="20250516 09:04:04.926"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:04.927" endtime="20250516 09:04:04.927"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:03.363" endtime="20250516 09:04:04.927"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250516 09:04:00.022" endtime="20250516 09:04:04.928"/>
</suite>
<suite id="s1-s3" name="Om-Fetch-Key" source="/opt/hadoop/smoketest/omha/om-fetch-key.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:05.546" endtime="20250516 09:04:05.546"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:05.549" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:05.553" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:05.553" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:05.547" endtime="20250516 09:04:05.553"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:05.554" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:05.553" endtime="20250516 09:04:05.554"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:05.554" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:05.554" endtime="20250516 09:04:05.554"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.547" endtime="20250516 09:04:05.554"/>
</kw>
<msg timestamp="20250516 09:04:05.554" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:05.546" endtime="20250516 09:04:05.554"/>
</kw>
<msg timestamp="20250516 09:04:05.555" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:05.546" endtime="20250516 09:04:05.555"/>
</kw>
<msg timestamp="20250516 09:04:05.555" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:05.546" endtime="20250516 09:04:05.555"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:05.555" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:05.555" endtime="20250516 09:04:05.555"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:05.559" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:05.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:05.613" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:05.557" endtime="20250516 09:04:05.613"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:05.613" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:05.613" endtime="20250516 09:04:05.614"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:05.614" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:05.614" endtime="20250516 09:04:05.614"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.556" endtime="20250516 09:04:05.614"/>
</kw>
<msg timestamp="20250516 09:04:05.614" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:05.556" endtime="20250516 09:04:05.614"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.556" endtime="20250516 09:04:05.615"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.555" endtime="20250516 09:04:05.615"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.545" endtime="20250516 09:04:05.615"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.545" endtime="20250516 09:04:05.615"/>
</kw>
<test id="s1-s3-t1" name="Fetch Key with Valid ServiceID Specified" line="31">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:05.619" level="INFO">Running command 'ozone admin om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:07.490" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:07.490" level="INFO">${output} = Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:05.617" endtime="20250516 09:04:07.490"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:07.491" level="INFO">Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:07.491" endtime="20250516 09:04:07.491"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:07.492" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:07.492" endtime="20250516 09:04:07.492"/>
</kw>
<status status="PASS" starttime="20250516 09:04:05.616" endtime="20250516 09:04:07.492"/>
</kw>
<msg timestamp="20250516 09:04:07.492" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:05.616" endtime="20250516 09:04:07.492"/>
</kw>
<msg timestamp="20250516 09:04:07.492" level="INFO">${result} = Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:05.616" endtime="20250516 09:04:07.492"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:07.493" endtime="20250516 09:04:07.493"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:05.615" endtime="20250516 09:04:07.493"/>
</test>
<test id="s1-s3-t2" name="Fetch Key with Multiple ServiceIDs, Valid ServiceID Specified" line="35">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:07.497" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:09.277" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:09.277" level="INFO">${output} = Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:07.495" endtime="20250516 09:04:09.277"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:09.278" level="INFO">Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:09.277" endtime="20250516 09:04:09.278"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:09.278" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:09.278" endtime="20250516 09:04:09.278"/>
</kw>
<status status="PASS" starttime="20250516 09:04:07.495" endtime="20250516 09:04:09.279"/>
</kw>
<msg timestamp="20250516 09:04:09.279" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:07.494" endtime="20250516 09:04:09.279"/>
</kw>
<msg timestamp="20250516 09:04:09.279" level="INFO">${result} = Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:07.494" endtime="20250516 09:04:09.279"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:09.279" endtime="20250516 09:04:09.279"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:07.493" endtime="20250516 09:04:09.280"/>
</test>
<test id="s1-s3-t3" name="Fetch Key with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="39">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:09.283" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:10.515" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:04:10.515" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250516 09:04:09.281" endtime="20250516 09:04:10.515"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:10.516" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250516 09:04:10.515" endtime="20250516 09:04:10.516"/>
</kw>
<msg timestamp="20250516 09:04:10.516" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250516 09:04:09.281" endtime="20250516 09:04:10.516"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:10.516" endtime="20250516 09:04:10.517"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:09.280" endtime="20250516 09:04:10.517"/>
</test>
<test id="s1-s3-t4" name="Fetch Key with Multiple ServiceIDs, Invalid ServiceID Specified" line="43">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:10.521" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:11.842" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:04:11.842" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:04:10.518" endtime="20250516 09:04:11.842"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:11.843" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:04:11.843" endtime="20250516 09:04:11.843"/>
</kw>
<msg timestamp="20250516 09:04:11.844" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:04:10.518" endtime="20250516 09:04:11.844"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:11.844" endtime="20250516 09:04:11.844"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:10.517" endtime="20250516 09:04:11.844"/>
</test>
<test id="s1-s3-t5" name="Fetch Key without OM Service ID" line="47">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:11.848" level="INFO">Running command 'ozone admin om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:13.655" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:13.655" level="INFO">${output} = Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:11.846" endtime="20250516 09:04:13.655"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:13.656" level="INFO">Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:13.655" endtime="20250516 09:04:13.656"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:13.656" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:13.656" endtime="20250516 09:04:13.656"/>
</kw>
<status status="PASS" starttime="20250516 09:04:11.846" endtime="20250516 09:04:13.656"/>
</kw>
<msg timestamp="20250516 09:04:13.656" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:11.845" endtime="20250516 09:04:13.657"/>
</kw>
<msg timestamp="20250516 09:04:13.657" level="INFO">${result} = Current Secret Key ID: 3cb97595-e576-4a1e-ba22-058554f96077</msg>
<status status="PASS" starttime="20250516 09:04:11.845" endtime="20250516 09:04:13.657"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:13.657" endtime="20250516 09:04:13.657"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:11.845" endtime="20250516 09:04:13.657"/>
</test>
<test id="s1-s3-t6" name="Fetch Key with Multiple ServiceIDs, No ServiceID Specified" line="51">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:13.661" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:14.773" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:04:14.773" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:13.658" endtime="20250516 09:04:14.773"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:14.774" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:14.774" endtime="20250516 09:04:14.774"/>
</kw>
<msg timestamp="20250516 09:04:14.774" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:13.658" endtime="20250516 09:04:14.774"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:14.775" endtime="20250516 09:04:14.775"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:13.658" endtime="20250516 09:04:14.775"/>
</test>
<doc>Smoke test for om fetch-key</doc>
<status status="PASS" starttime="20250516 09:04:05.509" endtime="20250516 09:04:14.776"/>
</suite>
<suite id="s1-s4" name="Om-Roles" source="/opt/hadoop/smoketest/omha/om-roles.robot">
<test id="s1-s4-t1" name="List om roles with OM service ID passed" line="36">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:15.389" endtime="20250516 09:04:15.389"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:15.393" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:15.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:15.397" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:15.390" endtime="20250516 09:04:15.397"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:15.398" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:15.397" endtime="20250516 09:04:15.398"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:15.398" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:15.398" endtime="20250516 09:04:15.398"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.390" endtime="20250516 09:04:15.398"/>
</kw>
<msg timestamp="20250516 09:04:15.398" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:15.390" endtime="20250516 09:04:15.398"/>
</kw>
<msg timestamp="20250516 09:04:15.399" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:15.390" endtime="20250516 09:04:15.399"/>
</kw>
<msg timestamp="20250516 09:04:15.399" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:15.389" endtime="20250516 09:04:15.399"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:15.399" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:15.399" endtime="20250516 09:04:15.399"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:15.403" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:15.456" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:15.456" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:15.400" endtime="20250516 09:04:15.456"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:15.457" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:15.456" endtime="20250516 09:04:15.457"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:15.457" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:15.457" endtime="20250516 09:04:15.457"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.400" endtime="20250516 09:04:15.457"/>
</kw>
<msg timestamp="20250516 09:04:15.457" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:15.400" endtime="20250516 09:04:15.457"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.400" endtime="20250516 09:04:15.457"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.399" endtime="20250516 09:04:15.457"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.389" endtime="20250516 09:04:15.457"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.388" endtime="20250516 09:04:15.458"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:15.461" level="INFO">Running command 'ozone admin om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:17.301" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:17.301" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:15.459" endtime="20250516 09:04:17.301"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:17.302" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:17.302" endtime="20250516 09:04:17.302"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:17.303" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:17.302" endtime="20250516 09:04:17.303"/>
</kw>
<status status="PASS" starttime="20250516 09:04:15.458" endtime="20250516 09:04:17.303"/>
</kw>
<msg timestamp="20250516 09:04:17.303" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:15.458" endtime="20250516 09:04:17.303"/>
</kw>
<msg timestamp="20250516 09:04:17.303" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:15.458" endtime="20250516 09:04:17.303"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:17.304" endtime="20250516 09:04:17.304"/>
</kw>
<status status="PASS" starttime="20250516 09:04:17.303" endtime="20250516 09:04:17.304"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:17.308" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:19.163" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:19.163" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:17.306" endtime="20250516 09:04:19.164"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:19.164" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:19.164" endtime="20250516 09:04:19.164"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:19.165" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:19.165" endtime="20250516 09:04:19.165"/>
</kw>
<status status="PASS" starttime="20250516 09:04:17.305" endtime="20250516 09:04:19.165"/>
</kw>
<msg timestamp="20250516 09:04:19.165" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:17.305" endtime="20250516 09:04:19.165"/>
</kw>
<msg timestamp="20250516 09:04:19.165" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:17.304" endtime="20250516 09:04:19.165"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:19.166" endtime="20250516 09:04:19.166"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.166" endtime="20250516 09:04:19.166"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:15.388" endtime="20250516 09:04:19.166"/>
</test>
<test id="s1-s4-t2" name="List om roles without OM service ID passed" line="42">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:19.168" endtime="20250516 09:04:19.168"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:19.172" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:19.176" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:19.176" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:19.169" endtime="20250516 09:04:19.176"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:19.177" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:19.176" endtime="20250516 09:04:19.177"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:19.177" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:19.177" endtime="20250516 09:04:19.177"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.169" endtime="20250516 09:04:19.177"/>
</kw>
<msg timestamp="20250516 09:04:19.177" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:19.169" endtime="20250516 09:04:19.177"/>
</kw>
<msg timestamp="20250516 09:04:19.178" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:19.169" endtime="20250516 09:04:19.178"/>
</kw>
<msg timestamp="20250516 09:04:19.178" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:19.168" endtime="20250516 09:04:19.178"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:19.178" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:19.178" endtime="20250516 09:04:19.178"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:19.182" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:19.235" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:19.235" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:19.179" endtime="20250516 09:04:19.235"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:19.236" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:19.236" endtime="20250516 09:04:19.236"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:19.237" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:19.236" endtime="20250516 09:04:19.237"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.179" endtime="20250516 09:04:19.237"/>
</kw>
<msg timestamp="20250516 09:04:19.237" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:19.179" endtime="20250516 09:04:19.237"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.179" endtime="20250516 09:04:19.237"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.178" endtime="20250516 09:04:19.237"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.168" endtime="20250516 09:04:19.237"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.167" endtime="20250516 09:04:19.237"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:19.241" level="INFO">Running command 'ozone admin om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:21.034" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:21.034" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:19.238" endtime="20250516 09:04:21.034"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:21.035" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:21.035" endtime="20250516 09:04:21.035"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:21.036" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:21.035" endtime="20250516 09:04:21.036"/>
</kw>
<status status="PASS" starttime="20250516 09:04:19.238" endtime="20250516 09:04:21.036"/>
</kw>
<msg timestamp="20250516 09:04:21.036" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:19.238" endtime="20250516 09:04:21.036"/>
</kw>
<msg timestamp="20250516 09:04:21.036" level="INFO">${output_without_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250516 09:04:19.237" endtime="20250516 09:04:21.036"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:21.037" endtime="20250516 09:04:21.037"/>
</kw>
<status status="PASS" starttime="20250516 09:04:21.036" endtime="20250516 09:04:21.037"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:21.040" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:22.236" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:04:22.236" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:21.037" endtime="20250516 09:04:22.236"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:22.237" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:22.237" endtime="20250516 09:04:22.237"/>
</kw>
<msg timestamp="20250516 09:04:22.238" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:21.037" endtime="20250516 09:04:22.238"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:22.238" endtime="20250516 09:04:22.238"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:19.167" endtime="20250516 09:04:22.238"/>
</test>
<test id="s1-s4-t3" name="List om roles as JSON with OM service ID passed" line="48">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:22.240" endtime="20250516 09:04:22.240"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:22.244" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:22.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:22.249" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:22.241" endtime="20250516 09:04:22.249"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:22.250" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:22.250" endtime="20250516 09:04:22.250"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:22.251" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:22.250" endtime="20250516 09:04:22.251"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.241" endtime="20250516 09:04:22.251"/>
</kw>
<msg timestamp="20250516 09:04:22.251" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:22.241" endtime="20250516 09:04:22.251"/>
</kw>
<msg timestamp="20250516 09:04:22.251" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:22.241" endtime="20250516 09:04:22.251"/>
</kw>
<msg timestamp="20250516 09:04:22.251" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:22.240" endtime="20250516 09:04:22.251"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:22.252" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:22.252" endtime="20250516 09:04:22.252"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:22.256" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:22.309" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:22.310" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:22.253" endtime="20250516 09:04:22.310"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:22.310" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:22.310" endtime="20250516 09:04:22.311"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:22.311" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:22.311" endtime="20250516 09:04:22.311"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.253" endtime="20250516 09:04:22.311"/>
</kw>
<msg timestamp="20250516 09:04:22.312" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:22.253" endtime="20250516 09:04:22.312"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.252" endtime="20250516 09:04:22.312"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.252" endtime="20250516 09:04:22.312"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.240" endtime="20250516 09:04:22.312"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.239" endtime="20250516 09:04:22.312"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:22.316" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:24.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:24.172" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250516 09:04:22.313" endtime="20250516 09:04:24.172"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:24.173" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250516 09:04:24.172" endtime="20250516 09:04:24.173"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:24.173" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:24.173" endtime="20250516 09:04:24.173"/>
</kw>
<status status="PASS" starttime="20250516 09:04:22.313" endtime="20250516 09:04:24.173"/>
</kw>
<msg timestamp="20250516 09:04:24.173" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:22.312" endtime="20250516 09:04:24.174"/>
</kw>
<msg timestamp="20250516 09:04:24.174" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250516 09:04:22.312" endtime="20250516 09:04:24.174"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:24.178" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:24.183" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:24.183" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:24.175" endtime="20250516 09:04:24.183"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:24.184" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:24.184" endtime="20250516 09:04:24.184"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:24.185" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:24.184" endtime="20250516 09:04:24.185"/>
</kw>
<status status="PASS" starttime="20250516 09:04:24.175" endtime="20250516 09:04:24.185"/>
</kw>
<msg timestamp="20250516 09:04:24.185" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:24.175" endtime="20250516 09:04:24.185"/>
</kw>
<msg timestamp="20250516 09:04:24.185" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:24.174" endtime="20250516 09:04:24.185"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:04:24.185" endtime="20250516 09:04:24.186"/>
</kw>
<status status="PASS" starttime="20250516 09:04:24.174" endtime="20250516 09:04:24.186"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:24.189" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:25.952" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:25.952" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250516 09:04:24.187" endtime="20250516 09:04:25.952"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:25.953" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250516 09:04:25.953" endtime="20250516 09:04:25.953"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:25.954" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:25.953" endtime="20250516 09:04:25.954"/>
</kw>
<status status="PASS" starttime="20250516 09:04:24.187" endtime="20250516 09:04:25.954"/>
</kw>
<msg timestamp="20250516 09:04:25.954" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:24.187" endtime="20250516 09:04:25.954"/>
</kw>
<msg timestamp="20250516 09:04:25.954" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250516 09:04:24.186" endtime="20250516 09:04:25.954"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:25.959" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:25.965" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:25.965" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:25.956" endtime="20250516 09:04:25.965"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:25.966" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:25.965" endtime="20250516 09:04:25.966"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:25.966" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:25.966" endtime="20250516 09:04:25.966"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.956" endtime="20250516 09:04:25.967"/>
</kw>
<msg timestamp="20250516 09:04:25.967" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:25.955" endtime="20250516 09:04:25.967"/>
</kw>
<msg timestamp="20250516 09:04:25.967" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:25.955" endtime="20250516 09:04:25.967"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:04:25.967" endtime="20250516 09:04:25.968"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.955" endtime="20250516 09:04:25.968"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:22.239" endtime="20250516 09:04:25.968"/>
</test>
<test id="s1-s4-t4" name="List om roles as JSON without OM service ID passed" line="54">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:25.970" endtime="20250516 09:04:25.970"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:25.973" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:25.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:25.977" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:25.971" endtime="20250516 09:04:25.977"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:25.978" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:25.978" endtime="20250516 09:04:25.978"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:25.979" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:25.978" endtime="20250516 09:04:25.979"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.971" endtime="20250516 09:04:25.979"/>
</kw>
<msg timestamp="20250516 09:04:25.979" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:25.971" endtime="20250516 09:04:25.979"/>
</kw>
<msg timestamp="20250516 09:04:25.979" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:25.970" endtime="20250516 09:04:25.979"/>
</kw>
<msg timestamp="20250516 09:04:25.979" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:25.970" endtime="20250516 09:04:25.979"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:25.980" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:25.980" endtime="20250516 09:04:25.980"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:25.983" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:26.019" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:26.020" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:25.981" endtime="20250516 09:04:26.020"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:26.020" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:26.020" endtime="20250516 09:04:26.020"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:26.021" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:26.021" endtime="20250516 09:04:26.021"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.981" endtime="20250516 09:04:26.021"/>
</kw>
<msg timestamp="20250516 09:04:26.021" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:25.981" endtime="20250516 09:04:26.021"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.980" endtime="20250516 09:04:26.021"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.980" endtime="20250516 09:04:26.021"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.969" endtime="20250516 09:04:26.021"/>
</kw>
<status status="PASS" starttime="20250516 09:04:25.969" endtime="20250516 09:04:26.021"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:26.025" level="INFO">Running command 'ozone admin om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:27.951" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:27.951" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250516 09:04:26.022" endtime="20250516 09:04:27.951"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:27.952" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250516 09:04:27.951" endtime="20250516 09:04:27.952"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:27.952" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:27.952" endtime="20250516 09:04:27.952"/>
</kw>
<status status="PASS" starttime="20250516 09:04:26.022" endtime="20250516 09:04:27.952"/>
</kw>
<msg timestamp="20250516 09:04:27.953" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:26.022" endtime="20250516 09:04:27.953"/>
</kw>
<msg timestamp="20250516 09:04:27.953" level="INFO">${output_without_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250516 09:04:26.022" endtime="20250516 09:04:27.953"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_without_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:27.957" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:27.962" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:27.962" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:27.954" endtime="20250516 09:04:27.962"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:27.963" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:27.963" endtime="20250516 09:04:27.963"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:27.963" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:27.963" endtime="20250516 09:04:27.963"/>
</kw>
<status status="PASS" starttime="20250516 09:04:27.954" endtime="20250516 09:04:27.964"/>
</kw>
<msg timestamp="20250516 09:04:27.964" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:27.954" endtime="20250516 09:04:27.964"/>
</kw>
<msg timestamp="20250516 09:04:27.964" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250516 09:04:27.953" endtime="20250516 09:04:27.964"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:04:27.964" endtime="20250516 09:04:27.965"/>
</kw>
<status status="PASS" starttime="20250516 09:04:27.953" endtime="20250516 09:04:27.965"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:27.967" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:29.085" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:04:29.085" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:27.965" endtime="20250516 09:04:29.085"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:29.086" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:29.085" endtime="20250516 09:04:29.086"/>
</kw>
<msg timestamp="20250516 09:04:29.086" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:27.965" endtime="20250516 09:04:29.086"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:29.086" endtime="20250516 09:04:29.087"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:25.968" endtime="20250516 09:04:29.087"/>
</test>
<test id="s1-s4-t5" name="List om roles as TABLE with OM service ID passed" line="60">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:29.088" endtime="20250516 09:04:29.089"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:29.092" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:29.096" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:29.096" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:29.090" endtime="20250516 09:04:29.096"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:29.097" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:29.096" endtime="20250516 09:04:29.097"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:29.097" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:29.097" endtime="20250516 09:04:29.097"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.090" endtime="20250516 09:04:29.098"/>
</kw>
<msg timestamp="20250516 09:04:29.098" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:29.089" endtime="20250516 09:04:29.098"/>
</kw>
<msg timestamp="20250516 09:04:29.098" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:29.089" endtime="20250516 09:04:29.098"/>
</kw>
<msg timestamp="20250516 09:04:29.098" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:29.089" endtime="20250516 09:04:29.098"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:29.098" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:29.098" endtime="20250516 09:04:29.098"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:29.102" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:29.147" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:29.147" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:29.100" endtime="20250516 09:04:29.147"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:29.148" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:29.147" endtime="20250516 09:04:29.148"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:29.148" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:29.148" endtime="20250516 09:04:29.148"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.099" endtime="20250516 09:04:29.149"/>
</kw>
<msg timestamp="20250516 09:04:29.149" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:29.099" endtime="20250516 09:04:29.149"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.099" endtime="20250516 09:04:29.149"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.098" endtime="20250516 09:04:29.149"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.088" endtime="20250516 09:04:29.149"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.088" endtime="20250516 09:04:29.149"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:29.152" level="INFO">Running command 'ozone admin om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:30.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:30.936" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250516 09:04:29.150" endtime="20250516 09:04:30.936"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:30.937" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250516 09:04:30.937" endtime="20250516 09:04:30.937"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:30.938" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:30.937" endtime="20250516 09:04:30.938"/>
</kw>
<status status="PASS" starttime="20250516 09:04:29.150" endtime="20250516 09:04:30.938"/>
</kw>
<msg timestamp="20250516 09:04:30.938" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:29.149" endtime="20250516 09:04:30.938"/>
</kw>
<msg timestamp="20250516 09:04:30.938" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250516 09:04:29.149" endtime="20250516 09:04:30.938"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:30.939" endtime="20250516 09:04:30.939"/>
</kw>
<status status="PASS" starttime="20250516 09:04:30.938" endtime="20250516 09:04:30.939"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:30.943" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:32.760" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:32.760" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250516 09:04:30.940" endtime="20250516 09:04:32.760"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:32.761" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250516 09:04:32.761" endtime="20250516 09:04:32.761"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:32.762" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:32.761" endtime="20250516 09:04:32.762"/>
</kw>
<status status="PASS" starttime="20250516 09:04:30.940" endtime="20250516 09:04:32.762"/>
</kw>
<msg timestamp="20250516 09:04:32.762" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:30.940" endtime="20250516 09:04:32.762"/>
</kw>
<msg timestamp="20250516 09:04:32.762" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250516 09:04:30.939" endtime="20250516 09:04:32.762"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:32.763" endtime="20250516 09:04:32.763"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.762" endtime="20250516 09:04:32.763"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:29.087" endtime="20250516 09:04:32.763"/>
</test>
<test id="s1-s4-t6" name="List om roles as TABLE without OM service ID passed" line="66">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250516 09:04:32.765" endtime="20250516 09:04:32.765"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:32.769" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:32.773" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:32.773" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:32.766" endtime="20250516 09:04:32.773"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:32.773" level="INFO">s3g</msg>
<status status="PASS" starttime="20250516 09:04:32.773" endtime="20250516 09:04:32.774"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:32.774" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:32.774" endtime="20250516 09:04:32.774"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.766" endtime="20250516 09:04:32.774"/>
</kw>
<msg timestamp="20250516 09:04:32.774" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:32.765" endtime="20250516 09:04:32.774"/>
</kw>
<msg timestamp="20250516 09:04:32.774" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250516 09:04:32.765" endtime="20250516 09:04:32.774"/>
</kw>
<msg timestamp="20250516 09:04:32.775" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:32.765" endtime="20250516 09:04:32.775"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250516 09:04:32.775" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250516 09:04:32.775" endtime="20250516 09:04:32.775"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:32.779" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:32.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:32.815" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250516 09:04:32.776" endtime="20250516 09:04:32.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:32.816" level="INFO"/>
<status status="PASS" starttime="20250516 09:04:32.815" endtime="20250516 09:04:32.816"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:32.816" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:32.816" endtime="20250516 09:04:32.816"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.776" endtime="20250516 09:04:32.816"/>
</kw>
<msg timestamp="20250516 09:04:32.816" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:32.776" endtime="20250516 09:04:32.817"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.776" endtime="20250516 09:04:32.817"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.775" endtime="20250516 09:04:32.817"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.764" endtime="20250516 09:04:32.817"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.764" endtime="20250516 09:04:32.817"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:32.820" level="INFO">Running command 'ozone admin om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:34.588" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:34.588" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250516 09:04:32.818" endtime="20250516 09:04:34.588"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:34.589" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250516 09:04:34.589" endtime="20250516 09:04:34.589"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:34.590" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:34.589" endtime="20250516 09:04:34.590"/>
</kw>
<status status="PASS" starttime="20250516 09:04:32.818" endtime="20250516 09:04:34.590"/>
</kw>
<msg timestamp="20250516 09:04:34.590" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:32.817" endtime="20250516 09:04:34.590"/>
</kw>
<msg timestamp="20250516 09:04:34.590" level="INFO">${output_without_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250516 09:04:32.817" endtime="20250516 09:04:34.590"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250516 09:04:34.591" endtime="20250516 09:04:34.591"/>
</kw>
<status status="PASS" starttime="20250516 09:04:34.590" endtime="20250516 09:04:34.591"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:34.594" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:35.717" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:04:35.717" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:34.591" endtime="20250516 09:04:35.717"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:35.718" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:35.717" endtime="20250516 09:04:35.718"/>
</kw>
<msg timestamp="20250516 09:04:35.718" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:04:34.591" endtime="20250516 09:04:35.718"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:35.718" endtime="20250516 09:04:35.719"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:32.763" endtime="20250516 09:04:35.719"/>
</test>
<doc>Smoke test for listing om roles.</doc>
<status status="PASS" starttime="20250516 09:04:15.353" endtime="20250516 09:04:35.720"/>
</suite>
<suite id="s1-s5" name="Om-Leader-Transfer" source="/opt/hadoop/smoketest/omha/om-leader-transfer.robot">
<test id="s1-s5-t1" name="Transfer Leadership for OM with Valid ServiceID Specified" line="52">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:36.366" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:38.127" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:38.127" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:36.364" endtime="20250516 09:04:38.127"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:38.128" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:38.127" endtime="20250516 09:04:38.128"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:38.128" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:38.128" endtime="20250516 09:04:38.129"/>
</kw>
<status status="PASS" starttime="20250516 09:04:36.363" endtime="20250516 09:04:38.129"/>
</kw>
<msg timestamp="20250516 09:04:38.129" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:36.363" endtime="20250516 09:04:38.129"/>
</kw>
<msg timestamp="20250516 09:04:38.129" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:36.363" endtime="20250516 09:04:38.129"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:38.129" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:04:38.129" endtime="20250516 09:04:38.129"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:38.130" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:04:38.129" endtime="20250516 09:04:38.130"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:38.130" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:04:38.130" endtime="20250516 09:04:38.130"/>
</kw>
<msg timestamp="20250516 09:04:38.130" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:04:36.363" endtime="20250516 09:04:38.130"/>
</kw>
<msg timestamp="20250516 09:04:38.131" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250516 09:04:38.131" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250516 09:04:36.362" endtime="20250516 09:04:38.131"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:38.134" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:48.743" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:48.743" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250516 09:04:38.132" endtime="20250516 09:04:48.743"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:48.744" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250516 09:04:48.744" endtime="20250516 09:04:48.744"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:48.745" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:48.744" endtime="20250516 09:04:48.745"/>
</kw>
<status status="PASS" starttime="20250516 09:04:38.131" endtime="20250516 09:04:48.745"/>
</kw>
<msg timestamp="20250516 09:04:48.745" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:38.131" endtime="20250516 09:04:48.745"/>
</kw>
<msg timestamp="20250516 09:04:48.745" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250516 09:04:38.131" endtime="20250516 09:04:48.745"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:48.745" endtime="20250516 09:04:48.746"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:48.750" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:50.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:50.613" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:04:48.748" endtime="20250516 09:04:50.613"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:50.614" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:04:50.613" endtime="20250516 09:04:50.614"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:50.614" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:50.614" endtime="20250516 09:04:50.614"/>
</kw>
<status status="PASS" starttime="20250516 09:04:48.747" endtime="20250516 09:04:50.614"/>
</kw>
<msg timestamp="20250516 09:04:50.615" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:48.747" endtime="20250516 09:04:50.615"/>
</kw>
<msg timestamp="20250516 09:04:50.615" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:04:48.747" endtime="20250516 09:04:50.615"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:50.615" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250516 09:04:50.615" endtime="20250516 09:04:50.615"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:50.616" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250516 09:04:50.615" endtime="20250516 09:04:50.616"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:50.616" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:04:50.616" endtime="20250516 09:04:50.616"/>
</kw>
<msg timestamp="20250516 09:04:50.616" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250516 09:04:48.746" endtime="20250516 09:04:50.616"/>
</kw>
<msg timestamp="20250516 09:04:50.616" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250516 09:04:48.746" endtime="20250516 09:04:50.616"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:04:50.616" endtime="20250516 09:04:50.617"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250516 09:04:50.617" endtime="20250516 09:04:50.618"/>
</kw>
<status status="PASS" starttime="20250516 09:04:50.617" endtime="20250516 09:04:50.618"/>
</kw>
<status status="PASS" starttime="20250516 09:04:48.746" endtime="20250516 09:04:50.618"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:36.362" endtime="20250516 09:04:50.618"/>
</test>
<test id="s1-s5-t2" name="Transfer Leadership for OM with Multiple ServiceIDs, Valid ServiceID Specified" line="62">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:50.622" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:52.430" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:52.430" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:04:50.620" endtime="20250516 09:04:52.430"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:52.431" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:04:52.430" endtime="20250516 09:04:52.431"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:52.431" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:52.431" endtime="20250516 09:04:52.431"/>
</kw>
<status status="PASS" starttime="20250516 09:04:50.620" endtime="20250516 09:04:52.431"/>
</kw>
<msg timestamp="20250516 09:04:52.431" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:50.620" endtime="20250516 09:04:52.432"/>
</kw>
<msg timestamp="20250516 09:04:52.432" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:04:50.619" endtime="20250516 09:04:52.432"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:52.432" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250516 09:04:52.432" endtime="20250516 09:04:52.432"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:52.432" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250516 09:04:52.432" endtime="20250516 09:04:52.433"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:52.433" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:04:52.433" endtime="20250516 09:04:52.433"/>
</kw>
<msg timestamp="20250516 09:04:52.433" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250516 09:04:50.619" endtime="20250516 09:04:52.433"/>
</kw>
<msg timestamp="20250516 09:04:52.433" level="INFO">${leaderOM} = om1</msg>
<msg timestamp="20250516 09:04:52.433" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250516 09:04:50.619" endtime="20250516 09:04:52.433"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:52.437" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:57.324" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:57.324" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250516 09:04:52.434" endtime="20250516 09:04:57.324"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:57.325" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250516 09:04:57.324" endtime="20250516 09:04:57.325"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:57.325" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:57.325" endtime="20250516 09:04:57.325"/>
</kw>
<status status="PASS" starttime="20250516 09:04:52.434" endtime="20250516 09:04:57.325"/>
</kw>
<msg timestamp="20250516 09:04:57.326" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:52.434" endtime="20250516 09:04:57.326"/>
</kw>
<msg timestamp="20250516 09:04:57.326" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250516 09:04:52.433" endtime="20250516 09:04:57.326"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:04:57.326" endtime="20250516 09:04:57.326"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:57.330" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:04:59.103" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:04:59.103" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:57.328" endtime="20250516 09:04:59.103"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:04:59.104" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:59.104" endtime="20250516 09:04:59.104"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:04:59.105" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:04:59.105" endtime="20250516 09:04:59.105"/>
</kw>
<status status="PASS" starttime="20250516 09:04:57.328" endtime="20250516 09:04:59.105"/>
</kw>
<msg timestamp="20250516 09:04:59.105" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:57.328" endtime="20250516 09:04:59.105"/>
</kw>
<msg timestamp="20250516 09:04:59.105" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:57.327" endtime="20250516 09:04:59.105"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:59.106" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:04:59.105" endtime="20250516 09:04:59.106"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:59.106" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:04:59.106" endtime="20250516 09:04:59.106"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:04:59.107" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:04:59.106" endtime="20250516 09:04:59.107"/>
</kw>
<msg timestamp="20250516 09:04:59.107" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:04:57.327" endtime="20250516 09:04:59.107"/>
</kw>
<msg timestamp="20250516 09:04:59.107" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250516 09:04:57.327" endtime="20250516 09:04:59.107"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:04:59.107" endtime="20250516 09:04:59.107"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250516 09:04:59.108" endtime="20250516 09:04:59.108"/>
</kw>
<status status="PASS" starttime="20250516 09:04:59.107" endtime="20250516 09:04:59.108"/>
</kw>
<status status="PASS" starttime="20250516 09:04:57.326" endtime="20250516 09:04:59.108"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:50.618" endtime="20250516 09:04:59.108"/>
</test>
<test id="s1-s5-t3" name="Transfer Leadership for OM with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="72">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:04:59.113" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:00.877" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:00.877" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:59.111" endtime="20250516 09:05:00.877"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:00.878" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:00.877" endtime="20250516 09:05:00.878"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:00.878" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:00.878" endtime="20250516 09:05:00.878"/>
</kw>
<status status="PASS" starttime="20250516 09:04:59.110" endtime="20250516 09:05:00.878"/>
</kw>
<msg timestamp="20250516 09:05:00.878" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:04:59.110" endtime="20250516 09:05:00.879"/>
</kw>
<msg timestamp="20250516 09:05:00.879" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:04:59.110" endtime="20250516 09:05:00.879"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:00.879" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:05:00.879" endtime="20250516 09:05:00.879"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:00.880" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:05:00.879" endtime="20250516 09:05:00.880"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:00.880" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:00.880" endtime="20250516 09:05:00.880"/>
</kw>
<msg timestamp="20250516 09:05:00.880" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:04:59.110" endtime="20250516 09:05:00.880"/>
</kw>
<msg timestamp="20250516 09:05:00.880" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250516 09:04:59.109" endtime="20250516 09:05:00.880"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:00.883" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:02.057" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:05:02.057" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250516 09:05:00.881" endtime="20250516 09:05:02.057"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:02.058" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250516 09:05:02.058" endtime="20250516 09:05:02.058"/>
</kw>
<msg timestamp="20250516 09:05:02.058" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250516 09:05:00.881" endtime="20250516 09:05:02.058"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:02.058" endtime="20250516 09:05:02.059"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:04:59.109" endtime="20250516 09:05:02.059"/>
</test>
<test id="s1-s5-t4" name="Transfer Leadership for OM with Multiple ServiceIDs, Invalid ServiceID Specified" line="80">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:02.064" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:03.857" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:03.857" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:02.062" endtime="20250516 09:05:03.857"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:03.858" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:03.857" endtime="20250516 09:05:03.858"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:03.858" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:03.858" endtime="20250516 09:05:03.859"/>
</kw>
<status status="PASS" starttime="20250516 09:05:02.061" endtime="20250516 09:05:03.859"/>
</kw>
<msg timestamp="20250516 09:05:03.859" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:02.061" endtime="20250516 09:05:03.859"/>
</kw>
<msg timestamp="20250516 09:05:03.859" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:02.061" endtime="20250516 09:05:03.859"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:03.859" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:05:03.859" endtime="20250516 09:05:03.860"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:03.860" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:05:03.860" endtime="20250516 09:05:03.860"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:03.860" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:03.860" endtime="20250516 09:05:03.860"/>
</kw>
<msg timestamp="20250516 09:05:03.861" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:02.061" endtime="20250516 09:05:03.861"/>
</kw>
<msg timestamp="20250516 09:05:03.861" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250516 09:05:02.060" endtime="20250516 09:05:03.861"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:03.864" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:05.130" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:05:05.130" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:05:03.861" endtime="20250516 09:05:05.130"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:05.131" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:05:05.131" endtime="20250516 09:05:05.131"/>
</kw>
<msg timestamp="20250516 09:05:05.131" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:05:03.861" endtime="20250516 09:05:05.131"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:05.132" endtime="20250516 09:05:05.132"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:02.059" endtime="20250516 09:05:05.132"/>
</test>
<test id="s1-s5-t5" name="Transfer Leadership for OM without ServiceID specified" line="88">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:05.137" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:06.969" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:06.969" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:05.134" endtime="20250516 09:05:06.969"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:06.970" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:06.970" endtime="20250516 09:05:06.970"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:06.971" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:06.970" endtime="20250516 09:05:06.971"/>
</kw>
<status status="PASS" starttime="20250516 09:05:05.134" endtime="20250516 09:05:06.971"/>
</kw>
<msg timestamp="20250516 09:05:06.971" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:05.134" endtime="20250516 09:05:06.971"/>
</kw>
<msg timestamp="20250516 09:05:06.971" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:05.134" endtime="20250516 09:05:06.971"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:06.972" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:05:06.971" endtime="20250516 09:05:06.972"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:06.972" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:05:06.972" endtime="20250516 09:05:06.972"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:06.972" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:06.972" endtime="20250516 09:05:06.972"/>
</kw>
<msg timestamp="20250516 09:05:06.973" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:05.133" endtime="20250516 09:05:06.973"/>
</kw>
<msg timestamp="20250516 09:05:06.973" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250516 09:05:06.973" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250516 09:05:05.133" endtime="20250516 09:05:06.973"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:06.977" level="INFO">Running command 'ozone admin om transfer -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:20.151" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:20.151" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250516 09:05:06.974" endtime="20250516 09:05:20.151"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:20.152" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250516 09:05:20.152" endtime="20250516 09:05:20.152"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:20.153" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:20.152" endtime="20250516 09:05:20.153"/>
</kw>
<status status="PASS" starttime="20250516 09:05:06.974" endtime="20250516 09:05:20.153"/>
</kw>
<msg timestamp="20250516 09:05:20.153" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:06.973" endtime="20250516 09:05:20.153"/>
</kw>
<msg timestamp="20250516 09:05:20.153" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250516 09:05:06.973" endtime="20250516 09:05:20.153"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:20.153" endtime="20250516 09:05:20.153"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:20.158" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:22.008" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:22.009" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:20.155" endtime="20250516 09:05:22.009"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:22.010" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:22.009" endtime="20250516 09:05:22.010"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:22.010" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:22.010" endtime="20250516 09:05:22.010"/>
</kw>
<status status="PASS" starttime="20250516 09:05:20.155" endtime="20250516 09:05:22.010"/>
</kw>
<msg timestamp="20250516 09:05:22.010" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:20.155" endtime="20250516 09:05:22.010"/>
</kw>
<msg timestamp="20250516 09:05:22.011" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:20.154" endtime="20250516 09:05:22.011"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:22.011" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250516 09:05:22.011" endtime="20250516 09:05:22.011"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:22.011" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250516 09:05:22.011" endtime="20250516 09:05:22.011"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:22.012" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:22.011" endtime="20250516 09:05:22.012"/>
</kw>
<msg timestamp="20250516 09:05:22.012" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:20.154" endtime="20250516 09:05:22.012"/>
</kw>
<msg timestamp="20250516 09:05:22.012" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250516 09:05:20.154" endtime="20250516 09:05:22.012"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:05:22.012" endtime="20250516 09:05:22.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250516 09:05:22.013" endtime="20250516 09:05:22.013"/>
</kw>
<status status="PASS" starttime="20250516 09:05:22.013" endtime="20250516 09:05:22.013"/>
</kw>
<status status="PASS" starttime="20250516 09:05:20.154" endtime="20250516 09:05:22.013"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:05.132" endtime="20250516 09:05:22.014"/>
</test>
<test id="s1-s5-t6" name="Transfer Leadership for OM with Multiple ServiceIDs, No ServiceID Specified" line="98">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:22.019" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:23.823" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:23.823" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:22.016" endtime="20250516 09:05:23.823"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:23.824" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:23.823" endtime="20250516 09:05:23.824"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:23.825" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:23.824" endtime="20250516 09:05:23.825"/>
</kw>
<status status="PASS" starttime="20250516 09:05:22.016" endtime="20250516 09:05:23.825"/>
</kw>
<msg timestamp="20250516 09:05:23.825" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:22.015" endtime="20250516 09:05:23.825"/>
</kw>
<msg timestamp="20250516 09:05:23.825" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:22.015" endtime="20250516 09:05:23.825"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:23.825" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250516 09:05:23.825" endtime="20250516 09:05:23.825"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:23.826" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250516 09:05:23.826" endtime="20250516 09:05:23.826"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:23.826" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:23.826" endtime="20250516 09:05:23.826"/>
</kw>
<msg timestamp="20250516 09:05:23.826" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:22.015" endtime="20250516 09:05:23.826"/>
</kw>
<msg timestamp="20250516 09:05:23.827" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250516 09:05:22.015" endtime="20250516 09:05:23.827"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:23.830" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:24.916" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:05:24.916" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:05:23.827" endtime="20250516 09:05:24.916"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:24.917" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:05:24.916" endtime="20250516 09:05:24.917"/>
</kw>
<msg timestamp="20250516 09:05:24.917" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:05:23.827" endtime="20250516 09:05:24.917"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:24.917" endtime="20250516 09:05:24.917"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:22.014" endtime="20250516 09:05:24.917"/>
</test>
<test id="s1-s5-t7" name="Transfer Leadership for OM randomly with Valid ServiceID Specified" line="106">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:24.922" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:26.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:26.834" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:24.920" endtime="20250516 09:05:26.834"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:26.835" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:26.834" endtime="20250516 09:05:26.835"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:26.835" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:26.835" endtime="20250516 09:05:26.836"/>
</kw>
<status status="PASS" starttime="20250516 09:05:24.919" endtime="20250516 09:05:26.836"/>
</kw>
<msg timestamp="20250516 09:05:26.836" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:24.919" endtime="20250516 09:05:26.836"/>
</kw>
<msg timestamp="20250516 09:05:26.836" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:24.919" endtime="20250516 09:05:26.836"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:26.836" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250516 09:05:26.836" endtime="20250516 09:05:26.836"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:26.837" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250516 09:05:26.836" endtime="20250516 09:05:26.837"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:26.837" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:26.837" endtime="20250516 09:05:26.837"/>
</kw>
<msg timestamp="20250516 09:05:26.837" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:24.919" endtime="20250516 09:05:26.837"/>
</kw>
<msg timestamp="20250516 09:05:26.838" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250516 09:05:24.918" endtime="20250516 09:05:26.838"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:26.841" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:37.472" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:37.472" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250516 09:05:26.839" endtime="20250516 09:05:37.472"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:37.473" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250516 09:05:37.472" endtime="20250516 09:05:37.473"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:37.473" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:37.473" endtime="20250516 09:05:37.474"/>
</kw>
<status status="PASS" starttime="20250516 09:05:26.838" endtime="20250516 09:05:37.474"/>
</kw>
<msg timestamp="20250516 09:05:37.474" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:26.838" endtime="20250516 09:05:37.474"/>
</kw>
<msg timestamp="20250516 09:05:37.474" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250516 09:05:26.838" endtime="20250516 09:05:37.474"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:37.474" endtime="20250516 09:05:37.474"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:37.479" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:39.328" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:39.328" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:37.476" endtime="20250516 09:05:39.328"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:39.329" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:39.329" endtime="20250516 09:05:39.329"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:39.330" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:39.330" endtime="20250516 09:05:39.330"/>
</kw>
<status status="PASS" starttime="20250516 09:05:37.476" endtime="20250516 09:05:39.330"/>
</kw>
<msg timestamp="20250516 09:05:39.330" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:37.476" endtime="20250516 09:05:39.330"/>
</kw>
<msg timestamp="20250516 09:05:39.330" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:37.476" endtime="20250516 09:05:39.330"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:39.331" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:05:39.331" endtime="20250516 09:05:39.331"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:39.331" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:05:39.331" endtime="20250516 09:05:39.331"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:39.332" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:39.331" endtime="20250516 09:05:39.332"/>
</kw>
<msg timestamp="20250516 09:05:39.332" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:37.475" endtime="20250516 09:05:39.332"/>
</kw>
<msg timestamp="20250516 09:05:39.332" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250516 09:05:37.475" endtime="20250516 09:05:39.332"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:05:39.332" endtime="20250516 09:05:39.333"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250516 09:05:39.333" endtime="20250516 09:05:39.333"/>
</kw>
<status status="PASS" starttime="20250516 09:05:37.475" endtime="20250516 09:05:39.333"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:24.918" endtime="20250516 09:05:39.333"/>
</test>
<test id="s1-s5-t8" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Valid ServiceID Specified" line="115">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:39.338" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:41.135" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:41.135" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:39.335" endtime="20250516 09:05:41.135"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:41.136" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:41.135" endtime="20250516 09:05:41.136"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:41.136" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:41.136" endtime="20250516 09:05:41.136"/>
</kw>
<status status="PASS" starttime="20250516 09:05:39.335" endtime="20250516 09:05:41.136"/>
</kw>
<msg timestamp="20250516 09:05:41.137" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:39.335" endtime="20250516 09:05:41.137"/>
</kw>
<msg timestamp="20250516 09:05:41.137" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:05:39.335" endtime="20250516 09:05:41.137"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:41.137" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:05:41.137" endtime="20250516 09:05:41.137"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:41.137" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:05:41.137" endtime="20250516 09:05:41.137"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:41.138" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:41.138" endtime="20250516 09:05:41.138"/>
</kw>
<msg timestamp="20250516 09:05:41.138" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:39.334" endtime="20250516 09:05:41.138"/>
</kw>
<msg timestamp="20250516 09:05:41.138" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" starttime="20250516 09:05:39.334" endtime="20250516 09:05:41.138"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:41.142" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:53.050" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:05:53.050" level="INFO">${output} = INTERNAL_ERROR om3@group-D66704EFC61C: Failed to transfer leadership to om1 (the current leader is null): TIMED_OUT(60s)</msg>
<status status="PASS" starttime="20250516 09:05:41.139" endtime="20250516 09:05:53.050"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:53.051" level="INFO">INTERNAL_ERROR om3@group-D66704EFC61C: Failed to transfer leadership to om1 (the current leader is null): TIMED_OUT(60s)</msg>
<status status="PASS" starttime="20250516 09:05:53.051" endtime="20250516 09:05:53.051"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:53.052" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250516 09:05:53.052" level="FAIL">255 != 0</msg>
<status status="FAIL" starttime="20250516 09:05:53.052" endtime="20250516 09:05:53.052"/>
</kw>
<status status="FAIL" starttime="20250516 09:05:41.139" endtime="20250516 09:05:53.052"/>
</kw>
<msg timestamp="20250516 09:05:53.052" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250516 09:05:41.139" endtime="20250516 09:05:53.052"/>
</kw>
<status status="FAIL" starttime="20250516 09:05:41.138" endtime="20250516 09:05:53.052"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250516 09:05:53.053" endtime="20250516 09:05:53.053"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<status status="NOT RUN" starttime="20250516 09:05:53.053" endtime="20250516 09:05:53.053"/>
</kw>
<timeout value="5 minutes"/>
<status status="FAIL" starttime="20250516 09:05:39.334" endtime="20250516 09:05:53.053">255 != 0</status>
</test>
<test id="s1-s5-t9" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="125">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:53.057" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:54.227" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:05:54.227" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250516 09:05:53.054" endtime="20250516 09:05:54.227"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:54.228" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250516 09:05:54.227" endtime="20250516 09:05:54.228"/>
</kw>
<msg timestamp="20250516 09:05:54.228" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250516 09:05:53.054" endtime="20250516 09:05:54.228"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:54.229" endtime="20250516 09:05:54.229"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:53.053" endtime="20250516 09:05:54.229"/>
</test>
<test id="s1-s5-t10" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Invalid ServiceID Specified" line="130">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:54.233" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:55.495" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:05:55.495" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:05:54.230" endtime="20250516 09:05:55.495"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:55.496" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:05:55.495" endtime="20250516 09:05:55.496"/>
</kw>
<msg timestamp="20250516 09:05:55.496" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250516 09:05:54.230" endtime="20250516 09:05:55.496"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:05:55.496" endtime="20250516 09:05:55.496"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:54.229" endtime="20250516 09:05:55.497"/>
</test>
<test id="s1-s5-t11" name="Transfer Leadership for OM randomly without ServiceID specified" line="136">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:55.501" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:05:57.390" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:05:57.390" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:55.499" endtime="20250516 09:05:57.390"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:05:57.391" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:57.390" endtime="20250516 09:05:57.391"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:05:57.391" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:05:57.391" endtime="20250516 09:05:57.391"/>
</kw>
<status status="PASS" starttime="20250516 09:05:55.499" endtime="20250516 09:05:57.391"/>
</kw>
<msg timestamp="20250516 09:05:57.391" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:55.498" endtime="20250516 09:05:57.392"/>
</kw>
<msg timestamp="20250516 09:05:57.392" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250516 09:05:55.498" endtime="20250516 09:05:57.392"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:57.392" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250516 09:05:57.392" endtime="20250516 09:05:57.392"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:57.392" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250516 09:05:57.392" endtime="20250516 09:05:57.392"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:05:57.393" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:05:57.393" endtime="20250516 09:05:57.393"/>
</kw>
<msg timestamp="20250516 09:05:57.393" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250516 09:05:55.498" endtime="20250516 09:05:57.393"/>
</kw>
<msg timestamp="20250516 09:05:57.393" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250516 09:05:55.497" endtime="20250516 09:05:57.393"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:05:57.396" level="INFO">Running command 'ozone admin om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:06:13.059" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:06:13.059" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250516 09:05:57.394" endtime="20250516 09:06:13.059"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:06:13.060" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250516 09:06:13.060" endtime="20250516 09:06:13.060"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:06:13.061" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:06:13.061" endtime="20250516 09:06:13.061"/>
</kw>
<status status="PASS" starttime="20250516 09:05:57.394" endtime="20250516 09:06:13.061"/>
</kw>
<msg timestamp="20250516 09:06:13.061" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:05:57.394" endtime="20250516 09:06:13.061"/>
</kw>
<msg timestamp="20250516 09:06:13.061" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250516 09:05:57.393" endtime="20250516 09:06:13.061"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:06:13.062" endtime="20250516 09:06:13.062"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:06:13.066" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:06:14.854" level="INFO">${rc} = 0</msg>
<msg timestamp="20250516 09:06:14.854" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:06:13.064" endtime="20250516 09:06:14.854"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:06:14.855" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:06:14.854" endtime="20250516 09:06:14.855"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250516 09:06:14.855" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250516 09:06:14.855" endtime="20250516 09:06:14.855"/>
</kw>
<status status="PASS" starttime="20250516 09:06:13.063" endtime="20250516 09:06:14.856"/>
</kw>
<msg timestamp="20250516 09:06:14.856" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250516 09:06:13.063" endtime="20250516 09:06:14.856"/>
</kw>
<msg timestamp="20250516 09:06:14.856" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250516 09:06:13.063" endtime="20250516 09:06:14.856"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:06:14.856" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250516 09:06:14.856" endtime="20250516 09:06:14.856"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:06:14.857" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250516 09:06:14.856" endtime="20250516 09:06:14.857"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250516 09:06:14.857" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250516 09:06:14.857" endtime="20250516 09:06:14.857"/>
</kw>
<msg timestamp="20250516 09:06:14.857" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250516 09:06:13.063" endtime="20250516 09:06:14.857"/>
</kw>
<msg timestamp="20250516 09:06:14.857" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250516 09:06:13.062" endtime="20250516 09:06:14.858"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250516 09:06:14.858" endtime="20250516 09:06:14.858"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250516 09:06:14.858" endtime="20250516 09:06:14.858"/>
</kw>
<status status="PASS" starttime="20250516 09:06:13.062" endtime="20250516 09:06:14.858"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:05:55.497" endtime="20250516 09:06:14.859"/>
</test>
<test id="s1-s5-t12" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, No ServiceID Specified" line="146">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250516 09:06:14.862" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250516 09:06:15.986" level="INFO">${rc} = 255</msg>
<msg timestamp="20250516 09:06:15.986" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:06:14.860" endtime="20250516 09:06:15.987"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250516 09:06:15.987" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:06:15.987" endtime="20250516 09:06:15.988"/>
</kw>
<msg timestamp="20250516 09:06:15.988" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250516 09:06:14.859" endtime="20250516 09:06:15.988"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250516 09:06:15.988" endtime="20250516 09:06:15.988"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250516 09:06:14.859" endtime="20250516 09:06:15.988"/>
</test>
<doc>Smoketest for OM leader transfer</doc>
<status status="FAIL" starttime="20250516 09:04:36.326" endtime="20250516 09:06:15.990"/>
</suite>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="134330"/>
</suite>
<statistics>
<total>
<stat pass="27" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="27" fail="1" skip="0" id="s1" name="ozonesecure-ha-leadership">ozonesecure-ha-leadership</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-leadership.Kinit</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Scmrole">ozonesecure-ha-leadership.Scmrole</stat>
<stat pass="6" fail="0" skip="0" id="s1-s3" name="Om-Fetch-Key">ozonesecure-ha-leadership.Om-Fetch-Key</stat>
<stat pass="6" fail="0" skip="0" id="s1-s4" name="Om-Roles">ozonesecure-ha-leadership.Om-Roles</stat>
<stat pass="11" fail="1" skip="0" id="s1-s5" name="Om-Leader-Transfer">ozonesecure-ha-leadership.Om-Leader-Transfer</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
