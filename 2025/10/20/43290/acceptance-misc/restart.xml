<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251020 08:06:15.464" rpa="false" schemaversion="4">
<suite id="s1" name="restart">
<suite id="s1-s1" name="Generate" source="/opt/hadoop/smoketest/freon/generate.robot">
<test id="s1-s1-t1" name="Ozone Client Key Generator" line="25">
<kw name="Freon OCKG" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:24.201" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ockgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:30.957" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:30.957" level="INFO">${output} = 2025-10-20 08:04:25,547 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:04:25,600 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:24.200" endtime="20251020 08:04:30.957"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:30.958" level="INFO">2025-10-20 08:04:25,547 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:04:25,600 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:26,600 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:27,601 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:28,601 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:28,695 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hadoop as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-20 08:04:28,804 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, hadoop as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-20 08:04:28,997 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:04:29,602 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:30,602 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:04:30,622 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=1017.279154, max=1017.279154, mean=1017.279154, stddev=0.0, median=1017.279154, p75=1017.279154, p95=1017.279154, p98=1017.279154, p99=1017.279154, p999=1017.279154, mean_rate=0.557846219963976, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:04:30,622 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2025-10-20 08:04:30,622 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:04:30,622 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:04:30.958" endtime="20251020 08:04:30.958"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:30.959" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:30.958" endtime="20251020 08:04:30.959"/>
</kw>
<status status="PASS" starttime="20251020 08:04:24.200" endtime="20251020 08:04:30.959"/>
</kw>
<msg timestamp="20251020 08:04:30.959" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:24.199" endtime="20251020 08:04:30.959"/>
</kw>
<msg timestamp="20251020 08:04:30.959" level="INFO">${result} = 2025-10-20 08:04:25,547 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:04:25,600 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:24.199" endtime="20251020 08:04:30.959"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:04:30.959" endtime="20251020 08:04:30.959"/>
</kw>
<status status="PASS" starttime="20251020 08:04:24.198" endtime="20251020 08:04:30.960"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:04:24.198" endtime="20251020 08:04:30.960"/>
</test>
<test id="s1-s1-t2" name="OM Key Generator" line="28">
<kw name="Freon OMKG" library="freon">
<arg>prefix=omkg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon omkg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:30.964" level="INFO">Running command 'ozone freon omkg  -t 1 -n1 -p omkgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:33.288" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:33.288" level="INFO">${output} = 2025-10-20 08:04:32,199 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpre and number-of-tests 1
2025-10-20 08:04:32,246 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:30.962" endtime="20251020 08:04:33.288"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:33.289" level="INFO">2025-10-20 08:04:32,199 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpre and number-of-tests 1
2025-10-20 08:04:32,246 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:33,247 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:04:33,258 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=77.537238, max=77.537238, mean=77.537238, stddev=0.0, median=77.537238, p75=77.537238, p95=77.537238, p98=77.537238, p99=77.537238, p999=77.537238, mean_rate=7.489477546179331, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:04:33,259 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-20 08:04:33,259 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:04:33,259 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:04:33.288" endtime="20251020 08:04:33.289"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:33.289" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:33.289" endtime="20251020 08:04:33.289"/>
</kw>
<status status="PASS" starttime="20251020 08:04:30.962" endtime="20251020 08:04:33.290"/>
</kw>
<msg timestamp="20251020 08:04:33.290" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:30.962" endtime="20251020 08:04:33.290"/>
</kw>
<msg timestamp="20251020 08:04:33.290" level="INFO">${result} = 2025-10-20 08:04:32,199 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpre and number-of-tests 1
2025-10-20 08:04:32,246 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:30.961" endtime="20251020 08:04:33.290"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:04:33.290" endtime="20251020 08:04:33.290"/>
</kw>
<status status="PASS" starttime="20251020 08:04:30.960" endtime="20251020 08:04:33.290"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:04:30.960" endtime="20251020 08:04:33.290"/>
</test>
<test id="s1-s1-t3" name="OM Bucket Generator" line="31">
<kw name="Freon OMBG" library="freon">
<arg>prefix=ombg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:33.295" level="INFO">Running command 'ozone freon ombg  -t 1 -n1 -p ombgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:35.599" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:35.599" level="INFO">${output} = 2025-10-20 08:04:34,525 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpre and number-of-tests 1
2025-10-20 08:04:34,566 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:33.293" endtime="20251020 08:04:35.599"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:35.600" level="INFO">2025-10-20 08:04:34,525 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpre and number-of-tests 1
2025-10-20 08:04:34,566 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:35,567 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:04:35,575 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=1, min=10.53904, max=10.53904, mean=10.53904, stddev=0.0, median=10.53904, p75=10.53904, p95=10.53904, p98=10.53904, p99=10.53904, p999=10.53904, mean_rate=7.804141885979832, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:04:35,576 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-20 08:04:35,576 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:04:35,576 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:04:35.600" endtime="20251020 08:04:35.600"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:35.601" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:35.601" endtime="20251020 08:04:35.601"/>
</kw>
<status status="PASS" starttime="20251020 08:04:33.293" endtime="20251020 08:04:35.601"/>
</kw>
<msg timestamp="20251020 08:04:35.601" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:33.292" endtime="20251020 08:04:35.601"/>
</kw>
<msg timestamp="20251020 08:04:35.601" level="INFO">${result} = 2025-10-20 08:04:34,525 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpre and number-of-tests 1
2025-10-20 08:04:34,566 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:33.292" endtime="20251020 08:04:35.601"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:04:35.601" endtime="20251020 08:04:35.601"/>
</kw>
<status status="PASS" starttime="20251020 08:04:33.291" endtime="20251020 08:04:35.602"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:04:33.291" endtime="20251020 08:04:35.602"/>
</test>
<doc>Test freon data generation commands</doc>
<status status="PASS" starttime="20251020 08:04:24.172" endtime="20251020 08:04:35.602"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s2-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:36.153" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ockgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:39.743" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:39.743" level="INFO">${output} = 2025-10-20 08:04:37,347 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:04:37,395 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:36.150" endtime="20251020 08:04:39.743"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:39.744" level="INFO">2025-10-20 08:04:37,347 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:04:37,395 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:38,395 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:04:38,419 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:04:39,396 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:04:39,409 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=21.207599, max=21.207599, mean=21.207599, stddev=0.0, median=21.207599, p75=21.207599, p95=21.207599, p98=21.207599, p99=21.207599, p999=21.207599, mean_rate=2.214960489025356, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:04:39,409 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-20 08:04:39,409 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:04:39,409 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:04:39.744" endtime="20251020 08:04:39.744"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:39.745" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:39.744" endtime="20251020 08:04:39.745"/>
</kw>
<status status="PASS" starttime="20251020 08:04:36.150" endtime="20251020 08:04:39.745"/>
</kw>
<msg timestamp="20251020 08:04:39.745" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:36.150" endtime="20251020 08:04:39.745"/>
</kw>
<msg timestamp="20251020 08:04:39.746" level="INFO">${result} = 2025-10-20 08:04:37,347 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:04:37,395 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:04:36.150" endtime="20251020 08:04:39.746"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:04:39.746" endtime="20251020 08:04:39.746"/>
</kw>
<status status="PASS" starttime="20251020 08:04:36.149" endtime="20251020 08:04:39.746"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:04:36.148" endtime="20251020 08:04:39.746"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251020 08:04:36.121" endtime="20251020 08:04:39.747"/>
</suite>
<suite id="s1-s3" name="Generate-Chunk" source="/opt/hadoop/smoketest/freon/generate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:04:40.288" endtime="20251020 08:04:40.288"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:40.291" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:40.990" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:40.990" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251020 08:04:40.289" endtime="20251020 08:04:40.990"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:40.990" level="INFO">false</msg>
<status status="PASS" starttime="20251020 08:04:40.990" endtime="20251020 08:04:40.990"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:40.991" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:40.991" endtime="20251020 08:04:40.991"/>
</kw>
<status status="PASS" starttime="20251020 08:04:40.289" endtime="20251020 08:04:40.991"/>
</kw>
<msg timestamp="20251020 08:04:40.991" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:40.289" endtime="20251020 08:04:40.991"/>
</kw>
<msg timestamp="20251020 08:04:40.991" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251020 08:04:40.288" endtime="20251020 08:04:40.991"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 08:04:40.992" endtime="20251020 08:04:40.992"/>
</kw>
<status status="NOT RUN" starttime="20251020 08:04:40.991" endtime="20251020 08:04:40.992"/>
</branch>
<status status="PASS" starttime="20251020 08:04:40.991" endtime="20251020 08:04:40.992"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 08:04:40.992" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251020 08:04:40.992" endtime="20251020 08:04:40.992"/>
</kw>
<status status="PASS" starttime="20251020 08:04:40.288" endtime="20251020 08:04:40.992"/>
</kw>
<test id="s1-s3-t1" name="DN Chunk Generator" line="27">
<kw name="Freon DCG" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:04:40.994" endtime="20251020 08:04:40.994"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcg -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:40.997" level="INFO">Running command 'ozone freon dcg -t 1 -n100 -p dcgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:46.461" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:46.461" level="INFO">${output} = 2025-10-20 08:04:42,790 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251020 08:04:40.995" endtime="20251020 08:04:46.461"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:46.462" level="INFO">2025-10-20 08:04:42,790 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-20 08:04:43,074 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:04:43,101 [Thread-4] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:04:43,137 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:04:44,102 [Thread-4] INFO freon.ProgressBar: Progress: 4.00 % (4 out of 100)
2025-10-20 08:04:45,103 [Thread-4] INFO freon.ProgressBar: Progress: 73.00 % (73 out of 100)
2025-10-20 08:04:46,103 [Thread-4] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-20 08:04:46,122 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-write, count=100, min=6.244538, max=627.202093, mean=19.615871915937376, stddev=60.71934872439014, median=11.529005, p75=14.59094, p95=26.938101, p98=29.16825, p99=37.890738, p999=627.202093, mean_rate=35.6612135118756, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:04:46,123 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-20 08:04:46,123 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:04:46,123 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251020 08:04:46.461" endtime="20251020 08:04:46.462"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:46.462" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:46.462" endtime="20251020 08:04:46.462"/>
</kw>
<status status="PASS" starttime="20251020 08:04:40.995" endtime="20251020 08:04:46.463"/>
</kw>
<msg timestamp="20251020 08:04:46.463" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:40.995" endtime="20251020 08:04:46.463"/>
</kw>
<msg timestamp="20251020 08:04:46.463" level="INFO">${result} = 2025-10-20 08:04:42,790 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251020 08:04:40.994" endtime="20251020 08:04:46.463"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:04:46.463" endtime="20251020 08:04:46.463"/>
</kw>
<status status="PASS" starttime="20251020 08:04:40.993" endtime="20251020 08:04:46.463"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:04:40.992" endtime="20251020 08:04:46.463"/>
</test>
<doc>Test freon chunk generation commands</doc>
<status status="PASS" starttime="20251020 08:04:40.253" endtime="20251020 08:04:46.464"/>
</suite>
<suite id="s1-s4" name="Validate-Chunk" source="/opt/hadoop/smoketest/freon/validate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:04:47.027" endtime="20251020 08:04:47.027"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:47.030" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:47.747" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:47.747" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251020 08:04:47.028" endtime="20251020 08:04:47.747"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:47.747" level="INFO">false</msg>
<status status="PASS" starttime="20251020 08:04:47.747" endtime="20251020 08:04:47.747"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:47.748" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:47.747" endtime="20251020 08:04:47.748"/>
</kw>
<status status="PASS" starttime="20251020 08:04:47.027" endtime="20251020 08:04:47.748"/>
</kw>
<msg timestamp="20251020 08:04:47.748" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:47.027" endtime="20251020 08:04:47.748"/>
</kw>
<msg timestamp="20251020 08:04:47.748" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251020 08:04:47.027" endtime="20251020 08:04:47.748"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 08:04:47.748" endtime="20251020 08:04:47.749"/>
</kw>
<status status="NOT RUN" starttime="20251020 08:04:47.748" endtime="20251020 08:04:47.749"/>
</branch>
<status status="PASS" starttime="20251020 08:04:47.748" endtime="20251020 08:04:47.749"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 08:04:47.749" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251020 08:04:47.749" endtime="20251020 08:04:47.749"/>
</kw>
<status status="PASS" starttime="20251020 08:04:47.026" endtime="20251020 08:04:47.749"/>
</kw>
<test id="s1-s4-t1" name="DN Chunk Validator" line="28">
<kw name="Freon DCV" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:04:47.750" endtime="20251020 08:04:47.751"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcv -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:04:47.754" level="INFO">Running command 'ozone freon dcv -t 1 -n100 -p dcgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:04:51.420" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:04:51.420" level="INFO">${output} = 2025-10-20 08:04:49,002 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:04:49,051 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:04:47.751" endtime="20251020 08:04:51.420"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:04:51.421" level="INFO">2025-10-20 08:04:49,002 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:04:49,051 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:04:49,452 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-20 08:04:49,694 [main] INFO freon.DatanodeChunkValidator: Using pipeline Pipeline-160b4a49-f536-4656-aea0-baac29141dd9
2025-10-20 08:04:49,728 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:04:50,052 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:04:51,053 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-20 08:04:51,076 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-validate, count=100, min=1.604959, max=3.916913, mean=2.325565830000001, stddev=0.4698673894583887, median=2.230228, p75=2.461934, p95=3.233889, p98=3.3797, p99=3.761869, p999=3.916913, mean_rate=141.69288380576376, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:04:51,077 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-20 08:04:51,077 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:04:51,077 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251020 08:04:51.420" endtime="20251020 08:04:51.421"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:04:51.422" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:04:51.421" endtime="20251020 08:04:51.422"/>
</kw>
<status status="PASS" starttime="20251020 08:04:47.751" endtime="20251020 08:04:51.422"/>
</kw>
<msg timestamp="20251020 08:04:51.422" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:04:47.751" endtime="20251020 08:04:51.422"/>
</kw>
<msg timestamp="20251020 08:04:51.422" level="INFO">${result} = 2025-10-20 08:04:49,002 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:04:49,051 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:04:47.751" endtime="20251020 08:04:51.422"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:04:51.422" endtime="20251020 08:04:51.423"/>
</kw>
<status status="PASS" starttime="20251020 08:04:47.750" endtime="20251020 08:04:51.423"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:04:47.749" endtime="20251020 08:04:51.423"/>
</test>
<doc>Test freon chunk validation commands</doc>
<status status="PASS" starttime="20251020 08:04:46.988" endtime="20251020 08:04:51.423"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s5-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:27.817" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ockgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:38.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:38.977" level="INFO">${output} = 2025-10-20 08:05:29,577 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:05:29,623 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:05:27.814" endtime="20251020 08:05:38.978"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:38.978" level="INFO">2025-10-20 08:05:29,577 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:05:29,623 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:30,624 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:31,624 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:32,606 [main] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Could not determine the leader node.
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:867)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createLeaderErrorException(OzoneManagerProtocolServerSideTranslatorPB.java:200)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:193)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:158)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:124)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:115)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1228)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1246)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1169)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:525)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1953)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3198)
, while invoking $Proxy22.submitRequest over nodeId=null,nodeAddress=om:9862 after 1 failover attempts. Trying to failover after sleeping for 4000ms. Current retry count: 1.
2025-10-20 08:05:32,625 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:33,625 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:34,625 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:35,626 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:36,626 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:37,350 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:05:37,627 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:38,627 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:05:38,642 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=26.632232, max=26.632232, mean=26.632232, stddev=0.0, median=26.632232, p75=26.632232, p95=26.632232, p98=26.632232, p99=26.632232, p999=26.632232, mean_rate=1.793268721610236, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:05:38,643 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 9
2025-10-20 08:05:38,643 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:05:38,643 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:05:38.978" endtime="20251020 08:05:38.979"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:38.979" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:38.979" endtime="20251020 08:05:38.979"/>
</kw>
<status status="PASS" starttime="20251020 08:05:27.813" endtime="20251020 08:05:38.979"/>
</kw>
<msg timestamp="20251020 08:05:38.979" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:27.813" endtime="20251020 08:05:38.979"/>
</kw>
<msg timestamp="20251020 08:05:38.980" level="INFO">${result} = 2025-10-20 08:05:29,577 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-20 08:05:29,623 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251020 08:05:27.812" endtime="20251020 08:05:38.980"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:05:38.980" endtime="20251020 08:05:38.980"/>
</kw>
<status status="PASS" starttime="20251020 08:05:27.811" endtime="20251020 08:05:38.980"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:27.810" endtime="20251020 08:05:38.980"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251020 08:05:27.765" endtime="20251020 08:05:38.981"/>
</suite>
<suite id="s1-s6" name="Validate-Chunk" source="/opt/hadoop/smoketest/freon/validate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:05:39.526" endtime="20251020 08:05:39.527"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:39.529" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:40.225" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:40.225" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251020 08:05:39.527" endtime="20251020 08:05:40.226"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:40.226" level="INFO">false</msg>
<status status="PASS" starttime="20251020 08:05:40.226" endtime="20251020 08:05:40.226"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:40.226" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:40.226" endtime="20251020 08:05:40.226"/>
</kw>
<status status="PASS" starttime="20251020 08:05:39.527" endtime="20251020 08:05:40.227"/>
</kw>
<msg timestamp="20251020 08:05:40.227" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:39.527" endtime="20251020 08:05:40.227"/>
</kw>
<msg timestamp="20251020 08:05:40.227" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251020 08:05:39.527" endtime="20251020 08:05:40.227"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 08:05:40.227" endtime="20251020 08:05:40.227"/>
</kw>
<status status="NOT RUN" starttime="20251020 08:05:40.227" endtime="20251020 08:05:40.227"/>
</branch>
<status status="PASS" starttime="20251020 08:05:40.227" endtime="20251020 08:05:40.227"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 08:05:40.228" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251020 08:05:40.227" endtime="20251020 08:05:40.228"/>
</kw>
<status status="PASS" starttime="20251020 08:05:39.526" endtime="20251020 08:05:40.228"/>
</kw>
<test id="s1-s6-t1" name="DN Chunk Validator" line="28">
<kw name="Freon DCV" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:05:40.229" endtime="20251020 08:05:40.229"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcv -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:40.232" level="INFO">Running command 'ozone freon dcv -t 1 -n100 -p dcgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:43.813" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:43.813" level="INFO">${output} = 2025-10-20 08:05:41,416 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:05:41,458 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:40.230" endtime="20251020 08:05:43.813"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:43.814" level="INFO">2025-10-20 08:05:41,416 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:05:41,458 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:05:41,859 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-20 08:05:42,091 [main] INFO freon.DatanodeChunkValidator: Using pipeline Pipeline-160b4a49-f536-4656-aea0-baac29141dd9
2025-10-20 08:05:42,123 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:05:42,458 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:05:43,459 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-20 08:05:43,476 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-validate, count=100, min=1.718904, max=5.117673, mean=2.4151543121460044, stddev=0.4954762934066993, median=2.308947, p75=2.654056, p95=3.173244, p98=3.775204, p99=3.803794, p999=5.117673, mean_rate=147.74860702170054, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:05:43,476 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-20 08:05:43,476 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:05:43,476 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251020 08:05:43.814" endtime="20251020 08:05:43.814"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:43.815" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:43.814" endtime="20251020 08:05:43.815"/>
</kw>
<status status="PASS" starttime="20251020 08:05:40.230" endtime="20251020 08:05:43.815"/>
</kw>
<msg timestamp="20251020 08:05:43.815" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:40.230" endtime="20251020 08:05:43.815"/>
</kw>
<msg timestamp="20251020 08:05:43.815" level="INFO">${result} = 2025-10-20 08:05:41,416 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-20 08:05:41,458 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:40.229" endtime="20251020 08:05:43.815"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:05:43.815" endtime="20251020 08:05:43.816"/>
</kw>
<status status="PASS" starttime="20251020 08:05:40.228" endtime="20251020 08:05:43.816"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:40.228" endtime="20251020 08:05:43.816"/>
</test>
<doc>Test freon chunk validation commands</doc>
<status status="PASS" starttime="20251020 08:05:39.495" endtime="20251020 08:05:43.816"/>
</suite>
<suite id="s1-s7" name="Generate" source="/opt/hadoop/smoketest/freon/generate.robot">
<test id="s1-s7-t1" name="Ozone Client Key Generator" line="25">
<kw name="Freon OCKG" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:44.387" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ockgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:48.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:48.026" level="INFO">${output} = 2025-10-20 08:05:45,609 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-20 08:05:45,658 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:44.385" endtime="20251020 08:05:48.026"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:48.027" level="INFO">2025-10-20 08:05:45,609 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-20 08:05:45,658 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:46,658 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:46,760 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:05:47,659 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:05:47,683 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=993.187303, max=993.187303, mean=993.187303, stddev=0.0, median=993.187303, p75=993.187303, p95=993.187303, p98=993.187303, p99=993.187303, p999=993.187303, mean_rate=0.8566904237544135, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:05:47,683 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-20 08:05:47,683 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:05:47,683 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:05:48.026" endtime="20251020 08:05:48.027"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:48.027" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:48.027" endtime="20251020 08:05:48.027"/>
</kw>
<status status="PASS" starttime="20251020 08:05:44.385" endtime="20251020 08:05:48.027"/>
</kw>
<msg timestamp="20251020 08:05:48.028" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:44.384" endtime="20251020 08:05:48.028"/>
</kw>
<msg timestamp="20251020 08:05:48.028" level="INFO">${result} = 2025-10-20 08:05:45,609 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-20 08:05:45,658 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:44.384" endtime="20251020 08:05:48.028"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:05:48.028" endtime="20251020 08:05:48.028"/>
</kw>
<status status="PASS" starttime="20251020 08:05:44.383" endtime="20251020 08:05:48.028"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:44.383" endtime="20251020 08:05:48.028"/>
</test>
<test id="s1-s7-t2" name="OM Key Generator" line="28">
<kw name="Freon OMKG" library="freon">
<arg>prefix=omkg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon omkg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:48.033" level="INFO">Running command 'ozone freon omkg  -t 1 -n1 -p omkgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:50.323" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:50.323" level="INFO">${output} = 2025-10-20 08:05:49,228 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpost and number-of-tests 1
2025-10-20 08:05:49,276 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:48.031" endtime="20251020 08:05:50.323"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:50.324" level="INFO">2025-10-20 08:05:49,228 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpost and number-of-tests 1
2025-10-20 08:05:49,276 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:50,277 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:05:50,285 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=70.261297, max=70.261297, mean=70.261297, stddev=0.0, median=70.261297, p75=70.261297, p95=70.261297, p98=70.261297, p99=70.261297, p999=70.261297, mean_rate=5.875834808495938, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:05:50,285 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-20 08:05:50,285 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:05:50,285 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:05:50.323" endtime="20251020 08:05:50.324"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:50.324" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:50.324" endtime="20251020 08:05:50.324"/>
</kw>
<status status="PASS" starttime="20251020 08:05:48.030" endtime="20251020 08:05:50.324"/>
</kw>
<msg timestamp="20251020 08:05:50.324" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:48.030" endtime="20251020 08:05:50.324"/>
</kw>
<msg timestamp="20251020 08:05:50.324" level="INFO">${result} = 2025-10-20 08:05:49,228 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpost and number-of-tests 1
2025-10-20 08:05:49,276 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:48.030" endtime="20251020 08:05:50.324"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:05:50.324" endtime="20251020 08:05:50.325"/>
</kw>
<status status="PASS" starttime="20251020 08:05:48.029" endtime="20251020 08:05:50.325"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:48.029" endtime="20251020 08:05:50.325"/>
</test>
<test id="s1-s7-t3" name="OM Bucket Generator" line="31">
<kw name="Freon OMBG" library="freon">
<arg>prefix=ombg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:50.329" level="INFO">Running command 'ozone freon ombg  -t 1 -n1 -p ombgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:52.739" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:52.739" level="INFO">${output} = 2025-10-20 08:05:51,594 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpost and number-of-tests 1
2025-10-20 08:05:51,648 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:50.327" endtime="20251020 08:05:52.739"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:52.740" level="INFO">2025-10-20 08:05:51,594 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpost and number-of-tests 1
2025-10-20 08:05:51,648 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:52,649 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:05:52,707 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=1, min=16.392753, max=16.392753, mean=16.392753, stddev=0.0, median=16.392753, p75=16.392753, p95=16.392753, p98=16.392753, p99=16.392753, p999=16.392753, mean_rate=9.005241005238844, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:05:52,707 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-20 08:05:52,708 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:05:52,708 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:05:52.739" endtime="20251020 08:05:52.740"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:52.741" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:52.740" endtime="20251020 08:05:52.741"/>
</kw>
<status status="PASS" starttime="20251020 08:05:50.327" endtime="20251020 08:05:52.741"/>
</kw>
<msg timestamp="20251020 08:05:52.741" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:50.327" endtime="20251020 08:05:52.741"/>
</kw>
<msg timestamp="20251020 08:05:52.741" level="INFO">${result} = 2025-10-20 08:05:51,594 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpost and number-of-tests 1
2025-10-20 08:05:51,648 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:50.326" endtime="20251020 08:05:52.741"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:05:52.741" endtime="20251020 08:05:52.741"/>
</kw>
<status status="PASS" starttime="20251020 08:05:50.326" endtime="20251020 08:05:52.741"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:50.325" endtime="20251020 08:05:52.742"/>
</test>
<doc>Test freon data generation commands</doc>
<status status="PASS" starttime="20251020 08:05:44.347" endtime="20251020 08:05:52.742"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s8-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:53.340" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ockgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:57.151" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:57.151" level="INFO">${output} = 2025-10-20 08:05:54,748 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-20 08:05:54,796 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:53.337" endtime="20251020 08:05:57.151"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:57.152" level="INFO">2025-10-20 08:05:54,748 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-20 08:05:54,796 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:55,784 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:05:55,798 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-20 08:05:56,798 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-20 08:05:56,811 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=18.471835, max=18.471835, mean=18.471835, stddev=0.0, median=18.471835, p75=18.471835, p95=18.471835, p98=18.471835, p99=18.471835, p999=18.471835, mean_rate=2.448954068737473, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:05:56,811 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-20 08:05:56,811 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:05:56,811 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251020 08:05:57.151" endtime="20251020 08:05:57.152"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:57.152" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:57.152" endtime="20251020 08:05:57.152"/>
</kw>
<status status="PASS" starttime="20251020 08:05:53.337" endtime="20251020 08:05:57.152"/>
</kw>
<msg timestamp="20251020 08:05:57.152" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:53.337" endtime="20251020 08:05:57.152"/>
</kw>
<msg timestamp="20251020 08:05:57.153" level="INFO">${result} = 2025-10-20 08:05:54,748 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-20 08:05:54,796 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251020 08:05:53.337" endtime="20251020 08:05:57.153"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:05:57.153" endtime="20251020 08:05:57.153"/>
</kw>
<status status="PASS" starttime="20251020 08:05:53.336" endtime="20251020 08:05:57.153"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:53.335" endtime="20251020 08:05:57.153"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251020 08:05:53.306" endtime="20251020 08:05:57.154"/>
</suite>
<suite id="s1-s9" name="Generate-Chunk" source="/opt/hadoop/smoketest/freon/generate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:05:57.698" endtime="20251020 08:05:57.698"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:57.701" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:05:58.395" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:05:58.395" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251020 08:05:57.699" endtime="20251020 08:05:58.395"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:05:58.396" level="INFO">false</msg>
<status status="PASS" starttime="20251020 08:05:58.396" endtime="20251020 08:05:58.396"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:05:58.396" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:05:58.396" endtime="20251020 08:05:58.396"/>
</kw>
<status status="PASS" starttime="20251020 08:05:57.699" endtime="20251020 08:05:58.396"/>
</kw>
<msg timestamp="20251020 08:05:58.396" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:57.699" endtime="20251020 08:05:58.397"/>
</kw>
<msg timestamp="20251020 08:05:58.397" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251020 08:05:57.699" endtime="20251020 08:05:58.397"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 08:05:58.397" endtime="20251020 08:05:58.397"/>
</kw>
<status status="NOT RUN" starttime="20251020 08:05:58.397" endtime="20251020 08:05:58.397"/>
</branch>
<status status="PASS" starttime="20251020 08:05:58.397" endtime="20251020 08:05:58.397"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 08:05:58.397" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251020 08:05:58.397" endtime="20251020 08:05:58.397"/>
</kw>
<status status="PASS" starttime="20251020 08:05:57.698" endtime="20251020 08:05:58.398"/>
</kw>
<test id="s1-s9-t1" name="DN Chunk Generator" line="27">
<kw name="Freon DCG" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:05:58.399" endtime="20251020 08:05:58.399"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcg -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:05:58.402" level="INFO">Running command 'ozone freon dcg -t 1 -n100 -p dcgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:06:03.646" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:06:03.646" level="INFO">${output} = 2025-10-20 08:06:00,018 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251020 08:05:58.400" endtime="20251020 08:06:03.646"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:06:03.647" level="INFO">2025-10-20 08:06:00,018 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-20 08:06:00,266 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-20 08:06:00,287 [Thread-4] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:06:00,324 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:06:01,287 [Thread-4] INFO freon.ProgressBar: Progress: 16.00 % (16 out of 100)
2025-10-20 08:06:02,288 [Thread-4] INFO freon.ProgressBar: Progress: 95.00 % (95 out of 100)
2025-10-20 08:06:03,288 [Thread-4] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-20 08:06:03,309 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-write, count=100, min=8.385635, max=514.921453, mean=18.344716633478363, stddev=49.89285542405582, median=13.037476, p75=14.754023, p95=19.474762, p98=21.674746, p99=27.452633, p999=514.921453, mean_rate=35.1329140940261, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:06:03,309 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-20 08:06:03,309 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:06:03,309 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251020 08:06:03.647" endtime="20251020 08:06:03.647"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:06:03.648" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:06:03.647" endtime="20251020 08:06:03.648"/>
</kw>
<status status="PASS" starttime="20251020 08:05:58.400" endtime="20251020 08:06:03.648"/>
</kw>
<msg timestamp="20251020 08:06:03.648" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:05:58.400" endtime="20251020 08:06:03.648"/>
</kw>
<msg timestamp="20251020 08:06:03.648" level="INFO">${result} = 2025-10-20 08:06:00,018 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251020 08:05:58.399" endtime="20251020 08:06:03.648"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:06:03.648" endtime="20251020 08:06:03.649"/>
</kw>
<status status="PASS" starttime="20251020 08:05:58.398" endtime="20251020 08:06:03.649"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:05:58.398" endtime="20251020 08:06:03.649"/>
</test>
<doc>Test freon chunk generation commands</doc>
<status status="PASS" starttime="20251020 08:05:57.665" endtime="20251020 08:06:03.649"/>
</suite>
<suite id="s1-s10" name="Validate-Chunk" source="/opt/hadoop/smoketest/freon/validate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:06:04.249" endtime="20251020 08:06:04.249"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:06:04.252" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:06:05.002" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:06:05.002" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251020 08:06:04.250" endtime="20251020 08:06:05.002"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:06:05.002" level="INFO">false</msg>
<status status="PASS" starttime="20251020 08:06:05.002" endtime="20251020 08:06:05.002"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:06:05.003" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:06:05.003" endtime="20251020 08:06:05.003"/>
</kw>
<status status="PASS" starttime="20251020 08:06:04.250" endtime="20251020 08:06:05.003"/>
</kw>
<msg timestamp="20251020 08:06:05.003" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:06:04.250" endtime="20251020 08:06:05.003"/>
</kw>
<msg timestamp="20251020 08:06:05.003" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251020 08:06:04.249" endtime="20251020 08:06:05.003"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 08:06:05.004" endtime="20251020 08:06:05.004"/>
</kw>
<status status="NOT RUN" starttime="20251020 08:06:05.003" endtime="20251020 08:06:05.004"/>
</branch>
<status status="PASS" starttime="20251020 08:06:05.003" endtime="20251020 08:06:05.004"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 08:06:05.004" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251020 08:06:05.004" endtime="20251020 08:06:05.004"/>
</kw>
<status status="PASS" starttime="20251020 08:06:04.249" endtime="20251020 08:06:05.004"/>
</kw>
<test id="s1-s10-t1" name="DN Chunk Validator" line="28">
<kw name="Freon DCV" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 08:06:05.006" endtime="20251020 08:06:05.006"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcv -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 08:06:05.009" level="INFO">Running command 'ozone freon dcv -t 1 -n100 -p dcgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 08:06:08.647" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 08:06:08.647" level="INFO">${output} = 2025-10-20 08:06:06,238 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-20 08:06:06,289 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ...</msg>
<status status="PASS" starttime="20251020 08:06:05.007" endtime="20251020 08:06:08.647"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 08:06:08.648" level="INFO">2025-10-20 08:06:06,238 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-20 08:06:06,289 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:06:06,706 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-20 08:06:06,939 [main] INFO freon.DatanodeChunkValidator: Using pipeline Pipeline-160b4a49-f536-4656-aea0-baac29141dd9
2025-10-20 08:06:06,973 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 08:06:07,289 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 08:06:08,290 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-20 08:06:08,308 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-validate, count=100, min=1.425667, max=4.034829, mean=2.02606677, stddev=0.43388436815964815, median=1.930216, p75=2.207909, p95=2.806036, p98=3.319595, p99=3.540934, p999=4.034829, mean_rate=136.70112391193953, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 08:06:08,308 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-20 08:06:08,308 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 08:06:08,308 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251020 08:06:08.648" endtime="20251020 08:06:08.648"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 08:06:08.649" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 08:06:08.648" endtime="20251020 08:06:08.649"/>
</kw>
<status status="PASS" starttime="20251020 08:06:05.006" endtime="20251020 08:06:08.649"/>
</kw>
<msg timestamp="20251020 08:06:08.649" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 08:06:05.006" endtime="20251020 08:06:08.649"/>
</kw>
<msg timestamp="20251020 08:06:08.649" level="INFO">${result} = 2025-10-20 08:06:06,238 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-20 08:06:06,289 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ...</msg>
<status status="PASS" starttime="20251020 08:06:05.006" endtime="20251020 08:06:08.649"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 08:06:08.649" endtime="20251020 08:06:08.650"/>
</kw>
<status status="PASS" starttime="20251020 08:06:05.005" endtime="20251020 08:06:08.650"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 08:06:05.004" endtime="20251020 08:06:08.650"/>
</test>
<doc>Test freon chunk validation commands</doc>
<status status="PASS" starttime="20251020 08:06:04.212" endtime="20251020 08:06:08.650"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="63904"/>
</suite>
<statistics>
<total>
<stat pass="14" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="14" fail="0" skip="0" id="s1" name="restart">restart</stat>
<stat pass="3" fail="0" skip="0" id="s1-s1" name="Generate">restart.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">restart.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate-Chunk">restart.Generate-Chunk</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate-Chunk">restart.Validate-Chunk</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">restart.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Validate-Chunk">restart.Validate-Chunk</stat>
<stat pass="3" fail="0" skip="0" id="s1-s7" name="Generate">restart.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">restart.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate-Chunk">restart.Generate-Chunk</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate-Chunk">restart.Validate-Chunk</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
