<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251020 07:54:34.469" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-debug-tools">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:50:21.816" endtime="20251020 07:50:21.816"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:21.820" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:22.839" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:22.839" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251020 07:50:21.817" endtime="20251020 07:50:22.839"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:22.840" level="INFO">true</msg>
<status status="PASS" starttime="20251020 07:50:22.839" endtime="20251020 07:50:22.840"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:22.841" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:22.840" endtime="20251020 07:50:22.841"/>
</kw>
<status status="PASS" starttime="20251020 07:50:21.817" endtime="20251020 07:50:22.841"/>
</kw>
<msg timestamp="20251020 07:50:22.841" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:21.817" endtime="20251020 07:50:22.841"/>
</kw>
<msg timestamp="20251020 07:50:22.841" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251020 07:50:21.817" endtime="20251020 07:50:22.841"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 07:50:22.842" endtime="20251020 07:50:22.842"/>
</kw>
<status status="NOT RUN" starttime="20251020 07:50:22.841" endtime="20251020 07:50:22.842"/>
</branch>
<status status="PASS" starttime="20251020 07:50:22.841" endtime="20251020 07:50:22.842"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 07:50:22.842" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251020 07:50:22.842" endtime="20251020 07:50:22.842"/>
</kw>
<status status="PASS" starttime="20251020 07:50:21.816" endtime="20251020 07:50:22.842"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251020 07:50:22.843" endtime="20251020 07:50:22.843"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:22.846" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:22.850" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:22.851" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20251020 07:50:22.844" endtime="20251020 07:50:22.851"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:22.851" level="INFO">om</msg>
<status status="PASS" starttime="20251020 07:50:22.851" endtime="20251020 07:50:22.851"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:22.852" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:22.851" endtime="20251020 07:50:22.852"/>
</kw>
<status status="PASS" starttime="20251020 07:50:22.844" endtime="20251020 07:50:22.852"/>
</kw>
<msg timestamp="20251020 07:50:22.852" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:22.844" endtime="20251020 07:50:22.852"/>
</kw>
<msg timestamp="20251020 07:50:22.852" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20251020 07:50:22.843" endtime="20251020 07:50:22.852"/>
</kw>
<msg timestamp="20251020 07:50:22.853" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:50:22.843" endtime="20251020 07:50:22.853"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251020 07:50:22.853" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:50:22.853" endtime="20251020 07:50:22.853"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:22.857" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:22.968" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:22.969" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:50:22.854" endtime="20251020 07:50:22.969"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:22.970" level="INFO"/>
<status status="PASS" starttime="20251020 07:50:22.969" endtime="20251020 07:50:22.970"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:22.970" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:22.970" endtime="20251020 07:50:22.970"/>
</kw>
<status status="PASS" starttime="20251020 07:50:22.854" endtime="20251020 07:50:22.970"/>
</kw>
<msg timestamp="20251020 07:50:22.970" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:22.854" endtime="20251020 07:50:22.971"/>
</kw>
<status status="PASS" starttime="20251020 07:50:22.853" endtime="20251020 07:50:22.971"/>
</kw>
<status status="PASS" starttime="20251020 07:50:22.853" endtime="20251020 07:50:22.971"/>
</kw>
<status status="PASS" starttime="20251020 07:50:21.816" endtime="20251020 07:50:22.971"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251020 07:50:21.815" endtime="20251020 07:50:22.971"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251020 07:50:21.775" endtime="20251020 07:50:22.972"/>
</suite>
<suite id="s1-s2" name="Auditparser" source="/opt/hadoop/smoketest/debug/auditparser.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:50:23.747" endtime="20251020 07:50:23.748"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:23.751" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:24.766" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:24.766" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251020 07:50:23.748" endtime="20251020 07:50:24.766"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:24.767" level="INFO">true</msg>
<status status="PASS" starttime="20251020 07:50:24.766" endtime="20251020 07:50:24.767"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:24.768" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:24.767" endtime="20251020 07:50:24.768"/>
</kw>
<status status="PASS" starttime="20251020 07:50:23.748" endtime="20251020 07:50:24.768"/>
</kw>
<msg timestamp="20251020 07:50:24.768" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:23.748" endtime="20251020 07:50:24.768"/>
</kw>
<msg timestamp="20251020 07:50:24.768" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251020 07:50:23.748" endtime="20251020 07:50:24.768"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 07:50:24.769" endtime="20251020 07:50:24.769"/>
</kw>
<status status="NOT RUN" starttime="20251020 07:50:24.768" endtime="20251020 07:50:24.769"/>
</branch>
<status status="PASS" starttime="20251020 07:50:24.768" endtime="20251020 07:50:24.769"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 07:50:24.769" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251020 07:50:24.769" endtime="20251020 07:50:24.769"/>
</kw>
<status status="PASS" starttime="20251020 07:50:23.747" endtime="20251020 07:50:24.770"/>
</kw>
<test id="s1-s2-t1" name="Testing audit parser" line="41">
<kw name="Create data" type="SETUP">
<kw name="Freon OMBG" library="freon">
<arg>prefix=auditparser</arg>
<arg>n=${buckets}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:24.777" level="INFO">Running command 'ozone freon ombg --om-service-id=omservice -t 1 -n5 -p auditparser  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:29.861" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:29.861" level="INFO">${output} = 2025-10-20 07:50:26,668 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 5
2025-10-20 07:50:26,751 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (...</msg>
<status status="PASS" starttime="20251020 07:50:24.773" endtime="20251020 07:50:29.861"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:29.862" level="INFO">2025-10-20 07:50:26,668 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 5
2025-10-20 07:50:26,751 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 5)
2025-10-20 07:50:27,752 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 5)
2025-10-20 07:50:28,744 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-20 07:50:28,752 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 5)
2025-10-20 07:50:29,763 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (5 out of 5)
2025-10-20 07:50:29,777 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=5, min=22.655824, max=64.904415, mean=34.54026975433624, stddev=15.460684485118877, median=27.217266, p75=33.136958, p95=64.904415, p98=64.904415, p99=64.904415, p999=64.904415, mean_rate=5.782021668611892, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 07:50:29,778 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-20 07:50:29,778 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 07:50:29,778 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 5</msg>
<status status="PASS" starttime="20251020 07:50:29.861" endtime="20251020 07:50:29.862"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:29.862" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:29.862" endtime="20251020 07:50:29.863"/>
</kw>
<status status="PASS" starttime="20251020 07:50:24.773" endtime="20251020 07:50:29.863"/>
</kw>
<msg timestamp="20251020 07:50:29.863" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:24.773" endtime="20251020 07:50:29.863"/>
</kw>
<msg timestamp="20251020 07:50:29.863" level="INFO">${result} = 2025-10-20 07:50:26,668 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 5
2025-10-20 07:50:26,751 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (...</msg>
<status status="PASS" starttime="20251020 07:50:24.772" endtime="20251020 07:50:29.863"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:50:29.863" endtime="20251020 07:50:29.864"/>
</kw>
<status status="PASS" starttime="20251020 07:50:24.771" endtime="20251020 07:50:29.864"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=auditparser</arg>
<arg>n=100</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:29.868" level="INFO">Running command 'ozone freon ockg --om-service-id=omservice -t 1 -n100 -p auditparser  2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:46.442" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:46.442" level="INFO">${output} = 2025-10-20 07:50:31,917 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 100
2025-10-20 07:50:31,987 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 %...</msg>
<status status="PASS" starttime="20251020 07:50:29.866" endtime="20251020 07:50:46.442"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:46.443" level="INFO">2025-10-20 07:50:31,917 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 100
2025-10-20 07:50:31,987 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 07:50:32,988 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 07:50:33,989 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 07:50:34,029 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-20 07:50:34,525 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-20 07:50:34,606 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2025-10-20 07:50:34,990 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 07:50:35,991 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-20 07:50:36,992 [Thread-5] INFO freon.ProgressBar: Progress: 2.00 % (2 out of 100)
2025-10-20 07:50:37,160 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig1-
2025-10-20 07:50:37,995 [Thread-5] INFO freon.ProgressBar: Progress: 10.00 % (10 out of 100)
2025-10-20 07:50:38,995 [Thread-5] INFO freon.ProgressBar: Progress: 20.00 % (20 out of 100)
2025-10-20 07:50:39,996 [Thread-5] INFO freon.ProgressBar: Progress: 33.00 % (33 out of 100)
2025-10-20 07:50:41,010 [Thread-5] INFO freon.ProgressBar: Progress: 46.00 % (46 out of 100)
2025-10-20 07:50:42,010 [Thread-5] INFO freon.ProgressBar: Progress: 58.00 % (58 out of 100)
2025-10-20 07:50:43,011 [Thread-5] INFO freon.ProgressBar: Progress: 72.00 % (72 out of 100)
2025-10-20 07:50:44,012 [Thread-5] INFO freon.ProgressBar: Progress: 85.00 % (85 out of 100)
2025-10-20 07:50:45,015 [Thread-5] INFO freon.ProgressBar: Progress: 97.00 % (97 out of 100)
2025-10-20 07:50:46,016 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-20 07:50:46,053 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=100, min=57.817397, max=2477.390574, mean=108.56239070953804, stddev=232.08651645612122, median=79.504286, p75=88.931682, p95=142.443767, p98=260.818369, p99=339.020424, p999=2477.390574, mean_rate=8.353094397015779, m1=4.903609151261956, m5=4.345451206369766, m15=4.248753337556909, rate_unit=events/second, duration_unit=milliseconds
2025-10-20 07:50:46,053 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 14
2025-10-20 07:50:46,054 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-20 07:50:46,054 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251020 07:50:46.443" endtime="20251020 07:50:46.443"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:46.444" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:46.443" endtime="20251020 07:50:46.444"/>
</kw>
<status status="PASS" starttime="20251020 07:50:29.865" endtime="20251020 07:50:46.444"/>
</kw>
<msg timestamp="20251020 07:50:46.444" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:29.865" endtime="20251020 07:50:46.444"/>
</kw>
<msg timestamp="20251020 07:50:46.444" level="INFO">${result} = 2025-10-20 07:50:31,917 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 100
2025-10-20 07:50:31,987 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 %...</msg>
<status status="PASS" starttime="20251020 07:50:29.865" endtime="20251020 07:50:46.444"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:50:46.445" endtime="20251020 07:50:46.445"/>
</kw>
<status status="PASS" starttime="20251020 07:50:29.864" endtime="20251020 07:50:46.445"/>
</kw>
<status status="PASS" starttime="20251020 07:50:24.771" endtime="20251020 07:50:46.445"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${logdir}</var>
<arg>OZONE_LOG_DIR</arg>
<arg>/var/log/ozone</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20251020 07:50:46.445" level="INFO">${logdir} = /var/log/hadoop</msg>
<status status="PASS" starttime="20251020 07:50:46.445" endtime="20251020 07:50:46.445"/>
</kw>
<kw name="Execute" library="os">
<var>${logfile}</var>
<arg>ls -t "${logdir}" | grep om-audit | head -1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:46.450" level="INFO">Running command 'ls -t "/var/log/hadoop" | grep om-audit | head -1 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:46.454" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:46.454" level="INFO">${output} = om-audit-om1.log</msg>
<status status="PASS" starttime="20251020 07:50:46.447" endtime="20251020 07:50:46.454"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:46.455" level="INFO">om-audit-om1.log</msg>
<status status="PASS" starttime="20251020 07:50:46.454" endtime="20251020 07:50:46.455"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:46.456" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:46.455" endtime="20251020 07:50:46.456"/>
</kw>
<status status="PASS" starttime="20251020 07:50:46.446" endtime="20251020 07:50:46.456"/>
</kw>
<msg timestamp="20251020 07:50:46.456" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:46.446" endtime="20251020 07:50:46.456"/>
</kw>
<msg timestamp="20251020 07:50:46.456" level="INFO">${logfile} = om-audit-om1.log</msg>
<status status="PASS" starttime="20251020 07:50:46.446" endtime="20251020 07:50:46.456"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone debug auditparser "${auditworkdir}/audit.db" load "${logdir}/${logfile}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:46.461" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" load "/var/log/hadoop/om-audit-om1.log" 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:48.577" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:48.577" level="INFO">${output} = /var/log/hadoop/om-audit-om1.log has been loaded successfully</msg>
<status status="PASS" starttime="20251020 07:50:46.458" endtime="20251020 07:50:48.578"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:48.579" level="INFO">/var/log/hadoop/om-audit-om1.log has been loaded successfully</msg>
<status status="PASS" starttime="20251020 07:50:48.578" endtime="20251020 07:50:48.579"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:48.579" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:48.579" endtime="20251020 07:50:48.579"/>
</kw>
<status status="PASS" starttime="20251020 07:50:46.457" endtime="20251020 07:50:48.579"/>
</kw>
<msg timestamp="20251020 07:50:48.579" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:46.457" endtime="20251020 07:50:48.579"/>
</kw>
<status status="PASS" starttime="20251020 07:50:46.456" endtime="20251020 07:50:48.580"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" template top5cmds</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:48.584" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" template top5cmds 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:50.301" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:50.301" level="INFO">${output} = ALLOCATE_KEY	100	
COMMIT_KEY	100	
CREATE_BUCKET	6	
CREATE_VOLUME	1	
</msg>
<status status="PASS" starttime="20251020 07:50:48.581" endtime="20251020 07:50:50.301"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:50.302" level="INFO">ALLOCATE_KEY	100	
COMMIT_KEY	100	
CREATE_BUCKET	6	
CREATE_VOLUME	1	
</msg>
<status status="PASS" starttime="20251020 07:50:50.301" endtime="20251020 07:50:50.302"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:50.302" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:50.302" endtime="20251020 07:50:50.303"/>
</kw>
<status status="PASS" starttime="20251020 07:50:48.580" endtime="20251020 07:50:50.303"/>
</kw>
<msg timestamp="20251020 07:50:50.303" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:48.580" endtime="20251020 07:50:50.303"/>
</kw>
<msg timestamp="20251020 07:50:50.303" level="INFO">${result} = ALLOCATE_KEY	100	
COMMIT_KEY	100	
CREATE_BUCKET	6	
CREATE_VOLUME	1	
</msg>
<status status="PASS" starttime="20251020 07:50:48.580" endtime="20251020 07:50:50.303"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>ALLOCATE_KEY</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:50:50.303" endtime="20251020 07:50:50.303"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" template top5users</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:50.307" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" template top5users 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:52.142" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:52.142" level="INFO">${output} = testuser/om@EXAMPLE.COM	207	
</msg>
<status status="PASS" starttime="20251020 07:50:50.305" endtime="20251020 07:50:52.142"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:52.143" level="INFO">testuser/om@EXAMPLE.COM	207	
</msg>
<status status="PASS" starttime="20251020 07:50:52.142" endtime="20251020 07:50:52.143"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:52.143" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:52.143" endtime="20251020 07:50:52.143"/>
</kw>
<status status="PASS" starttime="20251020 07:50:50.304" endtime="20251020 07:50:52.143"/>
</kw>
<msg timestamp="20251020 07:50:52.143" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:50.304" endtime="20251020 07:50:52.144"/>
</kw>
<msg timestamp="20251020 07:50:52.144" level="INFO">${result} = testuser/om@EXAMPLE.COM	207	
</msg>
<status status="PASS" starttime="20251020 07:50:50.304" endtime="20251020 07:50:52.144"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Set username</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set username">
<kw name="Get test user principal" library="commonlib">
<var>${principal}</var>
<arg>testuser</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:52.149" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:52.153" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:52.153" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20251020 07:50:52.146" endtime="20251020 07:50:52.153"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:52.154" level="INFO">om</msg>
<status status="PASS" starttime="20251020 07:50:52.153" endtime="20251020 07:50:52.154"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:52.154" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:52.154" endtime="20251020 07:50:52.154"/>
</kw>
<status status="PASS" starttime="20251020 07:50:52.146" endtime="20251020 07:50:52.154"/>
</kw>
<msg timestamp="20251020 07:50:52.154" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:52.145" endtime="20251020 07:50:52.155"/>
</kw>
<msg timestamp="20251020 07:50:52.155" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20251020 07:50:52.145" endtime="20251020 07:50:52.155"/>
</kw>
<msg timestamp="20251020 07:50:52.155" level="INFO">${principal} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:50:52.145" endtime="20251020 07:50:52.155"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${user}</arg>
<arg>${principal}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251020 07:50:52.155" level="INFO">${user} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:50:52.155" endtime="20251020 07:50:52.155"/>
</kw>
<status status="PASS" starttime="20251020 07:50:52.144" endtime="20251020 07:50:52.155"/>
</kw>
<status status="PASS" starttime="20251020 07:50:52.144" endtime="20251020 07:50:52.155"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${user}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:50:52.156" endtime="20251020 07:50:52.156"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" query "select count(*) from audit where op='CREATE_VOLUME' and RESULT='SUCCESS'"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:52.160" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" query "select count(*) from audit where op='CREATE_VOLUME' and RESULT='SUCCESS'" 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:54.079" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:54.079" level="INFO">${output} = 1	
</msg>
<status status="PASS" starttime="20251020 07:50:52.157" endtime="20251020 07:50:54.079"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:54.080" level="INFO">1	
</msg>
<status status="PASS" starttime="20251020 07:50:54.080" endtime="20251020 07:50:54.081"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:54.081" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:54.081" endtime="20251020 07:50:54.081"/>
</kw>
<status status="PASS" starttime="20251020 07:50:52.157" endtime="20251020 07:50:54.081"/>
</kw>
<msg timestamp="20251020 07:50:54.081" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:52.157" endtime="20251020 07:50:54.082"/>
</kw>
<msg timestamp="20251020 07:50:54.082" level="INFO">${result} = 1	
</msg>
<status status="PASS" starttime="20251020 07:50:52.156" endtime="20251020 07:50:54.082"/>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<var>${result}</var>
<arg>${result}</arg>
<doc>Converts the given item to a floating point number.</doc>
<msg timestamp="20251020 07:50:54.082" level="INFO">${result} = 1.0</msg>
<status status="PASS" starttime="20251020 07:50:54.082" endtime="20251020 07:50:54.082"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${result}&gt;=1</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:50:54.082" endtime="20251020 07:50:54.083"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" query "select count(*) from audit where op='CREATE_BUCKET' and RESULT='SUCCESS'"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:54.087" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" query "select count(*) from audit where op='CREATE_BUCKET' and RESULT='SUCCESS'" 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:55.853" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:55.853" level="INFO">${output} = 6	
</msg>
<status status="PASS" starttime="20251020 07:50:54.084" endtime="20251020 07:50:55.853"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:55.854" level="INFO">6	
</msg>
<status status="PASS" starttime="20251020 07:50:55.853" endtime="20251020 07:50:55.854"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:55.855" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:55.854" endtime="20251020 07:50:55.855"/>
</kw>
<status status="PASS" starttime="20251020 07:50:54.084" endtime="20251020 07:50:55.855"/>
</kw>
<msg timestamp="20251020 07:50:55.855" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:54.083" endtime="20251020 07:50:55.855"/>
</kw>
<msg timestamp="20251020 07:50:55.855" level="INFO">${result} = 6	
</msg>
<status status="PASS" starttime="20251020 07:50:54.083" endtime="20251020 07:50:55.855"/>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<var>${result}</var>
<arg>${result}</arg>
<doc>Converts the given item to a floating point number.</doc>
<msg timestamp="20251020 07:50:55.856" level="INFO">${result} = 6.0</msg>
<status status="PASS" starttime="20251020 07:50:55.855" endtime="20251020 07:50:55.856"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${result}&gt;=${buckets}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:50:55.856" endtime="20251020 07:50:55.856"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:50:24.770" endtime="20251020 07:50:55.856"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251020 07:50:23.698" endtime="20251020 07:50:55.857"/>
</suite>
<suite id="s1-s3" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s3-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:50:56.626" endtime="20251020 07:50:56.626"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:56.630" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:57.640" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:57.640" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251020 07:50:56.627" endtime="20251020 07:50:57.640"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:57.641" level="INFO">true</msg>
<status status="PASS" starttime="20251020 07:50:57.640" endtime="20251020 07:50:57.641"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:57.641" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:57.641" endtime="20251020 07:50:57.641"/>
</kw>
<status status="PASS" starttime="20251020 07:50:56.626" endtime="20251020 07:50:57.642"/>
</kw>
<msg timestamp="20251020 07:50:57.642" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:56.626" endtime="20251020 07:50:57.642"/>
</kw>
<msg timestamp="20251020 07:50:57.642" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251020 07:50:56.626" endtime="20251020 07:50:57.642"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 07:50:57.642" endtime="20251020 07:50:57.642"/>
</kw>
<status status="NOT RUN" starttime="20251020 07:50:57.642" endtime="20251020 07:50:57.642"/>
</branch>
<status status="PASS" starttime="20251020 07:50:57.642" endtime="20251020 07:50:57.643"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 07:50:57.643" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251020 07:50:57.643" endtime="20251020 07:50:57.643"/>
</kw>
<status status="PASS" starttime="20251020 07:50:56.625" endtime="20251020 07:50:57.643"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251020 07:50:57.643" endtime="20251020 07:50:57.643"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:57.647" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:57.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:57.651" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20251020 07:50:57.645" endtime="20251020 07:50:57.651"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:57.652" level="INFO">scm</msg>
<status status="PASS" starttime="20251020 07:50:57.652" endtime="20251020 07:50:57.652"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:57.653" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:57.652" endtime="20251020 07:50:57.653"/>
</kw>
<status status="PASS" starttime="20251020 07:50:57.644" endtime="20251020 07:50:57.653"/>
</kw>
<msg timestamp="20251020 07:50:57.653" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:57.644" endtime="20251020 07:50:57.653"/>
</kw>
<msg timestamp="20251020 07:50:57.653" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20251020 07:50:57.644" endtime="20251020 07:50:57.653"/>
</kw>
<msg timestamp="20251020 07:50:57.653" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:50:57.644" endtime="20251020 07:50:57.653"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251020 07:50:57.654" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:50:57.653" endtime="20251020 07:50:57.654"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:57.657" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:50:57.777" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:50:57.777" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:50:57.655" endtime="20251020 07:50:57.777"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:50:57.779" level="INFO"/>
<status status="PASS" starttime="20251020 07:50:57.778" endtime="20251020 07:50:57.779"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:50:57.780" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:50:57.779" endtime="20251020 07:50:57.780"/>
</kw>
<status status="PASS" starttime="20251020 07:50:57.655" endtime="20251020 07:50:57.780"/>
</kw>
<msg timestamp="20251020 07:50:57.780" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:57.655" endtime="20251020 07:50:57.781"/>
</kw>
<status status="PASS" starttime="20251020 07:50:57.654" endtime="20251020 07:50:57.781"/>
</kw>
<status status="PASS" starttime="20251020 07:50:57.654" endtime="20251020 07:50:57.781"/>
</kw>
<status status="PASS" starttime="20251020 07:50:56.625" endtime="20251020 07:50:57.781"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251020 07:50:56.625" endtime="20251020 07:50:57.781"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251020 07:50:56.584" endtime="20251020 07:50:57.782"/>
</suite>
<suite id="s1-s4" name="Ozone-Debug-Tests" source="/opt/hadoop/smoketest/debug/ozone-debug-tests.robot">
<kw name="Write keys" type="SETUP">
<kw name="Execute" library="os">
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME} --space-quota 100TB --namespace-quota 100</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:50:58.637" level="INFO">Running command 'ozone sh volume create o3://omservice/cli-debug-volume15347 --space-quota 100TB --namespace-quota 100 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:02.101" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:02.102" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:50:58.634" endtime="20251020 07:51:02.102"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:02.102" level="INFO"/>
<status status="PASS" starttime="20251020 07:51:02.102" endtime="20251020 07:51:02.103"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:02.103" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:02.103" endtime="20251020 07:51:02.103"/>
</kw>
<status status="PASS" starttime="20251020 07:50:58.634" endtime="20251020 07:51:02.103"/>
</kw>
<msg timestamp="20251020 07:51:02.103" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:50:58.634" endtime="20251020 07:51:02.103"/>
</kw>
<status status="PASS" starttime="20251020 07:50:58.634" endtime="20251020 07:51:02.103"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${BASE_PATH} --space-quota 1TB</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:02.107" level="INFO">Running command 'ozone sh bucket create o3://omservice/cli-debug-volume15347/cli-debug-bucket --space-quota 1TB 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:05.758" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:05.758" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:02.104" endtime="20251020 07:51:05.758"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:05.759" level="INFO"/>
<status status="PASS" starttime="20251020 07:51:05.758" endtime="20251020 07:51:05.759"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:05.759" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:05.759" endtime="20251020 07:51:05.759"/>
</kw>
<status status="PASS" starttime="20251020 07:51:02.104" endtime="20251020 07:51:05.759"/>
</kw>
<msg timestamp="20251020 07:51:05.759" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:02.104" endtime="20251020 07:51:05.759"/>
</kw>
<status status="PASS" starttime="20251020 07:51:02.104" endtime="20251020 07:51:05.760"/>
</kw>
<kw name="Execute" library="os">
<arg>dd if=/dev/urandom of=${TEMP_DIR}/${TESTFILE} bs=100000 count=15</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:05.764" level="INFO">Running command 'dd if=/dev/urandom of=/tmp/testfile bs=100000 count=15 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:05.774" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:05.774" level="INFO">${output} = 15+0 records in
15+0 records out
1500000 bytes (1.5 MB, 1.4 MiB) copied, 0.00581872 s, 258 MB/s</msg>
<status status="PASS" starttime="20251020 07:51:05.761" endtime="20251020 07:51:05.774"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:05.775" level="INFO">15+0 records in
15+0 records out
1500000 bytes (1.5 MB, 1.4 MiB) copied, 0.00581872 s, 258 MB/s</msg>
<status status="PASS" starttime="20251020 07:51:05.775" endtime="20251020 07:51:05.775"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:05.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:05.775" endtime="20251020 07:51:05.776"/>
</kw>
<status status="PASS" starttime="20251020 07:51:05.761" endtime="20251020 07:51:05.776"/>
</kw>
<msg timestamp="20251020 07:51:05.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:05.760" endtime="20251020 07:51:05.776"/>
</kw>
<status status="PASS" starttime="20251020 07:51:05.760" endtime="20251020 07:51:05.776"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put ${BASE_PATH}/${TESTFILE} ${TEMP_DIR}/${TESTFILE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:05.780" level="INFO">Running command 'ozone sh key put o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:11.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:11.425" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:05.777" endtime="20251020 07:51:11.425"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:11.426" level="INFO"/>
<status status="PASS" starttime="20251020 07:51:11.425" endtime="20251020 07:51:11.426"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:11.426" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:11.426" endtime="20251020 07:51:11.426"/>
</kw>
<status status="PASS" starttime="20251020 07:51:05.777" endtime="20251020 07:51:11.427"/>
</kw>
<msg timestamp="20251020 07:51:11.427" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:05.777" endtime="20251020 07:51:11.427"/>
</kw>
<status status="PASS" starttime="20251020 07:51:05.776" endtime="20251020 07:51:11.427"/>
</kw>
<kw name="Create Key" library="shell">
<arg>${BASE_PATH}/${RATIS_ONE_KEY}</arg>
<arg>${TEMP_DIR}/${TESTFILE}</arg>
<arg>--type RATIS --replication ONE</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put ${args} ${key} ${file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:11.431" level="INFO">Running command 'ozone sh key put --type RATIS --replication ONE o3://omservice/cli-debug-volume15347/cli-debug-bucket/ratis-one-key /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:17.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:17.219" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:11.428" endtime="20251020 07:51:17.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:17.220" level="INFO"/>
<status status="PASS" starttime="20251020 07:51:17.219" endtime="20251020 07:51:17.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:17.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:17.220" endtime="20251020 07:51:17.220"/>
</kw>
<status status="PASS" starttime="20251020 07:51:11.428" endtime="20251020 07:51:17.221"/>
</kw>
<msg timestamp="20251020 07:51:17.221" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:11.428" endtime="20251020 07:51:17.221"/>
</kw>
<msg timestamp="20251020 07:51:17.221" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:11.427" endtime="20251020 07:51:17.221"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:17.221" endtime="20251020 07:51:17.221"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Uploaded ${file} to ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:17.222" level="INFO">Uploaded /tmp/testfile to o3://omservice/cli-debug-volume15347/cli-debug-bucket/ratis-one-key</msg>
<status status="PASS" starttime="20251020 07:51:17.221" endtime="20251020 07:51:17.222"/>
</kw>
<status status="PASS" starttime="20251020 07:51:11.427" endtime="20251020 07:51:17.222"/>
</kw>
<kw name="Create Key" library="shell">
<arg>${BASE_PATH}/${RATIS_THREE_KEY}</arg>
<arg>${TEMP_DIR}/${TESTFILE}</arg>
<arg>--type RATIS --replication THREE</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put ${args} ${key} ${file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:17.226" level="INFO">Running command 'ozone sh key put --type RATIS --replication THREE o3://omservice/cli-debug-volume15347/cli-debug-bucket/ratis-three-key /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:22.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:22.985" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:17.223" endtime="20251020 07:51:22.985"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:22.986" level="INFO"/>
<status status="PASS" starttime="20251020 07:51:22.986" endtime="20251020 07:51:22.986"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:22.987" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:22.986" endtime="20251020 07:51:22.987"/>
</kw>
<status status="PASS" starttime="20251020 07:51:17.223" endtime="20251020 07:51:22.987"/>
</kw>
<msg timestamp="20251020 07:51:22.987" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:17.223" endtime="20251020 07:51:22.987"/>
</kw>
<msg timestamp="20251020 07:51:22.987" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:17.222" endtime="20251020 07:51:22.987"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:22.987" endtime="20251020 07:51:22.988"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Uploaded ${file} to ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:22.988" level="INFO">Uploaded /tmp/testfile to o3://omservice/cli-debug-volume15347/cli-debug-bucket/ratis-three-key</msg>
<status status="PASS" starttime="20251020 07:51:22.988" endtime="20251020 07:51:22.988"/>
</kw>
<status status="PASS" starttime="20251020 07:51:17.222" endtime="20251020 07:51:22.988"/>
</kw>
<kw name="Create Key" library="shell">
<arg>${BASE_PATH}/${EC_KEY}</arg>
<arg>${TEMP_DIR}/${TESTFILE}</arg>
<arg>--type EC --replication rs-3-2-1024k</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put ${args} ${key} ${file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:22.992" level="INFO">Running command 'ozone sh key put --type EC --replication rs-3-2-1024k o3://omservice/cli-debug-volume15347/cli-debug-bucket/ec-key /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:29.519" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:29.519" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:22.990" endtime="20251020 07:51:29.519"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:29.520" level="INFO"/>
<status status="PASS" starttime="20251020 07:51:29.520" endtime="20251020 07:51:29.520"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:29.520" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:29.520" endtime="20251020 07:51:29.521"/>
</kw>
<status status="PASS" starttime="20251020 07:51:22.989" endtime="20251020 07:51:29.521"/>
</kw>
<msg timestamp="20251020 07:51:29.521" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:22.989" endtime="20251020 07:51:29.521"/>
</kw>
<msg timestamp="20251020 07:51:29.521" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:51:22.989" endtime="20251020 07:51:29.521"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:29.521" endtime="20251020 07:51:29.521"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Uploaded ${file} to ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:29.522" level="INFO">Uploaded /tmp/testfile to o3://omservice/cli-debug-volume15347/cli-debug-bucket/ec-key</msg>
<status status="PASS" starttime="20251020 07:51:29.521" endtime="20251020 07:51:29.522"/>
</kw>
<status status="PASS" starttime="20251020 07:51:22.988" endtime="20251020 07:51:29.522"/>
</kw>
<status status="PASS" starttime="20251020 07:50:58.633" endtime="20251020 07:51:29.522"/>
</kw>
<test id="s1-s4-t1" name="Test ozone debug replicas verify checksums, block-existence and container-state" line="62">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --checksums --block-existence --container-state ${BASE_PATH}/${TESTFILE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:29.527" level="INFO">Running command 'ozone debug replicas verify --checksums --block-existence --container-state o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:37.827" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:37.827" level="INFO">${output} = {
  "keys" : [ ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification S...</msg>
<status status="PASS" starttime="20251020 07:51:29.524" endtime="20251020 07:51:37.827"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:37.828" level="INFO">{
  "keys" : [ ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Key
Verification Types: checksum, blockExistence, containerState
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 1
Keys failed verification: 0

Total Execution time: 00:00:04,222
***************************************************</msg>
<status status="PASS" starttime="20251020 07:51:37.828" endtime="20251020 07:51:37.828"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:37.829" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:37.828" endtime="20251020 07:51:37.829"/>
</kw>
<status status="PASS" starttime="20251020 07:51:29.523" endtime="20251020 07:51:37.829"/>
</kw>
<msg timestamp="20251020 07:51:37.829" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:29.523" endtime="20251020 07:51:37.829"/>
</kw>
<msg timestamp="20251020 07:51:37.829" level="INFO">${output} = {
  "keys" : [ ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification S...</msg>
<status status="PASS" starttime="20251020 07:51:29.523" endtime="20251020 07:51:37.829"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:51:37.830" level="INFO">${json_split} = {
  "keys" : [ ],
  "pass" : true
}</msg>
<status status="PASS" starttime="20251020 07:51:37.830" endtime="20251020 07:51:37.830"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:51:37.831" level="INFO">${json} = {'keys': [], 'pass': True}</msg>
<status status="PASS" starttime="20251020 07:51:37.831" endtime="20251020 07:51:37.831"/>
</kw>
<msg timestamp="20251020 07:51:37.831" level="INFO">${json} = {'keys': [], 'pass': True}</msg>
<status status="PASS" starttime="20251020 07:51:37.829" endtime="20251020 07:51:37.831"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${json}[keys]</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:51:37.832" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:51:37.831" endtime="20251020 07:51:37.832"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${json}[pass]</arg>
<arg>${True}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:51:37.832" endtime="20251020 07:51:37.832"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:51:29.522" endtime="20251020 07:51:37.832"/>
</test>
<test id="s1-s4-t2" name="Test ozone debug replicas verify with RATIS ONE filter" line="70">
<kw name="Execute and validate replicas verify with filter">
<var>${key_names}</var>
<arg>RATIS</arg>
<arg>ONE</arg>
<arg>checksums</arg>
<arg>1</arg>
<kw name="Execute replicas verify with replication filter" library="ozone-debug-keywords">
<var>${output}</var>
<arg>${replication_type}</arg>
<arg>${replication_factor}</arg>
<arg>${verification_type}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --${verification_type} --type ${replication_type} --replication ${replication_factor} o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:37.839" level="INFO">Running command 'ozone debug replicas verify --checksums --type RATIS --replication ONE o3://omservice/cli-debug-volume15347/cli-debug-bucket --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:44.831" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:44.831" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 11581689...</msg>
<status status="PASS" starttime="20251020 07:51:37.835" endtime="20251020 07:51:44.831"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:44.832" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 115816896921600102,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : true
  } ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Bucket
Verification Types: checksum
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket

Number of Volumes processed: 0
Number of Buckets processed: 1
Number of Keys processed: 4

Keys passed verification: 1
Keys failed verification: 0

Total Execution time: 00:00:02,739
***************************************************</msg>
<status status="PASS" starttime="20251020 07:51:44.831" endtime="20251020 07:51:44.832"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:44.832" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:44.832" endtime="20251020 07:51:44.832"/>
</kw>
<status status="PASS" starttime="20251020 07:51:37.835" endtime="20251020 07:51:44.833"/>
</kw>
<msg timestamp="20251020 07:51:44.833" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:37.835" endtime="20251020 07:51:44.833"/>
</kw>
<msg timestamp="20251020 07:51:44.833" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 11581689...</msg>
<status status="PASS" starttime="20251020 07:51:37.834" endtime="20251020 07:51:44.833"/>
</kw>
<msg timestamp="20251020 07:51:44.833" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 11581689...</msg>
<status status="PASS" starttime="20251020 07:51:37.834" endtime="20251020 07:51:44.833"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:51:44.834" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 11581689...</msg>
<status status="PASS" starttime="20251020 07:51:44.834" endtime="20251020 07:51:44.834"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:51:44.835" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uu...</msg>
<status status="PASS" starttime="20251020 07:51:44.834" endtime="20251020 07:51:44.835"/>
</kw>
<msg timestamp="20251020 07:51:44.835" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uu...</msg>
<status status="PASS" starttime="20251020 07:51:44.833" endtime="20251020 07:51:44.835"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:44.836" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uuid': '9d9...</msg>
<status status="PASS" starttime="20251020 07:51:44.835" endtime="20251020 07:51:44.836"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${key_count}</var>
<arg>${keys}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251020 07:51:44.836" level="INFO">Length is 1</msg>
<msg timestamp="20251020 07:51:44.836" level="INFO">${key_count} = 1</msg>
<status status="PASS" starttime="20251020 07:51:44.836" endtime="20251020 07:51:44.836"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${key_count}</arg>
<arg>${expected_key_count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:44.836" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:44.836" endtime="20251020 07:51:44.836"/>
</kw>
<kw name="Get key names from output" library="ozone-debug-keywords">
<var>${key_names}</var>
<arg>${json}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:44.837" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uuid': '9d9...</msg>
<status status="PASS" starttime="20251020 07:51:44.837" endtime="20251020 07:51:44.837"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${key_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20251020 07:51:44.838" level="INFO">${key_names} = []</msg>
<status status="PASS" starttime="20251020 07:51:44.837" endtime="20251020 07:51:44.838"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<value>@{keys}</value>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uuid': '9d99...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:44.838" level="INFO">${key_name} = ratis-one-key</msg>
<status status="PASS" starttime="20251020 07:51:44.838" endtime="20251020 07:51:44.838"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251020 07:51:44.838" endtime="20251020 07:51:44.839"/>
</kw>
<status status="PASS" starttime="20251020 07:51:44.838" endtime="20251020 07:51:44.839"/>
</iter>
<status status="PASS" starttime="20251020 07:51:44.838" endtime="20251020 07:51:44.839"/>
</for>
<msg timestamp="20251020 07:51:44.839" level="INFO">${key_names} = ['ratis-one-key']</msg>
<status status="PASS" starttime="20251020 07:51:44.837" endtime="20251020 07:51:44.839"/>
</kw>
<msg timestamp="20251020 07:51:44.839" level="INFO">${key_names} = ['ratis-one-key']</msg>
<status status="PASS" starttime="20251020 07:51:37.833" endtime="20251020 07:51:44.839"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_ONE_KEY}</arg>
<arg>Key ${RATIS_ONE_KEY} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:44.839" endtime="20251020 07:51:44.840"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${EC_KEY}</arg>
<arg>Key ${EC_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:44.840" endtime="20251020 07:51:44.840"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${TESTFILE}</arg>
<arg>Key ${TESTFILE} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:44.840" endtime="20251020 07:51:44.841"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_THREE_KEY}</arg>
<arg>Key ${RATIS_THREE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:44.841" endtime="20251020 07:51:44.841"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:51:37.833" endtime="20251020 07:51:44.841"/>
</test>
<test id="s1-s4-t3" name="Test ozone debug replicas verify with RATIS THREE filter" line="80">
<kw name="Execute and validate replicas verify with filter">
<var>${key_names}</var>
<arg>RATIS</arg>
<arg>THREE</arg>
<arg>checksums</arg>
<arg>2</arg>
<kw name="Execute replicas verify with replication filter" library="ozone-debug-keywords">
<var>${output}</var>
<arg>${replication_type}</arg>
<arg>${replication_factor}</arg>
<arg>${verification_type}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --${verification_type} --type ${replication_type} --replication ${replication_factor} o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:44.847" level="INFO">Running command 'ozone debug replicas verify --checksums --type RATIS --replication THREE o3://omservice/cli-debug-volume15347/cli-debug-bucket --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:51:52.842" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:51:52.843" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 1,
      "blockID" : 115816...</msg>
<status status="PASS" starttime="20251020 07:51:44.844" endtime="20251020 07:51:52.843"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:51:52.844" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 1,
      "blockID" : 115816896921600103,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : true
  }, {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : true
  } ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Bucket
Verification Types: checksum
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket

Number of Volumes processed: 0
Number of Buckets processed: 1
Number of Keys processed: 4

Keys passed verification: 2
Keys failed verification: 0

Total Execution time: 00:00:04,182
***************************************************</msg>
<status status="PASS" starttime="20251020 07:51:52.843" endtime="20251020 07:51:52.844"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:52.844" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:52.844" endtime="20251020 07:51:52.844"/>
</kw>
<status status="PASS" starttime="20251020 07:51:44.843" endtime="20251020 07:51:52.845"/>
</kw>
<msg timestamp="20251020 07:51:52.845" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:44.843" endtime="20251020 07:51:52.845"/>
</kw>
<msg timestamp="20251020 07:51:52.845" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 1,
      "blockID" : 115816...</msg>
<status status="PASS" starttime="20251020 07:51:44.843" endtime="20251020 07:51:52.845"/>
</kw>
<msg timestamp="20251020 07:51:52.845" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 1,
      "blockID" : 115816...</msg>
<status status="PASS" starttime="20251020 07:51:44.842" endtime="20251020 07:51:52.845"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:51:52.846" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 1,
      "blockID" : 115816...</msg>
<status status="PASS" starttime="20251020 07:51:52.846" endtime="20251020 07:51:52.846"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:51:52.847" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 1, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'...</msg>
<status status="PASS" starttime="20251020 07:51:52.846" endtime="20251020 07:51:52.847"/>
</kw>
<msg timestamp="20251020 07:51:52.847" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 1, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'...</msg>
<status status="PASS" starttime="20251020 07:51:52.845" endtime="20251020 07:51:52.847"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:52.848" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 1, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'uuid': '7...</msg>
<status status="PASS" starttime="20251020 07:51:52.848" endtime="20251020 07:51:52.848"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${key_count}</var>
<arg>${keys}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251020 07:51:52.848" level="INFO">Length is 2</msg>
<msg timestamp="20251020 07:51:52.848" level="INFO">${key_count} = 2</msg>
<status status="PASS" starttime="20251020 07:51:52.848" endtime="20251020 07:51:52.848"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${key_count}</arg>
<arg>${expected_key_count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:51:52.849" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:51:52.849" endtime="20251020 07:51:52.849"/>
</kw>
<kw name="Get key names from output" library="ozone-debug-keywords">
<var>${key_names}</var>
<arg>${json}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:52.850" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 1, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'uuid': '7...</msg>
<status status="PASS" starttime="20251020 07:51:52.849" endtime="20251020 07:51:52.850"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${key_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20251020 07:51:52.850" level="INFO">${key_names} = []</msg>
<status status="PASS" starttime="20251020 07:51:52.850" endtime="20251020 07:51:52.850"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<value>@{keys}</value>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 1, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'uuid': '79...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:52.851" level="INFO">${key_name} = ratis-three-key</msg>
<status status="PASS" starttime="20251020 07:51:52.850" endtime="20251020 07:51:52.851"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251020 07:51:52.851" endtime="20251020 07:51:52.851"/>
</kw>
<status status="PASS" starttime="20251020 07:51:52.850" endtime="20251020 07:51:52.851"/>
</iter>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '9acb7569-...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:51:52.852" level="INFO">${key_name} = testfile</msg>
<status status="PASS" starttime="20251020 07:51:52.851" endtime="20251020 07:51:52.852"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251020 07:51:52.852" endtime="20251020 07:51:52.852"/>
</kw>
<status status="PASS" starttime="20251020 07:51:52.851" endtime="20251020 07:51:52.852"/>
</iter>
<status status="PASS" starttime="20251020 07:51:52.850" endtime="20251020 07:51:52.852"/>
</for>
<msg timestamp="20251020 07:51:52.852" level="INFO">${key_names} = ['ratis-three-key', 'testfile']</msg>
<status status="PASS" starttime="20251020 07:51:52.849" endtime="20251020 07:51:52.852"/>
</kw>
<msg timestamp="20251020 07:51:52.852" level="INFO">${key_names} = ['ratis-three-key', 'testfile']</msg>
<status status="PASS" starttime="20251020 07:51:44.842" endtime="20251020 07:51:52.852"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${TESTFILE}</arg>
<arg>Key ${TESTFILE} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:52.852" endtime="20251020 07:51:52.853"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_THREE_KEY}</arg>
<arg>Key ${RATIS_THREE_KEY} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:52.853" endtime="20251020 07:51:52.853"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_ONE_KEY}</arg>
<arg>Key ${RATIS_ONE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:52.853" endtime="20251020 07:51:52.854"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${EC_KEY}</arg>
<arg>Key ${EC_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:51:52.854" endtime="20251020 07:51:52.854"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:51:44.841" endtime="20251020 07:51:52.854"/>
</test>
<test id="s1-s4-t4" name="Test ozone debug replicas verify with EC rs-3-2-1024k filter" line="90">
<kw name="Execute and validate replicas verify with filter">
<var>${key_names}</var>
<arg>EC</arg>
<arg>rs-3-2-1024k</arg>
<arg>checksums</arg>
<arg>1</arg>
<kw name="Execute replicas verify with replication filter" library="ozone-debug-keywords">
<var>${output}</var>
<arg>${replication_type}</arg>
<arg>${replication_factor}</arg>
<arg>${verification_type}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --${verification_type} --type ${replication_type} --replication ${replication_factor} o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:51:52.860" level="INFO">Running command 'ozone debug replicas verify --checksums --type EC --replication rs-3-2-1024k o3://omservice/cli-debug-volume15347/cli-debug-bucket --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:52:00.638" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:52:00.638" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 115816896921600...</msg>
<status status="PASS" starttime="20251020 07:51:52.857" endtime="20251020 07:52:00.638"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:52:00.639" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 115816896921600104,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "86060e99-862e-4ca7-bf03-88bf6a490d06",
          "hostname" : "ozonesecure-ha-datanode1-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 1
      }, {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 2
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 3
      }, {
        "datanode" : {
          "uuid" : "6f1cc577-45de-4473-9cfe-4b4f6ae78dc1",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 4
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 5
      } ]
    } ],
    "pass" : true
  } ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Bucket
Verification Types: checksum
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket

Number of Volumes processed: 0
Number of Buckets processed: 1
Number of Keys processed: 4

Keys passed verification: 1
Keys failed verification: 0

Total Execution time: 00:00:04,023
***************************************************</msg>
<status status="PASS" starttime="20251020 07:52:00.639" endtime="20251020 07:52:00.639"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:52:00.640" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:52:00.639" endtime="20251020 07:52:00.640"/>
</kw>
<status status="PASS" starttime="20251020 07:51:52.856" endtime="20251020 07:52:00.640"/>
</kw>
<msg timestamp="20251020 07:52:00.640" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:51:52.856" endtime="20251020 07:52:00.640"/>
</kw>
<msg timestamp="20251020 07:52:00.640" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 115816896921600...</msg>
<status status="PASS" starttime="20251020 07:51:52.856" endtime="20251020 07:52:00.640"/>
</kw>
<msg timestamp="20251020 07:52:00.640" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 115816896921600...</msg>
<status status="PASS" starttime="20251020 07:51:52.855" endtime="20251020 07:52:00.640"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:52:00.641" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 115816896921600...</msg>
<status status="PASS" starttime="20251020 07:52:00.641" endtime="20251020 07:52:00.641"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:52:00.642" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': '8...</msg>
<status status="PASS" starttime="20251020 07:52:00.642" endtime="20251020 07:52:00.642"/>
</kw>
<msg timestamp="20251020 07:52:00.642" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': '8...</msg>
<status status="PASS" starttime="20251020 07:52:00.641" endtime="20251020 07:52:00.642"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:00.643" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': '86060e99-8...</msg>
<status status="PASS" starttime="20251020 07:52:00.642" endtime="20251020 07:52:00.643"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${key_count}</var>
<arg>${keys}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251020 07:52:00.643" level="INFO">Length is 1</msg>
<msg timestamp="20251020 07:52:00.643" level="INFO">${key_count} = 1</msg>
<status status="PASS" starttime="20251020 07:52:00.643" endtime="20251020 07:52:00.643"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${key_count}</arg>
<arg>${expected_key_count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:52:00.644" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:52:00.643" endtime="20251020 07:52:00.644"/>
</kw>
<kw name="Get key names from output" library="ozone-debug-keywords">
<var>${key_names}</var>
<arg>${json}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:00.645" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': '86060e99-8...</msg>
<status status="PASS" starttime="20251020 07:52:00.644" endtime="20251020 07:52:00.645"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${key_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20251020 07:52:00.645" level="INFO">${key_names} = []</msg>
<status status="PASS" starttime="20251020 07:52:00.645" endtime="20251020 07:52:00.645"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<value>@{keys}</value>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': '86060e99-86...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:00.646" level="INFO">${key_name} = ec-key</msg>
<status status="PASS" starttime="20251020 07:52:00.645" endtime="20251020 07:52:00.646"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251020 07:52:00.646" endtime="20251020 07:52:00.646"/>
</kw>
<status status="PASS" starttime="20251020 07:52:00.645" endtime="20251020 07:52:00.646"/>
</iter>
<status status="PASS" starttime="20251020 07:52:00.645" endtime="20251020 07:52:00.646"/>
</for>
<msg timestamp="20251020 07:52:00.646" level="INFO">${key_names} = ['ec-key']</msg>
<status status="PASS" starttime="20251020 07:52:00.644" endtime="20251020 07:52:00.646"/>
</kw>
<msg timestamp="20251020 07:52:00.646" level="INFO">${key_names} = ['ec-key']</msg>
<status status="PASS" starttime="20251020 07:51:52.855" endtime="20251020 07:52:00.646"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${EC_KEY}</arg>
<arg>Key ${EC_KEY} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:52:00.646" endtime="20251020 07:52:00.647"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${TESTFILE}</arg>
<arg>Key ${TESTFILE} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:52:00.647" endtime="20251020 07:52:00.647"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_ONE_KEY}</arg>
<arg>Key ${RATIS_ONE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:52:00.647" endtime="20251020 07:52:00.647"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_THREE_KEY}</arg>
<arg>Key ${RATIS_THREE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:52:00.648" endtime="20251020 07:52:00.648"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:51:52.855" endtime="20251020 07:52:00.648"/>
</test>
<test id="s1-s4-t5" name="Test ozone debug version" line="100">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug version</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:52:00.653" level="INFO">Running command 'ozone debug version 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:52:02.425" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:52:02.425" level="INFO">${output} = {
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
   ...</msg>
<status status="PASS" starttime="20251020 07:52:00.650" endtime="20251020 07:52:02.425"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:52:02.426" level="INFO">{
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
        "name" : "COMBINED_PUTBLOCK_WRITECHUNK_RPC",
        "protoValue" : 2
      }
    },
    "om" : {
      "componentVersion" : {
        "name" : "S3_LIST_MULTIPART_UPLOADS_PAGINATION",
        "protoValue" : 11
      }
    }
  },
  "ozone" : {
    "revision" : "819e9cf088ce698ce347be3ffd19249e0399e806",
    "url" : "https://github.com/apache/ozone",
    "version" : "2.1.0-SNAPSHOT"
  }
}</msg>
<status status="PASS" starttime="20251020 07:52:02.426" endtime="20251020 07:52:02.426"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:52:02.427" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:52:02.427" endtime="20251020 07:52:02.427"/>
</kw>
<status status="PASS" starttime="20251020 07:52:00.649" endtime="20251020 07:52:02.427"/>
</kw>
<msg timestamp="20251020 07:52:02.427" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:52:00.649" endtime="20251020 07:52:02.427"/>
</kw>
<msg timestamp="20251020 07:52:02.427" level="INFO">${output} = {
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
   ...</msg>
<status status="PASS" starttime="20251020 07:52:00.649" endtime="20251020 07:52:02.427"/>
</kw>
<kw name="Execute" library="os">
<arg>echo '${output}' | jq -r '.' # validate JSON</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:52:02.431" level="INFO">Running command 'echo '{
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
        "name" : "COMBINED_PUTBLOCK_WRITECHUNK_RPC",
        "protoValue" : 2
      }
    },
    "om" : {
      "componentVersion" : {
        "name" : "S3_LIST_MULTIPART_UPLOADS_PAGINATION",
        "protoValue" : 11
      }
    }
  },
  "ozone" : {
    "revision" : "819e9cf088ce698ce347be3ffd19249e0399e806",
    "url" : "https://github.com/apache/ozone",
    "version" : "2.1.0-SNAPSHOT"
  }
}' | jq -r '.' # validate JSON 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:52:02.437" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:52:02.437" level="INFO">${output} = {
  "components": {
    "client": {
      "componentVersion": {
        "name": "BUCKET_LAYOUT_SUPPORT",
        "protoValue": 3
      }
    },
    "datanode": {
      "componentVersion": {
        "n...</msg>
<status status="PASS" starttime="20251020 07:52:02.429" endtime="20251020 07:52:02.437"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:52:02.438" level="INFO">{
  "components": {
    "client": {
      "componentVersion": {
        "name": "BUCKET_LAYOUT_SUPPORT",
        "protoValue": 3
      }
    },
    "datanode": {
      "componentVersion": {
        "name": "COMBINED_PUTBLOCK_WRITECHUNK_RPC",
        "protoValue": 2
      }
    },
    "om": {
      "componentVersion": {
        "name": "S3_LIST_MULTIPART_UPLOADS_PAGINATION",
        "protoValue": 11
      }
    }
  },
  "ozone": {
    "revision": "819e9cf088ce698ce347be3ffd19249e0399e806",
    "url": "https://github.com/apache/ozone",
    "version": "2.1.0-SNAPSHOT"
  }
}</msg>
<status status="PASS" starttime="20251020 07:52:02.438" endtime="20251020 07:52:02.438"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:52:02.438" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:52:02.438" endtime="20251020 07:52:02.439"/>
</kw>
<status status="PASS" starttime="20251020 07:52:02.428" endtime="20251020 07:52:02.439"/>
</kw>
<msg timestamp="20251020 07:52:02.439" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:52:02.428" endtime="20251020 07:52:02.439"/>
</kw>
<status status="PASS" starttime="20251020 07:52:02.428" endtime="20251020 07:52:02.439"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:52:00.648" endtime="20251020 07:52:02.439"/>
</test>
<doc>Test ozone debug CLI</doc>
<status status="PASS" starttime="20251020 07:50:58.579" endtime="20251020 07:52:02.440"/>
</suite>
<suite id="s1-s5" name="Corrupt-Block-Checksum" source="/opt/hadoop/smoketest/debug/corrupt-block-checksum.robot">
<test id="s1-s5-t1" name="Test checksums with a corrupt block replica" line="33">
<kw name="Execute replicas verify checksums debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --checksums o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:52:09.663" level="INFO">Running command 'ozone debug replicas verify --checksums o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:52:18.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:52:18.158" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:09.660" endtime="20251020 07:52:18.158"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:52:18.159" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Checksum mismatched: this.checksums(0) != that.checksums(0), thisStartIndex=0, this=ChecksumData{CRC32, bytesPerChecksum=16384, checksums=[07 98 86 4F, EE 4B 26 9B, 15 EB D7 9C, DA 6A 48 BA, DC 4B 48 96, C0 A0 63 A9, AD 5B 8C CD, 76 F8 8A 33, 95 47 98 C4, A9 B6 DA 85, 71 7F 52 69, B2 CD B3 29, FF 7A C9 39, 30 52 CC D6, 5F B8 E8 DA, 47 F9 FE 89, E8 EB 09 52, FF 60 58 3A, 21 6E B0 0A, 82 78 B2 75, B6 E9 B1 60, FC 91 17 34, E1 A9 60 5B, 7D 33 80 31, C1 00 E0 67, 81 3B C1 43, 5D 55 73 89, 73 A0 DE 1E, C0 AA 5E 4D, C0 17 D8 41, 1A D2 C5 19, 24 1F 4A B3, 2F 99 0C FB, FA 46 30 35, C9 1D BE 6C, 65 02 7E B7, F2 21 84 83, D3 92 07 C3, 8C 16 28 6D, 5E A1 8B 47, 6B A9 1B 8F, 10 78 BC 37, D1 CA AB C2, 8A 57 F5 98, DD 3C CB E4, 50 81 51 E8, F7 7D E9 A7, D9 FE C9 17, 3B 35 3D C9, CD F2 2E FA, 1D E5 19 61, 92 D7 BB B9, 1F 33 C4 D1, 12 1F 47 6C, 62 DB 7F 81, 28 D5 FE 0F, FF AC C8 00, 93 78 62 B3, C6 AC EF 2C, FD B6 60 D8, 79 19 A7 07, C8 5D 8D 9A, 35 A3 07 E4, 2B E2 18 C4, 17 1F 6E 85, C4 A1 12 70, BC 30 1E EE, B5 BA CE 0C, 58 AC AC F6, 96 C2 74 F5, 53 BC 77 42, 1C 4D 42 49, 6E 0C 80 59, 7D DE 3C C5, 7F 54 CF 4E, C9 E0 AA F4, 08 4D 60 FC, 1B E6 79 9E, B7 CC AD FF, 54 84 37 A3, C9 E5 B7 66, AC 67 57 6E, 33 91 42 34, 9C 9A 84 9D, B8 3A D3 97, 3F B8 7E B4, 0C 19 05 67, 13 BA 2F C2, 88 04 77 7B, 17 7C 74 D3, D6 07 67 B3, 7A F8 AA 62]}, that=ChecksumData{CRC32, bytesPerChecksum=16384, checksums=[FE DE D6 FF]}"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: checksum
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed checksum verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:04,716
***************************************************</msg>
<status status="PASS" starttime="20251020 07:52:18.159" endtime="20251020 07:52:18.159"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:52:18.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:52:18.159" endtime="20251020 07:52:18.160"/>
</kw>
<status status="PASS" starttime="20251020 07:52:09.660" endtime="20251020 07:52:18.160"/>
</kw>
<msg timestamp="20251020 07:52:18.160" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:52:09.660" endtime="20251020 07:52:18.160"/>
</kw>
<msg timestamp="20251020 07:52:18.160" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:09.659" endtime="20251020 07:52:18.160"/>
</kw>
<msg timestamp="20251020 07:52:18.161" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:09.659" endtime="20251020 07:52:18.161"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:52:18.162" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:18.161" endtime="20251020 07:52:18.162"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:52:18.162" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:52:18.162" endtime="20251020 07:52:18.162"/>
</kw>
<msg timestamp="20251020 07:52:18.163" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:52:18.161" endtime="20251020 07:52:18.163"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${CORRUPT_DATANODE}</arg>
<arg>Checksum mismatched</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.164" level="INFO">${replicas} = [{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': False, 'fa...</msg>
<status status="PASS" starttime="20251020 07:52:18.163" endtime="20251020 07:52:18.164"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': False, 'fai...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.165" level="INFO">${datanode} = {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:52:18.165" endtime="20251020 07:52:18.165"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.165" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:52:18.165" endtime="20251020 07:52:18.165"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.167" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': False, 'failures': [{'message': 'Checksum mismatched: this.checksums(0) != that.checksums(0), thisStartIndex=0, this=ChecksumData{CRC32, bytesPerChecks...</msg>
<status status="PASS" starttime="20251020 07:52:18.166" endtime="20251020 07:52:18.167"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:52:18.167" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': False, 'failures': [{'message': 'Checksum mismatched: this.checksums(0) != that.checksums(0), thisStartIndex=0, this=ChecksumData{CRC32, bytesPerChecksu...</msg>
<status status="PASS" starttime="20251020 07:52:18.167" endtime="20251020 07:52:18.167"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:52:18.167" endtime="20251020 07:52:18.168"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:52:18.168" endtime="20251020 07:52:18.169"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:52:18.169" endtime="20251020 07:52:18.170"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.166" endtime="20251020 07:52:18.170"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.165" endtime="20251020 07:52:18.170"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:52:18.170" endtime="20251020 07:52:18.170"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.164" endtime="20251020 07:52:18.170"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.171" level="INFO">${datanode} = {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:52:18.171" endtime="20251020 07:52:18.171"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.171" level="INFO">${hostname} = ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:52:18.171" endtime="20251020 07:52:18.171"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:52:18.172" endtime="20251020 07:52:18.172"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.173" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:52:18.172" endtime="20251020 07:52:18.173"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:52:18.173" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:52:18.173" endtime="20251020 07:52:18.173"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:52:18.173" endtime="20251020 07:52:18.174"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:52:18.174" endtime="20251020 07:52:18.175"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:52:18.175" endtime="20251020 07:52:18.175"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:52:18.176" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:52:18.175" endtime="20251020 07:52:18.176"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.172" endtime="20251020 07:52:18.176"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.172" endtime="20251020 07:52:18.176"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.171" endtime="20251020 07:52:18.176"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.177" level="INFO">${datanode} = {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:52:18.176" endtime="20251020 07:52:18.177"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.177" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:52:18.177" endtime="20251020 07:52:18.177"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:52:18.177" endtime="20251020 07:52:18.177"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:52:18.178" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:52:18.178" endtime="20251020 07:52:18.178"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:52:18.179" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:52:18.178" endtime="20251020 07:52:18.179"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:52:18.179" endtime="20251020 07:52:18.179"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:52:18.180" endtime="20251020 07:52:18.180"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:52:18.180" endtime="20251020 07:52:18.181"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:52:18.181" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:52:18.181" endtime="20251020 07:52:18.181"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.178" endtime="20251020 07:52:18.181"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.177" endtime="20251020 07:52:18.182"/>
</kw>
<status status="PASS" starttime="20251020 07:52:18.176" endtime="20251020 07:52:18.182"/>
</iter>
<status status="PASS" starttime="20251020 07:52:18.164" endtime="20251020 07:52:18.182"/>
</for>
<status status="PASS" starttime="20251020 07:52:18.163" endtime="20251020 07:52:18.182"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:52:09.658" endtime="20251020 07:52:18.182"/>
</test>
<doc>Test checksums on a corrupt block replica</doc>
<status status="PASS" starttime="20251020 07:52:09.616" endtime="20251020 07:52:18.182"/>
</suite>
<suite id="s1-s6" name="Stale-Datanode-Checksum" source="/opt/hadoop/smoketest/debug/stale-datanode-checksum.robot">
<test id="s1-s6-t1" name="Test checksums with a stale datanode" line="32">
<kw name="Execute replicas verify checksums debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --checksums o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:52:51.676" level="INFO">Running command 'ozone debug replicas verify --checksums o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:53:13.037" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:13.037" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:51.673" endtime="20251020 07:53:13.037"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:13.038" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : false,
          "pass" : false,
          "failures" : [ {
            "message" : "org.apache.ratis.thirdparty.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: checksum
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed checksum verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:17,265
***************************************************</msg>
<status status="PASS" starttime="20251020 07:53:13.037" endtime="20251020 07:53:13.038"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:13.038" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:13.038" endtime="20251020 07:53:13.038"/>
</kw>
<status status="PASS" starttime="20251020 07:52:51.673" endtime="20251020 07:53:13.039"/>
</kw>
<msg timestamp="20251020 07:53:13.039" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:52:51.672" endtime="20251020 07:53:13.039"/>
</kw>
<msg timestamp="20251020 07:53:13.039" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:51.672" endtime="20251020 07:53:13.039"/>
</kw>
<msg timestamp="20251020 07:53:13.039" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:52:51.672" endtime="20251020 07:53:13.039"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:13.040" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:13.040" endtime="20251020 07:53:13.040"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:13.041" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:13.040" endtime="20251020 07:53:13.041"/>
</kw>
<msg timestamp="20251020 07:53:13.041" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:13.039" endtime="20251020 07:53:13.041"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${STALE_DATANODE}</arg>
<arg>UNAVAILABLE</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.042" level="INFO">${replicas} = [{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': False, 'pass': False, 'f...</msg>
<status status="PASS" starttime="20251020 07:53:13.042" endtime="20251020 07:53:13.042"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': False, 'pass': False, 'fa...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.043" level="INFO">${datanode} = {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:13.043" endtime="20251020 07:53:13.043"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.044" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:13.043" endtime="20251020 07:53:13.044"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.045" level="INFO">${checks} = [{'type': 'checksum', 'completed': False, 'pass': False, 'failures': [{'message': 'org.apache.ratis.thirdparty.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception'}]}]</msg>
<status status="PASS" starttime="20251020 07:53:13.045" endtime="20251020 07:53:13.045"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:13.045" level="INFO">${check} = {'type': 'checksum', 'completed': False, 'pass': False, 'failures': [{'message': 'org.apache.ratis.thirdparty.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception'}]}</msg>
<status status="PASS" starttime="20251020 07:53:13.045" endtime="20251020 07:53:13.045"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:13.045" endtime="20251020 07:53:13.046"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:13.046" endtime="20251020 07:53:13.047"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:53:13.047" endtime="20251020 07:53:13.048"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.044" endtime="20251020 07:53:13.048"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.044" endtime="20251020 07:53:13.048"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:13.048" endtime="20251020 07:53:13.048"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.043" endtime="20251020 07:53:13.048"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.048" level="INFO">${datanode} = {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:13.048" endtime="20251020 07:53:13.048"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.049" level="INFO">${hostname} = ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:13.049" endtime="20251020 07:53:13.049"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:13.049" endtime="20251020 07:53:13.049"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.050" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:13.050" endtime="20251020 07:53:13.050"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:13.051" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:13.050" endtime="20251020 07:53:13.051"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:13.051" endtime="20251020 07:53:13.052"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:13.052" endtime="20251020 07:53:13.052"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:13.052" endtime="20251020 07:53:13.053"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:13.054" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:13.053" endtime="20251020 07:53:13.054"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.050" endtime="20251020 07:53:13.054"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.049" endtime="20251020 07:53:13.054"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.048" endtime="20251020 07:53:13.054"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.054" level="INFO">${datanode} = {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:13.054" endtime="20251020 07:53:13.054"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.055" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:13.054" endtime="20251020 07:53:13.055"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:13.055" endtime="20251020 07:53:13.055"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:13.056" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:13.056" endtime="20251020 07:53:13.056"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:13.056" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:13.056" endtime="20251020 07:53:13.056"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:13.056" endtime="20251020 07:53:13.057"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:13.057" endtime="20251020 07:53:13.058"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:13.058" endtime="20251020 07:53:13.058"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:13.059" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:13.058" endtime="20251020 07:53:13.059"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.055" endtime="20251020 07:53:13.059"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.055" endtime="20251020 07:53:13.059"/>
</kw>
<status status="PASS" starttime="20251020 07:53:13.054" endtime="20251020 07:53:13.059"/>
</iter>
<status status="PASS" starttime="20251020 07:53:13.043" endtime="20251020 07:53:13.059"/>
</for>
<status status="PASS" starttime="20251020 07:53:13.041" endtime="20251020 07:53:13.059"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:52:51.671" endtime="20251020 07:53:13.060"/>
</test>
<doc>Test checksums in case of a stale datanode</doc>
<status status="PASS" starttime="20251020 07:52:51.628" endtime="20251020 07:53:13.060"/>
</suite>
<suite id="s1-s7" name="Block-Existence-Check" source="/opt/hadoop/smoketest/debug/block-existence-check.robot">
<test id="s1-s7-t1" name="Test block existence with a block missing on a replica" line="32">
<kw name="Execute replicas verify block existence debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --block-existence o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:33.416" level="INFO">Running command 'ozone debug replicas verify --block-existence o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:53:39.660" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:39.660" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:33.413" endtime="20251020 07:53:39.660"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:39.661" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "blockExistence",
          "completed" : false,
          "pass" : false,
          "failures" : [ {
            "message" : "Unable to find the block with bcsID 171 .Container 2 bcsId is 0."
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "blockExistence",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "blockExistence",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: blockExistence
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed blockExistence verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:01,971
***************************************************</msg>
<status status="PASS" starttime="20251020 07:53:39.661" endtime="20251020 07:53:39.661"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:39.662" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:39.662" endtime="20251020 07:53:39.662"/>
</kw>
<status status="PASS" starttime="20251020 07:53:33.413" endtime="20251020 07:53:39.662"/>
</kw>
<msg timestamp="20251020 07:53:39.662" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:33.413" endtime="20251020 07:53:39.662"/>
</kw>
<msg timestamp="20251020 07:53:39.663" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:33.412" endtime="20251020 07:53:39.663"/>
</kw>
<msg timestamp="20251020 07:53:39.663" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:33.412" endtime="20251020 07:53:39.663"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:39.664" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:39.663" endtime="20251020 07:53:39.664"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:39.664" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:39.664" endtime="20251020 07:53:39.664"/>
</kw>
<msg timestamp="20251020 07:53:39.665" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:39.663" endtime="20251020 07:53:39.665"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Unable to find the block</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.666" level="INFO">${replicas} = [{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': False, 'pass': Fal...</msg>
<status status="PASS" starttime="20251020 07:53:39.665" endtime="20251020 07:53:39.666"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': False, 'pass': Fals...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.667" level="INFO">${datanode} = {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:39.666" endtime="20251020 07:53:39.667"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.667" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:39.667" endtime="20251020 07:53:39.667"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.668" level="INFO">${checks} = [{'type': 'blockExistence', 'completed': False, 'pass': False, 'failures': [{'message': 'Unable to find the block with bcsID 171 .Container 2 bcsId is 0.'}]}]</msg>
<status status="PASS" starttime="20251020 07:53:39.668" endtime="20251020 07:53:39.668"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:39.669" level="INFO">${check} = {'type': 'blockExistence', 'completed': False, 'pass': False, 'failures': [{'message': 'Unable to find the block with bcsID 171 .Container 2 bcsId is 0.'}]}</msg>
<status status="PASS" starttime="20251020 07:53:39.668" endtime="20251020 07:53:39.669"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:39.669" endtime="20251020 07:53:39.670"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:39.670" endtime="20251020 07:53:39.670"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:53:39.671" endtime="20251020 07:53:39.671"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.668" endtime="20251020 07:53:39.671"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.667" endtime="20251020 07:53:39.671"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:39.671" endtime="20251020 07:53:39.672"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.666" endtime="20251020 07:53:39.672"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.672" level="INFO">${datanode} = {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:39.672" endtime="20251020 07:53:39.672"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.673" level="INFO">${hostname} = ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:39.672" endtime="20251020 07:53:39.673"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:39.673" endtime="20251020 07:53:39.673"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.674" level="INFO">${checks} = [{'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:39.674" endtime="20251020 07:53:39.674"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:39.674" level="INFO">${check} = {'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:39.674" endtime="20251020 07:53:39.674"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:39.674" endtime="20251020 07:53:39.675"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:39.675" endtime="20251020 07:53:39.676"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:39.676" endtime="20251020 07:53:39.676"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:39.677" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:39.677" endtime="20251020 07:53:39.677"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.673" endtime="20251020 07:53:39.677"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.673" endtime="20251020 07:53:39.677"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.672" endtime="20251020 07:53:39.677"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.678" level="INFO">${datanode} = {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:39.678" endtime="20251020 07:53:39.678"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.678" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:39.678" endtime="20251020 07:53:39.678"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:39.678" endtime="20251020 07:53:39.679"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:39.680" level="INFO">${checks} = [{'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:39.679" endtime="20251020 07:53:39.680"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:39.680" level="INFO">${check} = {'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:39.680" endtime="20251020 07:53:39.680"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:39.680" endtime="20251020 07:53:39.681"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:39.681" endtime="20251020 07:53:39.681"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:39.681" endtime="20251020 07:53:39.682"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:39.683" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:39.682" endtime="20251020 07:53:39.683"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.679" endtime="20251020 07:53:39.683"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.679" endtime="20251020 07:53:39.683"/>
</kw>
<status status="PASS" starttime="20251020 07:53:39.677" endtime="20251020 07:53:39.683"/>
</iter>
<status status="PASS" starttime="20251020 07:53:39.666" endtime="20251020 07:53:39.683"/>
</for>
<status status="PASS" starttime="20251020 07:53:39.665" endtime="20251020 07:53:39.683"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:53:33.411" endtime="20251020 07:53:39.683"/>
</test>
<doc>Test existence of a block on a datanode</doc>
<status status="PASS" starttime="20251020 07:53:33.371" endtime="20251020 07:53:39.684"/>
</suite>
<suite id="s1-s8" name="Container-State-Verifier" source="/opt/hadoop/smoketest/debug/container-state-verifier.robot">
<test id="s1-s8-t1" name="Verify Container State With Unhealthy Container Replica" line="51">
<kw name="Verify Container State with Rule">
<arg>UNHEALTHY</arg>
<kw name="Create Container State Rule">
<var>${rule_file}</var>
<arg>${expected_state}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${rule_file}</var>
<arg>/tmp/container-state-${state}.btm</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251020 07:53:40.488" level="INFO">${rule_file} = /tmp/container-state-UNHEALTHY.btm</msg>
<status status="PASS" starttime="20251020 07:53:40.488" endtime="20251020 07:53:40.489"/>
</kw>
<kw name="Execute" library="os">
<arg>sed 's/STATE_PLACEHOLDER/${state}/g' ${TEMPLATE_RULE} &gt; ${rule_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:40.492" level="INFO">Running command 'sed 's/STATE_PLACEHOLDER/UNHEALTHY/g' /opt/hadoop/share/ozone/byteman/container-state-template.btm &gt; /tmp/container-state-UNHEALTHY.btm'.</msg>
<msg timestamp="20251020 07:53:40.496" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:40.496" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:53:40.490" endtime="20251020 07:53:40.496"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:40.497" level="INFO"/>
<status status="PASS" starttime="20251020 07:53:40.496" endtime="20251020 07:53:40.497"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:40.497" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:40.497" endtime="20251020 07:53:40.497"/>
</kw>
<status status="PASS" starttime="20251020 07:53:40.489" endtime="20251020 07:53:40.497"/>
</kw>
<msg timestamp="20251020 07:53:40.497" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:40.489" endtime="20251020 07:53:40.497"/>
</kw>
<status status="PASS" starttime="20251020 07:53:40.489" endtime="20251020 07:53:40.497"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<arg>${rule_file}</arg>
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20251020 07:53:40.498" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:40.498" endtime="20251020 07:53:40.498"/>
</kw>
<msg timestamp="20251020 07:53:40.498" level="INFO">${rule_file} = /tmp/container-state-UNHEALTHY.btm</msg>
<status status="PASS" starttime="20251020 07:53:40.488" endtime="20251020 07:53:40.498"/>
</kw>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251020 07:53:40.703" level="INFO">Add rule /tmp/container-state-UNHEALTHY.btm for datanode5 successful.</msg>
<status status="PASS" starttime="20251020 07:53:40.498" endtime="20251020 07:53:40.704"/>
</kw>
<kw name="List Byteman Rules" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<doc>List Active Byteman rules for specific component and return file list</doc>
<msg timestamp="20251020 07:53:40.789" level="INFO">List rules for datanode5 successful.</msg>
<msg timestamp="20251020 07:53:40.789" level="INFO">Active rules in datanode5:
# File /tmp/container-state-UNHEALTHY.btm line 20</msg>
<status status="PASS" starttime="20251020 07:53:40.705" endtime="20251020 07:53:40.789"/>
</kw>
<kw name="Execute replicas verify container state debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --container-state o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:40.795" level="INFO">Running command 'ozone debug replicas verify --container-state o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:53:46.827" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:46.827" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:40.791" endtime="20251020 07:53:46.827"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:46.828" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Replica state is UNHEALTHY, Container state in SCM is CLOSED"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: containerState
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed containerState verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,235
***************************************************</msg>
<status status="PASS" starttime="20251020 07:53:46.828" endtime="20251020 07:53:46.828"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:46.829" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:46.828" endtime="20251020 07:53:46.829"/>
</kw>
<status status="PASS" starttime="20251020 07:53:40.791" endtime="20251020 07:53:46.829"/>
</kw>
<msg timestamp="20251020 07:53:46.829" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:40.791" endtime="20251020 07:53:46.829"/>
</kw>
<msg timestamp="20251020 07:53:46.829" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:40.790" endtime="20251020 07:53:46.829"/>
</kw>
<msg timestamp="20251020 07:53:46.830" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:40.790" endtime="20251020 07:53:46.830"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:46.831" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:46.830" endtime="20251020 07:53:46.831"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:46.831" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:46.831" endtime="20251020 07:53:46.831"/>
</kw>
<msg timestamp="20251020 07:53:46.832" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:46.830" endtime="20251020 07:53:46.832"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Replica state is ${expected_state}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.833" level="INFO">${replicas} = [{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': Fals...</msg>
<status status="PASS" starttime="20251020 07:53:46.832" endtime="20251020 07:53:46.833"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': False...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.834" level="INFO">${datanode} = {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:46.834" endtime="20251020 07:53:46.834"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.834" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:46.834" endtime="20251020 07:53:46.834"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.835" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is UNHEALTHY, Container state in SCM is CLOSED'}]}]</msg>
<status status="PASS" starttime="20251020 07:53:46.835" endtime="20251020 07:53:46.835"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:46.836" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is UNHEALTHY, Container state in SCM is CLOSED'}]}</msg>
<status status="PASS" starttime="20251020 07:53:46.835" endtime="20251020 07:53:46.836"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:46.836" endtime="20251020 07:53:46.837"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:46.837" endtime="20251020 07:53:46.838"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:53:46.838" endtime="20251020 07:53:46.839"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.835" endtime="20251020 07:53:46.840"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.834" endtime="20251020 07:53:46.840"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:46.840" endtime="20251020 07:53:46.840"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.833" endtime="20251020 07:53:46.840"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.841" level="INFO">${datanode} = {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:46.841" endtime="20251020 07:53:46.841"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.841" level="INFO">${hostname} = ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:46.841" endtime="20251020 07:53:46.841"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:46.841" endtime="20251020 07:53:46.842"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.843" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:46.842" endtime="20251020 07:53:46.843"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:46.843" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:46.843" endtime="20251020 07:53:46.843"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:46.843" endtime="20251020 07:53:46.844"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:46.844" endtime="20251020 07:53:46.845"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:46.845" endtime="20251020 07:53:46.846"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:46.846" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:46.846" endtime="20251020 07:53:46.846"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.842" endtime="20251020 07:53:46.846"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.842" endtime="20251020 07:53:46.847"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.840" endtime="20251020 07:53:46.847"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.847" level="INFO">${datanode} = {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:46.847" endtime="20251020 07:53:46.847"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.847" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:46.847" endtime="20251020 07:53:46.847"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:46.848" endtime="20251020 07:53:46.848"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:46.849" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:46.849" endtime="20251020 07:53:46.849"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:46.849" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:46.849" endtime="20251020 07:53:46.849"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:46.849" endtime="20251020 07:53:46.850"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:46.850" endtime="20251020 07:53:46.851"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:46.851" endtime="20251020 07:53:46.852"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:46.852" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:46.852" endtime="20251020 07:53:46.852"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.848" endtime="20251020 07:53:46.852"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.848" endtime="20251020 07:53:46.852"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.847" endtime="20251020 07:53:46.852"/>
</iter>
<status status="PASS" starttime="20251020 07:53:46.833" endtime="20251020 07:53:46.853"/>
</for>
<status status="PASS" starttime="20251020 07:53:46.832" endtime="20251020 07:53:46.853"/>
</kw>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251020 07:53:46.979" level="INFO">Remove rule /tmp/container-state-UNHEALTHY.btm for datanode5 successful.</msg>
<status status="PASS" starttime="20251020 07:53:46.853" endtime="20251020 07:53:46.980"/>
</kw>
<status status="PASS" starttime="20251020 07:53:40.487" endtime="20251020 07:53:46.980"/>
</kw>
<status status="PASS" starttime="20251020 07:53:40.487" endtime="20251020 07:53:46.980"/>
</test>
<test id="s1-s8-t2" name="Verify Container State With Deleted Container Replica" line="54">
<kw name="Verify Container State with Rule">
<arg>DELETED</arg>
<kw name="Create Container State Rule">
<var>${rule_file}</var>
<arg>${expected_state}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${rule_file}</var>
<arg>/tmp/container-state-${state}.btm</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251020 07:53:46.983" level="INFO">${rule_file} = /tmp/container-state-DELETED.btm</msg>
<status status="PASS" starttime="20251020 07:53:46.982" endtime="20251020 07:53:46.983"/>
</kw>
<kw name="Execute" library="os">
<arg>sed 's/STATE_PLACEHOLDER/${state}/g' ${TEMPLATE_RULE} &gt; ${rule_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:46.987" level="INFO">Running command 'sed 's/STATE_PLACEHOLDER/DELETED/g' /opt/hadoop/share/ozone/byteman/container-state-template.btm &gt; /tmp/container-state-DELETED.btm'.</msg>
<msg timestamp="20251020 07:53:46.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:46.992" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:53:46.984" endtime="20251020 07:53:46.992"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:46.992" level="INFO"/>
<status status="PASS" starttime="20251020 07:53:46.992" endtime="20251020 07:53:46.992"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:46.993" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:46.993" endtime="20251020 07:53:46.993"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.984" endtime="20251020 07:53:46.993"/>
</kw>
<msg timestamp="20251020 07:53:46.993" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:46.983" endtime="20251020 07:53:46.993"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.983" endtime="20251020 07:53:46.993"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<arg>${rule_file}</arg>
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20251020 07:53:46.994" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:46.994" endtime="20251020 07:53:46.994"/>
</kw>
<msg timestamp="20251020 07:53:46.994" level="INFO">${rule_file} = /tmp/container-state-DELETED.btm</msg>
<status status="PASS" starttime="20251020 07:53:46.982" endtime="20251020 07:53:46.994"/>
</kw>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251020 07:53:47.130" level="INFO">Add rule /tmp/container-state-DELETED.btm for datanode5 successful.</msg>
<status status="PASS" starttime="20251020 07:53:46.994" endtime="20251020 07:53:47.130"/>
</kw>
<kw name="List Byteman Rules" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<doc>List Active Byteman rules for specific component and return file list</doc>
<msg timestamp="20251020 07:53:47.211" level="INFO">List rules for datanode5 successful.</msg>
<msg timestamp="20251020 07:53:47.211" level="INFO">Active rules in datanode5:
# File /tmp/container-state-DELETED.btm line 20</msg>
<status status="PASS" starttime="20251020 07:53:47.131" endtime="20251020 07:53:47.212"/>
</kw>
<kw name="Execute replicas verify container state debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --container-state o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:47.217" level="INFO">Running command 'ozone debug replicas verify --container-state o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:53:53.304" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:53.304" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:47.214" endtime="20251020 07:53:53.304"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:53.305" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Replica state is DELETED, Container state in SCM is CLOSED"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: containerState
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed containerState verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,219
***************************************************</msg>
<status status="PASS" starttime="20251020 07:53:53.304" endtime="20251020 07:53:53.305"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:53.306" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:53.305" endtime="20251020 07:53:53.306"/>
</kw>
<status status="PASS" starttime="20251020 07:53:47.214" endtime="20251020 07:53:53.306"/>
</kw>
<msg timestamp="20251020 07:53:53.306" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:47.213" endtime="20251020 07:53:53.306"/>
</kw>
<msg timestamp="20251020 07:53:53.306" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:47.213" endtime="20251020 07:53:53.306"/>
</kw>
<msg timestamp="20251020 07:53:53.306" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:47.212" endtime="20251020 07:53:53.306"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:53.307" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:53.307" endtime="20251020 07:53:53.307"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:53.308" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:53.307" endtime="20251020 07:53:53.308"/>
</kw>
<msg timestamp="20251020 07:53:53.308" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:53.307" endtime="20251020 07:53:53.308"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Replica state is ${expected_state}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.309" level="INFO">${replicas} = [{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': Fals...</msg>
<status status="PASS" starttime="20251020 07:53:53.309" endtime="20251020 07:53:53.309"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': False...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.310" level="INFO">${datanode} = {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:53.310" endtime="20251020 07:53:53.310"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.310" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:53.310" endtime="20251020 07:53:53.310"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.311" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is DELETED, Container state in SCM is CLOSED'}]}]</msg>
<status status="PASS" starttime="20251020 07:53:53.311" endtime="20251020 07:53:53.311"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:53.312" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is DELETED, Container state in SCM is CLOSED'}]}</msg>
<status status="PASS" starttime="20251020 07:53:53.312" endtime="20251020 07:53:53.312"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:53.312" endtime="20251020 07:53:53.313"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:53.313" endtime="20251020 07:53:53.313"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:53:53.313" endtime="20251020 07:53:53.314"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.311" endtime="20251020 07:53:53.314"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.310" endtime="20251020 07:53:53.314"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:53.314" endtime="20251020 07:53:53.314"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.310" endtime="20251020 07:53:53.314"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.315" level="INFO">${datanode} = {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:53.315" endtime="20251020 07:53:53.315"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.315" level="INFO">${hostname} = ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:53.315" endtime="20251020 07:53:53.315"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:53.315" endtime="20251020 07:53:53.316"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.316" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:53.316" endtime="20251020 07:53:53.316"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:53.317" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:53.317" endtime="20251020 07:53:53.317"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:53.317" endtime="20251020 07:53:53.318"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:53.318" endtime="20251020 07:53:53.318"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:53.318" endtime="20251020 07:53:53.319"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:53.319" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:53.319" endtime="20251020 07:53:53.320"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.316" endtime="20251020 07:53:53.320"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.316" endtime="20251020 07:53:53.320"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.315" endtime="20251020 07:53:53.320"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.320" level="INFO">${datanode} = {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:53.320" endtime="20251020 07:53:53.320"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.320" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:53.320" endtime="20251020 07:53:53.320"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:53.320" endtime="20251020 07:53:53.321"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:53.322" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:53.321" endtime="20251020 07:53:53.322"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:53.322" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:53.322" endtime="20251020 07:53:53.322"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:53.322" endtime="20251020 07:53:53.323"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:53.323" endtime="20251020 07:53:53.323"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:53.323" endtime="20251020 07:53:53.324"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:53.325" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:53.324" endtime="20251020 07:53:53.325"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.321" endtime="20251020 07:53:53.325"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.321" endtime="20251020 07:53:53.325"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.320" endtime="20251020 07:53:53.325"/>
</iter>
<status status="PASS" starttime="20251020 07:53:53.309" endtime="20251020 07:53:53.325"/>
</for>
<status status="PASS" starttime="20251020 07:53:53.308" endtime="20251020 07:53:53.325"/>
</kw>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251020 07:53:53.452" level="INFO">Remove rule /tmp/container-state-DELETED.btm for datanode5 successful.</msg>
<status status="PASS" starttime="20251020 07:53:53.325" endtime="20251020 07:53:53.452"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.982" endtime="20251020 07:53:53.453"/>
</kw>
<status status="PASS" starttime="20251020 07:53:46.981" endtime="20251020 07:53:53.453"/>
</test>
<test id="s1-s8-t3" name="Verify Container State With Invalid Container Replica" line="57">
<kw name="Verify Container State with Rule">
<arg>INVALID</arg>
<kw name="Create Container State Rule">
<var>${rule_file}</var>
<arg>${expected_state}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${rule_file}</var>
<arg>/tmp/container-state-${state}.btm</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251020 07:53:53.455" level="INFO">${rule_file} = /tmp/container-state-INVALID.btm</msg>
<status status="PASS" starttime="20251020 07:53:53.455" endtime="20251020 07:53:53.456"/>
</kw>
<kw name="Execute" library="os">
<arg>sed 's/STATE_PLACEHOLDER/${state}/g' ${TEMPLATE_RULE} &gt; ${rule_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:53.460" level="INFO">Running command 'sed 's/STATE_PLACEHOLDER/INVALID/g' /opt/hadoop/share/ozone/byteman/container-state-template.btm &gt; /tmp/container-state-INVALID.btm'.</msg>
<msg timestamp="20251020 07:53:53.464" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:53.464" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:53:53.457" endtime="20251020 07:53:53.464"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:53.465" level="INFO"/>
<status status="PASS" starttime="20251020 07:53:53.464" endtime="20251020 07:53:53.465"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:53.465" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:53.465" endtime="20251020 07:53:53.465"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.456" endtime="20251020 07:53:53.465"/>
</kw>
<msg timestamp="20251020 07:53:53.465" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:53.456" endtime="20251020 07:53:53.465"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.456" endtime="20251020 07:53:53.465"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<arg>${rule_file}</arg>
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20251020 07:53:53.466" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:53.466" endtime="20251020 07:53:53.466"/>
</kw>
<msg timestamp="20251020 07:53:53.466" level="INFO">${rule_file} = /tmp/container-state-INVALID.btm</msg>
<status status="PASS" starttime="20251020 07:53:53.455" endtime="20251020 07:53:53.466"/>
</kw>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251020 07:53:53.604" level="INFO">Add rule /tmp/container-state-INVALID.btm for datanode5 successful.</msg>
<status status="PASS" starttime="20251020 07:53:53.466" endtime="20251020 07:53:53.604"/>
</kw>
<kw name="List Byteman Rules" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<doc>List Active Byteman rules for specific component and return file list</doc>
<msg timestamp="20251020 07:53:53.694" level="INFO">List rules for datanode5 successful.</msg>
<msg timestamp="20251020 07:53:53.694" level="INFO">Active rules in datanode5:
# File /tmp/container-state-INVALID.btm line 20</msg>
<status status="PASS" starttime="20251020 07:53:53.605" endtime="20251020 07:53:53.694"/>
</kw>
<kw name="Execute replicas verify container state debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --container-state o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:53:53.699" level="INFO">Running command 'ozone debug replicas verify --container-state o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:53:59.735" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:53:59.735" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:53.696" endtime="20251020 07:53:59.735"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:53:59.736" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "9acb7569-3d5c-462d-bef0-b9989827f6fd",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Replica state is INVALID, Container state in SCM is CLOSED"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "9d994b1a-8493-4de9-9905-7c15c75ebcc2",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "7967d987-ea8d-402f-a757-e34960e91078",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: containerState
URI: o3://omservice/cli-debug-volume15347/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed containerState verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,150
***************************************************</msg>
<status status="PASS" starttime="20251020 07:53:59.735" endtime="20251020 07:53:59.736"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:53:59.736" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:53:59.736" endtime="20251020 07:53:59.736"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.696" endtime="20251020 07:53:59.736"/>
</kw>
<msg timestamp="20251020 07:53:59.736" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:53:53.696" endtime="20251020 07:53:59.737"/>
</kw>
<msg timestamp="20251020 07:53:59.737" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:53.695" endtime="20251020 07:53:59.737"/>
</kw>
<msg timestamp="20251020 07:53:59.737" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:53.695" endtime="20251020 07:53:59.737"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:59.738" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume15347",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168969216...</msg>
<status status="PASS" starttime="20251020 07:53:59.737" endtime="20251020 07:53:59.738"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251020 07:53:59.739" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:59.738" endtime="20251020 07:53:59.739"/>
</kw>
<msg timestamp="20251020 07:53:59.739" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume15347', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': ...</msg>
<status status="PASS" starttime="20251020 07:53:59.737" endtime="20251020 07:53:59.739"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Replica state is ${expected_state}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.740" level="INFO">${replicas} = [{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': Fals...</msg>
<status status="PASS" starttime="20251020 07:53:59.739" endtime="20251020 07:53:59.740"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': False...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.741" level="INFO">${datanode} = {'uuid': '9acb7569-3d5c-462d-bef0-b9989827f6fd', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:59.741" endtime="20251020 07:53:59.741"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.741" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:59.741" endtime="20251020 07:53:59.741"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.742" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is INVALID, Container state in SCM is CLOSED'}]}]</msg>
<status status="PASS" starttime="20251020 07:53:59.742" endtime="20251020 07:53:59.742"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:59.743" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is INVALID, Container state in SCM is CLOSED'}]}</msg>
<status status="PASS" starttime="20251020 07:53:59.743" endtime="20251020 07:53:59.743"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:59.743" endtime="20251020 07:53:59.744"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:59.744" endtime="20251020 07:53:59.744"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251020 07:53:59.744" endtime="20251020 07:53:59.745"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.742" endtime="20251020 07:53:59.745"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.741" endtime="20251020 07:53:59.745"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:59.745" endtime="20251020 07:53:59.745"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.740" endtime="20251020 07:53:59.745"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.746" level="INFO">${datanode} = {'uuid': '9d994b1a-8493-4de9-9905-7c15c75ebcc2', 'hostname': 'ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:59.746" endtime="20251020 07:53:59.746"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.746" level="INFO">${hostname} = ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:59.746" endtime="20251020 07:53:59.746"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:59.746" endtime="20251020 07:53:59.746"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.747" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:59.747" endtime="20251020 07:53:59.747"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:59.748" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:59.748" endtime="20251020 07:53:59.748"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:59.748" endtime="20251020 07:53:59.748"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:59.749" endtime="20251020 07:53:59.749"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:59.749" endtime="20251020 07:53:59.750"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:59.750" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:59.750" endtime="20251020 07:53:59.750"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.747" endtime="20251020 07:53:59.750"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.747" endtime="20251020 07:53:59.751"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.745" endtime="20251020 07:53:59.751"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.751" level="INFO">${datanode} = {'uuid': '7967d987-ea8d-402f-a757-e34960e91078', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251020 07:53:59.751" endtime="20251020 07:53:59.751"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.751" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251020 07:53:59.751" endtime="20251020 07:53:59.751"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:53:59.752" endtime="20251020 07:53:59.752"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251020 07:53:59.753" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251020 07:53:59.753" endtime="20251020 07:53:59.753"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251020 07:53:59.753" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251020 07:53:59.753" endtime="20251020 07:53:59.753"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251020 07:53:59.753" endtime="20251020 07:53:59.754"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:59.754" endtime="20251020 07:53:59.754"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251020 07:53:59.755" endtime="20251020 07:53:59.755"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251020 07:53:59.756" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251020 07:53:59.755" endtime="20251020 07:53:59.756"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.752" endtime="20251020 07:53:59.756"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.752" endtime="20251020 07:53:59.756"/>
</kw>
<status status="PASS" starttime="20251020 07:53:59.751" endtime="20251020 07:53:59.756"/>
</iter>
<status status="PASS" starttime="20251020 07:53:59.740" endtime="20251020 07:53:59.756"/>
</for>
<status status="PASS" starttime="20251020 07:53:59.739" endtime="20251020 07:53:59.756"/>
</kw>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251020 07:53:59.884" level="INFO">Remove rule /tmp/container-state-INVALID.btm for datanode5 successful.</msg>
<status status="PASS" starttime="20251020 07:53:59.756" endtime="20251020 07:53:59.885"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.454" endtime="20251020 07:53:59.885"/>
</kw>
<status status="PASS" starttime="20251020 07:53:53.453" endtime="20251020 07:53:59.885"/>
</test>
<doc>Test container state on a UNHEALTHY, DELETED and INVALID container</doc>
<status status="PASS" starttime="20251020 07:53:40.433" endtime="20251020 07:53:59.887"/>
</suite>
<suite id="s1-s9" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s9-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251020 07:54:00.693" endtime="20251020 07:54:00.693"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:00.697" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:01.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:01.712" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251020 07:54:00.694" endtime="20251020 07:54:01.712"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:01.713" level="INFO">true</msg>
<status status="PASS" starttime="20251020 07:54:01.713" endtime="20251020 07:54:01.713"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:01.714" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:01.714" endtime="20251020 07:54:01.714"/>
</kw>
<status status="PASS" starttime="20251020 07:54:00.694" endtime="20251020 07:54:01.714"/>
</kw>
<msg timestamp="20251020 07:54:01.714" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:00.693" endtime="20251020 07:54:01.714"/>
</kw>
<msg timestamp="20251020 07:54:01.714" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251020 07:54:00.693" endtime="20251020 07:54:01.714"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251020 07:54:01.715" endtime="20251020 07:54:01.715"/>
</kw>
<status status="NOT RUN" starttime="20251020 07:54:01.715" endtime="20251020 07:54:01.715"/>
</branch>
<status status="PASS" starttime="20251020 07:54:01.715" endtime="20251020 07:54:01.715"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251020 07:54:01.716" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251020 07:54:01.715" endtime="20251020 07:54:01.716"/>
</kw>
<status status="PASS" starttime="20251020 07:54:00.692" endtime="20251020 07:54:01.716"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251020 07:54:01.716" endtime="20251020 07:54:01.716"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:01.720" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:01.724" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:01.724" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20251020 07:54:01.717" endtime="20251020 07:54:01.724"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:01.725" level="INFO">om</msg>
<status status="PASS" starttime="20251020 07:54:01.725" endtime="20251020 07:54:01.725"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:01.726" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:01.725" endtime="20251020 07:54:01.726"/>
</kw>
<status status="PASS" starttime="20251020 07:54:01.717" endtime="20251020 07:54:01.726"/>
</kw>
<msg timestamp="20251020 07:54:01.726" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:01.717" endtime="20251020 07:54:01.726"/>
</kw>
<msg timestamp="20251020 07:54:01.726" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20251020 07:54:01.717" endtime="20251020 07:54:01.726"/>
</kw>
<msg timestamp="20251020 07:54:01.726" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:54:01.716" endtime="20251020 07:54:01.726"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251020 07:54:01.727" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251020 07:54:01.727" endtime="20251020 07:54:01.727"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:01.731" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:01.894" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:01.894" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:54:01.728" endtime="20251020 07:54:01.894"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:01.895" level="INFO"/>
<status status="PASS" starttime="20251020 07:54:01.894" endtime="20251020 07:54:01.895"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:01.896" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:01.895" endtime="20251020 07:54:01.896"/>
</kw>
<status status="PASS" starttime="20251020 07:54:01.728" endtime="20251020 07:54:01.896"/>
</kw>
<msg timestamp="20251020 07:54:01.896" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:01.728" endtime="20251020 07:54:01.896"/>
</kw>
<status status="PASS" starttime="20251020 07:54:01.727" endtime="20251020 07:54:01.896"/>
</kw>
<status status="PASS" starttime="20251020 07:54:01.727" endtime="20251020 07:54:01.896"/>
</kw>
<status status="PASS" starttime="20251020 07:54:00.692" endtime="20251020 07:54:01.896"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251020 07:54:00.691" endtime="20251020 07:54:01.896"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251020 07:54:00.652" endtime="20251020 07:54:01.897"/>
</suite>
<suite id="s1-s10" name="Ozone-Debug-Tests-Ec3-2" source="/opt/hadoop/smoketest/debug/ozone-debug-tests-ec3-2.robot">
<kw name="Create Volume Bucket" type="SETUP">
<kw name="Execute" library="os">
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:02.722" level="INFO">Running command 'ozone sh volume create o3://omservice/cli-debug-ec-volume15347 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:06.298" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:06.298" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:54:02.719" endtime="20251020 07:54:06.298"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:06.299" level="INFO"/>
<status status="PASS" starttime="20251020 07:54:06.299" endtime="20251020 07:54:06.299"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:06.300" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:06.300" endtime="20251020 07:54:06.300"/>
</kw>
<status status="PASS" starttime="20251020 07:54:02.718" endtime="20251020 07:54:06.300"/>
</kw>
<msg timestamp="20251020 07:54:06.300" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:02.718" endtime="20251020 07:54:06.300"/>
</kw>
<status status="PASS" starttime="20251020 07:54:02.718" endtime="20251020 07:54:06.300"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:06.305" level="INFO">Running command 'ozone sh bucket create o3://omservice/cli-debug-ec-volume15347/cli-debug-ec-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:09.947" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:09.948" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:54:06.302" endtime="20251020 07:54:09.948"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:09.949" level="INFO"/>
<status status="PASS" starttime="20251020 07:54:09.948" endtime="20251020 07:54:09.949"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:09.949" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:09.949" endtime="20251020 07:54:09.949"/>
</kw>
<status status="PASS" starttime="20251020 07:54:06.301" endtime="20251020 07:54:09.949"/>
</kw>
<msg timestamp="20251020 07:54:09.949" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:06.301" endtime="20251020 07:54:09.949"/>
</kw>
<status status="PASS" starttime="20251020 07:54:06.301" endtime="20251020 07:54:09.950"/>
</kw>
<status status="PASS" starttime="20251020 07:54:02.717" endtime="20251020 07:54:09.950"/>
</kw>
<test id="s1-s10-t1" name="Test ozone debug replicas chunk-info" line="46">
<kw name="Create EC key">
<arg>1048576</arg>
<arg>3</arg>
<kw name="Execute" library="os">
<arg>dd if=/dev/urandom of=${TEMP_DIR}/testfile bs=${bs} count=${count}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:09.955" level="INFO">Running command 'dd if=/dev/urandom of=/tmp/testfile bs=1048576 count=3 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:09.972" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:09.972" level="INFO">${output} = 3+0 records in
3+0 records out
3145728 bytes (3.1 MB, 3.0 MiB) copied, 0.0120447 s, 261 MB/s</msg>
<status status="PASS" starttime="20251020 07:54:09.952" endtime="20251020 07:54:09.972"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:09.973" level="INFO">3+0 records in
3+0 records out
3145728 bytes (3.1 MB, 3.0 MiB) copied, 0.0120447 s, 261 MB/s</msg>
<status status="PASS" starttime="20251020 07:54:09.972" endtime="20251020 07:54:09.973"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:09.973" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:09.973" endtime="20251020 07:54:09.973"/>
</kw>
<status status="PASS" starttime="20251020 07:54:09.952" endtime="20251020 07:54:09.973"/>
</kw>
<msg timestamp="20251020 07:54:09.974" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:09.951" endtime="20251020 07:54:09.974"/>
</kw>
<status status="PASS" starttime="20251020 07:54:09.951" endtime="20251020 07:54:09.974"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/testfile ${TEMP_DIR}/testfile -r rs-${EC_DATA}-${EC_PARITY}-1024k -t EC</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:09.978" level="INFO">Running command 'ozone sh key put o3://omservice/cli-debug-ec-volume15347/cli-debug-ec-bucket/testfile /tmp/testfile -r rs-3-2-1024k -t EC 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:15.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:15.953" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251020 07:54:09.975" endtime="20251020 07:54:15.953"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:15.954" level="INFO"/>
<status status="PASS" starttime="20251020 07:54:15.953" endtime="20251020 07:54:15.954"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:15.954" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:15.954" endtime="20251020 07:54:15.955"/>
</kw>
<status status="PASS" starttime="20251020 07:54:09.975" endtime="20251020 07:54:15.955"/>
</kw>
<msg timestamp="20251020 07:54:15.955" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:09.974" endtime="20251020 07:54:15.955"/>
</kw>
<status status="PASS" starttime="20251020 07:54:09.974" endtime="20251020 07:54:15.955"/>
</kw>
<status status="PASS" starttime="20251020 07:54:09.951" endtime="20251020 07:54:15.955"/>
</kw>
<kw name="Execute" library="os">
<var>${count}</var>
<arg>ozone debug replicas chunk-info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/testfile | jq '[.keyLocations[0][] | select(.file | test("\\\\.block$")) | .file] | length'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251020 07:54:15.959" level="INFO">Running command 'ozone debug replicas chunk-info o3://omservice/cli-debug-ec-volume15347/cli-debug-ec-bucket/testfile | jq '[.keyLocations[0][] | select(.file | test("\\.block$")) | .file] | length' 2&gt;&amp;1'.</msg>
<msg timestamp="20251020 07:54:22.175" level="INFO">${rc} = 0</msg>
<msg timestamp="20251020 07:54:22.176" level="INFO">${output} = 5</msg>
<status status="PASS" starttime="20251020 07:54:15.956" endtime="20251020 07:54:22.176"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251020 07:54:22.177" level="INFO">5</msg>
<status status="PASS" starttime="20251020 07:54:22.176" endtime="20251020 07:54:22.177"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251020 07:54:22.177" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251020 07:54:22.177" endtime="20251020 07:54:22.177"/>
</kw>
<status status="PASS" starttime="20251020 07:54:15.956" endtime="20251020 07:54:22.177"/>
</kw>
<msg timestamp="20251020 07:54:22.177" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251020 07:54:15.956" endtime="20251020 07:54:22.178"/>
</kw>
<msg timestamp="20251020 07:54:22.178" level="INFO">${count} = 5</msg>
<status status="PASS" starttime="20251020 07:54:15.955" endtime="20251020 07:54:22.178"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>5</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20251020 07:54:22.178" endtime="20251020 07:54:22.178"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251020 07:54:09.950" endtime="20251020 07:54:22.178"/>
</test>
<doc>Test ozone Debug CLI for EC(3,2) replicated keys</doc>
<status status="PASS" starttime="20251020 07:54:02.670" endtime="20251020 07:54:22.179"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="174934"/>
</suite>
<statistics>
<total>
<stat pass="16" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="16" fail="0" skip="0" id="s1" name="ozonesecure-ha-debug-tools">ozonesecure-ha-debug-tools</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-debug-tools.Kinit</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Auditparser">ozonesecure-ha-debug-tools.Auditparser</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Kinit">ozonesecure-ha-debug-tools.Kinit</stat>
<stat pass="5" fail="0" skip="0" id="s1-s4" name="Ozone-Debug-Tests">ozonesecure-ha-debug-tools.Ozone-Debug-Tests</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Corrupt-Block-Checksum">ozonesecure-ha-debug-tools.Corrupt-Block-Checksum</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Stale-Datanode-Checksum">ozonesecure-ha-debug-tools.Stale-Datanode-Checksum</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Block-Existence-Check">ozonesecure-ha-debug-tools.Block-Existence-Check</stat>
<stat pass="3" fail="0" skip="0" id="s1-s8" name="Container-State-Verifier">ozonesecure-ha-debug-tools.Container-State-Verifier</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Kinit">ozonesecure-ha-debug-tools.Kinit</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Ozone-Debug-Tests-Ec3-2">ozonesecure-ha-debug-tools.Ozone-Debug-Tests-Ec3-2</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
