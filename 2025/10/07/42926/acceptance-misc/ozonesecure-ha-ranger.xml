<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251007 17:37:08.142" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-ranger">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:35:34.573" endtime="20251007 17:35:34.573"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:34.577" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:35.359" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:35.359" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251007 17:35:34.574" endtime="20251007 17:35:35.359"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:35.360" level="INFO">true</msg>
<status status="PASS" starttime="20251007 17:35:35.360" endtime="20251007 17:35:35.360"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:35.361" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:35.360" endtime="20251007 17:35:35.361"/>
</kw>
<status status="PASS" starttime="20251007 17:35:34.574" endtime="20251007 17:35:35.361"/>
</kw>
<msg timestamp="20251007 17:35:35.361" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:34.574" endtime="20251007 17:35:35.361"/>
</kw>
<msg timestamp="20251007 17:35:35.361" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251007 17:35:34.574" endtime="20251007 17:35:35.361"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:35:35.362" endtime="20251007 17:35:35.362"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:35:35.361" endtime="20251007 17:35:35.362"/>
</branch>
<status status="PASS" starttime="20251007 17:35:35.361" endtime="20251007 17:35:35.362"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:35:35.362" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251007 17:35:35.362" endtime="20251007 17:35:35.362"/>
</kw>
<status status="PASS" starttime="20251007 17:35:34.573" endtime="20251007 17:35:35.362"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251007 17:35:35.362" endtime="20251007 17:35:35.363"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:35.366" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:35.370" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:35.370" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20251007 17:35:35.364" endtime="20251007 17:35:35.370"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:35.371" level="INFO">s3g</msg>
<status status="PASS" starttime="20251007 17:35:35.370" endtime="20251007 17:35:35.371"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:35.371" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:35.371" endtime="20251007 17:35:35.371"/>
</kw>
<status status="PASS" starttime="20251007 17:35:35.363" endtime="20251007 17:35:35.371"/>
</kw>
<msg timestamp="20251007 17:35:35.371" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:35.363" endtime="20251007 17:35:35.372"/>
</kw>
<msg timestamp="20251007 17:35:35.372" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20251007 17:35:35.363" endtime="20251007 17:35:35.372"/>
</kw>
<msg timestamp="20251007 17:35:35.372" level="INFO">${TEST_USER} = hdfs/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:35:35.363" endtime="20251007 17:35:35.372"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251007 17:35:35.372" level="INFO">${TEST_USER} = hdfs/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:35:35.372" endtime="20251007 17:35:35.372"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:35.376" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/hdfs.keytab hdfs/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:35.538" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:35.538" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:35:35.373" endtime="20251007 17:35:35.538"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:35.539" level="INFO"/>
<status status="PASS" starttime="20251007 17:35:35.539" endtime="20251007 17:35:35.540"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:35.540" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:35.540" endtime="20251007 17:35:35.540"/>
</kw>
<status status="PASS" starttime="20251007 17:35:35.373" endtime="20251007 17:35:35.540"/>
</kw>
<msg timestamp="20251007 17:35:35.540" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:35.373" endtime="20251007 17:35:35.540"/>
</kw>
<status status="PASS" starttime="20251007 17:35:35.373" endtime="20251007 17:35:35.540"/>
</kw>
<status status="PASS" starttime="20251007 17:35:35.372" endtime="20251007 17:35:35.541"/>
</kw>
<status status="PASS" starttime="20251007 17:35:34.573" endtime="20251007 17:35:35.541"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251007 17:35:34.572" endtime="20251007 17:35:35.541"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251007 17:35:34.527" endtime="20251007 17:35:35.541"/>
</suite>
<suite id="s1-s2" name="Generate" source="/opt/hadoop/smoketest/freon/generate.robot">
<test id="s1-s2-t1" name="Ozone Client Key Generator" line="25">
<kw name="Freon OCKG" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:36.308" level="INFO">Running command 'ozone freon ockg --om-service-id=omservice -t 1 -n1 -p ockg  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:42.100" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:42.100" level="INFO">${output} = 2025-10-07 17:35:37,658 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 1
2025-10-07 17:35:37,714 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:36.305" endtime="20251007 17:35:42.100"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:42.101" level="INFO">2025-10-07 17:35:37,658 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 1
2025-10-07 17:35:37,714 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:38,715 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:38,903 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hdfs as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-07 17:35:39,053 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, hdfs as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-07 17:35:39,479 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:35:39,558 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2025-10-07 17:35:39,716 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:40,716 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:41,717 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:35:41,740 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=2064.473559, max=2064.473559, mean=2064.473559, stddev=0.0, median=2064.473559, p75=2064.473559, p95=2064.473559, p98=2064.473559, p99=2064.473559, p999=2064.473559, mean_rate=0.38341179085614524, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:35:41,741 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 4
2025-10-07 17:35:41,741 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:35:41,741 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:35:42.100" endtime="20251007 17:35:42.101"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:42.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:42.101" endtime="20251007 17:35:42.102"/>
</kw>
<status status="PASS" starttime="20251007 17:35:36.305" endtime="20251007 17:35:42.102"/>
</kw>
<msg timestamp="20251007 17:35:42.102" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:36.305" endtime="20251007 17:35:42.102"/>
</kw>
<msg timestamp="20251007 17:35:42.102" level="INFO">${result} = 2025-10-07 17:35:37,658 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 1
2025-10-07 17:35:37,714 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:36.304" endtime="20251007 17:35:42.102"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:35:42.102" endtime="20251007 17:35:42.103"/>
</kw>
<status status="PASS" starttime="20251007 17:35:36.303" endtime="20251007 17:35:42.103"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:36.303" endtime="20251007 17:35:42.103"/>
</test>
<test id="s1-s2-t2" name="OM Key Generator" line="28">
<kw name="Freon OMKG" library="freon">
<arg>prefix=omkg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon omkg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:42.110" level="INFO">Running command 'ozone freon omkg --om-service-id=omservice -t 1 -n1 -p omkg  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:45.513" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:45.513" level="INFO">${output} = 2025-10-07 17:35:43,397 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkg and number-of-tests 1
2025-10-07 17:35:43,447 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:42.106" endtime="20251007 17:35:45.513"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:45.514" level="INFO">2025-10-07 17:35:43,397 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkg and number-of-tests 1
2025-10-07 17:35:43,447 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:44,456 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:44,728 [pool-2-thread-1] WARN helpers.OzoneAclUtil: Failed to get primary group from user hdfs/s3g@EXAMPLE.COM (auth:KERBEROS)
2025-10-07 17:35:45,457 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:35:45,467 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=141.20106, max=141.20106, mean=141.20106, stddev=0.0, median=141.20106, p75=141.20106, p95=141.20106, p98=141.20106, p99=141.20106, p999=141.20106, mean_rate=1.3352712302734455, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:35:45,467 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:35:45,467 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:35:45,467 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:35:45.514" endtime="20251007 17:35:45.514"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:45.515" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:45.514" endtime="20251007 17:35:45.515"/>
</kw>
<status status="PASS" starttime="20251007 17:35:42.106" endtime="20251007 17:35:45.515"/>
</kw>
<msg timestamp="20251007 17:35:45.515" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:42.106" endtime="20251007 17:35:45.515"/>
</kw>
<msg timestamp="20251007 17:35:45.515" level="INFO">${result} = 2025-10-07 17:35:43,397 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkg and number-of-tests 1
2025-10-07 17:35:43,447 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:42.105" endtime="20251007 17:35:45.515"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:35:45.515" endtime="20251007 17:35:45.516"/>
</kw>
<status status="PASS" starttime="20251007 17:35:42.104" endtime="20251007 17:35:45.516"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:42.104" endtime="20251007 17:35:45.516"/>
</test>
<test id="s1-s2-t3" name="OM Bucket Generator" line="31">
<kw name="Freon OMBG" library="freon">
<arg>prefix=ombg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:45.521" level="INFO">Running command 'ozone freon ombg --om-service-id=omservice -t 1 -n1 -p ombg  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:48.905" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:48.905" level="INFO">${output} = 2025-10-07 17:35:46,809 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombg and number-of-tests 1
2025-10-07 17:35:46,859 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:45.518" endtime="20251007 17:35:48.905"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:48.906" level="INFO">2025-10-07 17:35:46,809 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombg and number-of-tests 1
2025-10-07 17:35:46,859 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:47,860 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:48,861 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:35:48,870 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=1, min=32.366928, max=32.366928, mean=32.366928, stddev=0.0, median=32.366928, p75=32.366928, p95=32.366928, p98=32.366928, p99=32.366928, p999=32.366928, mean_rate=1.2477839917808768, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:35:48,871 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:35:48,871 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:35:48,871 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:35:48.905" endtime="20251007 17:35:48.906"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:48.906" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:48.906" endtime="20251007 17:35:48.906"/>
</kw>
<status status="PASS" starttime="20251007 17:35:45.518" endtime="20251007 17:35:48.906"/>
</kw>
<msg timestamp="20251007 17:35:48.907" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:45.518" endtime="20251007 17:35:48.907"/>
</kw>
<msg timestamp="20251007 17:35:48.907" level="INFO">${result} = 2025-10-07 17:35:46,809 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombg and number-of-tests 1
2025-10-07 17:35:46,859 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:45.517" endtime="20251007 17:35:48.907"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:35:48.907" endtime="20251007 17:35:48.907"/>
</kw>
<status status="PASS" starttime="20251007 17:35:45.517" endtime="20251007 17:35:48.907"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:45.516" endtime="20251007 17:35:48.907"/>
</test>
<doc>Test freon data generation commands</doc>
<status status="PASS" starttime="20251007 17:35:36.268" endtime="20251007 17:35:48.908"/>
</suite>
<suite id="s1-s3" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s3-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:49.635" level="INFO">Running command 'ozone freon ockv --om-service-id=omservice -t 1 -n1 -p ockg  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:54.356" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:54.356" level="INFO">${output} = 2025-10-07 17:35:50,922 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 1
2025-10-07 17:35:50,980 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:49.633" endtime="20251007 17:35:54.356"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:54.357" level="INFO">2025-10-07 17:35:50,922 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 1
2025-10-07 17:35:50,980 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:51,981 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:52,501 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:35:52,982 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:35:53,982 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:35:54,001 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=30.42586, max=30.42586, mean=30.42586, stddev=0.0, median=30.42586, p75=30.42586, p95=30.42586, p98=30.42586, p99=30.42586, p999=30.42586, mean_rate=2.0588506693023967, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:35:54,001 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-07 17:35:54,001 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:35:54,001 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:35:54.356" endtime="20251007 17:35:54.357"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:54.358" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:54.357" endtime="20251007 17:35:54.358"/>
</kw>
<status status="PASS" starttime="20251007 17:35:49.632" endtime="20251007 17:35:54.358"/>
</kw>
<msg timestamp="20251007 17:35:54.358" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:49.632" endtime="20251007 17:35:54.358"/>
</kw>
<msg timestamp="20251007 17:35:54.358" level="INFO">${result} = 2025-10-07 17:35:50,922 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 1
2025-10-07 17:35:50,980 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out o...</msg>
<status status="PASS" starttime="20251007 17:35:49.632" endtime="20251007 17:35:54.359"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:35:54.359" endtime="20251007 17:35:54.359"/>
</kw>
<status status="PASS" starttime="20251007 17:35:49.631" endtime="20251007 17:35:54.359"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:49.630" endtime="20251007 17:35:54.360"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251007 17:35:49.594" endtime="20251007 17:35:54.360"/>
</suite>
<suite id="s1-s4" name="Ozone-Secure-Tenant" source="/opt/hadoop/smoketest/security/ozone-secure-tenant.robot">
<test id="s1-s4-t1" name="Create User in Ranger" line="33">
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${RANGER_ENDPOINT_URL}' == ''</arg>
<arg>No Ranger</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251007 17:35:55.193" endtime="20251007 17:35:55.194"/>
</kw>
<kw name="Execute" library="os">
<arg>curl --fail --include --location --netrc --request POST --header "Content-Type: application/json" --header "accept: application/json" --data '{"loginId": "${TENANT}", "password": "testpassword", "firstName": "Test", "lastName": "User", "emailAddress": "testuser@example.com"}' '${RANGER_ENDPOINT_URL}/service/users'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:55.197" level="INFO">Running command 'curl --fail --include --location --netrc --request POST --header "Content-Type: application/json" --header "accept: application/json" --data '{"loginId": "tenantone", "password": "testpassword", "firstName": "Test", "lastName": "User", "emailAddress": "testuser@example.com"}' 'http://ranger:6080/service/users' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:55.248" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:55.248" level="INFO">${output} =   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0   ...</msg>
<status status="PASS" starttime="20251007 17:35:55.195" endtime="20251007 17:35:55.248"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:55.249" level="INFO">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100   365    0   232  100   133   5658   3243 --:--:-- --:--:-- --:--:--  8902
HTTP/1.1 200 
Set-Cookie: RANGERADMINSESSIONID=E82BB86D8FE127847B910C8D21B57ED3; Path=/; HttpOnly
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Content-Security-Policy: default-src 'none'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline';font-src 'self'
X-Permitted-Cross-Domain-Policies: none
X-Content-Type-Options: nosniff
Content-Type: application/json
Transfer-Encoding: chunked
Date: Tue, 07 Oct 2025 17:35:55 GMT
Server: Apache Ranger

{"id":13,"loginId":"tenantone","status":1,"emailAddress":"testuser@example.com","firstName":"Test","lastName":"User","publicScreenName":"Test User","userSource":0,"userRoleList":["ROLE_USER"],"userPermList":[],"groupPermissions":[]}</msg>
<status status="PASS" starttime="20251007 17:35:55.248" endtime="20251007 17:35:55.249"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:55.250" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:55.249" endtime="20251007 17:35:55.250"/>
</kw>
<status status="PASS" starttime="20251007 17:35:55.194" endtime="20251007 17:35:55.250"/>
</kw>
<msg timestamp="20251007 17:35:55.250" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:55.194" endtime="20251007 17:35:55.250"/>
</kw>
<status status="PASS" starttime="20251007 17:35:55.194" endtime="20251007 17:35:55.250"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:55.193" endtime="20251007 17:35:55.251"/>
</test>
<test id="s1-s4-t2" name="Create Tenant Success with Cluster Admin" line="37">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:35:55.253" endtime="20251007 17:35:55.253"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:55.258" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:56.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:56.045" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251007 17:35:55.255" endtime="20251007 17:35:56.045"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:56.046" level="INFO">true</msg>
<status status="PASS" starttime="20251007 17:35:56.045" endtime="20251007 17:35:56.046"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:56.047" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:56.046" endtime="20251007 17:35:56.047"/>
</kw>
<status status="PASS" starttime="20251007 17:35:55.254" endtime="20251007 17:35:56.047"/>
</kw>
<msg timestamp="20251007 17:35:56.047" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:55.254" endtime="20251007 17:35:56.047"/>
</kw>
<msg timestamp="20251007 17:35:56.047" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251007 17:35:55.253" endtime="20251007 17:35:56.047"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:35:56.047" endtime="20251007 17:35:56.048"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:35:56.047" endtime="20251007 17:35:56.048"/>
</branch>
<status status="PASS" starttime="20251007 17:35:56.047" endtime="20251007 17:35:56.048"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:35:56.048" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251007 17:35:56.048" endtime="20251007 17:35:56.048"/>
</kw>
<status status="PASS" starttime="20251007 17:35:55.252" endtime="20251007 17:35:56.048"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251007 17:35:56.048" endtime="20251007 17:35:56.048"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:56.052" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:56.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:56.057" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20251007 17:35:56.050" endtime="20251007 17:35:56.057"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:56.058" level="INFO">s3g</msg>
<status status="PASS" starttime="20251007 17:35:56.057" endtime="20251007 17:35:56.058"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:56.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:56.058" endtime="20251007 17:35:56.059"/>
</kw>
<status status="PASS" starttime="20251007 17:35:56.049" endtime="20251007 17:35:56.059"/>
</kw>
<msg timestamp="20251007 17:35:56.059" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:56.049" endtime="20251007 17:35:56.059"/>
</kw>
<msg timestamp="20251007 17:35:56.059" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20251007 17:35:56.049" endtime="20251007 17:35:56.059"/>
</kw>
<msg timestamp="20251007 17:35:56.059" level="INFO">${TEST_USER} = hdfs/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:35:56.049" endtime="20251007 17:35:56.059"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251007 17:35:56.060" level="INFO">${TEST_USER} = hdfs/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:35:56.060" endtime="20251007 17:35:56.060"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:56.064" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/hdfs.keytab hdfs/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:56.173" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:56.173" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:35:56.062" endtime="20251007 17:35:56.174"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:56.174" level="INFO"/>
<status status="PASS" starttime="20251007 17:35:56.174" endtime="20251007 17:35:56.175"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:56.175" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:56.175" endtime="20251007 17:35:56.175"/>
</kw>
<status status="PASS" starttime="20251007 17:35:56.061" endtime="20251007 17:35:56.175"/>
</kw>
<msg timestamp="20251007 17:35:56.175" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:56.061" endtime="20251007 17:35:56.175"/>
</kw>
<status status="PASS" starttime="20251007 17:35:56.060" endtime="20251007 17:35:56.175"/>
</kw>
<status status="PASS" starttime="20251007 17:35:56.060" endtime="20251007 17:35:56.175"/>
</kw>
<status status="PASS" starttime="20251007 17:35:55.252" endtime="20251007 17:35:56.175"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant --verbose create ${TENANT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:56.179" level="INFO">Running command 'ozone tenant --verbose create tenantone 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:35:58.783" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:35:58.783" level="INFO">${output} = {
  "tenantId" : "tenantone"
}</msg>
<status status="PASS" starttime="20251007 17:35:56.176" endtime="20251007 17:35:58.783"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:35:58.784" level="INFO">{
  "tenantId" : "tenantone"
}</msg>
<status status="PASS" starttime="20251007 17:35:58.783" endtime="20251007 17:35:58.784"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:35:58.784" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:35:58.784" endtime="20251007 17:35:58.785"/>
</kw>
<status status="PASS" starttime="20251007 17:35:56.176" endtime="20251007 17:35:58.785"/>
</kw>
<msg timestamp="20251007 17:35:58.785" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:56.176" endtime="20251007 17:35:58.785"/>
</kw>
<msg timestamp="20251007 17:35:58.785" level="INFO">${output} = {
  "tenantId" : "tenantone"
}</msg>
<status status="PASS" starttime="20251007 17:35:56.176" endtime="20251007 17:35:58.785"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>"tenantId" : "${TENANT}"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:35:58.785" endtime="20251007 17:35:58.785"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:55.251" endtime="20251007 17:35:58.786"/>
</test>
<test id="s1-s4-t3" name="Assign User Success with Cluster Admin" line="42">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant --verbose user assign ${USER} --tenant=${TENANT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:35:58.790" level="INFO">Running command 'ozone tenant --verbose user assign hdfs --tenant=tenantone 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:00.982" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:00.982" level="INFO">${output} = export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f'
Assigned 'hdfs' to 'tenantone' with accessId 'tenantone$hdfs'.</msg>
<status status="PASS" starttime="20251007 17:35:58.788" endtime="20251007 17:36:00.983"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:00.984" level="INFO">export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f'
Assigned 'hdfs' to 'tenantone' with accessId 'tenantone$hdfs'.</msg>
<status status="PASS" starttime="20251007 17:36:00.983" endtime="20251007 17:36:00.985"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:00.985" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:00.985" endtime="20251007 17:36:00.986"/>
</kw>
<status status="PASS" starttime="20251007 17:35:58.788" endtime="20251007 17:36:00.986"/>
</kw>
<msg timestamp="20251007 17:36:00.986" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:35:58.787" endtime="20251007 17:36:00.986"/>
</kw>
<msg timestamp="20251007 17:36:00.986" level="INFO">${output} = export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f'
Assigned 'hdfs' to 'tenantone' with accessId 'tenantone$hdfs'.</msg>
<status status="PASS" starttime="20251007 17:35:58.787" endtime="20251007 17:36:00.986"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Assigned '${USER}' to '${TENANT}'</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:00.987" endtime="20251007 17:36:00.987"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${accessId}</var>
<arg>${output}</arg>
<arg>(?&lt;=export AWS_ACCESS_KEY_ID=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20251007 17:36:00.988" level="INFO">${accessId} = ["'tenantone$hdfs'"]</msg>
<status status="PASS" starttime="20251007 17:36:00.987" endtime="20251007 17:36:00.988"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${secretKey}</var>
<arg>${output}</arg>
<arg>(?&lt;=export AWS_SECRET_ACCESS_KEY=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20251007 17:36:00.989" level="INFO">${secretKey} = ["'38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f'"]</msg>
<status status="PASS" starttime="20251007 17:36:00.988" endtime="20251007 17:36:00.989"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${accessId}</var>
<arg>${accessId[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251007 17:36:00.991" level="INFO">${accessId} = 'tenantone$hdfs'</msg>
<status status="PASS" starttime="20251007 17:36:00.989" endtime="20251007 17:36:00.991"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${secretKey}</var>
<arg>${secretKey[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251007 17:36:00.992" level="INFO">${secretKey} = '38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f'</msg>
<status status="PASS" starttime="20251007 17:36:00.991" endtime="20251007 17:36:00.992"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ACCESS_ID}</arg>
<arg>${accessId}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:36:00.993" level="INFO">${ACCESS_ID} = 'tenantone$hdfs'</msg>
<status status="PASS" starttime="20251007 17:36:00.992" endtime="20251007 17:36:00.993"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECRET_KEY}</arg>
<arg>${secretKey}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:36:00.993" level="INFO">${SECRET_KEY} = '38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f'</msg>
<status status="PASS" starttime="20251007 17:36:00.993" endtime="20251007 17:36:00.993"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:35:58.786" endtime="20251007 17:36:00.994"/>
</test>
<test id="s1-s4-t4" name="Assign User Failure to Non-existent Tenant" line="52">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone tenant user assign ${USER} --tenant=thistenantdoesnotexist</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:00.999" level="INFO">Running command 'ozone tenant user assign hdfs --tenant=thistenantdoesnotexist 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:03.099" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:03.100" level="INFO">${output} = TENANT_NOT_FOUND Tenant 'thistenantdoesnotexist' doesn't exist.</msg>
<status status="PASS" starttime="20251007 17:36:00.995" endtime="20251007 17:36:03.100"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Tenant 'thistenantdoesnotexist' doesn't exist</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:03.100" endtime="20251007 17:36:03.101"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:00.994" endtime="20251007 17:36:03.101"/>
</test>
<test id="s1-s4-t5" name="GetUserInfo Success" line="56">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant user info ${USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:03.105" level="INFO">Running command 'ozone tenant user info hdfs 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:05.200" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:05.200" level="INFO">${output} = User 'hdfs' is assigned to:
- Tenant 'tenantone' with accessId 'tenantone$hdfs'</msg>
<status status="PASS" starttime="20251007 17:36:03.103" endtime="20251007 17:36:05.200"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:05.201" level="INFO">User 'hdfs' is assigned to:
- Tenant 'tenantone' with accessId 'tenantone$hdfs'</msg>
<status status="PASS" starttime="20251007 17:36:05.201" endtime="20251007 17:36:05.202"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:05.202" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:05.202" endtime="20251007 17:36:05.202"/>
</kw>
<status status="PASS" starttime="20251007 17:36:03.102" endtime="20251007 17:36:05.202"/>
</kw>
<msg timestamp="20251007 17:36:05.202" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:03.102" endtime="20251007 17:36:05.202"/>
</kw>
<msg timestamp="20251007 17:36:05.203" level="INFO">${output} = User 'hdfs' is assigned to:
- Tenant 'tenantone' with accessId 'tenantone$hdfs'</msg>
<status status="PASS" starttime="20251007 17:36:03.102" endtime="20251007 17:36:05.203"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Tenant '${TENANT}' with accessId '${TENANT}$${USER}'</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:05.203" endtime="20251007 17:36:05.203"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:03.101" endtime="20251007 17:36:05.203"/>
</test>
<test id="s1-s4-t6" name="GetUserInfo as JSON Success" line="60">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant user info --json ${USER} | jq '.tenants | .[].accessId'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:05.208" level="INFO">Running command 'ozone tenant user info --json hdfs | jq '.tenants | .[].accessId' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:07.454" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:07.454" level="INFO">${output} = "tenantone$hdfs"</msg>
<status status="PASS" starttime="20251007 17:36:05.205" endtime="20251007 17:36:07.454"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:07.455" level="INFO">"tenantone$hdfs"</msg>
<status status="PASS" starttime="20251007 17:36:07.454" endtime="20251007 17:36:07.455"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:07.455" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:07.455" endtime="20251007 17:36:07.455"/>
</kw>
<status status="PASS" starttime="20251007 17:36:05.205" endtime="20251007 17:36:07.455"/>
</kw>
<msg timestamp="20251007 17:36:07.455" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:05.205" endtime="20251007 17:36:07.455"/>
</kw>
<msg timestamp="20251007 17:36:07.455" level="INFO">${output} = "tenantone$hdfs"</msg>
<status status="PASS" starttime="20251007 17:36:05.204" endtime="20251007 17:36:07.456"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>"${TENANT}$${USER}"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:07.456" endtime="20251007 17:36:07.456"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:05.204" endtime="20251007 17:36:07.456"/>
</test>
<test id="s1-s4-t7" name="Create Bucket 1 Success via S3 API" line="64">
<kw name="Execute" library="os">
<arg>aws configure set aws_access_key_id ${ACCESS_ID}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:07.460" level="INFO">Running command 'aws configure set aws_access_key_id 'tenantone$hdfs' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:07.990" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:07.990" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:07.458" endtime="20251007 17:36:07.990"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:07.991" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:07.991" endtime="20251007 17:36:07.991"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:07.992" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:07.991" endtime="20251007 17:36:07.992"/>
</kw>
<status status="PASS" starttime="20251007 17:36:07.458" endtime="20251007 17:36:07.992"/>
</kw>
<msg timestamp="20251007 17:36:07.992" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:07.458" endtime="20251007 17:36:07.992"/>
</kw>
<status status="PASS" starttime="20251007 17:36:07.457" endtime="20251007 17:36:07.992"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key ${SECRET_KEY}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:07.996" level="INFO">Running command 'aws configure set aws_secret_access_key '38678470ae33ee8b618160a5d633e88dc7f109cf6985fdc62ac6258e0e56d60f' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:08.353" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:08.353" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:07.993" endtime="20251007 17:36:08.353"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:08.354" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:08.354" endtime="20251007 17:36:08.354"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:08.355" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:08.354" endtime="20251007 17:36:08.355"/>
</kw>
<status status="PASS" starttime="20251007 17:36:07.993" endtime="20251007 17:36:08.355"/>
</kw>
<msg timestamp="20251007 17:36:08.355" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:07.993" endtime="20251007 17:36:08.355"/>
</kw>
<status status="PASS" starttime="20251007 17:36:07.992" endtime="20251007 17:36:08.355"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} create-bucket --bucket bucket-test1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:08.359" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 create-bucket --bucket bucket-test1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:09.732" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:09.732" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket-test1"
}</msg>
<status status="PASS" starttime="20251007 17:36:08.356" endtime="20251007 17:36:09.732"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:09.733" level="INFO">{
    "Location": "http://s3g:9878/bucket-test1"
}</msg>
<status status="PASS" starttime="20251007 17:36:09.733" endtime="20251007 17:36:09.733"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:09.734" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:09.734" endtime="20251007 17:36:09.734"/>
</kw>
<status status="PASS" starttime="20251007 17:36:08.356" endtime="20251007 17:36:09.734"/>
</kw>
<msg timestamp="20251007 17:36:09.734" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:08.356" endtime="20251007 17:36:09.734"/>
</kw>
<msg timestamp="20251007 17:36:09.734" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket-test1"
}</msg>
<status status="PASS" starttime="20251007 17:36:08.355" endtime="20251007 17:36:09.734"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>bucket-test1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:09.734" endtime="20251007 17:36:09.735"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} list-buckets</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:09.738" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 list-buckets 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:10.289" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:10.289" level="INFO">${output} = {
    "Buckets": [
        {
            "Name": "bucket-test1",
            "CreationDate": "2025-10-07T17:36:09.554Z"
        }
    ],
    "Owner": {
        "DisplayName": "hdfs",
        "ID": "bb...</msg>
<status status="PASS" starttime="20251007 17:36:09.736" endtime="20251007 17:36:10.289"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:10.290" level="INFO">{
    "Buckets": [
        {
            "Name": "bucket-test1",
            "CreationDate": "2025-10-07T17:36:09.554Z"
        }
    ],
    "Owner": {
        "DisplayName": "hdfs",
        "ID": "bb2bd7ca4a327f84e6cd3979f8fa3828a50a08893c1b68f9d6715352c8d07b93"
    },
    "Prefix": null
}</msg>
<status status="PASS" starttime="20251007 17:36:10.289" endtime="20251007 17:36:10.290"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:10.290" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:10.290" endtime="20251007 17:36:10.290"/>
</kw>
<status status="PASS" starttime="20251007 17:36:09.735" endtime="20251007 17:36:10.290"/>
</kw>
<msg timestamp="20251007 17:36:10.290" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:09.735" endtime="20251007 17:36:10.290"/>
</kw>
<msg timestamp="20251007 17:36:10.291" level="INFO">${output} = {
    "Buckets": [
        {
            "Name": "bucket-test1",
            "CreationDate": "2025-10-07T17:36:09.554Z"
        }
    ],
    "Owner": {
        "DisplayName": "hdfs",
        "ID": "bb...</msg>
<status status="PASS" starttime="20251007 17:36:09.735" endtime="20251007 17:36:10.291"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>bucket-test1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:10.291" endtime="20251007 17:36:10.291"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:07.457" endtime="20251007 17:36:10.291"/>
</test>
<test id="s1-s4-t8" name="Verify Bucket 1 Owner" line="72">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info /${TENANT}/bucket-test1 | jq -r '.owner'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:10.296" level="INFO">Running command 'ozone sh bucket info /tenantone/bucket-test1 | jq -r '.owner' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:12.770" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:12.770" level="INFO">${output} = hdfs</msg>
<status status="PASS" starttime="20251007 17:36:10.293" endtime="20251007 17:36:12.770"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:12.771" level="INFO">hdfs</msg>
<status status="PASS" starttime="20251007 17:36:12.771" endtime="20251007 17:36:12.771"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:12.772" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:12.772" endtime="20251007 17:36:12.772"/>
</kw>
<status status="PASS" starttime="20251007 17:36:10.293" endtime="20251007 17:36:12.772"/>
</kw>
<msg timestamp="20251007 17:36:12.772" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:10.292" endtime="20251007 17:36:12.772"/>
</kw>
<msg timestamp="20251007 17:36:12.773" level="INFO">${result} = hdfs</msg>
<status status="PASS" starttime="20251007 17:36:10.292" endtime="20251007 17:36:12.773"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${USER}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251007 17:36:12.773" endtime="20251007 17:36:12.773"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:10.292" endtime="20251007 17:36:12.773"/>
</test>
<test id="s1-s4-t9" name="Put a key in the tenant bucket" line="76">
<kw name="Execute" library="os">
<arg>echo "Randomtext" &gt; /tmp/testfile</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:12.778" level="INFO">Running command 'echo "Randomtext" &gt; /tmp/testfile'.</msg>
<msg timestamp="20251007 17:36:12.780" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:12.780" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:12.775" endtime="20251007 17:36:12.780"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:12.781" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:12.780" endtime="20251007 17:36:12.781"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:12.781" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:12.781" endtime="20251007 17:36:12.781"/>
</kw>
<status status="PASS" starttime="20251007 17:36:12.775" endtime="20251007 17:36:12.781"/>
</kw>
<msg timestamp="20251007 17:36:12.781" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:12.775" endtime="20251007 17:36:12.781"/>
</kw>
<status status="PASS" starttime="20251007 17:36:12.774" endtime="20251007 17:36:12.781"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} put-object --bucket bucket-test1 --key mykey --body /tmp/testfile</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:12.784" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 put-object --bucket bucket-test1 --key mykey --body /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:14.358" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:14.358" level="INFO">${output} = {
    "ETag": "\"09ad6a6e23191dd19110d0251c4c3186\""
}</msg>
<status status="PASS" starttime="20251007 17:36:12.782" endtime="20251007 17:36:14.358"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:14.359" level="INFO">{
    "ETag": "\"09ad6a6e23191dd19110d0251c4c3186\""
}</msg>
<status status="PASS" starttime="20251007 17:36:14.359" endtime="20251007 17:36:14.359"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:14.360" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:14.359" endtime="20251007 17:36:14.360"/>
</kw>
<status status="PASS" starttime="20251007 17:36:12.781" endtime="20251007 17:36:14.360"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:12.774" endtime="20251007 17:36:14.361"/>
</test>
<test id="s1-s4-t10" name="Verify Object Owner" line="80">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key info /${TENANT}/bucket-test1/mykey | jq -r '.owner'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:14.365" level="INFO">Running command 'ozone sh key info /tenantone/bucket-test1/mykey | jq -r '.owner' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:17.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:17.217" level="INFO">${output} = hdfs</msg>
<status status="PASS" starttime="20251007 17:36:14.363" endtime="20251007 17:36:17.217"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:17.218" level="INFO">hdfs</msg>
<status status="PASS" starttime="20251007 17:36:17.217" endtime="20251007 17:36:17.218"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:17.218" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:17.218" endtime="20251007 17:36:17.218"/>
</kw>
<status status="PASS" starttime="20251007 17:36:14.362" endtime="20251007 17:36:17.219"/>
</kw>
<msg timestamp="20251007 17:36:17.219" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:14.362" endtime="20251007 17:36:17.219"/>
</kw>
<msg timestamp="20251007 17:36:17.219" level="INFO">${result} = hdfs</msg>
<status status="PASS" starttime="20251007 17:36:14.362" endtime="20251007 17:36:17.219"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${USER}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251007 17:36:17.219" endtime="20251007 17:36:17.219"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:14.361" endtime="20251007 17:36:17.220"/>
</test>
<test id="s1-s4-t11" name="Get and delete a key in the tenant bucket" line="84">
<kw name="Execute and checkrc" library="os">
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} head-object --bucket bucket-test1 --key mykey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:17.223" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 head-object --bucket bucket-test1 --key mykey 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:17.765" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:17.765" level="INFO">${output} = {
    "LastModified": "Tue, 07 Oct 2025 17:36:14 GMT",
    "ContentLength": 11,
    "ETag": "\"09ad6a6e23191dd19110d0251c4c3186\"",
    "CacheControl": "no-cache",
    "ContentType": "binary/octet-str...</msg>
<status status="PASS" starttime="20251007 17:36:17.221" endtime="20251007 17:36:17.765"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:17.766" level="INFO">{
    "LastModified": "Tue, 07 Oct 2025 17:36:14 GMT",
    "ContentLength": 11,
    "ETag": "\"09ad6a6e23191dd19110d0251c4c3186\"",
    "CacheControl": "no-cache",
    "ContentType": "binary/octet-stream",
    "Expires": "Tue, 07 Oct 2025 17:36:17 GMT",
    "Metadata": {},
    "StorageClass": "STANDARD",
    "ExpiresString": "Tue, 07 Oct 2025 17:36:17 GMT"
}</msg>
<status status="PASS" starttime="20251007 17:36:17.765" endtime="20251007 17:36:17.766"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:17.767" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:17.766" endtime="20251007 17:36:17.767"/>
</kw>
<status status="PASS" starttime="20251007 17:36:17.220" endtime="20251007 17:36:17.767"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} delete-object --bucket bucket-test1 --key mykey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:17.770" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 delete-object --bucket bucket-test1 --key mykey 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:18.320" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:18.320" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:17.767" endtime="20251007 17:36:18.320"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:18.321" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:18.321" endtime="20251007 17:36:18.321"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:18.322" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:18.322" endtime="20251007 17:36:18.322"/>
</kw>
<status status="PASS" starttime="20251007 17:36:17.767" endtime="20251007 17:36:18.322"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:17.220" endtime="20251007 17:36:18.322"/>
</test>
<test id="s1-s4-t12" name="SetSecret Success with Cluster Admin" line="88">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant user setsecret '${TENANT}$${USER}' --secret=somesecret1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:18.327" level="INFO">Running command 'ozone tenant user setsecret 'tenantone$hdfs' --secret=somesecret1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:20.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:20.392" level="INFO">${output} = export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='somesecret1'</msg>
<status status="PASS" starttime="20251007 17:36:18.324" endtime="20251007 17:36:20.393"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:20.393" level="INFO">export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='somesecret1'</msg>
<status status="PASS" starttime="20251007 17:36:20.393" endtime="20251007 17:36:20.394"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:20.394" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:20.394" endtime="20251007 17:36:20.394"/>
</kw>
<status status="PASS" starttime="20251007 17:36:18.324" endtime="20251007 17:36:20.394"/>
</kw>
<msg timestamp="20251007 17:36:20.394" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:18.324" endtime="20251007 17:36:20.394"/>
</kw>
<msg timestamp="20251007 17:36:20.394" level="INFO">${output} = export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='somesecret1'</msg>
<status status="PASS" starttime="20251007 17:36:18.323" endtime="20251007 17:36:20.394"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>export AWS_SECRET_ACCESS_KEY='somesecret1'</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:20.395" endtime="20251007 17:36:20.395"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:18.323" endtime="20251007 17:36:20.395"/>
</test>
<test id="s1-s4-t13" name="SetSecret Failure For Invalid Secret 1" line="92">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone tenant user setsecret '${TENANT}$${USER}' --secret=''</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:20.398" level="INFO">Running command 'ozone tenant user setsecret 'tenantone$hdfs' --secret='' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:22.490" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:22.490" level="INFO">${output} = secretKey cannot be null or empty.</msg>
<status status="PASS" starttime="20251007 17:36:20.396" endtime="20251007 17:36:22.490"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>secretKey cannot be null or empty.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:22.491" endtime="20251007 17:36:22.491"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:20.395" endtime="20251007 17:36:22.492"/>
</test>
<test id="s1-s4-t14" name="SetSecret Failure For Invalid Secret 2" line="96">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone tenant user setsecret '${TENANT}$${USER}' --secret=short</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:22.495" level="INFO">Running command 'ozone tenant user setsecret 'tenantone$hdfs' --secret=short 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:24.569" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:24.569" level="INFO">${output} = INVALID_REQUEST Secret key length should be at least 8 characters</msg>
<status status="PASS" starttime="20251007 17:36:22.493" endtime="20251007 17:36:24.569"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Secret key length should be at least 8 characters</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:24.569" endtime="20251007 17:36:24.570"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:22.492" endtime="20251007 17:36:24.570"/>
</test>
<test id="s1-s4-t15" name="GetSecret Success" line="100">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant user getsecret '${TENANT}$${USER}'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:24.575" level="INFO">Running command 'ozone tenant user getsecret 'tenantone$hdfs' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:26.683" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:26.683" level="INFO">${output} = export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='somesecret1'</msg>
<status status="PASS" starttime="20251007 17:36:24.572" endtime="20251007 17:36:26.683"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:26.684" level="INFO">export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='somesecret1'</msg>
<status status="PASS" starttime="20251007 17:36:26.683" endtime="20251007 17:36:26.684"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:26.685" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:26.684" endtime="20251007 17:36:26.685"/>
</kw>
<status status="PASS" starttime="20251007 17:36:24.572" endtime="20251007 17:36:26.685"/>
</kw>
<msg timestamp="20251007 17:36:26.685" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:24.572" endtime="20251007 17:36:26.685"/>
</kw>
<msg timestamp="20251007 17:36:26.685" level="INFO">${output} = export AWS_ACCESS_KEY_ID='tenantone$hdfs'
export AWS_SECRET_ACCESS_KEY='somesecret1'</msg>
<status status="PASS" starttime="20251007 17:36:24.571" endtime="20251007 17:36:26.685"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>export AWS_SECRET_ACCESS_KEY='somesecret1'</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:26.685" endtime="20251007 17:36:26.686"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:24.571" endtime="20251007 17:36:26.686"/>
</test>
<test id="s1-s4-t16" name="Delete Bucket 1 Failure With Old SecretKey via S3 API" line="104">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} delete-bucket --bucket bucket-test1</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:26.690" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 delete-bucket --bucket bucket-test1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:27.302" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:27.302" level="INFO">${output} = 
An error occurred (AccessDenied) when calling the DeleteBucket operation: User doesn't have the right to access this resource.</msg>
<status status="PASS" starttime="20251007 17:36:26.687" endtime="20251007 17:36:27.302"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${rc} &gt; 0</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:36:27.303" endtime="20251007 17:36:27.304"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:26.686" endtime="20251007 17:36:27.304"/>
</test>
<test id="s1-s4-t17" name="Delete Bucket 1 Success With Newly Set SecretKey via S3 API" line="108">
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key 'somesecret1'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:27.309" level="INFO">Running command 'aws configure set aws_secret_access_key 'somesecret1' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:27.676" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:27.677" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:27.306" endtime="20251007 17:36:27.677"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:27.678" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:27.677" endtime="20251007 17:36:27.678"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:27.678" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:27.678" endtime="20251007 17:36:27.678"/>
</kw>
<status status="PASS" starttime="20251007 17:36:27.306" endtime="20251007 17:36:27.678"/>
</kw>
<msg timestamp="20251007 17:36:27.678" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:27.305" endtime="20251007 17:36:27.678"/>
</kw>
<status status="PASS" starttime="20251007 17:36:27.305" endtime="20251007 17:36:27.679"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} delete-bucket --bucket bucket-test1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:27.683" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 delete-bucket --bucket bucket-test1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:28.224" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:28.224" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:27.680" endtime="20251007 17:36:28.224"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:28.225" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:28.224" endtime="20251007 17:36:28.225"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:28.225" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:28.225" endtime="20251007 17:36:28.225"/>
</kw>
<status status="PASS" starttime="20251007 17:36:27.680" endtime="20251007 17:36:28.225"/>
</kw>
<msg timestamp="20251007 17:36:28.225" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:27.679" endtime="20251007 17:36:28.226"/>
</kw>
<msg timestamp="20251007 17:36:28.226" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:27.679" endtime="20251007 17:36:28.226"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:27.304" endtime="20251007 17:36:28.226"/>
</test>
<test id="s1-s4-t18" name="Delete Tenant Failure Tenant Not Empty" line="112">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone tenant delete ${TENANT}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:28.229" level="INFO">Running command 'ozone tenant delete tenantone 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:30.373" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:30.373" level="INFO">${output} = TENANT_NOT_EMPTY Tenant 'tenantone' is not empty. All accessIds associated to this tenant must be revoked before the tenant can be deleted. See `ozone tenant user revoke`</msg>
<status status="PASS" starttime="20251007 17:36:28.227" endtime="20251007 17:36:30.373"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>TENANT_NOT_EMPTY Tenant '${TENANT}' is not empty. All accessIds associated to this tenant must be revoked before the tenant can be deleted. See `ozone tenant user revoke`</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:30.373" endtime="20251007 17:36:30.374"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:28.226" endtime="20251007 17:36:30.374"/>
</test>
<test id="s1-s4-t19" name="Trigger and wait for background Sync to recover Policies and Roles in Authorizer" line="116">
<kw name="Get OM Service Param" library="lib">
<var>${om_param}</var>
<kw name="Get OM Service ID" library="lib">
<var>${service_id}</var>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${service_id}</var>
<arg>OM_SERVICE_ID</arg>
<arg>${EMPTY}</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20251007 17:36:30.377" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20251007 17:36:30.376" endtime="20251007 17:36:30.377"/>
</kw>
<return>
<value>${service_id}</value>
<status status="PASS" starttime="20251007 17:36:30.377" endtime="20251007 17:36:30.377"/>
</return>
<msg timestamp="20251007 17:36:30.377" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20251007 17:36:30.376" endtime="20251007 17:36:30.377"/>
</kw>
<if>
<branch type="IF" condition="'${service_id}' == ''">
<return>
<value>--service-host om</value>
<status status="NOT RUN" starttime="20251007 17:36:30.378" endtime="20251007 17:36:30.378"/>
</return>
<status status="NOT RUN" starttime="20251007 17:36:30.377" endtime="20251007 17:36:30.378"/>
</branch>
<branch type="ELSE">
<return>
<value>--service-id '${service_id}'</value>
<status status="PASS" starttime="20251007 17:36:30.378" endtime="20251007 17:36:30.378"/>
</return>
<status status="PASS" starttime="20251007 17:36:30.378" endtime="20251007 17:36:30.378"/>
</branch>
<status status="PASS" starttime="20251007 17:36:30.377" endtime="20251007 17:36:30.378"/>
</if>
<msg timestamp="20251007 17:36:30.378" level="INFO">${om_param} = --service-id 'omservice'</msg>
<status status="PASS" starttime="20251007 17:36:30.375" endtime="20251007 17:36:30.378"/>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone admin om updateranger ${om_param}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:30.381" level="INFO">Running command 'ozone admin om updateranger --service-id 'omservice' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:32.422" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:32.422" level="INFO">${output} = Operation completed successfully</msg>
<status status="PASS" starttime="20251007 17:36:30.378" endtime="20251007 17:36:32.422"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Operation completed successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:32.422" endtime="20251007 17:36:32.423"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:30.375" endtime="20251007 17:36:32.423"/>
</test>
<test id="s1-s4-t20" name="Create Tenant Failure with Regular User" line="121">
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20251007 17:36:32.426" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:32.426" endtime="20251007 17:36:32.426"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20251007 17:36:32.426" endtime="20251007 17:36:32.426"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:36:32.427" endtime="20251007 17:36:32.427"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:36:32.426" endtime="20251007 17:36:32.427"/>
</branch>
<status status="NOT RUN" starttime="20251007 17:36:32.426" endtime="20251007 17:36:32.427"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20251007 17:36:32.427" endtime="20251007 17:36:32.427"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.425" endtime="20251007 17:36:32.427"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251007 17:36:32.427" endtime="20251007 17:36:32.427"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:32.433" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:32.439" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:32.439" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20251007 17:36:32.429" endtime="20251007 17:36:32.439"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:32.440" level="INFO">s3g</msg>
<status status="PASS" starttime="20251007 17:36:32.439" endtime="20251007 17:36:32.440"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:32.440" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:32.440" endtime="20251007 17:36:32.441"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.428" endtime="20251007 17:36:32.441"/>
</kw>
<msg timestamp="20251007 17:36:32.441" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:32.428" endtime="20251007 17:36:32.441"/>
</kw>
<msg timestamp="20251007 17:36:32.441" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20251007 17:36:32.428" endtime="20251007 17:36:32.441"/>
</kw>
<msg timestamp="20251007 17:36:32.442" level="INFO">${TEST_USER} = testuser2/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:36:32.428" endtime="20251007 17:36:32.442"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251007 17:36:32.442" level="INFO">${TEST_USER} = testuser2/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:36:32.442" endtime="20251007 17:36:32.442"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:32.447" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser2.keytab testuser2/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:32.595" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:32.595" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:32.444" endtime="20251007 17:36:32.595"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:32.596" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:32.595" endtime="20251007 17:36:32.596"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:32.596" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:32.596" endtime="20251007 17:36:32.596"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.444" endtime="20251007 17:36:32.596"/>
</kw>
<msg timestamp="20251007 17:36:32.596" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:32.443" endtime="20251007 17:36:32.596"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.443" endtime="20251007 17:36:32.596"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.443" endtime="20251007 17:36:32.596"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.425" endtime="20251007 17:36:32.596"/>
</kw>
<status status="PASS" starttime="20251007 17:36:32.424" endtime="20251007 17:36:32.597"/>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone tenant create tenanttwo</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:32.599" level="INFO">Running command 'ozone tenant create tenanttwo 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:34.686" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:34.687" level="INFO">${output} = PERMISSION_DENIED User 'testuser2' is not an Ozone admin</msg>
<status status="PASS" starttime="20251007 17:36:32.597" endtime="20251007 17:36:34.687"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>PERMISSION_DENIED User 'testuser2' is not an Ozone admin</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:34.687" endtime="20251007 17:36:34.688"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:32.424" endtime="20251007 17:36:34.688"/>
</test>
<test id="s1-s4-t21" name="SetSecret Failure with Regular User" line="126">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>ozone tenant user set-secret '${TENANT}$${USER}' --secret=somesecret2</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:34.692" level="INFO">Running command 'ozone tenant user set-secret 'tenantone$hdfs' --secret=somesecret2 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:36.717" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:36.717" level="INFO">${output} = USER_MISMATCH Requested accessId 'tenantone$hdfs' doesn't belong to current user 'testuser2', nor does current user have Ozone or tenant administrator privilege</msg>
<status status="PASS" starttime="20251007 17:36:34.689" endtime="20251007 17:36:36.717"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>USER_MISMATCH Requested accessId '${TENANT}$${USER}' doesn't belong to current user 'testuser2', nor does current user have Ozone or tenant administrator privilege</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:36.717" endtime="20251007 17:36:36.718"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:34.688" endtime="20251007 17:36:36.718"/>
</test>
<test id="s1-s4-t22" name="Create Bucket 2 Success with somesecret1 via S3 API" line="130">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} create-bucket --bucket bucket-test2</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:36.723" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 create-bucket --bucket bucket-test2 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:37.253" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:37.253" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket-test2"
}</msg>
<status status="PASS" starttime="20251007 17:36:36.721" endtime="20251007 17:36:37.253"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:37.254" level="INFO">{
    "Location": "http://s3g:9878/bucket-test2"
}</msg>
<status status="PASS" starttime="20251007 17:36:37.254" endtime="20251007 17:36:37.254"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:37.255" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:37.254" endtime="20251007 17:36:37.255"/>
</kw>
<status status="PASS" starttime="20251007 17:36:36.720" endtime="20251007 17:36:37.255"/>
</kw>
<msg timestamp="20251007 17:36:37.255" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:36.720" endtime="20251007 17:36:37.255"/>
</kw>
<msg timestamp="20251007 17:36:37.255" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket-test2"
}</msg>
<status status="PASS" starttime="20251007 17:36:36.719" endtime="20251007 17:36:37.255"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>bucket-test2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:37.255" endtime="20251007 17:36:37.256"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:36.719" endtime="20251007 17:36:37.256"/>
</test>
<test id="s1-s4-t23" name="Delete Bucket 2 Failure with somesecret2 via S3 API" line="134">
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key 'somesecret2'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:37.260" level="INFO">Running command 'aws configure set aws_secret_access_key 'somesecret2' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:37.653" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:37.653" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:37.258" endtime="20251007 17:36:37.653"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:37.654" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:37.654" endtime="20251007 17:36:37.654"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:37.655" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:37.654" endtime="20251007 17:36:37.655"/>
</kw>
<status status="PASS" starttime="20251007 17:36:37.257" endtime="20251007 17:36:37.655"/>
</kw>
<msg timestamp="20251007 17:36:37.655" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:37.257" endtime="20251007 17:36:37.655"/>
</kw>
<status status="PASS" starttime="20251007 17:36:37.257" endtime="20251007 17:36:37.655"/>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} delete-bucket --bucket bucket-test2</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:37.658" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 delete-bucket --bucket bucket-test2 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:38.195" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:38.196" level="INFO">${output} = 
An error occurred (AccessDenied) when calling the DeleteBucket operation: User doesn't have the right to access this resource.</msg>
<status status="PASS" starttime="20251007 17:36:37.655" endtime="20251007 17:36:38.196"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${rc} &gt; 0</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:36:38.196" endtime="20251007 17:36:38.197"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:37.256" endtime="20251007 17:36:38.197"/>
</test>
<test id="s1-s4-t24" name="Delete Bucket 2 Success with somesecret1 via S3 API" line="139">
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key 'somesecret1'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:38.201" level="INFO">Running command 'aws configure set aws_secret_access_key 'somesecret1' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:38.581" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:38.581" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:38.199" endtime="20251007 17:36:38.581"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:38.582" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:38.581" endtime="20251007 17:36:38.582"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:38.582" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:38.582" endtime="20251007 17:36:38.582"/>
</kw>
<status status="PASS" starttime="20251007 17:36:38.198" endtime="20251007 17:36:38.582"/>
</kw>
<msg timestamp="20251007 17:36:38.583" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:38.198" endtime="20251007 17:36:38.583"/>
</kw>
<status status="PASS" starttime="20251007 17:36:38.198" endtime="20251007 17:36:38.583"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} delete-bucket --bucket bucket-test2</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:38.586" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 delete-bucket --bucket bucket-test2 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:39.138" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:39.138" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:38.584" endtime="20251007 17:36:39.138"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:39.139" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:39.138" endtime="20251007 17:36:39.139"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:39.139" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:39.139" endtime="20251007 17:36:39.139"/>
</kw>
<status status="PASS" starttime="20251007 17:36:38.583" endtime="20251007 17:36:39.139"/>
</kw>
<msg timestamp="20251007 17:36:39.139" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:38.583" endtime="20251007 17:36:39.140"/>
</kw>
<msg timestamp="20251007 17:36:39.140" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:38.583" endtime="20251007 17:36:39.140"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:38.197" endtime="20251007 17:36:39.140"/>
</test>
<test id="s1-s4-t25" name="Revoke User AccessId Success with Cluster Admin" line="143">
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20251007 17:36:39.142" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:39.142" endtime="20251007 17:36:39.143"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20251007 17:36:39.143" endtime="20251007 17:36:39.143"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:36:39.143" endtime="20251007 17:36:39.143"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:36:39.143" endtime="20251007 17:36:39.143"/>
</branch>
<status status="NOT RUN" starttime="20251007 17:36:39.143" endtime="20251007 17:36:39.143"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20251007 17:36:39.143" endtime="20251007 17:36:39.143"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.142" endtime="20251007 17:36:39.143"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251007 17:36:39.143" endtime="20251007 17:36:39.144"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:39.147" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:39.151" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:39.151" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20251007 17:36:39.145" endtime="20251007 17:36:39.151"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:39.152" level="INFO">s3g</msg>
<status status="PASS" starttime="20251007 17:36:39.152" endtime="20251007 17:36:39.152"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:39.153" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:39.152" endtime="20251007 17:36:39.153"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.145" endtime="20251007 17:36:39.153"/>
</kw>
<msg timestamp="20251007 17:36:39.153" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:39.144" endtime="20251007 17:36:39.153"/>
</kw>
<msg timestamp="20251007 17:36:39.153" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20251007 17:36:39.144" endtime="20251007 17:36:39.153"/>
</kw>
<msg timestamp="20251007 17:36:39.153" level="INFO">${TEST_USER} = hdfs/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:36:39.144" endtime="20251007 17:36:39.153"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251007 17:36:39.154" level="INFO">${TEST_USER} = hdfs/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251007 17:36:39.153" endtime="20251007 17:36:39.154"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:39.157" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/hdfs.keytab hdfs/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:39.295" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:39.295" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:39.155" endtime="20251007 17:36:39.295"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:39.296" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:39.296" endtime="20251007 17:36:39.296"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:39.297" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:39.296" endtime="20251007 17:36:39.297"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.155" endtime="20251007 17:36:39.297"/>
</kw>
<msg timestamp="20251007 17:36:39.297" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:39.155" endtime="20251007 17:36:39.297"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.154" endtime="20251007 17:36:39.297"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.154" endtime="20251007 17:36:39.297"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.141" endtime="20251007 17:36:39.297"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.141" endtime="20251007 17:36:39.297"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant --verbose user revoke '${TENANT}$${USER}'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:39.301" level="INFO">Running command 'ozone tenant --verbose user revoke 'tenantone$hdfs' 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:41.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:41.429" level="INFO">${output} = Revoked accessId 'tenantone$hdfs'.</msg>
<status status="PASS" starttime="20251007 17:36:39.298" endtime="20251007 17:36:41.430"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:41.430" level="INFO">Revoked accessId 'tenantone$hdfs'.</msg>
<status status="PASS" starttime="20251007 17:36:41.430" endtime="20251007 17:36:41.431"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:41.431" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:41.431" endtime="20251007 17:36:41.431"/>
</kw>
<status status="PASS" starttime="20251007 17:36:39.298" endtime="20251007 17:36:41.432"/>
</kw>
<msg timestamp="20251007 17:36:41.432" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:39.298" endtime="20251007 17:36:41.432"/>
</kw>
<msg timestamp="20251007 17:36:41.432" level="INFO">${output} = Revoked accessId 'tenantone$hdfs'.</msg>
<status status="PASS" starttime="20251007 17:36:39.297" endtime="20251007 17:36:41.432"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Revoked accessId '${TENANT}$${USER}'.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:41.432" endtime="20251007 17:36:41.432"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:39.140" endtime="20251007 17:36:41.432"/>
</test>
<test id="s1-s4-t26" name="Create Bucket 3 Failure with Revoked AccessId via S3 API" line="148">
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>aws s3api --endpoint-url ${S3G_ENDPOINT_URL} create-bucket --bucket bucket-test3</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:41.436" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 create-bucket --bucket bucket-test3 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:41.995" level="INFO">${rc} = 255</msg>
<msg timestamp="20251007 17:36:41.995" level="INFO">${output} = 
An error occurred (AccessDenied) when calling the CreateBucket operation: User doesn't have the right to access this resource.</msg>
<status status="PASS" starttime="20251007 17:36:41.433" endtime="20251007 17:36:41.995"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${rc} &gt; 0</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:36:41.995" endtime="20251007 17:36:41.996"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:41.433" endtime="20251007 17:36:41.996"/>
</test>
<test id="s1-s4-t27" name="Delete Tenant Success with Cluster Admin" line="152">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant delete ${TENANT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:42.002" level="INFO">Running command 'ozone tenant delete tenantone 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:44.424" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:44.424" level="INFO">${output} = Deleted tenant 'tenantone'.
But the associated volume 'tenantone' is not removed. To delete it, run
    ozone sh volume delete tenantone
</msg>
<status status="PASS" starttime="20251007 17:36:41.999" endtime="20251007 17:36:44.424"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:44.425" level="INFO">Deleted tenant 'tenantone'.
But the associated volume 'tenantone' is not removed. To delete it, run
    ozone sh volume delete tenantone
</msg>
<status status="PASS" starttime="20251007 17:36:44.425" endtime="20251007 17:36:44.425"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:44.426" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:44.426" endtime="20251007 17:36:44.426"/>
</kw>
<status status="PASS" starttime="20251007 17:36:41.998" endtime="20251007 17:36:44.426"/>
</kw>
<msg timestamp="20251007 17:36:44.426" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:41.998" endtime="20251007 17:36:44.426"/>
</kw>
<msg timestamp="20251007 17:36:44.426" level="INFO">${output} = Deleted tenant 'tenantone'.
But the associated volume 'tenantone' is not removed. To delete it, run
    ozone sh volume delete tenantone
</msg>
<status status="PASS" starttime="20251007 17:36:41.998" endtime="20251007 17:36:44.426"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Deleted tenant '${TENANT}'.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:44.427" endtime="20251007 17:36:44.427"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:41.997" endtime="20251007 17:36:44.427"/>
</test>
<test id="s1-s4-t28" name="Delete Volume Success with Cluster Admin" line="156">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume delete ${TENANT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:44.431" level="INFO">Running command 'ozone sh volume delete tenantone 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:46.733" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:46.733" level="INFO">${output} = Volume tenantone is deleted</msg>
<status status="PASS" starttime="20251007 17:36:44.429" endtime="20251007 17:36:46.733"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:46.734" level="INFO">Volume tenantone is deleted</msg>
<status status="PASS" starttime="20251007 17:36:46.733" endtime="20251007 17:36:46.734"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:46.734" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:46.734" endtime="20251007 17:36:46.734"/>
</kw>
<status status="PASS" starttime="20251007 17:36:44.428" endtime="20251007 17:36:46.735"/>
</kw>
<msg timestamp="20251007 17:36:46.735" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:44.428" endtime="20251007 17:36:46.735"/>
</kw>
<msg timestamp="20251007 17:36:46.735" level="INFO">${output} = Volume tenantone is deleted</msg>
<status status="PASS" starttime="20251007 17:36:44.428" endtime="20251007 17:36:46.735"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Volume ${TENANT} is deleted</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:46.735" endtime="20251007 17:36:46.735"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:44.427" endtime="20251007 17:36:46.736"/>
</test>
<test id="s1-s4-t29" name="List Tenant Expect Empty Result" line="160">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone tenant list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:36:46.740" level="INFO">Running command 'ozone tenant list 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:36:48.786" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:36:48.786" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:46.737" endtime="20251007 17:36:48.786"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:36:48.787" level="INFO"/>
<status status="PASS" starttime="20251007 17:36:48.787" endtime="20251007 17:36:48.787"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:36:48.788" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:36:48.788" endtime="20251007 17:36:48.788"/>
</kw>
<status status="PASS" starttime="20251007 17:36:46.737" endtime="20251007 17:36:48.788"/>
</kw>
<msg timestamp="20251007 17:36:48.788" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:36:46.737" endtime="20251007 17:36:48.788"/>
</kw>
<msg timestamp="20251007 17:36:48.788" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251007 17:36:46.736" endtime="20251007 17:36:48.788"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${TENANT}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:36:48.788" endtime="20251007 17:36:48.789"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:36:46.736" endtime="20251007 17:36:48.789"/>
</test>
<doc>Smoke test for ozone secure tenant commands</doc>
<status status="PASS" starttime="20251007 17:35:55.129" endtime="20251007 17:36:48.791"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="72082"/>
</suite>
<statistics>
<total>
<stat pass="34" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="34" fail="0" skip="0" id="s1" name="ozonesecure-ha-ranger">ozonesecure-ha-ranger</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-ranger.Kinit</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Generate">ozonesecure-ha-ranger.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Validate">ozonesecure-ha-ranger.Validate</stat>
<stat pass="29" fail="0" skip="0" id="s1-s4" name="Ozone-Secure-Tenant">ozonesecure-ha-ranger.Ozone-Secure-Tenant</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
