<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251007 17:51:20.231" rpa="false" schemaversion="4">
<suite id="s1" name="restart">
<suite id="s1-s1" name="Generate" source="/opt/hadoop/smoketest/freon/generate.robot">
<test id="s1-s1-t1" name="Ozone Client Key Generator" line="25">
<kw name="Freon OCKG" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:35.795" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ockgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:39.568" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:39.569" level="INFO">${output} = 2025-10-07 17:49:37,151 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:49:37,204 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:35.792" endtime="20251007 17:49:39.569"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:39.569" level="INFO">2025-10-07 17:49:37,151 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:49:37,204 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:49:38,197 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hadoop as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-07 17:49:38,205 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:49:38,266 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, hadoop as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-07 17:49:38,430 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:49:39,206 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:49:39,227 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=896.649725, max=896.649725, mean=896.649725, stddev=0.0, median=896.649725, p75=896.649725, p95=896.649725, p98=896.649725, p99=896.649725, p999=896.649725, mean_rate=1.0627787047481247, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:49:39,227 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:49:39,227 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:49:39,227 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:49:39.569" endtime="20251007 17:49:39.569"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:39.570" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:39.570" endtime="20251007 17:49:39.570"/>
</kw>
<status status="PASS" starttime="20251007 17:49:35.792" endtime="20251007 17:49:39.570"/>
</kw>
<msg timestamp="20251007 17:49:39.570" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:35.792" endtime="20251007 17:49:39.570"/>
</kw>
<msg timestamp="20251007 17:49:39.570" level="INFO">${result} = 2025-10-07 17:49:37,151 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:49:37,204 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:35.791" endtime="20251007 17:49:39.570"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:49:39.571" endtime="20251007 17:49:39.571"/>
</kw>
<status status="PASS" starttime="20251007 17:49:35.791" endtime="20251007 17:49:39.571"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:49:35.790" endtime="20251007 17:49:39.571"/>
</test>
<test id="s1-s1-t2" name="OM Key Generator" line="28">
<kw name="Freon OMKG" library="freon">
<arg>prefix=omkg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon omkg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:39.576" level="INFO">Running command 'ozone freon omkg  -t 1 -n1 -p omkgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:41.895" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:41.895" level="INFO">${output} = 2025-10-07 17:49:40,802 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpre and number-of-tests 1
2025-10-07 17:49:40,842 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:39.574" endtime="20251007 17:49:41.895"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:41.896" level="INFO">2025-10-07 17:49:40,802 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpre and number-of-tests 1
2025-10-07 17:49:40,842 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:49:41,843 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:49:41,853 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=61.053512, max=61.053512, mean=61.053512, stddev=0.0, median=61.053512, p75=61.053512, p95=61.053512, p98=61.053512, p99=61.053512, p999=61.053512, mean_rate=7.691796779498531, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:49:41,854 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-07 17:49:41,854 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:49:41,854 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:49:41.895" endtime="20251007 17:49:41.896"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:41.897" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:41.896" endtime="20251007 17:49:41.897"/>
</kw>
<status status="PASS" starttime="20251007 17:49:39.573" endtime="20251007 17:49:41.897"/>
</kw>
<msg timestamp="20251007 17:49:41.897" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:39.573" endtime="20251007 17:49:41.897"/>
</kw>
<msg timestamp="20251007 17:49:41.898" level="INFO">${result} = 2025-10-07 17:49:40,802 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpre and number-of-tests 1
2025-10-07 17:49:40,842 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:39.573" endtime="20251007 17:49:41.898"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:49:41.898" endtime="20251007 17:49:41.898"/>
</kw>
<status status="PASS" starttime="20251007 17:49:39.572" endtime="20251007 17:49:41.898"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:49:39.571" endtime="20251007 17:49:41.899"/>
</test>
<test id="s1-s1-t3" name="OM Bucket Generator" line="31">
<kw name="Freon OMBG" library="freon">
<arg>prefix=ombg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:41.907" level="INFO">Running command 'ozone freon ombg  -t 1 -n1 -p ombgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:44.233" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:44.233" level="INFO">${output} = 2025-10-07 17:49:43,144 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpre and number-of-tests 1
2025-10-07 17:49:43,189 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:41.903" endtime="20251007 17:49:44.233"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:44.234" level="INFO">2025-10-07 17:49:43,144 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpre and number-of-tests 1
2025-10-07 17:49:43,189 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:49:44,190 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:49:44,197 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=1, min=10.041798, max=10.041798, mean=10.041798, stddev=0.0, median=10.041798, p75=10.041798, p95=10.041798, p98=10.041798, p99=10.041798, p999=10.041798, mean_rate=6.264082754246027, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:49:44,198 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-07 17:49:44,198 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:49:44,198 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:49:44.234" endtime="20251007 17:49:44.234"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:44.235" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:44.235" endtime="20251007 17:49:44.235"/>
</kw>
<status status="PASS" starttime="20251007 17:49:41.902" endtime="20251007 17:49:44.235"/>
</kw>
<msg timestamp="20251007 17:49:44.235" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:41.902" endtime="20251007 17:49:44.235"/>
</kw>
<msg timestamp="20251007 17:49:44.235" level="INFO">${result} = 2025-10-07 17:49:43,144 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpre and number-of-tests 1
2025-10-07 17:49:43,189 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:41.901" endtime="20251007 17:49:44.235"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:49:44.235" endtime="20251007 17:49:44.236"/>
</kw>
<status status="PASS" starttime="20251007 17:49:41.900" endtime="20251007 17:49:44.236"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:49:41.899" endtime="20251007 17:49:44.236"/>
</test>
<doc>Test freon data generation commands</doc>
<status status="PASS" starttime="20251007 17:49:35.756" endtime="20251007 17:49:44.236"/>
</suite>
<suite id="s1-s2" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s2-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:44.800" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ockgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:48.397" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:48.397" level="INFO">${output} = 2025-10-07 17:49:45,989 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:49:46,037 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:44.797" endtime="20251007 17:49:48.397"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:48.398" level="INFO">2025-10-07 17:49:45,989 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:49:46,037 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:49:47,038 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:49:47,048 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:49:48,039 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:49:48,053 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=19.848597, max=19.848597, mean=19.848597, stddev=0.0, median=19.848597, p75=19.848597, p95=19.848597, p98=19.848597, p99=19.848597, p999=19.848597, mean_rate=2.324621067355435, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:49:48,053 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:49:48,053 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:49:48,053 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:49:48.397" endtime="20251007 17:49:48.398"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:48.398" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:48.398" endtime="20251007 17:49:48.398"/>
</kw>
<status status="PASS" starttime="20251007 17:49:44.797" endtime="20251007 17:49:48.398"/>
</kw>
<msg timestamp="20251007 17:49:48.398" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:44.797" endtime="20251007 17:49:48.399"/>
</kw>
<msg timestamp="20251007 17:49:48.399" level="INFO">${result} = 2025-10-07 17:49:45,989 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:49:46,037 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:49:44.796" endtime="20251007 17:49:48.399"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:49:48.399" endtime="20251007 17:49:48.399"/>
</kw>
<status status="PASS" starttime="20251007 17:49:44.795" endtime="20251007 17:49:48.399"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:49:44.795" endtime="20251007 17:49:48.399"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251007 17:49:44.761" endtime="20251007 17:49:48.400"/>
</suite>
<suite id="s1-s3" name="Generate-Chunk" source="/opt/hadoop/smoketest/freon/generate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:49:48.980" endtime="20251007 17:49:48.980"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:48.983" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:49.698" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:49.698" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:49:48.981" endtime="20251007 17:49:49.698"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:49.699" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:49:49.699" endtime="20251007 17:49:49.699"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:49.699" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:49.699" endtime="20251007 17:49:49.699"/>
</kw>
<status status="PASS" starttime="20251007 17:49:48.981" endtime="20251007 17:49:49.700"/>
</kw>
<msg timestamp="20251007 17:49:49.700" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:48.980" endtime="20251007 17:49:49.700"/>
</kw>
<msg timestamp="20251007 17:49:49.700" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:49:48.980" endtime="20251007 17:49:49.700"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:49:49.700" endtime="20251007 17:49:49.700"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:49:49.700" endtime="20251007 17:49:49.700"/>
</branch>
<status status="PASS" starttime="20251007 17:49:49.700" endtime="20251007 17:49:49.700"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:49:49.701" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:49:49.700" endtime="20251007 17:49:49.701"/>
</kw>
<status status="PASS" starttime="20251007 17:49:48.979" endtime="20251007 17:49:49.701"/>
</kw>
<test id="s1-s3-t1" name="DN Chunk Generator" line="27">
<kw name="Freon DCG" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:49:49.703" endtime="20251007 17:49:49.703"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcg -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:49.706" level="INFO">Running command 'ozone freon dcg -t 1 -n100 -p dcgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:54.977" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:54.977" level="INFO">${output} = 2025-10-07 17:49:51,366 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251007 17:49:49.704" endtime="20251007 17:49:54.977"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:54.977" level="INFO">2025-10-07 17:49:51,366 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-07 17:49:51,590 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:49:51,612 [Thread-4] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:49:51,645 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:49:52,613 [Thread-4] INFO freon.ProgressBar: Progress: 5.00 % (5 out of 100)
2025-10-07 17:49:53,614 [Thread-4] INFO freon.ProgressBar: Progress: 95.00 % (95 out of 100)
2025-10-07 17:49:54,614 [Thread-4] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-07 17:49:54,632 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-write, count=100, min=7.362237, max=672.788543, mean=18.02003788595072, stddev=65.60590698218247, median=10.406979, p75=12.985076, p95=17.445887, p98=28.862294, p99=30.4697, p999=672.788543, mean_rate=35.10239519090952, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:49:54,633 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-07 17:49:54,633 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:49:54,633 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251007 17:49:54.977" endtime="20251007 17:49:54.978"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:54.978" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:54.978" endtime="20251007 17:49:54.978"/>
</kw>
<status status="PASS" starttime="20251007 17:49:49.703" endtime="20251007 17:49:54.978"/>
</kw>
<msg timestamp="20251007 17:49:54.978" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:49.703" endtime="20251007 17:49:54.978"/>
</kw>
<msg timestamp="20251007 17:49:54.979" level="INFO">${result} = 2025-10-07 17:49:51,366 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251007 17:49:49.703" endtime="20251007 17:49:54.979"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:49:54.979" endtime="20251007 17:49:54.979"/>
</kw>
<status status="PASS" starttime="20251007 17:49:49.702" endtime="20251007 17:49:54.979"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:49:49.701" endtime="20251007 17:49:54.979"/>
</test>
<doc>Test freon chunk generation commands</doc>
<status status="PASS" starttime="20251007 17:49:48.936" endtime="20251007 17:49:54.980"/>
</suite>
<suite id="s1-s4" name="Validate-Chunk" source="/opt/hadoop/smoketest/freon/validate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:49:55.537" endtime="20251007 17:49:55.537"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:55.540" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:56.333" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:56.333" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:49:55.538" endtime="20251007 17:49:56.333"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:56.333" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:49:56.333" endtime="20251007 17:49:56.333"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:56.334" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:56.334" endtime="20251007 17:49:56.334"/>
</kw>
<status status="PASS" starttime="20251007 17:49:55.538" endtime="20251007 17:49:56.334"/>
</kw>
<msg timestamp="20251007 17:49:56.334" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:55.537" endtime="20251007 17:49:56.334"/>
</kw>
<msg timestamp="20251007 17:49:56.334" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:49:55.537" endtime="20251007 17:49:56.334"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:49:56.335" endtime="20251007 17:49:56.335"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:49:56.334" endtime="20251007 17:49:56.335"/>
</branch>
<status status="PASS" starttime="20251007 17:49:56.334" endtime="20251007 17:49:56.335"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:49:56.335" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:49:56.335" endtime="20251007 17:49:56.335"/>
</kw>
<status status="PASS" starttime="20251007 17:49:55.537" endtime="20251007 17:49:56.335"/>
</kw>
<test id="s1-s4-t1" name="DN Chunk Validator" line="28">
<kw name="Freon DCV" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:49:56.337" endtime="20251007 17:49:56.337"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcv -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:49:56.340" level="INFO">Running command 'ozone freon dcv -t 1 -n100 -p dcgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:49:59.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:49:59.941" level="INFO">${output} = 2025-10-07 17:49:57,527 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:49:57,579 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:49:56.338" endtime="20251007 17:49:59.941"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:49:59.942" level="INFO">2025-10-07 17:49:57,527 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:49:57,579 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:49:58,028 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-07 17:49:58,265 [main] INFO freon.DatanodeChunkValidator: Using pipeline Pipeline-75b4389e-4608-4e79-9b3f-b80a57e5043f
2025-10-07 17:49:58,297 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:49:58,580 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:49:59,581 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-07 17:49:59,600 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-validate, count=100, min=1.474266, max=4.421625, mean=1.993327114106673, stddev=0.5064597007405767, median=1.846131, p75=2.117836, p95=2.931173, p98=3.262062, p99=4.399964, p999=4.421625, mean_rate=143.7761214164731, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:49:59,600 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:49:59,600 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:49:59,600 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251007 17:49:59.942" endtime="20251007 17:49:59.942"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:49:59.943" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:49:59.943" endtime="20251007 17:49:59.943"/>
</kw>
<status status="PASS" starttime="20251007 17:49:56.338" endtime="20251007 17:49:59.943"/>
</kw>
<msg timestamp="20251007 17:49:59.943" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:49:56.337" endtime="20251007 17:49:59.943"/>
</kw>
<msg timestamp="20251007 17:49:59.944" level="INFO">${result} = 2025-10-07 17:49:57,527 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:49:57,579 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:49:56.337" endtime="20251007 17:49:59.944"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:49:59.944" endtime="20251007 17:49:59.944"/>
</kw>
<status status="PASS" starttime="20251007 17:49:56.336" endtime="20251007 17:49:59.944"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:49:56.336" endtime="20251007 17:49:59.944"/>
</test>
<doc>Test freon chunk validation commands</doc>
<status status="PASS" starttime="20251007 17:49:55.498" endtime="20251007 17:49:59.945"/>
</suite>
<suite id="s1-s5" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s5-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:35.053" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ockgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:50:44.698" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:50:44.698" level="INFO">${output} = 2025-10-07 17:50:36,285 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:50:36,328 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:50:35.051" endtime="20251007 17:50:44.698"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:50:44.699" level="INFO">2025-10-07 17:50:36,285 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:50:36,328 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:37,329 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:38,330 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:38,819 [main] INFO retry.RetryInvocationHandler: com.google.protobuf.ServiceException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ozone.om.exceptions.OMNotLeaderException): OM:om1 is not the leader. Could not determine the leader node.
	at org.apache.hadoop.ozone.om.ratis.OzoneManagerRatisServer.newOMNotLeaderException(OzoneManagerRatisServer.java:867)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.createLeaderErrorException(OzoneManagerProtocolServerSideTranslatorPB.java:200)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitReadRequestToOM(OzoneManagerProtocolServerSideTranslatorPB.java:193)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.internalProcessRequest(OzoneManagerProtocolServerSideTranslatorPB.java:158)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.processRequest(OzoneManagerProtocolServerSideTranslatorPB.java:124)
	at org.apache.hadoop.hdds.server.OzoneProtocolMessageDispatcher.processRequest(OzoneProtocolMessageDispatcher.java:89)
	at org.apache.hadoop.ozone.protocolPB.OzoneManagerProtocolServerSideTranslatorPB.submitRequest(OzoneManagerProtocolServerSideTranslatorPB.java:115)
	at org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos$OzoneManagerService$2.callBlockingMethod(OzoneManagerProtocolProtos.java)
	at org.apache.hadoop.ipc.ProtobufRpcEngine$Server.processCall(ProtobufRpcEngine.java:484)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:595)
	at org.apache.hadoop.ipc.ProtobufRpcEngine2$Server$ProtoBufRpcInvoker.call(ProtobufRpcEngine2.java:573)
	at org.apache.hadoop.ipc.RPC$Server.call(RPC.java:1228)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1246)
	at org.apache.hadoop.ipc.Server$RpcCall.run(Server.java:1169)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.base/javax.security.auth.Subject.doAs(Subject.java:525)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1953)
	at org.apache.hadoop.ipc.Server$Handler.run(Server.java:3198)
, while invoking $Proxy22.submitRequest over nodeId=null,nodeAddress=om:9862 after 1 failover attempts. Trying to failover after sleeping for 4000ms. Current retry count: 1.
2025-10-07 17:50:39,330 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:40,330 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:41,331 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:42,331 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:43,332 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:43,555 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:50:44,333 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:50:44,355 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=33.935084, max=33.935084, mean=33.935084, stddev=0.0, median=33.935084, p75=33.935084, p95=33.935084, p98=33.935084, p99=33.935084, p999=33.935084, mean_rate=8.220508903756501, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:50:44,356 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 8
2025-10-07 17:50:44,356 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:50:44,356 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:50:44.699" endtime="20251007 17:50:44.699"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:50:44.700" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:50:44.700" endtime="20251007 17:50:44.700"/>
</kw>
<status status="PASS" starttime="20251007 17:50:35.051" endtime="20251007 17:50:44.700"/>
</kw>
<msg timestamp="20251007 17:50:44.700" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:35.051" endtime="20251007 17:50:44.700"/>
</kw>
<msg timestamp="20251007 17:50:44.700" level="INFO">${result} = 2025-10-07 17:50:36,285 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpre and number-of-tests 1
2025-10-07 17:50:36,328 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ou...</msg>
<status status="PASS" starttime="20251007 17:50:35.051" endtime="20251007 17:50:44.700"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:50:44.701" endtime="20251007 17:50:44.701"/>
</kw>
<status status="PASS" starttime="20251007 17:50:35.050" endtime="20251007 17:50:44.701"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:50:35.049" endtime="20251007 17:50:44.701"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251007 17:50:35.017" endtime="20251007 17:50:44.702"/>
</suite>
<suite id="s1-s6" name="Validate-Chunk" source="/opt/hadoop/smoketest/freon/validate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:50:45.302" endtime="20251007 17:50:45.302"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:45.305" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:50:46.031" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:50:46.031" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:50:45.303" endtime="20251007 17:50:46.031"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:50:46.031" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:50:46.031" endtime="20251007 17:50:46.031"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:50:46.032" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:50:46.031" endtime="20251007 17:50:46.032"/>
</kw>
<status status="PASS" starttime="20251007 17:50:45.303" endtime="20251007 17:50:46.032"/>
</kw>
<msg timestamp="20251007 17:50:46.032" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:45.302" endtime="20251007 17:50:46.032"/>
</kw>
<msg timestamp="20251007 17:50:46.032" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:50:45.302" endtime="20251007 17:50:46.032"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:50:46.033" endtime="20251007 17:50:46.033"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:50:46.032" endtime="20251007 17:50:46.033"/>
</branch>
<status status="PASS" starttime="20251007 17:50:46.032" endtime="20251007 17:50:46.033"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:50:46.033" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:50:46.033" endtime="20251007 17:50:46.033"/>
</kw>
<status status="PASS" starttime="20251007 17:50:45.302" endtime="20251007 17:50:46.033"/>
</kw>
<test id="s1-s6-t1" name="DN Chunk Validator" line="28">
<kw name="Freon DCV" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:50:46.035" endtime="20251007 17:50:46.035"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcv -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:46.038" level="INFO">Running command 'ozone freon dcv -t 1 -n100 -p dcgpre  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:50:49.656" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:50:49.656" level="INFO">${output} = 2025-10-07 17:50:47,250 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:50:47,294 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:46.036" endtime="20251007 17:50:49.656"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:50:49.657" level="INFO">2025-10-07 17:50:47,250 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:50:47,294 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:50:47,768 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-07 17:50:48,021 [main] INFO freon.DatanodeChunkValidator: Using pipeline Pipeline-75b4389e-4608-4e79-9b3f-b80a57e5043f
2025-10-07 17:50:48,058 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:50:48,295 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:50:49,296 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-07 17:50:49,316 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-validate, count=100, min=1.723884, max=5.243825, mean=2.490894587664386, stddev=0.6089035461372485, median=2.371123, p75=2.678914, p95=3.463799, p98=4.200841, p99=4.928098, p999=5.243825, mean_rate=182.11196782469062, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:50:49,316 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:50:49,316 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:50:49,316 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251007 17:50:49.657" endtime="20251007 17:50:49.657"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:50:49.658" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:50:49.657" endtime="20251007 17:50:49.658"/>
</kw>
<status status="PASS" starttime="20251007 17:50:46.035" endtime="20251007 17:50:49.658"/>
</kw>
<msg timestamp="20251007 17:50:49.658" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:46.035" endtime="20251007 17:50:49.658"/>
</kw>
<msg timestamp="20251007 17:50:49.658" level="INFO">${result} = 2025-10-07 17:50:47,250 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpre and number-of-tests 100
2025-10-07 17:50:47,294 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:46.035" endtime="20251007 17:50:49.658"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:50:49.659" endtime="20251007 17:50:49.659"/>
</kw>
<status status="PASS" starttime="20251007 17:50:46.034" endtime="20251007 17:50:49.659"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:50:46.033" endtime="20251007 17:50:49.659"/>
</test>
<doc>Test freon chunk validation commands</doc>
<status status="PASS" starttime="20251007 17:50:45.259" endtime="20251007 17:50:49.660"/>
</suite>
<suite id="s1-s7" name="Generate" source="/opt/hadoop/smoketest/freon/generate.robot">
<test id="s1-s7-t1" name="Ozone Client Key Generator" line="25">
<kw name="Freon OCKG" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:50.239" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p ockgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:50:53.850" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:50:53.850" level="INFO">${output} = 2025-10-07 17:50:51,441 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-07 17:50:51,480 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:50.237" endtime="20251007 17:50:53.850"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:50:53.851" level="INFO">2025-10-07 17:50:51,441 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-07 17:50:51,480 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:52,481 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:52,586 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:50:53,481 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:50:53,502 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=902.625345, max=902.625345, mean=902.625345, stddev=0.0, median=902.625345, p75=902.625345, p95=902.625345, p98=902.625345, p99=902.625345, p999=902.625345, mean_rate=0.865041424589041, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:50:53,503 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:50:53,503 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:50:53,503 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:50:53.850" endtime="20251007 17:50:53.851"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:50:53.851" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:50:53.851" endtime="20251007 17:50:53.851"/>
</kw>
<status status="PASS" starttime="20251007 17:50:50.236" endtime="20251007 17:50:53.851"/>
</kw>
<msg timestamp="20251007 17:50:53.851" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:50.236" endtime="20251007 17:50:53.851"/>
</kw>
<msg timestamp="20251007 17:50:53.852" level="INFO">${result} = 2025-10-07 17:50:51,441 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-07 17:50:51,480 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:50.236" endtime="20251007 17:50:53.852"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:50:53.852" endtime="20251007 17:50:53.852"/>
</kw>
<status status="PASS" starttime="20251007 17:50:50.235" endtime="20251007 17:50:53.852"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:50:50.235" endtime="20251007 17:50:53.852"/>
</test>
<test id="s1-s7-t2" name="OM Key Generator" line="28">
<kw name="Freon OMKG" library="freon">
<arg>prefix=omkg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon omkg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:53.857" level="INFO">Running command 'ozone freon omkg  -t 1 -n1 -p omkgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:50:56.140" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:50:56.140" level="INFO">${output} = 2025-10-07 17:50:55,059 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpost and number-of-tests 1
2025-10-07 17:50:55,102 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:53.855" endtime="20251007 17:50:56.140"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:50:56.141" level="INFO">2025-10-07 17:50:55,059 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpost and number-of-tests 1
2025-10-07 17:50:55,102 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:56,103 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:50:56,112 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=58.755053, max=58.755053, mean=58.755053, stddev=0.0, median=58.755053, p75=58.755053, p95=58.755053, p98=58.755053, p99=58.755053, p999=58.755053, mean_rate=7.133532444015342, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:50:56,112 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-07 17:50:56,112 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:50:56,112 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:50:56.140" endtime="20251007 17:50:56.141"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:50:56.141" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:50:56.141" endtime="20251007 17:50:56.141"/>
</kw>
<status status="PASS" starttime="20251007 17:50:53.854" endtime="20251007 17:50:56.141"/>
</kw>
<msg timestamp="20251007 17:50:56.141" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:53.854" endtime="20251007 17:50:56.141"/>
</kw>
<msg timestamp="20251007 17:50:56.142" level="INFO">${result} = 2025-10-07 17:50:55,059 [main] INFO freon.BaseFreonGenerator: Executing test with prefix omkgpost and number-of-tests 1
2025-10-07 17:50:55,102 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:53.854" endtime="20251007 17:50:56.142"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:50:56.142" endtime="20251007 17:50:56.142"/>
</kw>
<status status="PASS" starttime="20251007 17:50:53.853" endtime="20251007 17:50:56.142"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:50:53.853" endtime="20251007 17:50:56.142"/>
</test>
<test id="s1-s7-t3" name="OM Bucket Generator" line="31">
<kw name="Freon OMBG" library="freon">
<arg>prefix=ombg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:56.147" level="INFO">Running command 'ozone freon ombg  -t 1 -n1 -p ombgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:50:58.442" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:50:58.442" level="INFO">${output} = 2025-10-07 17:50:57,360 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpost and number-of-tests 1
2025-10-07 17:50:57,407 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:56.145" endtime="20251007 17:50:58.442"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:50:58.443" level="INFO">2025-10-07 17:50:57,360 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpost and number-of-tests 1
2025-10-07 17:50:57,407 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:50:58,408 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:50:58,416 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=1, min=13.891327, max=13.891327, mean=13.891327, stddev=0.0, median=13.891327, p75=13.891327, p95=13.891327, p98=13.891327, p99=13.891327, p999=13.891327, mean_rate=8.930997230953238, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:50:58,416 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 1
2025-10-07 17:50:58,416 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:50:58,416 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:50:58.442" endtime="20251007 17:50:58.443"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:50:58.444" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:50:58.443" endtime="20251007 17:50:58.444"/>
</kw>
<status status="PASS" starttime="20251007 17:50:56.144" endtime="20251007 17:50:58.444"/>
</kw>
<msg timestamp="20251007 17:50:58.444" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:56.144" endtime="20251007 17:50:58.444"/>
</kw>
<msg timestamp="20251007 17:50:58.444" level="INFO">${result} = 2025-10-07 17:50:57,360 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ombgpost and number-of-tests 1
2025-10-07 17:50:57,407 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:56.144" endtime="20251007 17:50:58.444"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:50:58.444" endtime="20251007 17:50:58.445"/>
</kw>
<status status="PASS" starttime="20251007 17:50:56.143" endtime="20251007 17:50:58.445"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:50:56.143" endtime="20251007 17:50:58.445"/>
</test>
<doc>Test freon data generation commands</doc>
<status status="PASS" starttime="20251007 17:50:50.202" endtime="20251007 17:50:58.446"/>
</suite>
<suite id="s1-s8" name="Validate" source="/opt/hadoop/smoketest/freon/validate.robot">
<test id="s1-s8-t1" name="Ozone Client Key Validator" line="25">
<kw name="Freon OCKV" library="freon">
<arg>prefix=ockg${PREFIX}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:50:59.020" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p ockgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:51:02.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:51:02.634" level="INFO">${output} = 2025-10-07 17:51:00,233 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-07 17:51:00,279 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:59.017" endtime="20251007 17:51:02.634"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:51:02.635" level="INFO">2025-10-07 17:51:00,233 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-07 17:51:00,279 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:51:01,228 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:51:01,280 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:51:02,281 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:51:02,293 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=19.029168, max=19.029168, mean=19.029168, stddev=0.0, median=19.029168, p75=19.029168, p95=19.029168, p98=19.029168, p99=19.029168, p999=19.029168, mean_rate=1.8589438707457588, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:51:02,293 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:51:02,293 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:51:02,293 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:51:02.634" endtime="20251007 17:51:02.635"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:51:02.635" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:51:02.635" endtime="20251007 17:51:02.635"/>
</kw>
<status status="PASS" starttime="20251007 17:50:59.017" endtime="20251007 17:51:02.635"/>
</kw>
<msg timestamp="20251007 17:51:02.636" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:50:59.017" endtime="20251007 17:51:02.636"/>
</kw>
<msg timestamp="20251007 17:51:02.636" level="INFO">${result} = 2025-10-07 17:51:00,233 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockgpost and number-of-tests 1
2025-10-07 17:51:00,279 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 o...</msg>
<status status="PASS" starttime="20251007 17:50:59.016" endtime="20251007 17:51:02.636"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:51:02.636" endtime="20251007 17:51:02.636"/>
</kw>
<status status="PASS" starttime="20251007 17:50:59.015" endtime="20251007 17:51:02.636"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:50:59.015" endtime="20251007 17:51:02.636"/>
</test>
<doc>Test freon data validation commands</doc>
<status status="PASS" starttime="20251007 17:50:58.983" endtime="20251007 17:51:02.637"/>
</suite>
<suite id="s1-s9" name="Generate-Chunk" source="/opt/hadoop/smoketest/freon/generate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:51:03.208" endtime="20251007 17:51:03.208"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:51:03.211" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:51:03.944" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:51:03.944" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:51:03.209" endtime="20251007 17:51:03.944"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:51:03.944" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:51:03.944" endtime="20251007 17:51:03.944"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:51:03.945" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:51:03.945" endtime="20251007 17:51:03.945"/>
</kw>
<status status="PASS" starttime="20251007 17:51:03.209" endtime="20251007 17:51:03.945"/>
</kw>
<msg timestamp="20251007 17:51:03.945" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:51:03.208" endtime="20251007 17:51:03.945"/>
</kw>
<msg timestamp="20251007 17:51:03.945" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:51:03.208" endtime="20251007 17:51:03.945"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:51:03.946" endtime="20251007 17:51:03.946"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:51:03.945" endtime="20251007 17:51:03.946"/>
</branch>
<status status="PASS" starttime="20251007 17:51:03.945" endtime="20251007 17:51:03.946"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:51:03.946" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:51:03.946" endtime="20251007 17:51:03.946"/>
</kw>
<status status="PASS" starttime="20251007 17:51:03.208" endtime="20251007 17:51:03.946"/>
</kw>
<test id="s1-s9-t1" name="DN Chunk Generator" line="27">
<kw name="Freon DCG" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:51:03.948" endtime="20251007 17:51:03.948"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcg -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:51:03.951" level="INFO">Running command 'ozone freon dcg -t 1 -n100 -p dcgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:51:08.231" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:51:08.231" level="INFO">${output} = 2025-10-07 17:51:05,592 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251007 17:51:03.949" endtime="20251007 17:51:08.231"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:51:08.232" level="INFO">2025-10-07 17:51:05,592 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-07 17:51:05,830 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-07 17:51:05,852 [Thread-4] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:51:05,886 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:51:06,853 [Thread-4] INFO freon.ProgressBar: Progress: 17.00 % (17 out of 100)
2025-10-07 17:51:07,854 [Thread-4] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-07 17:51:07,886 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-write, count=100, min=7.534133, max=470.229956, mean=17.014821639954505, stddev=45.46227027762881, median=11.225644, p75=13.922581, p95=20.742243, p98=24.459351, p99=26.287689, p999=470.229956, mean_rate=54.04325495557341, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:51:07,887 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:51:07,887 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:51:07,887 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251007 17:51:08.231" endtime="20251007 17:51:08.232"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:51:08.233" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:51:08.232" endtime="20251007 17:51:08.233"/>
</kw>
<status status="PASS" starttime="20251007 17:51:03.949" endtime="20251007 17:51:08.233"/>
</kw>
<msg timestamp="20251007 17:51:08.233" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:51:03.948" endtime="20251007 17:51:08.233"/>
</kw>
<msg timestamp="20251007 17:51:08.233" level="INFO">${result} = 2025-10-07 17:51:05,592 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress...</msg>
<status status="PASS" starttime="20251007 17:51:03.948" endtime="20251007 17:51:08.233"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:51:08.233" endtime="20251007 17:51:08.234"/>
</kw>
<status status="PASS" starttime="20251007 17:51:03.947" endtime="20251007 17:51:08.234"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:51:03.947" endtime="20251007 17:51:08.234"/>
</test>
<doc>Test freon chunk generation commands</doc>
<status status="PASS" starttime="20251007 17:51:03.169" endtime="20251007 17:51:08.234"/>
</suite>
<suite id="s1-s10" name="Validate-Chunk" source="/opt/hadoop/smoketest/freon/validate-chunk.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:51:08.798" endtime="20251007 17:51:08.799"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:51:08.802" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:51:09.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:51:09.514" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:51:08.799" endtime="20251007 17:51:09.514"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:51:09.515" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:51:09.515" endtime="20251007 17:51:09.515"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:51:09.515" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:51:09.515" endtime="20251007 17:51:09.516"/>
</kw>
<status status="PASS" starttime="20251007 17:51:08.799" endtime="20251007 17:51:09.516"/>
</kw>
<msg timestamp="20251007 17:51:09.516" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:51:08.799" endtime="20251007 17:51:09.516"/>
</kw>
<msg timestamp="20251007 17:51:09.516" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:51:08.799" endtime="20251007 17:51:09.516"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:51:09.516" endtime="20251007 17:51:09.516"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:51:09.516" endtime="20251007 17:51:09.517"/>
</branch>
<status status="PASS" starttime="20251007 17:51:09.516" endtime="20251007 17:51:09.517"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:51:09.517" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:51:09.517" endtime="20251007 17:51:09.517"/>
</kw>
<status status="PASS" starttime="20251007 17:51:08.798" endtime="20251007 17:51:09.517"/>
</kw>
<test id="s1-s10-t1" name="DN Chunk Validator" line="28">
<kw name="Freon DCV" library="freon">
<arg>prefix=dcg${PREFIX}</arg>
<arg>n=100</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:51:09.519" endtime="20251007 17:51:09.519"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dcv -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:51:09.522" level="INFO">Running command 'ozone freon dcv -t 1 -n100 -p dcgpost  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:51:13.144" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:51:13.144" level="INFO">${output} = 2025-10-07 17:51:10,731 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-07 17:51:10,777 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ...</msg>
<status status="PASS" starttime="20251007 17:51:09.520" endtime="20251007 17:51:13.144"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:51:13.145" level="INFO">2025-10-07 17:51:10,731 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-07 17:51:10,777 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:51:11,209 [main] INFO proxy.SCMContainerLocationFailoverProxyProvider: Created fail-over proxy for protocol StorageContainerLocationProtocolPB with 1 nodes: [nodeId=scmNodeId,nodeAddress=scm/10.9.0.17:9860]
2025-10-07 17:51:11,432 [main] INFO freon.DatanodeChunkValidator: Using pipeline Pipeline-75b4389e-4608-4e79-9b3f-b80a57e5043f
2025-10-07 17:51:11,466 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:51:11,778 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:51:12,779 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-07 17:51:12,799 [shutdown-hook-0] INFO metrics: type=TIMER, name=chunk-validate, count=100, min=1.396871, max=4.190497, mean=1.9814033000000002, stddev=0.4260469746320821, median=1.883659, p75=2.058218, p95=2.613258, p98=3.025166, p99=3.82576, p999=4.190497, mean_rate=132.75321840729683, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:51:12,799 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 2
2025-10-07 17:51:12,799 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:51:12,799 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251007 17:51:13.145" endtime="20251007 17:51:13.145"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:51:13.146" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:51:13.145" endtime="20251007 17:51:13.146"/>
</kw>
<status status="PASS" starttime="20251007 17:51:09.519" endtime="20251007 17:51:13.146"/>
</kw>
<msg timestamp="20251007 17:51:13.146" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:51:09.519" endtime="20251007 17:51:13.146"/>
</kw>
<msg timestamp="20251007 17:51:13.146" level="INFO">${result} = 2025-10-07 17:51:10,731 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dcgpost and number-of-tests 100
2025-10-07 17:51:10,777 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 ...</msg>
<status status="PASS" starttime="20251007 17:51:09.519" endtime="20251007 17:51:13.146"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:51:13.146" endtime="20251007 17:51:13.147"/>
</kw>
<status status="PASS" starttime="20251007 17:51:09.518" endtime="20251007 17:51:13.147"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:51:09.517" endtime="20251007 17:51:13.147"/>
</test>
<doc>Test freon chunk validation commands</doc>
<status status="PASS" starttime="20251007 17:51:08.759" endtime="20251007 17:51:13.148"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="58048"/>
</suite>
<statistics>
<total>
<stat pass="14" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="14" fail="0" skip="0" id="s1" name="restart">restart</stat>
<stat pass="3" fail="0" skip="0" id="s1-s1" name="Generate">restart.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Validate">restart.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Generate-Chunk">restart.Generate-Chunk</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Validate-Chunk">restart.Validate-Chunk</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Validate">restart.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Validate-Chunk">restart.Validate-Chunk</stat>
<stat pass="3" fail="0" skip="0" id="s1-s7" name="Generate">restart.Generate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s8" name="Validate">restart.Validate</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Generate-Chunk">restart.Generate-Chunk</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Validate-Chunk">restart.Validate-Chunk</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
