<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251007 17:31:57.225" rpa="false" schemaversion="4">
<suite id="s1" name="ozone-topology">
<suite id="s1-s1" name="Basic" source="/opt/hadoop/smoketest/basic/basic.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:28:27.263" endtime="20251007 17:28:27.263"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:27.268" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:28.428" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:28.428" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:28:27.264" endtime="20251007 17:28:28.428"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:28.429" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:28:28.429" endtime="20251007 17:28:28.429"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:28.430" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:28.429" endtime="20251007 17:28:28.430"/>
</kw>
<status status="PASS" starttime="20251007 17:28:27.264" endtime="20251007 17:28:28.430"/>
</kw>
<msg timestamp="20251007 17:28:28.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:27.264" endtime="20251007 17:28:28.430"/>
</kw>
<msg timestamp="20251007 17:28:28.430" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:28:27.263" endtime="20251007 17:28:28.430"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:28:28.430" endtime="20251007 17:28:28.431"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:28:28.430" endtime="20251007 17:28:28.431"/>
</branch>
<status status="PASS" starttime="20251007 17:28:28.430" endtime="20251007 17:28:28.431"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:28:28.431" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:28:28.431" endtime="20251007 17:28:28.431"/>
</kw>
<status status="PASS" starttime="20251007 17:28:27.262" endtime="20251007 17:28:28.431"/>
</kw>
<test id="s1-s1-t1" name="Check webui static resources" line="30">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:28:28.432" endtime="20251007 17:28:28.432"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -s -I http://${SCM}:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:28.435" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:28.486" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:28.486" level="INFO">${output} = HTTP/1.1 200 OK
Date: Tue, 07 Oct 2025 17:28:28 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
Last-Modified: Wed, 12 Mar 2025 22:12:52 GMT
Content-Typ...</msg>
<status status="PASS" starttime="20251007 17:28:28.433" endtime="20251007 17:28:28.486"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:28.487" level="INFO">HTTP/1.1 200 OK
Date: Tue, 07 Oct 2025 17:28:28 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
Last-Modified: Wed, 12 Mar 2025 22:12:52 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" starttime="20251007 17:28:28.487" endtime="20251007 17:28:28.487"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:28.488" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:28.487" endtime="20251007 17:28:28.488"/>
</kw>
<status status="PASS" starttime="20251007 17:28:28.433" endtime="20251007 17:28:28.488"/>
</kw>
<msg timestamp="20251007 17:28:28.488" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:28.433" endtime="20251007 17:28:28.488"/>
</kw>
<msg timestamp="20251007 17:28:28.489" level="INFO">${result} = HTTP/1.1 200 OK
Date: Tue, 07 Oct 2025 17:28:28 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
Last-Modified: Wed, 12 Mar 2025 22:12:52 GMT
Content-Typ...</msg>
<status status="PASS" starttime="20251007 17:28:28.432" endtime="20251007 17:28:28.489"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:28.489" endtime="20251007 17:28:28.489"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:28.431" endtime="20251007 17:28:28.490"/>
</test>
<test id="s1-s1-t2" name="Basic Freon smoketest" line="35">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:28:28.491" endtime="20251007 17:28:28.491"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20251007 17:28:28.492" level="INFO">${random} = SDm40IpigK</msg>
<status status="PASS" starttime="20251007 17:28:28.491" endtime="20251007 17:28:28.492"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:28.498" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p SDm40IpigK  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:36.689" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:36.689" level="INFO">${output} = 2025-10-07 17:28:30,226 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SDm40IpigK and number-of-tests 1
2025-10-07 17:28:30,286 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0...</msg>
<status status="PASS" starttime="20251007 17:28:28.495" endtime="20251007 17:28:36.689"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:36.690" level="INFO">2025-10-07 17:28:30,226 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SDm40IpigK and number-of-tests 1
2025-10-07 17:28:30,286 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:31,286 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:32,287 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:33,287 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:33,919 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hadoop as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-07 17:28:34,043 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, hadoop as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-07 17:28:34,288 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:34,498 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:28:35,288 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:36,289 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:28:36,313 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=1734.063441, max=1734.063441, mean=1734.063441, stddev=0.0, median=1734.063441, p75=1734.063441, p95=1734.063441, p98=1734.063441, p99=1734.063441, p999=1734.063441, mean_rate=0.4558205952566258, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:28:36,314 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2025-10-07 17:28:36,314 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:28:36,314 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:28:36.689" endtime="20251007 17:28:36.690"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:36.690" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:36.690" endtime="20251007 17:28:36.690"/>
</kw>
<status status="PASS" starttime="20251007 17:28:28.494" endtime="20251007 17:28:36.690"/>
</kw>
<msg timestamp="20251007 17:28:36.691" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:28.494" endtime="20251007 17:28:36.691"/>
</kw>
<msg timestamp="20251007 17:28:36.691" level="INFO">${result} = 2025-10-07 17:28:30,226 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SDm40IpigK and number-of-tests 1
2025-10-07 17:28:30,286 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0...</msg>
<status status="PASS" starttime="20251007 17:28:28.493" endtime="20251007 17:28:36.691"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:36.691" endtime="20251007 17:28:36.691"/>
</kw>
<status status="PASS" starttime="20251007 17:28:28.492" endtime="20251007 17:28:36.691"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:36.695" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p SDm40IpigK  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:41.817" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:41.817" level="INFO">${output} = 2025-10-07 17:28:38,350 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SDm40IpigK and number-of-tests 1
2025-10-07 17:28:38,418 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0...</msg>
<status status="PASS" starttime="20251007 17:28:36.693" endtime="20251007 17:28:41.817"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:41.818" level="INFO">2025-10-07 17:28:38,350 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SDm40IpigK and number-of-tests 1
2025-10-07 17:28:38,418 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:39,419 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:40,376 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:28:40,419 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-10-07 17:28:41,420 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-10-07 17:28:41,436 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=25.576647, max=25.576647, mean=25.576647, stddev=0.0, median=25.576647, p75=25.576647, p95=25.576647, p98=25.576647, p99=25.576647, p999=25.576647, mean_rate=3.0672170620009895, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:28:41,436 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-07 17:28:41,436 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:28:41,436 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20251007 17:28:41.818" endtime="20251007 17:28:41.818"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:41.819" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:41.819" endtime="20251007 17:28:41.819"/>
</kw>
<status status="PASS" starttime="20251007 17:28:36.693" endtime="20251007 17:28:41.819"/>
</kw>
<msg timestamp="20251007 17:28:41.819" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:36.693" endtime="20251007 17:28:41.819"/>
</kw>
<msg timestamp="20251007 17:28:41.819" level="INFO">${result} = 2025-10-07 17:28:38,350 [main] INFO freon.BaseFreonGenerator: Executing test with prefix SDm40IpigK and number-of-tests 1
2025-10-07 17:28:38,418 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0...</msg>
<status status="PASS" starttime="20251007 17:28:36.692" endtime="20251007 17:28:41.819"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:41.819" endtime="20251007 17:28:41.820"/>
</kw>
<status status="PASS" starttime="20251007 17:28:36.691" endtime="20251007 17:28:41.820"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:28.490" endtime="20251007 17:28:41.820"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251007 17:28:27.203" endtime="20251007 17:28:41.821"/>
</suite>
<suite id="s1-s2" name="Cli" source="/opt/hadoop/smoketest/topology/cli.robot">
<test id="s1-s2-t1" name="Run printTopology" line="34">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin printTopology</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:42.369" level="INFO">Running command 'ozone admin printTopology 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:44.437" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:44.437" level="INFO">${output} = State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /ra...</msg>
<status status="PASS" starttime="20251007 17:28:42.367" endtime="20251007 17:28:44.437"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:44.438" level="INFO">State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1
 10.5.0.8(ozone-topology-datanode_5-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.7(ozone-topology-datanode_4-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.4(ozone-topology-datanode_1-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1
 10.5.0.9(ozone-topology-datanode_6-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.5(ozone-topology-datanode_2-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1</msg>
<status status="PASS" starttime="20251007 17:28:44.437" endtime="20251007 17:28:44.438"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:44.439" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:44.438" endtime="20251007 17:28:44.439"/>
</kw>
<status status="PASS" starttime="20251007 17:28:42.366" endtime="20251007 17:28:44.439"/>
</kw>
<msg timestamp="20251007 17:28:44.439" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:42.366" endtime="20251007 17:28:44.439"/>
</kw>
<msg timestamp="20251007 17:28:44.439" level="INFO">${output} = State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /ra...</msg>
<status status="PASS" starttime="20251007 17:28:42.366" endtime="20251007 17:28:44.439"/>
</kw>
<kw name="Validate PrintTopology Output">
<arg>${output}</arg>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>State = HEALTHY</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:44.440" endtime="20251007 17:28:44.440"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>IN_SERVICE</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:44.440" endtime="20251007 17:28:44.441"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>.*ozone.*datanode[-_]\\d+.*IN_SERVICE.*rack.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:28:44.441" endtime="20251007 17:28:44.441"/>
</kw>
<status status="PASS" starttime="20251007 17:28:44.439" endtime="20251007 17:28:44.441"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:42.365" endtime="20251007 17:28:44.441"/>
</test>
<test id="s1-s2-t2" name="Run printTopology -o" line="38">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin printTopology -o</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:44.445" level="INFO">Running command 'ozone admin printTopology -o 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:46.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:46.626" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net) IN_SERVICE
 10.5.0.4(ozone-topology-datanode_1-1.ozone-topology_net) IN_SERVICE
 10.5.0.5(ozone-topology-data...</msg>
<status status="PASS" starttime="20251007 17:28:44.443" endtime="20251007 17:28:46.626"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:46.627" level="INFO">State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net) IN_SERVICE
 10.5.0.4(ozone-topology-datanode_1-1.ozone-topology_net) IN_SERVICE
 10.5.0.5(ozone-topology-datanode_2-1.ozone-topology_net) IN_SERVICE
Location: /rack2
 10.5.0.8(ozone-topology-datanode_5-1.ozone-topology_net) IN_SERVICE
 10.5.0.7(ozone-topology-datanode_4-1.ozone-topology_net) IN_SERVICE
 10.5.0.9(ozone-topology-datanode_6-1.ozone-topology_net) IN_SERVICE</msg>
<status status="PASS" starttime="20251007 17:28:46.626" endtime="20251007 17:28:46.627"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:46.627" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:46.627" endtime="20251007 17:28:46.627"/>
</kw>
<status status="PASS" starttime="20251007 17:28:44.443" endtime="20251007 17:28:46.627"/>
</kw>
<msg timestamp="20251007 17:28:46.627" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:44.443" endtime="20251007 17:28:46.628"/>
</kw>
<msg timestamp="20251007 17:28:46.628" level="INFO">${output} = State = HEALTHY
Location: /rack1
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net) IN_SERVICE
 10.5.0.4(ozone-topology-datanode_1-1.ozone-topology_net) IN_SERVICE
 10.5.0.5(ozone-topology-data...</msg>
<status status="PASS" starttime="20251007 17:28:44.442" endtime="20251007 17:28:46.628"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>Location: /.*rack.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:28:46.628" endtime="20251007 17:28:46.628"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>.*ozone.*datanode[-_]\\d+.*IN_SERVICE.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:28:46.628" endtime="20251007 17:28:46.629"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:44.442" endtime="20251007 17:28:46.629"/>
</test>
<test id="s1-s2-t3" name="Run printTopology --operational-state IN_SERVICE" line="43">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin printTopology --operational-state IN_SERVICE</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:46.633" level="INFO">Running command 'ozone admin printTopology --operational-state IN_SERVICE 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:48.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:48.763" level="INFO">${output} = State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /ra...</msg>
<status status="PASS" starttime="20251007 17:28:46.631" endtime="20251007 17:28:48.763"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:48.764" level="INFO">State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1
 10.5.0.8(ozone-topology-datanode_5-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.7(ozone-topology-datanode_4-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.4(ozone-topology-datanode_1-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1
 10.5.0.9(ozone-topology-datanode_6-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.5(ozone-topology-datanode_2-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1</msg>
<status status="PASS" starttime="20251007 17:28:48.763" endtime="20251007 17:28:48.764"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:48.764" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:48.764" endtime="20251007 17:28:48.764"/>
</kw>
<status status="PASS" starttime="20251007 17:28:46.630" endtime="20251007 17:28:48.764"/>
</kw>
<msg timestamp="20251007 17:28:48.764" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:46.630" endtime="20251007 17:28:48.765"/>
</kw>
<msg timestamp="20251007 17:28:48.765" level="INFO">${output} = State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /ra...</msg>
<status status="PASS" starttime="20251007 17:28:46.630" endtime="20251007 17:28:48.765"/>
</kw>
<kw name="Validate PrintTopology Output">
<arg>${output}</arg>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>State = HEALTHY</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:48.765" endtime="20251007 17:28:48.766"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>IN_SERVICE</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:48.766" endtime="20251007 17:28:48.766"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>.*ozone.*datanode[-_]\\d+.*IN_SERVICE.*rack.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:28:48.766" endtime="20251007 17:28:48.766"/>
</kw>
<status status="PASS" starttime="20251007 17:28:48.765" endtime="20251007 17:28:48.766"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:46.629" endtime="20251007 17:28:48.766"/>
</test>
<test id="s1-s2-t4" name="Run printTopology --node-state HEALTHY" line="47">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin printTopology --node-state HEALTHY</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:48.770" level="INFO">Running command 'ozone admin printTopology --node-state HEALTHY 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:50.986" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:50.986" level="INFO">${output} = State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /ra...</msg>
<status status="PASS" starttime="20251007 17:28:48.768" endtime="20251007 17:28:50.986"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:50.987" level="INFO">State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1
 10.5.0.8(ozone-topology-datanode_5-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.7(ozone-topology-datanode_4-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.4(ozone-topology-datanode_1-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1
 10.5.0.9(ozone-topology-datanode_6-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack2
 10.5.0.5(ozone-topology-datanode_2-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /rack1</msg>
<status status="PASS" starttime="20251007 17:28:50.987" endtime="20251007 17:28:50.987"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:50.988" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:50.987" endtime="20251007 17:28:50.988"/>
</kw>
<status status="PASS" starttime="20251007 17:28:48.768" endtime="20251007 17:28:50.988"/>
</kw>
<msg timestamp="20251007 17:28:50.988" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:48.767" endtime="20251007 17:28:50.988"/>
</kw>
<msg timestamp="20251007 17:28:50.988" level="INFO">${output} = State = HEALTHY
 10.5.0.6(ozone-topology-datanode_3-1.ozone-topology_net):HTTP=9882,CLIENT_RPC=19864,REPLICATION=9886,RATIS=9858,RATIS_ADMIN=9857,RATIS_SERVER=9856,STANDALONE=9859    IN_SERVICE    /ra...</msg>
<status status="PASS" starttime="20251007 17:28:48.767" endtime="20251007 17:28:50.988"/>
</kw>
<kw name="Validate PrintTopology Output">
<arg>${output}</arg>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>State = HEALTHY</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:50.989" endtime="20251007 17:28:50.989"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>IN_SERVICE</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:28:50.989" endtime="20251007 17:28:50.989"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>.*ozone.*datanode[-_]\\d+.*IN_SERVICE.*rack.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:28:50.989" endtime="20251007 17:28:50.990"/>
</kw>
<status status="PASS" starttime="20251007 17:28:50.988" endtime="20251007 17:28:50.990"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:48.767" endtime="20251007 17:28:50.990"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251007 17:28:42.330" endtime="20251007 17:28:50.991"/>
</suite>
<suite id="s1-s3" name="Recon" source="/opt/hadoop/smoketest/recon">
<suite id="s1-s3-s1" name="Recon-Api" source="/opt/hadoop/smoketest/recon/recon-api.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:28:51.549" endtime="20251007 17:28:51.549"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:51.552" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:52.462" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:52.462" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20251007 17:28:51.550" endtime="20251007 17:28:52.463"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:52.463" level="INFO">false</msg>
<status status="PASS" starttime="20251007 17:28:52.463" endtime="20251007 17:28:52.463"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:52.464" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:52.463" endtime="20251007 17:28:52.464"/>
</kw>
<status status="PASS" starttime="20251007 17:28:51.550" endtime="20251007 17:28:52.464"/>
</kw>
<msg timestamp="20251007 17:28:52.464" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:51.549" endtime="20251007 17:28:52.464"/>
</kw>
<msg timestamp="20251007 17:28:52.464" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20251007 17:28:51.549" endtime="20251007 17:28:52.464"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:28:52.465" endtime="20251007 17:28:52.465"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:28:52.464" endtime="20251007 17:28:52.465"/>
</branch>
<status status="PASS" starttime="20251007 17:28:52.464" endtime="20251007 17:28:52.465"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251007 17:28:52.465" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20251007 17:28:52.465" endtime="20251007 17:28:52.465"/>
</kw>
<status status="PASS" starttime="20251007 17:28:51.548" endtime="20251007 17:28:52.465"/>
</kw>
<test id="s1-s3-s1-t1" name="Check if Recon picks up OM data" line="73">
<kw name="Execute" library="os">
<arg>ozone sh volume create recon</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:52.470" level="INFO">Running command 'ozone sh volume create recon 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:55.369" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:55.369" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:28:52.467" endtime="20251007 17:28:55.369"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:55.370" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:28:55.369" endtime="20251007 17:28:55.370"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:55.370" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:55.370" endtime="20251007 17:28:55.370"/>
</kw>
<status status="PASS" starttime="20251007 17:28:52.467" endtime="20251007 17:28:55.370"/>
</kw>
<msg timestamp="20251007 17:28:55.370" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:52.467" endtime="20251007 17:28:55.371"/>
</kw>
<status status="PASS" starttime="20251007 17:28:52.466" endtime="20251007 17:28:55.371"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create recon/api --layout=LEGACY</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:55.374" level="INFO">Running command 'ozone sh bucket create recon/api --layout=LEGACY 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:28:58.319" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:28:58.319" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:28:55.372" endtime="20251007 17:28:58.319"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:28:58.320" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:28:58.319" endtime="20251007 17:28:58.320"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:28:58.320" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:28:58.320" endtime="20251007 17:28:58.320"/>
</kw>
<status status="PASS" starttime="20251007 17:28:55.371" endtime="20251007 17:28:58.320"/>
</kw>
<msg timestamp="20251007 17:28:58.320" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:55.371" endtime="20251007 17:28:58.320"/>
</kw>
<status status="PASS" starttime="20251007 17:28:55.371" endtime="20251007 17:28:58.321"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>n=10</arg>
<arg>args=-s 1025 -v recon -b api</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:28:58.324" level="INFO">Running command 'ozone freon ockg  -t 1 -n10 -p ockg -s 1025 -v recon -b api 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:04.484" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:04.484" level="INFO">${output} = 2025-10-07 17:28:59,996 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 10
2025-10-07 17:29:00,057 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out ...</msg>
<status status="PASS" starttime="20251007 17:28:58.322" endtime="20251007 17:29:04.484"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:04.485" level="INFO">2025-10-07 17:28:59,996 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 10
2025-10-07 17:29:00,057 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 10)
2025-10-07 17:29:01,058 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 10)
2025-10-07 17:29:01,735 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:29:02,059 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 10)
2025-10-07 17:29:03,059 [Thread-5] INFO freon.ProgressBar: Progress: 10.00 % (1 out of 10)
2025-10-07 17:29:04,060 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (10 out of 10)
2025-10-07 17:29:04,093 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=10, min=42.351395, max=1315.451309, mean=205.24803476002378, stddev=377.87970661090225, median=49.189157, p75=61.679806, p95=1315.451309, p98=1315.451309, p99=1315.451309, p999=1315.451309, mean_rate=3.9469921293645682, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:29:04,093 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 4
2025-10-07 17:29:04,093 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:29:04,093 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 10</msg>
<status status="PASS" starttime="20251007 17:29:04.485" endtime="20251007 17:29:04.485"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:04.486" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:04.486" endtime="20251007 17:29:04.486"/>
</kw>
<status status="PASS" starttime="20251007 17:28:58.322" endtime="20251007 17:29:04.486"/>
</kw>
<msg timestamp="20251007 17:29:04.486" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:28:58.321" endtime="20251007 17:29:04.486"/>
</kw>
<msg timestamp="20251007 17:29:04.486" level="INFO">${result} = 2025-10-07 17:28:59,996 [main] INFO freon.BaseFreonGenerator: Executing test with prefix ockg and number-of-tests 10
2025-10-07 17:29:00,057 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out ...</msg>
<status status="PASS" starttime="20251007 17:28:58.321" endtime="20251007 17:29:04.486"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:04.487" endtime="20251007 17:29:04.487"/>
</kw>
<status status="PASS" starttime="20251007 17:28:58.321" endtime="20251007 17:29:04.487"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Check if Recon picks up container from OM</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check if Recon picks up container from OM">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit as ozone admin</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:04.488" endtime="20251007 17:29:04.488"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/containers</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:04.491" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:04.592" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:04.592" level="INFO">${output} = {"data":{"totalCount":3,"prevKey":3,"containers":[{"ContainerID":1,"NumberOfKeys":0,"pipelines":null},{"ContainerID":2,"NumberOfKeys":0,"pipelines":null},{"ContainerID":3,"NumberOfKeys":0,"pipelines":...</msg>
<status status="PASS" starttime="20251007 17:29:04.489" endtime="20251007 17:29:04.592"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:04.593" level="INFO">{"data":{"totalCount":3,"prevKey":3,"containers":[{"ContainerID":1,"NumberOfKeys":0,"pipelines":null},{"ContainerID":2,"NumberOfKeys":0,"pipelines":null},{"ContainerID":3,"NumberOfKeys":0,"pipelines":null}]}}</msg>
<status status="PASS" starttime="20251007 17:29:04.592" endtime="20251007 17:29:04.593"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:04.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:04.593" endtime="20251007 17:29:04.594"/>
</kw>
<status status="PASS" starttime="20251007 17:29:04.488" endtime="20251007 17:29:04.594"/>
</kw>
<msg timestamp="20251007 17:29:04.594" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:04.488" endtime="20251007 17:29:04.594"/>
</kw>
<msg timestamp="20251007 17:29:04.594" level="INFO">${result} = {"data":{"totalCount":3,"prevKey":3,"containers":[{"ContainerID":1,"NumberOfKeys":0,"pipelines":null},{"ContainerID":2,"NumberOfKeys":0,"pipelines":null},{"ContainerID":3,"NumberOfKeys":0,"pipelines":...</msg>
<status status="PASS" starttime="20251007 17:29:04.488" endtime="20251007 17:29:04.594"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"ContainerID\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:04.594" endtime="20251007 17:29:04.594"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/utilization/fileCount</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:04.598" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/utilization/fileCount 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:04.616" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:04.616" level="INFO">${output} = []</msg>
<status status="PASS" starttime="20251007 17:29:04.596" endtime="20251007 17:29:04.617"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:04.617" level="INFO">[]</msg>
<status status="PASS" starttime="20251007 17:29:04.617" endtime="20251007 17:29:04.617"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:04.618" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:04.617" endtime="20251007 17:29:04.618"/>
</kw>
<status status="PASS" starttime="20251007 17:29:04.595" endtime="20251007 17:29:04.618"/>
</kw>
<msg timestamp="20251007 17:29:04.618" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:04.595" endtime="20251007 17:29:04.618"/>
</kw>
<msg timestamp="20251007 17:29:04.618" level="INFO">${result} = []</msg>
<status status="PASS" starttime="20251007 17:29:04.594" endtime="20251007 17:29:04.618"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"fileSize\":2048,\"count\":10</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20251007 17:29:04.619" level="FAIL">'[]' does not contain '"fileSize":2048,"count":10'</msg>
<status status="FAIL" starttime="20251007 17:29:04.618" endtime="20251007 17:29:04.619"/>
</kw>
<status status="FAIL" starttime="20251007 17:29:04.487" endtime="20251007 17:29:04.619"/>
</kw>
<kw name="Check if Recon picks up container from OM">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit as ozone admin</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.620" endtime="20251007 17:29:14.620"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/containers</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.623" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.634" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.635" level="INFO">${output} = {"data":{"totalCount":3,"prevKey":3,"containers":[{"ContainerID":1,"NumberOfKeys":0,"pipelines":null},{"ContainerID":2,"NumberOfKeys":0,"pipelines":null},{"ContainerID":3,"NumberOfKeys":0,"pipelines":...</msg>
<status status="PASS" starttime="20251007 17:29:14.621" endtime="20251007 17:29:14.635"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.635" level="INFO">{"data":{"totalCount":3,"prevKey":3,"containers":[{"ContainerID":1,"NumberOfKeys":0,"pipelines":null},{"ContainerID":2,"NumberOfKeys":0,"pipelines":null},{"ContainerID":3,"NumberOfKeys":0,"pipelines":null}]}}</msg>
<status status="PASS" starttime="20251007 17:29:14.635" endtime="20251007 17:29:14.636"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.636" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.636" endtime="20251007 17:29:14.636"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.621" endtime="20251007 17:29:14.636"/>
</kw>
<msg timestamp="20251007 17:29:14.636" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.620" endtime="20251007 17:29:14.636"/>
</kw>
<msg timestamp="20251007 17:29:14.636" level="INFO">${result} = {"data":{"totalCount":3,"prevKey":3,"containers":[{"ContainerID":1,"NumberOfKeys":0,"pipelines":null},{"ContainerID":2,"NumberOfKeys":0,"pipelines":null},{"ContainerID":3,"NumberOfKeys":0,"pipelines":...</msg>
<status status="PASS" starttime="20251007 17:29:14.620" endtime="20251007 17:29:14.636"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"ContainerID\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.636" endtime="20251007 17:29:14.637"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/utilization/fileCount</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.640" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/utilization/fileCount 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.651" level="INFO">${output} = [{"volume":"recon","bucket":"api","fileSize":2048,"count":10},{"volume":"vol1","bucket":"bucket1","fileSize":16384,"count":1}]</msg>
<status status="PASS" starttime="20251007 17:29:14.638" endtime="20251007 17:29:14.651"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.652" level="INFO">[{"volume":"recon","bucket":"api","fileSize":2048,"count":10},{"volume":"vol1","bucket":"bucket1","fileSize":16384,"count":1}]</msg>
<status status="PASS" starttime="20251007 17:29:14.651" endtime="20251007 17:29:14.652"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.652" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.652" endtime="20251007 17:29:14.652"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.637" endtime="20251007 17:29:14.652"/>
</kw>
<msg timestamp="20251007 17:29:14.653" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.637" endtime="20251007 17:29:14.653"/>
</kw>
<msg timestamp="20251007 17:29:14.653" level="INFO">${result} = [{"volume":"recon","bucket":"api","fileSize":2048,"count":10},{"volume":"vol1","bucket":"bucket1","fileSize":16384,"count":1}]</msg>
<status status="PASS" starttime="20251007 17:29:14.637" endtime="20251007 17:29:14.653"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"fileSize\":2048,\"count\":10</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.653" endtime="20251007 17:29:14.653"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.619" endtime="20251007 17:29:14.653"/>
</kw>
<status status="PASS" starttime="20251007 17:29:04.487" endtime="20251007 17:29:14.653"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Check if the listKeys api responds OK</arg>
<arg>recon</arg>
<arg>api</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Check if the listKeys api responds OK">
<arg>recon</arg>
<arg>api</arg>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit as ozone admin</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.654" endtime="20251007 17:29:14.654"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/keys/listKeys?startPrefix=/${volume}/${bucket}&amp;limit=1000</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.657" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/keys/listKeys?startPrefix=/recon/api&amp;limit=1000 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.699" level="INFO">${output} = {"status":"OK","path":"/recon/api","replicatedDataSize":30750,"unReplicatedDataSize":10250,"lastKey":"/recon/api/ockg/9","keys":[{"volumeName":"recon","bucketName":"api","keyName":"ockg/0","dataSize":...</msg>
<status status="PASS" starttime="20251007 17:29:14.655" endtime="20251007 17:29:14.699"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.700" level="INFO">{"status":"OK","path":"/recon/api","replicatedDataSize":30750,"unReplicatedDataSize":10250,"lastKey":"/recon/api/ockg/9","keys":[{"volumeName":"recon","bucketName":"api","keyName":"ockg/0","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858141583,"modificationTime":1759858142869,"key":"/recon/api/ockg/0","path":"recon/api/ockg/0","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/1","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858142886,"modificationTime":1759858143221,"key":"/recon/api/ockg/1","path":"recon/api/ockg/1","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/2","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143231,"modificationTime":1759858143283,"key":"/recon/api/ockg/2","path":"recon/api/ockg/2","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/3","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143293,"modificationTime":1759858143341,"key":"/recon/api/ockg/3","path":"recon/api/ockg/3","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/4","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143350,"modificationTime":1759858143387,"key":"/recon/api/ockg/4","path":"recon/api/ockg/4","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/5","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143398,"modificationTime":1759858143437,"key":"/recon/api/ockg/5","path":"recon/api/ockg/5","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/6","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143447,"modificationTime":1759858143485,"key":"/recon/api/ockg/6","path":"recon/api/ockg/6","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/7","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143494,"modificationTime":1759858143536,"key":"/recon/api/ockg/7","path":"recon/api/ockg/7","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/8","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143546,"modificationTime":1759858143586,"key":"/recon/api/ockg/8","path":"recon/api/ockg/8","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025},{"volumeName":"recon","bucketName":"api","keyName":"ockg/9","dataSize":1025,"parentId":0,"file":true,"creationTime":1759858143595,"modificationTime":1759858143628,"key":"/recon/api/ockg/9","path":"recon/api/ockg/9","replicatedSize":3075,"replicationInfo":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"isKey":true,"size":1025}]}</msg>
<status status="PASS" starttime="20251007 17:29:14.699" endtime="20251007 17:29:14.700"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.701" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.700" endtime="20251007 17:29:14.701"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.655" endtime="20251007 17:29:14.701"/>
</kw>
<msg timestamp="20251007 17:29:14.701" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.655" endtime="20251007 17:29:14.701"/>
</kw>
<msg timestamp="20251007 17:29:14.701" level="INFO">${result} = {"status":"OK","path":"/recon/api","replicatedDataSize":30750,"unReplicatedDataSize":10250,"lastKey":"/recon/api/ockg/9","keys":[{"volumeName":"recon","bucketName":"api","keyName":"ockg/0","dataSize":...</msg>
<status status="PASS" starttime="20251007 17:29:14.654" endtime="20251007 17:29:14.701"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>"OK"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.701" endtime="20251007 17:29:14.702"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>"keys"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.702" endtime="20251007 17:29:14.702"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>"${volume}"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.702" endtime="20251007 17:29:14.702"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>"${bucket}"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.703" endtime="20251007 17:29:14.703"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.654" endtime="20251007 17:29:14.703"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.653" endtime="20251007 17:29:14.703"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:28:52.466" endtime="20251007 17:29:14.703"/>
</test>
<test id="s1-s3-s1-t2" name="Check if Recon picks up DN heartbeats" line="84">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/datanodes</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.707" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/datanodes 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.736" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.736" level="INFO">${output} = {"totalCount":6,"datanodes":[{"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","hostname":"ozone-topology-datanode_6-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858...</msg>
<status status="PASS" starttime="20251007 17:29:14.705" endtime="20251007 17:29:14.737"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.738" level="INFO">{"totalCount":6,"datanodes":[{"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","hostname":"ozone-topology-datanode_6-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858143109,"storageReport":{"capacity":76879465972,"used":4382720,"remaining":20651425792,"committed":0},"pipelines":[{"pipelineID":"f6c2b71b-f5c2-447c-af05-5a83c3560254","replicationType":"RATIS","replicationFactor":"ONE","leaderNode":"ozone-topology-datanode_6-1.ozone-topology_net"},{"pipelineID":"8dd72b44-f097-412a-9b6d-e4f20fc19939","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_6-1.ozone-topology_net"}],"containers":1,"openContainers":1,"leaderCount":2,"version":"2.1.0-SNAPSHOT","setupTime":1759858062744,"revision":"01a7a3b3d9e7ac87c08a6f49a855f22d795c3899","layoutVersion":9,"networkLocation":"/default-rack"},{"uuid":"994b640c-841b-4d6d-a1bc-a486cc6257ca","hostname":"ozone-topology-datanode_3-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858136320,"storageReport":{"capacity":76879465972,"used":4382720,"remaining":20651429888,"committed":0},"pipelines":[{"pipelineID":"3829a85f-e01b-4cda-b6ac-6b0ca226b3fd","replicationType":"RATIS","replicationFactor":"ONE","leaderNode":"ozone-topology-datanode_3-1.ozone-topology_net"}],"leaderCount":1,"version":"2.1.0-SNAPSHOT","setupTime":1759858063361,"revision":"01a7a3b3d9e7ac87c08a6f49a855f22d795c3899","layoutVersion":9,"networkLocation":"/default-rack"},{"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","hostname":"ozone-topology-datanode_5-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858142529,"storageReport":{"capacity":76879465972,"used":4382720,"remaining":20651429888,"committed":0},"pipelines":[{"pipelineID":"2e0289e1-4bb1-4dcf-a302-2979a54a2d5f","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_5-1.ozone-topology_net"},{"pipelineID":"63f20fbe-7062-4adf-8bc1-8c8050e796d2","replicationType":"RATIS","replicationFactor":"ONE","leaderNode":"ozone-topology-datanode_5-1.ozone-topology_net"},{"pipelineID":"66d6f663-46f3-45df-ab70-87b255d3d9d1","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_1-1.ozone-topology_net"}],"containers":2,"openContainers":2,"leaderCount":2,"version":"2.1.0-SNAPSHOT","setupTime":1759858063212,"revision":"01a7a3b3d9e7ac87c08a6f49a855f22d795c3899","layoutVersion":9,"networkLocation":"/default-rack"},{"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","hostname":"ozone-topology-datanode_1-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858142559,"storageReport":{"capacity":76879465972,"used":4392960,"remaining":20651427840,"committed":268425216},"pipelines":[{"pipelineID":"2e0289e1-4bb1-4dcf-a302-2979a54a2d5f","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_5-1.ozone-topology_net"},{"pipelineID":"66d6f663-46f3-45df-ab70-87b255d3d9d1","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_1-1.ozone-topology_net"},{"pipelineID":"e23ea7fc-2b42-4cdb-84b6-1e8774b0f265","replicationType":"RATIS","replicationFactor":"ONE","leaderNode":"ozone-topology-datanode_1-1.ozone-topology_net"}],"containers":2,"openContainers":2,"leaderCount":2,"version":"2.1.0-SNAPSHOT","setupTime":1759858062854,"revision":"01a7a3b3d9e7ac87c08a6f49a855f22d795c3899","layoutVersion":9,"networkLocation":"/default-rack"},{"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","hostname":"ozone-topology-datanode_2-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858143024,"storageReport":{"capacity":76879465972,"used":4392960,"remaining":20651419648,"committed":268425216},"pipelines":[{"pipelineID":"0605d502-de80-44e3-8605-05a27de16c4a","replicationType":"RATIS","replicationFactor":"ONE","leaderNode":"ozone-topology-datanode_2-1.ozone-topology_net"},{"pipelineID":"66d6f663-46f3-45df-ab70-87b255d3d9d1","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_1-1.ozone-topology_net"},{"pipelineID":"8dd72b44-f097-412a-9b6d-e4f20fc19939","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_6-1.ozone-topology_net"}],"containers":2,"openContainers":2,"leaderCount":1,"version":"2.1.0-SNAPSHOT","setupTime":1759858062874,"revision":"01a7a3b3d9e7ac87c08a6f49a855f22d795c3899","layoutVersion":9,"networkLocation":"/default-rack"},{"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","hostname":"ozone-topology-datanode_4-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858143038,"storageReport":{"capacity":76879465972,"used":4382720,"remaining":20651429888,"committed":0},"pipelines":[{"pipelineID":"2d704c54-51c8-40b1-bc29-3f0bebd8b0b4","replicationType":"RATIS","replicationFactor":"ONE","leaderNode":"ozone-topology-datanode_4-1.ozone-topology_net"},{"pipelineID":"2e0289e1-4bb1-4dcf-a302-2979a54a2d5f","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_5-1.ozone-topology_net"},{"pipelineID":"8dd72b44-f097-412a-9b6d-e4f20fc19939","replicationType":"RATIS","replicationFactor":"THREE","leaderNode":"ozone-topology-datanode_6-1.ozone-topology_net"}],"containers":2,"openContainers":2,"leaderCount":1,"version":"2.1.0-SNAPSHOT","setupTime":1759858063639,"revision":"01a7a3b3d9e7ac87c08a6f49a855f22d795c3899","layoutVersion":9,"networkLocation":"/default-rack"}]}</msg>
<status status="PASS" starttime="20251007 17:29:14.737" endtime="20251007 17:29:14.738"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.738" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.738" endtime="20251007 17:29:14.738"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.705" endtime="20251007 17:29:14.738"/>
</kw>
<msg timestamp="20251007 17:29:14.738" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.705" endtime="20251007 17:29:14.739"/>
</kw>
<msg timestamp="20251007 17:29:14.739" level="INFO">${result} = {"totalCount":6,"datanodes":[{"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","hostname":"ozone-topology-datanode_6-1.ozone-topology_net","state":"HEALTHY","opState":"IN_SERVICE","lastHeartbeat":1759858...</msg>
<status status="PASS" starttime="20251007 17:29:14.704" endtime="20251007 17:29:14.739"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>datanodes</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.739" endtime="20251007 17:29:14.739"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${result}</arg>
<arg>datanode[-_]1</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:29:14.739" endtime="20251007 17:29:14.740"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${result}</arg>
<arg>datanode[-_]2</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:29:14.740" endtime="20251007 17:29:14.740"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${result}</arg>
<arg>datanode[-_]3</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:29:14.740" endtime="20251007 17:29:14.740"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/pipelines</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.744" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/pipelines 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.780" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.780" level="INFO">${output} = {"totalCount":9,"pipelines":[{"pipelineId":"2d704c54-51c8-40b1-bc29-3f0bebd8b0b4","status":"OPEN","leaderNode":"ozone-topology-datanode_4-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"c...</msg>
<status status="PASS" starttime="20251007 17:29:14.741" endtime="20251007 17:29:14.780"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.781" level="INFO">{"totalCount":9,"pipelines":[{"pipelineId":"2d704c54-51c8-40b1-bc29-3f0bebd8b0b4","status":"OPEN","leaderNode":"ozone-topology-datanode_4-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","id":"047aa5f1-1b48-480b-9b50-3b671348cd79","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.7","hostName":"ozone-topology-datanode_4-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"047aa5f1-1b48-480b-9b50-3b671348cd79","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_4-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.7","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"047aa5f1-1b48-480b-9b50-3b671348cd79","networkLocation":"/rack2","networkFullPath":"/rack2/047aa5f1-1b48-480b-9b50-3b671348cd79","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"047aa5f1-1b48-480b-9b50-3b671348cd79","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":58269,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"ONE","containers":0},{"pipelineId":"2e0289e1-4bb1-4dcf-a302-2979a54a2d5f","status":"OPEN","leaderNode":"ozone-topology-datanode_5-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","id":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.8","hostName":"ozone-topology-datanode_5-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_5-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.8","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","networkLocation":"/rack2","networkFullPath":"/rack2/b2addca2-6a32-4a46-bdad-d93cdc7bf167","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","bytes":{"validUtf8":true,"empty":false}}},{"level":3,"parent":null,"cost":0,"id":{"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","id":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.4","hostName":"ozone-topology-datanode_1-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_1-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.4","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","networkLocation":"/rack1","networkFullPath":"/rack1/3c7932e8-3bb5-4711-9abd-01d503c4fb65","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","bytes":{"validUtf8":true,"empty":false}}},{"level":3,"parent":null,"cost":0,"id":{"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","id":"047aa5f1-1b48-480b-9b50-3b671348cd79","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.7","hostName":"ozone-topology-datanode_4-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"047aa5f1-1b48-480b-9b50-3b671348cd79","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_4-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.7","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"047aa5f1-1b48-480b-9b50-3b671348cd79","networkLocation":"/rack2","networkFullPath":"/rack2/047aa5f1-1b48-480b-9b50-3b671348cd79","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"047aa5f1-1b48-480b-9b50-3b671348cd79","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":57938,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"THREE","containers":1},{"pipelineId":"f6c2b71b-f5c2-447c-af05-5a83c3560254","status":"OPEN","leaderNode":"ozone-topology-datanode_6-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","id":"6f448d6f-f1c8-4a56-9cde-fca51c791814","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.9","hostName":"ozone-topology-datanode_6-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"6f448d6f-f1c8-4a56-9cde-fca51c791814","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_6-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.9","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"6f448d6f-f1c8-4a56-9cde-fca51c791814","networkLocation":"/rack2","networkFullPath":"/rack2/6f448d6f-f1c8-4a56-9cde-fca51c791814","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"6f448d6f-f1c8-4a56-9cde-fca51c791814","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":57328,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"ONE","containers":0},{"pipelineId":"63f20fbe-7062-4adf-8bc1-8c8050e796d2","status":"OPEN","leaderNode":"ozone-topology-datanode_5-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","id":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.8","hostName":"ozone-topology-datanode_5-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_5-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.8","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","networkLocation":"/rack2","networkFullPath":"/rack2/b2addca2-6a32-4a46-bdad-d93cdc7bf167","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":57970,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"ONE","containers":0},{"pipelineId":"0605d502-de80-44e3-8605-05a27de16c4a","status":"OPEN","leaderNode":"ozone-topology-datanode_2-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","id":"75abf3b8-6dac-464f-90d2-4ca2660be256","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.5","hostName":"ozone-topology-datanode_2-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"75abf3b8-6dac-464f-90d2-4ca2660be256","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_2-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.5","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"75abf3b8-6dac-464f-90d2-4ca2660be256","networkLocation":"/rack1","networkFullPath":"/rack1/75abf3b8-6dac-464f-90d2-4ca2660be256","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"75abf3b8-6dac-464f-90d2-4ca2660be256","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":58399,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"ONE","containers":0},{"pipelineId":"66d6f663-46f3-45df-ab70-87b255d3d9d1","status":"OPEN","leaderNode":"ozone-topology-datanode_1-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","id":"75abf3b8-6dac-464f-90d2-4ca2660be256","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.5","hostName":"ozone-topology-datanode_2-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"75abf3b8-6dac-464f-90d2-4ca2660be256","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_2-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.5","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"75abf3b8-6dac-464f-90d2-4ca2660be256","networkLocation":"/rack1","networkFullPath":"/rack1/75abf3b8-6dac-464f-90d2-4ca2660be256","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"75abf3b8-6dac-464f-90d2-4ca2660be256","bytes":{"validUtf8":true,"empty":false}}},{"level":3,"parent":null,"cost":0,"id":{"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","id":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.8","hostName":"ozone-topology-datanode_5-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_5-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.8","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","networkLocation":"/rack2","networkFullPath":"/rack2/b2addca2-6a32-4a46-bdad-d93cdc7bf167","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","bytes":{"validUtf8":true,"empty":false}}},{"level":3,"parent":null,"cost":0,"id":{"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","id":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.4","hostName":"ozone-topology-datanode_1-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_1-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.4","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","networkLocation":"/rack1","networkFullPath":"/rack1/3c7932e8-3bb5-4711-9abd-01d503c4fb65","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":57919,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"THREE","containers":1},{"pipelineId":"8dd72b44-f097-412a-9b6d-e4f20fc19939","status":"OPEN","leaderNode":"ozone-topology-datanode_6-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","id":"6f448d6f-f1c8-4a56-9cde-fca51c791814","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.9","hostName":"ozone-topology-datanode_6-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"6f448d6f-f1c8-4a56-9cde-fca51c791814","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"6f448d6f-f1c8-4a56-9cde-fca51c791814","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_6-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.9","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"6f448d6f-f1c8-4a56-9cde-fca51c791814","networkLocation":"/rack2","networkFullPath":"/rack2/6f448d6f-f1c8-4a56-9cde-fca51c791814","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"6f448d6f-f1c8-4a56-9cde-fca51c791814","bytes":{"validUtf8":true,"empty":false}}},{"level":3,"parent":null,"cost":0,"id":{"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","id":"75abf3b8-6dac-464f-90d2-4ca2660be256","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.5","hostName":"ozone-topology-datanode_2-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"75abf3b8-6dac-464f-90d2-4ca2660be256","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_2-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.5","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"75abf3b8-6dac-464f-90d2-4ca2660be256","networkLocation":"/rack1","networkFullPath":"/rack1/75abf3b8-6dac-464f-90d2-4ca2660be256","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"75abf3b8-6dac-464f-90d2-4ca2660be256","bytes":{"validUtf8":true,"empty":false}}},{"level":3,"parent":null,"cost":0,"id":{"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","id":"047aa5f1-1b48-480b-9b50-3b671348cd79","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.7","hostName":"ozone-topology-datanode_4-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"047aa5f1-1b48-480b-9b50-3b671348cd79","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"047aa5f1-1b48-480b-9b50-3b671348cd79","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_4-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.7","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"047aa5f1-1b48-480b-9b50-3b671348cd79","networkLocation":"/rack2","networkFullPath":"/rack2/047aa5f1-1b48-480b-9b50-3b671348cd79","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack2","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"047aa5f1-1b48-480b-9b50-3b671348cd79","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":57317,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"THREE","containers":1},{"pipelineId":"3829a85f-e01b-4cda-b6ac-6b0ca226b3fd","status":"OPEN","leaderNode":"ozone-topology-datanode_3-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"994b640c-841b-4d6d-a1bc-a486cc6257ca","id":"994b640c-841b-4d6d-a1bc-a486cc6257ca","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.6","hostName":"ozone-topology-datanode_3-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"994b640c-841b-4d6d-a1bc-a486cc6257ca","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"994b640c-841b-4d6d-a1bc-a486cc6257ca","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_3-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.6","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"994b640c-841b-4d6d-a1bc-a486cc6257ca","networkLocation":"/rack1","networkFullPath":"/rack1/994b640c-841b-4d6d-a1bc-a486cc6257ca","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"994b640c-841b-4d6d-a1bc-a486cc6257ca","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":57187,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"ONE","containers":0},{"pipelineId":"e23ea7fc-2b42-4cdb-84b6-1e8774b0f265","status":"OPEN","leaderNode":"ozone-topology-datanode_1-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"cost":0,"id":{"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","id":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","byteString":{"validUtf8":true,"empty":false}},"ipAddress":"10.5.0.4","hostName":"ozone-topology-datanode_1-1.ozone-topology_net","ports":[{"name":"HTTP","value":9882},{"name":"CLIENT_RPC","value":19864},{"name":"REPLICATION","value":9886},{"name":"RATIS","value":9858},{"name":"RATIS_ADMIN","value":9857},{"name":"RATIS_SERVER","value":9856},{"name":"STANDALONE","value":9859}],"certSerialId":null,"version":null,"setupTime":0,"revision":null,"persistedOpState":"IN_SERVICE","persistedOpStateExpiryEpochSec":0,"initialVersion":0,"currentVersion":2,"uuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","ratisPort":{"name":"RATIS","value":9858},"decommissioned":false,"uuidString":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","maintenance":false,"hostNameAsByteString":{"string":"ozone-topology-datanode_1-1.ozone-topology_net","bytes":{"validUtf8":true,"empty":false}},"ipAddressAsByteString":{"string":"10.5.0.4","bytes":{"validUtf8":true,"empty":false}},"restPort":null,"standalonePort":{"name":"STANDALONE","value":9859},"networkName":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","networkLocation":"/rack1","networkFullPath":"/rack1/3c7932e8-3bb5-4711-9abd-01d503c4fb65","numOfLeaves":1,"networkLocationAsByteString":{"string":"/rack1","bytes":{"validUtf8":true,"empty":false}},"networkNameAsByteString":{"string":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","bytes":{"validUtf8":true,"empty":false}}}],"lastLeaderElection":0,"duration":58016,"leaderElections":0,"replicationType":"RATIS","replicationFactor":"ONE","containers":0}]}</msg>
<status status="PASS" starttime="20251007 17:29:14.781" endtime="20251007 17:29:14.781"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.782" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.782" endtime="20251007 17:29:14.782"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.741" endtime="20251007 17:29:14.782"/>
</kw>
<msg timestamp="20251007 17:29:14.782" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.741" endtime="20251007 17:29:14.782"/>
</kw>
<msg timestamp="20251007 17:29:14.783" level="INFO">${result} = {"totalCount":9,"pipelines":[{"pipelineId":"2d704c54-51c8-40b1-bc29-3f0bebd8b0b4","status":"OPEN","leaderNode":"ozone-topology-datanode_4-1.ozone-topology_net","datanodes":[{"level":3,"parent":null,"c...</msg>
<status status="PASS" starttime="20251007 17:29:14.740" endtime="20251007 17:29:14.783"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>pipelines</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.783" endtime="20251007 17:29:14.783"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>RATIS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.783" endtime="20251007 17:29:14.783"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OPEN</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.783" endtime="20251007 17:29:14.784"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${result}</arg>
<arg>datanode[-_]1</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:29:14.784" endtime="20251007 17:29:14.784"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${result}</arg>
<arg>datanode[-_]2</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:29:14.784" endtime="20251007 17:29:14.784"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${result}</arg>
<arg>datanode[-_]3</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20251007 17:29:14.784" endtime="20251007 17:29:14.785"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/clusterState</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.788" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/clusterState 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.824" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.824" level="INFO">${output} = {"deletedDirs":0,"pipelines":9,"totalDatanodes":6,"healthyDatanodes":6,"storageReport":{"capacity":461276795832,"used":26316800,"remaining":123908562944,"committed":536850432},"containers":3,"missingC...</msg>
<status status="PASS" starttime="20251007 17:29:14.786" endtime="20251007 17:29:14.824"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.825" level="INFO">{"deletedDirs":0,"pipelines":9,"totalDatanodes":6,"healthyDatanodes":6,"storageReport":{"capacity":461276795832,"used":26316800,"remaining":123908562944,"committed":536850432},"containers":3,"missingContainers":0,"openContainers":3,"deletedContainers":0,"volumes":3,"buckets":2,"keys":11,"keysPendingDeletion":0,"scmServiceId":null,"omServiceId":null}</msg>
<status status="PASS" starttime="20251007 17:29:14.824" endtime="20251007 17:29:14.825"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.826" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.825" endtime="20251007 17:29:14.826"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.785" endtime="20251007 17:29:14.826"/>
</kw>
<msg timestamp="20251007 17:29:14.826" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.785" endtime="20251007 17:29:14.826"/>
</kw>
<msg timestamp="20251007 17:29:14.826" level="INFO">${result} = {"deletedDirs":0,"pipelines":9,"totalDatanodes":6,"healthyDatanodes":6,"storageReport":{"capacity":461276795832,"used":26316800,"remaining":123908562944,"committed":536850432},"containers":3,"missingC...</msg>
<status status="PASS" starttime="20251007 17:29:14.785" endtime="20251007 17:29:14.826"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"totalDatanodes\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.826" endtime="20251007 17:29:14.827"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"healthyDatanodes\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.827" endtime="20251007 17:29:14.827"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"pipelines\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.827" endtime="20251007 17:29:14.828"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${API_ENDPOINT_URL}/containers/1/replicaHistory</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.832" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/containers/1/replicaHistory 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.847" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.847" level="INFO">${output} = [{"containerId":1,"datanodeUuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","datanodeHost":"ozone-topology-datanode_5-1.ozone-topology_net","firstSeenTime":1759858115624,"lastSeenTime":1759858115624,"last...</msg>
<status status="PASS" starttime="20251007 17:29:14.829" endtime="20251007 17:29:14.847"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.848" level="INFO">[{"containerId":1,"datanodeUuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","datanodeHost":"ozone-topology-datanode_5-1.ozone-topology_net","firstSeenTime":1759858115624,"lastSeenTime":1759858115624,"lastBcsId":0,"state":"OPEN","dataChecksum":0},{"containerId":1,"datanodeUuid":"3c7932e8-3bb5-4711-9abd-01d503c4fb65","datanodeHost":"ozone-topology-datanode_1-1.ozone-topology_net","firstSeenTime":1759858115501,"lastSeenTime":1759858115501,"lastBcsId":0,"state":"OPEN","dataChecksum":0},{"containerId":1,"datanodeUuid":"75abf3b8-6dac-464f-90d2-4ca2660be256","datanodeHost":"ozone-topology-datanode_2-1.ozone-topology_net","firstSeenTime":1759858115569,"lastSeenTime":1759858115569,"lastBcsId":0,"state":"OPEN","dataChecksum":0}]</msg>
<status status="PASS" starttime="20251007 17:29:14.847" endtime="20251007 17:29:14.848"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.848" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.848" endtime="20251007 17:29:14.848"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.828" endtime="20251007 17:29:14.848"/>
</kw>
<msg timestamp="20251007 17:29:14.848" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.828" endtime="20251007 17:29:14.848"/>
</kw>
<msg timestamp="20251007 17:29:14.849" level="INFO">${result} = [{"containerId":1,"datanodeUuid":"b2addca2-6a32-4a46-bdad-d93cdc7bf167","datanodeHost":"ozone-topology-datanode_5-1.ozone-topology_net","firstSeenTime":1759858115624,"lastSeenTime":1759858115624,"last...</msg>
<status status="PASS" starttime="20251007 17:29:14.828" endtime="20251007 17:29:14.849"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"containerId\":1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.849" endtime="20251007 17:29:14.849"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:14.704" endtime="20251007 17:29:14.849"/>
</test>
<test id="s1-s3-s1-t3" name="Check if Recon Web UI is up" line="107">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.850" endtime="20251007 17:29:14.850"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${ENDPOINT_URL}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.854" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.866" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.866" level="INFO">${output} = &lt;!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding...</msg>
<status status="PASS" starttime="20251007 17:29:14.851" endtime="20251007 17:29:14.866"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.867" level="INFO">&lt;!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  --&gt;
  &lt;!DOCTYPE html&gt;
  &lt;html lang="en"&gt;
    &lt;head&gt;
      &lt;!---
        Vite is missing global field unlike webpack
        We are manually declaring to fix this
      --&gt;
      &lt;script&gt;
        var global = global || window;
      &lt;/script&gt;
      &lt;meta charset="utf-8" /&gt;
      &lt;link rel="shortcut icon" href="./favicon.ico" /&gt;
      &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;
      &lt;meta name="theme-color" content="#000000" /&gt;
      &lt;!--
        manifest.json provides metadata used when your web app is installed on a
        user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
      --&gt;
      &lt;link rel="manifest" href="./manifest.json" /&gt;
      &lt;!--
        Notice the use of %PUBLIC_URL% in the tags above.
        It will be replaced with the URL of the `public` folder during the build.
        Only files inside the `public` folder can be referenced from the HTML.
  
        Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
        work correctly both with client-side routing and a non-root public URL.
        Learn how to configure a non-root public URL by running `npm run build`.
      --&gt;
  
      &lt;link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500" /&gt;
      &lt;title&gt;Ozone Recon&lt;/title&gt;
      &lt;script type="module" crossorigin src="./static/js/index-b3cfc201.js"&gt;&lt;/script&gt;
      &lt;link rel="modulepreload" crossorigin href="./static/js/vendor-33d57f7b.js"&gt;
      &lt;link rel="stylesheet" href="./static/css/index-c0374453.css"&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;
      &lt;div id="root"&gt;&lt;/div&gt;
      
    &lt;/body&gt;
  &lt;/html&gt;
  </msg>
<status status="PASS" starttime="20251007 17:29:14.866" endtime="20251007 17:29:14.867"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.867" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.867" endtime="20251007 17:29:14.867"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.851" endtime="20251007 17:29:14.868"/>
</kw>
<msg timestamp="20251007 17:29:14.868" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.851" endtime="20251007 17:29:14.868"/>
</kw>
<msg timestamp="20251007 17:29:14.868" level="INFO">${result} = &lt;!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding...</msg>
<status status="PASS" starttime="20251007 17:29:14.850" endtime="20251007 17:29:14.868"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Ozone Recon</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.868" endtime="20251007 17:29:14.869"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:14.850" endtime="20251007 17:29:14.869"/>
</test>
<test id="s1-s3-s1-t4" name="Check web UI access" line="112">
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.873" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.878" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.878" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:14.871" endtime="20251007 17:29:14.878"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.879" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:14.878" endtime="20251007 17:29:14.879"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.879" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.879" endtime="20251007 17:29:14.879"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.870" endtime="20251007 17:29:14.879"/>
</kw>
<msg timestamp="20251007 17:29:14.879" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.870" endtime="20251007 17:29:14.880"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.870" endtime="20251007 17:29:14.880"/>
</kw>
<kw name="Check http return code">
<arg>${ENDPOINT_URL}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.883" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.892" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.881" endtime="20251007 17:29:14.892"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.893" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:14.892" endtime="20251007 17:29:14.893"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.893" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.893" endtime="20251007 17:29:14.893"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.881" endtime="20251007 17:29:14.893"/>
</kw>
<msg timestamp="20251007 17:29:14.893" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.881" endtime="20251007 17:29:14.893"/>
</kw>
<msg timestamp="20251007 17:29:14.893" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.880" endtime="20251007 17:29:14.894"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:14.894" endtime="20251007 17:29:14.894"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:14.894" endtime="20251007 17:29:14.894"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.894" endtime="20251007 17:29:14.894"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.894" endtime="20251007 17:29:14.894"/>
</branch>
<status status="PASS" starttime="20251007 17:29:14.894" endtime="20251007 17:29:14.894"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.880" endtime="20251007 17:29:14.894"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.895" endtime="20251007 17:29:14.895"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.895" endtime="20251007 17:29:14.895"/>
</kw>
<kw name="Check http return code">
<arg>${ENDPOINT_URL}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.898" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.907" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.907" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.896" endtime="20251007 17:29:14.907"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.908" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:14.907" endtime="20251007 17:29:14.908"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.908" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.908" endtime="20251007 17:29:14.908"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.896" endtime="20251007 17:29:14.909"/>
</kw>
<msg timestamp="20251007 17:29:14.909" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.896" endtime="20251007 17:29:14.909"/>
</kw>
<msg timestamp="20251007 17:29:14.909" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.895" endtime="20251007 17:29:14.909"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:14.909" endtime="20251007 17:29:14.909"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:14.909" endtime="20251007 17:29:14.909"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.909" endtime="20251007 17:29:14.910"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.909" endtime="20251007 17:29:14.910"/>
</branch>
<status status="PASS" starttime="20251007 17:29:14.909" endtime="20251007 17:29:14.910"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.895" endtime="20251007 17:29:14.910"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:14.869" endtime="20251007 17:29:14.910"/>
</test>
<test id="s1-s3-s1-t5" name="Check admin only api access" line="120">
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.914" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.918" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.918" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:14.911" endtime="20251007 17:29:14.918"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.919" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:14.918" endtime="20251007 17:29:14.919"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.919" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.919" endtime="20251007 17:29:14.919"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.911" endtime="20251007 17:29:14.919"/>
</kw>
<msg timestamp="20251007 17:29:14.919" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.911" endtime="20251007 17:29:14.919"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.911" endtime="20251007 17:29:14.919"/>
</kw>
<kw name="Check http return code">
<arg>${ADMIN_API_ENDPOINT_URL}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.922" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.932" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.932" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.921" endtime="20251007 17:29:14.932"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.932" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:14.932" endtime="20251007 17:29:14.933"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.933" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.933" endtime="20251007 17:29:14.933"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.920" endtime="20251007 17:29:14.933"/>
</kw>
<msg timestamp="20251007 17:29:14.933" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.920" endtime="20251007 17:29:14.933"/>
</kw>
<msg timestamp="20251007 17:29:14.933" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.920" endtime="20251007 17:29:14.933"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:14.934" endtime="20251007 17:29:14.934"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:14.933" endtime="20251007 17:29:14.934"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.934" endtime="20251007 17:29:14.934"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.934" endtime="20251007 17:29:14.934"/>
</branch>
<status status="PASS" starttime="20251007 17:29:14.933" endtime="20251007 17:29:14.934"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.919" endtime="20251007 17:29:14.934"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.935" endtime="20251007 17:29:14.935"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.934" endtime="20251007 17:29:14.935"/>
</kw>
<kw name="Check http return code">
<arg>${ADMIN_API_ENDPOINT_URL}</arg>
<arg>403</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.938" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.948" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.948" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.936" endtime="20251007 17:29:14.948"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.949" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:14.949" endtime="20251007 17:29:14.949"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.949" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.949" endtime="20251007 17:29:14.950"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.936" endtime="20251007 17:29:14.950"/>
</kw>
<msg timestamp="20251007 17:29:14.950" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.935" endtime="20251007 17:29:14.950"/>
</kw>
<msg timestamp="20251007 17:29:14.950" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.935" endtime="20251007 17:29:14.950"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:14.950" endtime="20251007 17:29:14.950"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:14.950" endtime="20251007 17:29:14.950"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.950" endtime="20251007 17:29:14.951"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.950" endtime="20251007 17:29:14.951"/>
</branch>
<status status="PASS" starttime="20251007 17:29:14.950" endtime="20251007 17:29:14.951"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.935" endtime="20251007 17:29:14.951"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.951" endtime="20251007 17:29:14.951"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.951" endtime="20251007 17:29:14.952"/>
</kw>
<kw name="Check http return code">
<arg>${ADMIN_API_ENDPOINT_URL}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.956" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.966" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.966" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.953" endtime="20251007 17:29:14.966"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.967" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:14.966" endtime="20251007 17:29:14.967"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.967" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.967" endtime="20251007 17:29:14.967"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.952" endtime="20251007 17:29:14.967"/>
</kw>
<msg timestamp="20251007 17:29:14.967" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.952" endtime="20251007 17:29:14.968"/>
</kw>
<msg timestamp="20251007 17:29:14.968" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.952" endtime="20251007 17:29:14.968"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:14.968" endtime="20251007 17:29:14.968"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:14.968" endtime="20251007 17:29:14.968"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.968" endtime="20251007 17:29:14.969"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.968" endtime="20251007 17:29:14.969"/>
</branch>
<status status="PASS" starttime="20251007 17:29:14.968" endtime="20251007 17:29:14.969"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.952" endtime="20251007 17:29:14.969"/>
</kw>
<kw name="Kinit as recon admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:14.969" endtime="20251007 17:29:14.969"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.969" endtime="20251007 17:29:14.969"/>
</kw>
<kw name="Check http return code">
<arg>${ADMIN_API_ENDPOINT_URL}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.973" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.982" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.983" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.971" endtime="20251007 17:29:14.983"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.983" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:14.983" endtime="20251007 17:29:14.983"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.984" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.984" endtime="20251007 17:29:14.984"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.970" endtime="20251007 17:29:14.984"/>
</kw>
<msg timestamp="20251007 17:29:14.984" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.970" endtime="20251007 17:29:14.984"/>
</kw>
<msg timestamp="20251007 17:29:14.984" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.970" endtime="20251007 17:29:14.984"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:14.985" endtime="20251007 17:29:14.985"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:14.985" endtime="20251007 17:29:14.985"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:14.985" endtime="20251007 17:29:14.985"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.985" endtime="20251007 17:29:14.985"/>
</branch>
<status status="PASS" starttime="20251007 17:29:14.984" endtime="20251007 17:29:14.985"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.970" endtime="20251007 17:29:14.985"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:14.910" endtime="20251007 17:29:14.985"/>
</test>
<test id="s1-s3-s1-t6" name="Check unhealthy, (admin) api access" line="133">
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.990" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:14.994" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:14.994" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:14.988" endtime="20251007 17:29:14.994"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:14.995" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:14.994" endtime="20251007 17:29:14.995"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:14.995" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:14.995" endtime="20251007 17:29:14.995"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.987" endtime="20251007 17:29:14.996"/>
</kw>
<msg timestamp="20251007 17:29:14.996" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.987" endtime="20251007 17:29:14.996"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.986" endtime="20251007 17:29:14.996"/>
</kw>
<kw name="Check http return code">
<arg>${UNHEALTHY_ENDPOINT_URL}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:14.999" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers/unhealthy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.026" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.027" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.997" endtime="20251007 17:29:15.027"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.028" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:15.027" endtime="20251007 17:29:15.028"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.028" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.028" endtime="20251007 17:29:15.028"/>
</kw>
<status status="PASS" starttime="20251007 17:29:14.997" endtime="20251007 17:29:15.028"/>
</kw>
<msg timestamp="20251007 17:29:15.028" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:14.997" endtime="20251007 17:29:15.028"/>
</kw>
<msg timestamp="20251007 17:29:15.029" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:14.996" endtime="20251007 17:29:15.029"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.029" endtime="20251007 17:29:15.029"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.029" endtime="20251007 17:29:15.029"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:15.029" endtime="20251007 17:29:15.029"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.029" endtime="20251007 17:29:15.029"/>
</branch>
<status status="PASS" starttime="20251007 17:29:15.029" endtime="20251007 17:29:15.029"/>
</if>
<status status="PASS" starttime="20251007 17:29:14.996" endtime="20251007 17:29:15.030"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:15.030" endtime="20251007 17:29:15.030"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.030" endtime="20251007 17:29:15.030"/>
</kw>
<kw name="Check http return code">
<arg>${UNHEALTHY_ENDPOINT_URL}</arg>
<arg>403</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.034" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers/unhealthy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.045" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.045" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.031" endtime="20251007 17:29:15.046"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.046" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:15.046" endtime="20251007 17:29:15.046"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.047" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.047" endtime="20251007 17:29:15.047"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.031" endtime="20251007 17:29:15.047"/>
</kw>
<msg timestamp="20251007 17:29:15.047" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.031" endtime="20251007 17:29:15.047"/>
</kw>
<msg timestamp="20251007 17:29:15.047" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.031" endtime="20251007 17:29:15.047"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.048" endtime="20251007 17:29:15.048"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.048" endtime="20251007 17:29:15.048"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:15.048" endtime="20251007 17:29:15.048"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.048" endtime="20251007 17:29:15.048"/>
</branch>
<status status="PASS" starttime="20251007 17:29:15.047" endtime="20251007 17:29:15.048"/>
</if>
<status status="PASS" starttime="20251007 17:29:15.030" endtime="20251007 17:29:15.048"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:15.049" endtime="20251007 17:29:15.049"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.048" endtime="20251007 17:29:15.049"/>
</kw>
<kw name="Check http return code">
<arg>${UNHEALTHY_ENDPOINT_URL}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.052" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers/unhealthy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.063" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.063" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.050" endtime="20251007 17:29:15.064"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.064" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:15.064" endtime="20251007 17:29:15.064"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.065" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.065" endtime="20251007 17:29:15.065"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.050" endtime="20251007 17:29:15.065"/>
</kw>
<msg timestamp="20251007 17:29:15.065" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.050" endtime="20251007 17:29:15.065"/>
</kw>
<msg timestamp="20251007 17:29:15.065" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.049" endtime="20251007 17:29:15.065"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.066" endtime="20251007 17:29:15.066"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.065" endtime="20251007 17:29:15.066"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:15.066" endtime="20251007 17:29:15.066"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.066" endtime="20251007 17:29:15.066"/>
</branch>
<status status="PASS" starttime="20251007 17:29:15.065" endtime="20251007 17:29:15.066"/>
</if>
<status status="PASS" starttime="20251007 17:29:15.049" endtime="20251007 17:29:15.066"/>
</kw>
<kw name="Kinit as recon admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:15.067" endtime="20251007 17:29:15.067"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.066" endtime="20251007 17:29:15.067"/>
</kw>
<kw name="Check http return code">
<arg>${UNHEALTHY_ENDPOINT_URL}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.071" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/containers/unhealthy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.082" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.082" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.068" endtime="20251007 17:29:15.082"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.083" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:15.083" endtime="20251007 17:29:15.083"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.084" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.083" endtime="20251007 17:29:15.084"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.068" endtime="20251007 17:29:15.084"/>
</kw>
<msg timestamp="20251007 17:29:15.084" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.068" endtime="20251007 17:29:15.084"/>
</kw>
<msg timestamp="20251007 17:29:15.084" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.067" endtime="20251007 17:29:15.084"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.084" endtime="20251007 17:29:15.085"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.084" endtime="20251007 17:29:15.085"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:15.085" endtime="20251007 17:29:15.085"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.085" endtime="20251007 17:29:15.085"/>
</branch>
<status status="PASS" starttime="20251007 17:29:15.084" endtime="20251007 17:29:15.085"/>
</if>
<status status="PASS" starttime="20251007 17:29:15.067" endtime="20251007 17:29:15.085"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:14.986" endtime="20251007 17:29:15.085"/>
</test>
<test id="s1-s3-s1-t7" name="Check normal api access" line="146">
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.089" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.093" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.094" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:15.087" endtime="20251007 17:29:15.094"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.094" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:15.094" endtime="20251007 17:29:15.094"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.095" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.095" endtime="20251007 17:29:15.095"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.087" endtime="20251007 17:29:15.095"/>
</kw>
<msg timestamp="20251007 17:29:15.095" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.086" endtime="20251007 17:29:15.095"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.086" endtime="20251007 17:29:15.095"/>
</kw>
<kw name="Check http return code">
<arg>${NON_ADMIN_API_ENDPOINT_URL}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.099" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/clusterState 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.115" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.115" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.097" endtime="20251007 17:29:15.115"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.116" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:15.116" endtime="20251007 17:29:15.116"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.117" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.117" endtime="20251007 17:29:15.117"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.096" endtime="20251007 17:29:15.117"/>
</kw>
<msg timestamp="20251007 17:29:15.117" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.096" endtime="20251007 17:29:15.117"/>
</kw>
<msg timestamp="20251007 17:29:15.117" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.096" endtime="20251007 17:29:15.117"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.118" endtime="20251007 17:29:15.118"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.117" endtime="20251007 17:29:15.118"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:15.118" endtime="20251007 17:29:15.118"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.118" endtime="20251007 17:29:15.118"/>
</branch>
<status status="PASS" starttime="20251007 17:29:15.117" endtime="20251007 17:29:15.118"/>
</if>
<status status="PASS" starttime="20251007 17:29:15.095" endtime="20251007 17:29:15.118"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:15.119" endtime="20251007 17:29:15.119"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.118" endtime="20251007 17:29:15.119"/>
</kw>
<kw name="Check http return code">
<arg>${NON_ADMIN_API_ENDPOINT_URL}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.123" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/clusterState 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.140" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.140" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.120" endtime="20251007 17:29:15.140"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.141" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:15.141" endtime="20251007 17:29:15.141"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.142" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.141" endtime="20251007 17:29:15.142"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.120" endtime="20251007 17:29:15.142"/>
</kw>
<msg timestamp="20251007 17:29:15.142" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.120" endtime="20251007 17:29:15.142"/>
</kw>
<msg timestamp="20251007 17:29:15.142" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:15.120" endtime="20251007 17:29:15.142"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.142" endtime="20251007 17:29:15.143"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.142" endtime="20251007 17:29:15.143"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:15.143" endtime="20251007 17:29:15.143"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.143" endtime="20251007 17:29:15.143"/>
</branch>
<status status="PASS" starttime="20251007 17:29:15.142" endtime="20251007 17:29:15.143"/>
</if>
<status status="PASS" starttime="20251007 17:29:15.119" endtime="20251007 17:29:15.143"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:15.086" endtime="20251007 17:29:15.143"/>
</test>
<doc>Smoke test to start cluster with docker-compose environments.</doc>
<status status="PASS" starttime="20251007 17:28:51.521" endtime="20251007 17:29:15.144"/>
</suite>
<suite id="s1-s3-s2" name="Recon-Nssummary" source="/opt/hadoop/smoketest/recon/recon-nssummary.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20251007 17:29:15.151" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.151" endtime="20251007 17:29:15.151"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20251007 17:29:15.151" endtime="20251007 17:29:15.151"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.151" endtime="20251007 17:29:15.151"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:15.151" endtime="20251007 17:29:15.151"/>
</branch>
<status status="NOT RUN" starttime="20251007 17:29:15.151" endtime="20251007 17:29:15.151"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20251007 17:29:15.152" endtime="20251007 17:29:15.152"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.151" endtime="20251007 17:29:15.152"/>
</kw>
<test id="s1-s3-s2-t1" name="Check volume creation" line="100">
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.155" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:15.159" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:15.159" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:15.153" endtime="20251007 17:29:15.159"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:15.160" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:15.160" endtime="20251007 17:29:15.160"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:15.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:15.160" endtime="20251007 17:29:15.161"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.152" endtime="20251007 17:29:15.161"/>
</kw>
<msg timestamp="20251007 17:29:15.161" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.152" endtime="20251007 17:29:15.161"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.152" endtime="20251007 17:29:15.161"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:15.161" endtime="20251007 17:29:15.161"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.161" endtime="20251007 17:29:15.162"/>
</kw>
<kw name="Create volume">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[LOWER]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20251007 17:29:15.162" level="INFO">${random} = pnltt</msg>
<status status="PASS" starttime="20251007 17:29:15.162" endtime="20251007 17:29:15.162"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${VOLUME}</arg>
<arg>vol-${random}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251007 17:29:15.162" level="INFO">${VOLUME} = vol-pnltt</msg>
<status status="PASS" starttime="20251007 17:29:15.162" endtime="20251007 17:29:15.163"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume create /${VOLUME}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:15.165" level="INFO">Running command 'ozone sh volume create /vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:18.062" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:18.062" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:15.163" endtime="20251007 17:29:18.062"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:18.063" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:18.063" endtime="20251007 17:29:18.063"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:18.064" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:18.063" endtime="20251007 17:29:18.064"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.163" endtime="20251007 17:29:18.064"/>
</kw>
<msg timestamp="20251007 17:29:18.064" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:15.163" endtime="20251007 17:29:18.064"/>
</kw>
<msg timestamp="20251007 17:29:18.064" level="INFO">${result} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:15.163" endtime="20251007 17:29:18.064"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:18.064" endtime="20251007 17:29:18.065"/>
</kw>
<status status="PASS" starttime="20251007 17:29:15.162" endtime="20251007 17:29:18.065"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:15.152" endtime="20251007 17:29:18.065"/>
</test>
<test id="s1-s3-s2-t2" name="Check bucket creation" line="105">
<kw name="Create bucket">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[LOWER]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20251007 17:29:18.066" level="INFO">${random} = priky</msg>
<status status="PASS" starttime="20251007 17:29:18.066" endtime="20251007 17:29:18.066"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${BUCKET}</arg>
<arg>buc-${random}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251007 17:29:18.066" level="INFO">${BUCKET} = buc-priky</msg>
<status status="PASS" starttime="20251007 17:29:18.066" endtime="20251007 17:29:18.067"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket create -l ${BUCKET_LAYOUT} /${VOLUME}/${BUCKET}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:18.070" level="INFO">Running command 'ozone sh bucket create -l FILE_SYSTEM_OPTIMIZED /vol-pnltt/buc-priky 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:21.132" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:21.132" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:18.068" endtime="20251007 17:29:21.132"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:21.133" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:21.132" endtime="20251007 17:29:21.133"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:21.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:21.133" endtime="20251007 17:29:21.133"/>
</kw>
<status status="PASS" starttime="20251007 17:29:18.067" endtime="20251007 17:29:21.133"/>
</kw>
<msg timestamp="20251007 17:29:21.133" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:18.067" endtime="20251007 17:29:21.133"/>
</kw>
<msg timestamp="20251007 17:29:21.134" level="INFO">${result} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:18.067" endtime="20251007 17:29:21.134"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:21.134" endtime="20251007 17:29:21.134"/>
</kw>
<status status="PASS" starttime="20251007 17:29:18.066" endtime="20251007 17:29:21.134"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:18.065" endtime="20251007 17:29:21.134"/>
</test>
<test id="s1-s3-s2-t3" name="Check keys creation" line="108">
<kw name="Create keys">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key put /${VOLUME}/${BUCKET}/file1 README.md</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:21.139" level="INFO">Running command 'ozone sh key put /vol-pnltt/buc-priky/file1 README.md 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:25.590" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:25.590" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:21.136" endtime="20251007 17:29:25.590"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:25.591" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:25.590" endtime="20251007 17:29:25.591"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:25.591" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:25.591" endtime="20251007 17:29:25.591"/>
</kw>
<status status="PASS" starttime="20251007 17:29:21.136" endtime="20251007 17:29:25.591"/>
</kw>
<msg timestamp="20251007 17:29:25.591" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:21.136" endtime="20251007 17:29:25.592"/>
</kw>
<msg timestamp="20251007 17:29:25.592" level="INFO">${result} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:21.135" endtime="20251007 17:29:25.592"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:25.592" endtime="20251007 17:29:25.592"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key put /${VOLUME}/${BUCKET}/dir1/dir2/file2 HISTORY.md</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:25.595" level="INFO">Running command 'ozone sh key put /vol-pnltt/buc-priky/dir1/dir2/file2 HISTORY.md 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.010" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.010" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:25.593" endtime="20251007 17:29:30.010"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.011" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:30.010" endtime="20251007 17:29:30.011"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.011" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.011" endtime="20251007 17:29:30.011"/>
</kw>
<status status="PASS" starttime="20251007 17:29:25.593" endtime="20251007 17:29:30.011"/>
</kw>
<msg timestamp="20251007 17:29:30.011" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:25.593" endtime="20251007 17:29:30.012"/>
</kw>
<msg timestamp="20251007 17:29:30.012" level="INFO">${result} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:29:25.592" endtime="20251007 17:29:30.012"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.012" endtime="20251007 17:29:30.012"/>
</kw>
<status status="PASS" starttime="20251007 17:29:21.135" endtime="20251007 17:29:30.012"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:21.135" endtime="20251007 17:29:30.012"/>
</test>
<test id="s1-s3-s2-t4" name="Check Summary api access" line="111">
<kw name="Check Access">
<arg>${SUMMARY_URL}?path=/</arg>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.017" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.021" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.021" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.015" endtime="20251007 17:29:30.021"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.022" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.021" endtime="20251007 17:29:30.022"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.022" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.022" endtime="20251007 17:29:30.022"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.014" endtime="20251007 17:29:30.022"/>
</kw>
<msg timestamp="20251007 17:29:30.022" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.014" endtime="20251007 17:29:30.022"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.013" endtime="20251007 17:29:30.022"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.026" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/summary?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.050" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.050" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.024" endtime="20251007 17:29:30.050"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.051" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.050" endtime="20251007 17:29:30.051"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.051" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.051" endtime="20251007 17:29:30.051"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.023" endtime="20251007 17:29:30.052"/>
</kw>
<msg timestamp="20251007 17:29:30.052" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.023" endtime="20251007 17:29:30.052"/>
</kw>
<msg timestamp="20251007 17:29:30.052" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.023" endtime="20251007 17:29:30.052"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.052" endtime="20251007 17:29:30.052"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.052" endtime="20251007 17:29:30.052"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.052" endtime="20251007 17:29:30.053"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.052" endtime="20251007 17:29:30.053"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.052" endtime="20251007 17:29:30.053"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.023" endtime="20251007 17:29:30.053"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.053" endtime="20251007 17:29:30.053"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.053" endtime="20251007 17:29:30.053"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>403</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.057" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/summary?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.068" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.068" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.054" endtime="20251007 17:29:30.068"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.068" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.068" endtime="20251007 17:29:30.069"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.069" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.069" endtime="20251007 17:29:30.069"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.054" endtime="20251007 17:29:30.069"/>
</kw>
<msg timestamp="20251007 17:29:30.069" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.054" endtime="20251007 17:29:30.069"/>
</kw>
<msg timestamp="20251007 17:29:30.069" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.054" endtime="20251007 17:29:30.069"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.070" endtime="20251007 17:29:30.070"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.070" endtime="20251007 17:29:30.070"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.070" endtime="20251007 17:29:30.070"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.070" endtime="20251007 17:29:30.070"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.069" endtime="20251007 17:29:30.070"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.053" endtime="20251007 17:29:30.070"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.071" endtime="20251007 17:29:30.071"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.070" endtime="20251007 17:29:30.071"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.075" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/summary?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.085" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.085" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.072" endtime="20251007 17:29:30.085"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.085" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.085" endtime="20251007 17:29:30.085"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.086" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.086" endtime="20251007 17:29:30.086"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.072" endtime="20251007 17:29:30.086"/>
</kw>
<msg timestamp="20251007 17:29:30.086" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.072" endtime="20251007 17:29:30.086"/>
</kw>
<msg timestamp="20251007 17:29:30.086" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.071" endtime="20251007 17:29:30.086"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.087" endtime="20251007 17:29:30.087"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.086" endtime="20251007 17:29:30.087"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.087" endtime="20251007 17:29:30.087"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.087" endtime="20251007 17:29:30.087"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.086" endtime="20251007 17:29:30.087"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.071" endtime="20251007 17:29:30.087"/>
</kw>
<kw name="Kinit as recon admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.088" endtime="20251007 17:29:30.088"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.087" endtime="20251007 17:29:30.088"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.091" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/summary?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.100" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.100" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.089" endtime="20251007 17:29:30.101"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.101" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.101" endtime="20251007 17:29:30.101"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.101" endtime="20251007 17:29:30.102"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.089" endtime="20251007 17:29:30.102"/>
</kw>
<msg timestamp="20251007 17:29:30.102" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.088" endtime="20251007 17:29:30.102"/>
</kw>
<msg timestamp="20251007 17:29:30.102" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.088" endtime="20251007 17:29:30.102"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.102" endtime="20251007 17:29:30.103"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.102" endtime="20251007 17:29:30.103"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.103" endtime="20251007 17:29:30.103"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.103" endtime="20251007 17:29:30.103"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.102" endtime="20251007 17:29:30.103"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.088" endtime="20251007 17:29:30.103"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.013" endtime="20251007 17:29:30.103"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:30.013" endtime="20251007 17:29:30.103"/>
</test>
<test id="s1-s3-s2-t5" name="Check Disk Usage api access" line="114">
<kw name="Check Access">
<arg>${DISK_USAGE_URL}?path=/</arg>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.107" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.113" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.113" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.105" endtime="20251007 17:29:30.113"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.114" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.113" endtime="20251007 17:29:30.114"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.114" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.114" endtime="20251007 17:29:30.114"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.105" endtime="20251007 17:29:30.114"/>
</kw>
<msg timestamp="20251007 17:29:30.114" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.105" endtime="20251007 17:29:30.114"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.104" endtime="20251007 17:29:30.114"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.118" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/usage?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.150" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.150" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.116" endtime="20251007 17:29:30.150"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.151" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.150" endtime="20251007 17:29:30.151"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.151" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.151" endtime="20251007 17:29:30.151"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.116" endtime="20251007 17:29:30.151"/>
</kw>
<msg timestamp="20251007 17:29:30.151" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.115" endtime="20251007 17:29:30.151"/>
</kw>
<msg timestamp="20251007 17:29:30.151" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.115" endtime="20251007 17:29:30.152"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.152" endtime="20251007 17:29:30.152"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.152" endtime="20251007 17:29:30.152"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.152" endtime="20251007 17:29:30.152"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.152" endtime="20251007 17:29:30.152"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.152" endtime="20251007 17:29:30.152"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.115" endtime="20251007 17:29:30.152"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.153" endtime="20251007 17:29:30.153"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.153" endtime="20251007 17:29:30.153"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>403</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.157" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/usage?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.169" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.169" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.154" endtime="20251007 17:29:30.169"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.170" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.169" endtime="20251007 17:29:30.170"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.170" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.170" endtime="20251007 17:29:30.170"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.154" endtime="20251007 17:29:30.170"/>
</kw>
<msg timestamp="20251007 17:29:30.171" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.154" endtime="20251007 17:29:30.171"/>
</kw>
<msg timestamp="20251007 17:29:30.171" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.154" endtime="20251007 17:29:30.171"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.171" endtime="20251007 17:29:30.171"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.171" endtime="20251007 17:29:30.171"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.171" endtime="20251007 17:29:30.172"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.171" endtime="20251007 17:29:30.172"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.171" endtime="20251007 17:29:30.172"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.153" endtime="20251007 17:29:30.172"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.172" endtime="20251007 17:29:30.172"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.172" endtime="20251007 17:29:30.172"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.176" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/usage?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.187" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.187" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.173" endtime="20251007 17:29:30.187"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.188" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.187" endtime="20251007 17:29:30.188"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.189" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.188" endtime="20251007 17:29:30.189"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.173" endtime="20251007 17:29:30.189"/>
</kw>
<msg timestamp="20251007 17:29:30.189" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.173" endtime="20251007 17:29:30.189"/>
</kw>
<msg timestamp="20251007 17:29:30.189" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.173" endtime="20251007 17:29:30.189"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.190" endtime="20251007 17:29:30.190"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.189" endtime="20251007 17:29:30.190"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.190" endtime="20251007 17:29:30.190"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.190" endtime="20251007 17:29:30.190"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.189" endtime="20251007 17:29:30.190"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.172" endtime="20251007 17:29:30.190"/>
</kw>
<kw name="Kinit as recon admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.191" endtime="20251007 17:29:30.191"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.190" endtime="20251007 17:29:30.191"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.195" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/usage?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.207" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.207" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.193" endtime="20251007 17:29:30.207"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.208" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.208" endtime="20251007 17:29:30.209"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.209" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.209" endtime="20251007 17:29:30.209"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.192" endtime="20251007 17:29:30.209"/>
</kw>
<msg timestamp="20251007 17:29:30.209" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.192" endtime="20251007 17:29:30.209"/>
</kw>
<msg timestamp="20251007 17:29:30.209" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.191" endtime="20251007 17:29:30.209"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.210" endtime="20251007 17:29:30.210"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.210" endtime="20251007 17:29:30.210"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.210" endtime="20251007 17:29:30.210"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.210" endtime="20251007 17:29:30.210"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.210" endtime="20251007 17:29:30.210"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.191" endtime="20251007 17:29:30.210"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.104" endtime="20251007 17:29:30.210"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:30.104" endtime="20251007 17:29:30.211"/>
</test>
<test id="s1-s3-s2-t6" name="Check Quota Usage api access" line="117">
<kw name="Check Access">
<arg>${QUOTA_USAGE_URL}?path=/</arg>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.215" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.219" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.212" endtime="20251007 17:29:30.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.219" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.219" endtime="20251007 17:29:30.219"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.219" endtime="20251007 17:29:30.220"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.212" endtime="20251007 17:29:30.220"/>
</kw>
<msg timestamp="20251007 17:29:30.220" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.212" endtime="20251007 17:29:30.220"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.212" endtime="20251007 17:29:30.220"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.223" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/quota?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.243" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.243" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.221" endtime="20251007 17:29:30.243"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.244" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.243" endtime="20251007 17:29:30.244"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.244" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.244" endtime="20251007 17:29:30.245"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.221" endtime="20251007 17:29:30.245"/>
</kw>
<msg timestamp="20251007 17:29:30.245" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.221" endtime="20251007 17:29:30.245"/>
</kw>
<msg timestamp="20251007 17:29:30.245" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.221" endtime="20251007 17:29:30.245"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.245" endtime="20251007 17:29:30.245"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.245" endtime="20251007 17:29:30.245"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.246" endtime="20251007 17:29:30.246"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.245" endtime="20251007 17:29:30.246"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.245" endtime="20251007 17:29:30.246"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.220" endtime="20251007 17:29:30.246"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.246" endtime="20251007 17:29:30.247"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.246" endtime="20251007 17:29:30.247"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>403</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.251" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/quota?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.264" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.264" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.248" endtime="20251007 17:29:30.264"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.265" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.264" endtime="20251007 17:29:30.265"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.265" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.265" endtime="20251007 17:29:30.265"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.248" endtime="20251007 17:29:30.265"/>
</kw>
<msg timestamp="20251007 17:29:30.265" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.248" endtime="20251007 17:29:30.266"/>
</kw>
<msg timestamp="20251007 17:29:30.266" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.247" endtime="20251007 17:29:30.266"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.266" endtime="20251007 17:29:30.266"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.266" endtime="20251007 17:29:30.266"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.266" endtime="20251007 17:29:30.266"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.266" endtime="20251007 17:29:30.266"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.266" endtime="20251007 17:29:30.266"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.247" endtime="20251007 17:29:30.266"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.267" endtime="20251007 17:29:30.267"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.267" endtime="20251007 17:29:30.267"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.270" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/quota?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.284" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.284" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.268" endtime="20251007 17:29:30.284"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.285" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.284" endtime="20251007 17:29:30.285"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.285" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.285" endtime="20251007 17:29:30.285"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.268" endtime="20251007 17:29:30.285"/>
</kw>
<msg timestamp="20251007 17:29:30.285" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.268" endtime="20251007 17:29:30.285"/>
</kw>
<msg timestamp="20251007 17:29:30.285" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.267" endtime="20251007 17:29:30.286"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.286" endtime="20251007 17:29:30.286"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.286" endtime="20251007 17:29:30.286"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.286" endtime="20251007 17:29:30.286"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.286" endtime="20251007 17:29:30.286"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.286" endtime="20251007 17:29:30.286"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.267" endtime="20251007 17:29:30.286"/>
</kw>
<kw name="Kinit as recon admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.287" endtime="20251007 17:29:30.287"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.286" endtime="20251007 17:29:30.287"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.290" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/quota?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.304" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.304" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.288" endtime="20251007 17:29:30.304"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.305" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.304" endtime="20251007 17:29:30.305"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.305" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.305" endtime="20251007 17:29:30.306"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.288" endtime="20251007 17:29:30.306"/>
</kw>
<msg timestamp="20251007 17:29:30.306" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.288" endtime="20251007 17:29:30.306"/>
</kw>
<msg timestamp="20251007 17:29:30.306" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.287" endtime="20251007 17:29:30.306"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.306" endtime="20251007 17:29:30.306"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.306" endtime="20251007 17:29:30.306"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.306" endtime="20251007 17:29:30.307"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.306" endtime="20251007 17:29:30.307"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.306" endtime="20251007 17:29:30.307"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.287" endtime="20251007 17:29:30.307"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.211" endtime="20251007 17:29:30.307"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:30.211" endtime="20251007 17:29:30.307"/>
</test>
<test id="s1-s3-s2-t7" name="Check File Size Distribution api access" line="120">
<kw name="Check Access">
<arg>${FILE_SIZE_DIST_URL}?path=/</arg>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.311" level="INFO">Running command 'kdestroy 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.316" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.316" level="INFO">${output} = kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.309" endtime="20251007 17:29:30.316"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.316" level="INFO">kdestroy: No credentials cache found while destroying cache</msg>
<status status="PASS" starttime="20251007 17:29:30.316" endtime="20251007 17:29:30.316"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.317" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.317" endtime="20251007 17:29:30.317"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.309" endtime="20251007 17:29:30.317"/>
</kw>
<msg timestamp="20251007 17:29:30.317" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.309" endtime="20251007 17:29:30.317"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.308" endtime="20251007 17:29:30.317"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>401</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.321" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/dist?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.334" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.334" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.318" endtime="20251007 17:29:30.334"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.335" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.335" endtime="20251007 17:29:30.335"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.336" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.336" endtime="20251007 17:29:30.336"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.318" endtime="20251007 17:29:30.336"/>
</kw>
<msg timestamp="20251007 17:29:30.336" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.318" endtime="20251007 17:29:30.336"/>
</kw>
<msg timestamp="20251007 17:29:30.336" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.318" endtime="20251007 17:29:30.336"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.337" endtime="20251007 17:29:30.337"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.336" endtime="20251007 17:29:30.337"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.337" endtime="20251007 17:29:30.337"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.337" endtime="20251007 17:29:30.337"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.336" endtime="20251007 17:29:30.337"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.317" endtime="20251007 17:29:30.337"/>
</kw>
<kw name="Kinit as non admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>scm</arg>
<arg>scm.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.338" endtime="20251007 17:29:30.338"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.337" endtime="20251007 17:29:30.338"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>403</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.342" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/dist?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.353" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.353" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.340" endtime="20251007 17:29:30.353"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.353" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.353" endtime="20251007 17:29:30.354"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.354" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.354" endtime="20251007 17:29:30.354"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.339" endtime="20251007 17:29:30.354"/>
</kw>
<msg timestamp="20251007 17:29:30.354" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.339" endtime="20251007 17:29:30.354"/>
</kw>
<msg timestamp="20251007 17:29:30.354" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.338" endtime="20251007 17:29:30.354"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.355" endtime="20251007 17:29:30.355"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.354" endtime="20251007 17:29:30.355"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.355" endtime="20251007 17:29:30.355"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.355" endtime="20251007 17:29:30.355"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.354" endtime="20251007 17:29:30.355"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.338" endtime="20251007 17:29:30.355"/>
</kw>
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.356" endtime="20251007 17:29:30.356"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.355" endtime="20251007 17:29:30.356"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.359" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/dist?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.369" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.370" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.357" endtime="20251007 17:29:30.370"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.370" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.370" endtime="20251007 17:29:30.370"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.371" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.371" endtime="20251007 17:29:30.371"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.357" endtime="20251007 17:29:30.371"/>
</kw>
<msg timestamp="20251007 17:29:30.371" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.357" endtime="20251007 17:29:30.371"/>
</kw>
<msg timestamp="20251007 17:29:30.371" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.356" endtime="20251007 17:29:30.371"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.372" endtime="20251007 17:29:30.372"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.372" endtime="20251007 17:29:30.372"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.372" endtime="20251007 17:29:30.372"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.372" endtime="20251007 17:29:30.372"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.372" endtime="20251007 17:29:30.372"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.356" endtime="20251007 17:29:30.372"/>
</kw>
<kw name="Kinit as recon admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:29:30.373" endtime="20251007 17:29:30.373"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.372" endtime="20251007 17:29:30.373"/>
</kw>
<kw name="Check http return code">
<arg>${url}</arg>
<arg>200</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : --write-out '\%{http_code}\n' --silent --show-error --output /dev/null ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.376" level="INFO">Running command 'curl --negotiate -u : --write-out '%{http_code}
' --silent --show-error --output /dev/null http://recon:9888/api/v1/namespace/dist?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.386" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.386" level="INFO">${output} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.374" endtime="20251007 17:29:30.386"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.387" level="INFO">200</msg>
<status status="PASS" starttime="20251007 17:29:30.386" endtime="20251007 17:29:30.387"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.387" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.387" endtime="20251007 17:29:30.388"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.374" endtime="20251007 17:29:30.388"/>
</kw>
<msg timestamp="20251007 17:29:30.388" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.374" endtime="20251007 17:29:30.388"/>
</kw>
<msg timestamp="20251007 17:29:30.388" level="INFO">${result} = 200</msg>
<status status="PASS" starttime="20251007 17:29:30.373" endtime="20251007 17:29:30.388"/>
</kw>
<if>
<branch type="IF" condition="'${SECURITY_ENABLED}' == 'true'">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected_code}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.388" endtime="20251007 17:29:30.388"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:29:30.388" endtime="20251007 17:29:30.388"/>
</branch>
<branch type="ELSE">
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.388" endtime="20251007 17:29:30.389"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.388" endtime="20251007 17:29:30.389"/>
</branch>
<status status="PASS" starttime="20251007 17:29:30.388" endtime="20251007 17:29:30.389"/>
</if>
<status status="PASS" starttime="20251007 17:29:30.373" endtime="20251007 17:29:30.389"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.308" endtime="20251007 17:29:30.389"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:30.307" endtime="20251007 17:29:30.389"/>
</test>
<test id="s1-s3-s2-t8" name="Check Recon Namespace Summary Root" line="123">
<kw name="Wait For Summary">
<arg>${SUMMARY_URL}?path=/</arg>
<arg>ROOT</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.394" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.405" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.405" level="INFO">${output} = {"path":"","type":"ROOT","countStats":{"numVolume":3,"numBucket":2,"numDir":1,"numKey":11},"objectInfo":{"metadata":null,"name":null,"quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"creationTi...</msg>
<status status="PASS" starttime="20251007 17:29:30.392" endtime="20251007 17:29:30.405"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.406" level="INFO">{"path":"","type":"ROOT","countStats":{"numVolume":3,"numBucket":2,"numDir":1,"numKey":11},"objectInfo":{"metadata":null,"name":null,"quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"creationTime":0,"modificationTime":0,"acls":null},"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:29:30.406" endtime="20251007 17:29:30.406"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.407" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.406" endtime="20251007 17:29:30.407"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.392" endtime="20251007 17:29:30.407"/>
</kw>
<msg timestamp="20251007 17:29:30.407" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.391" endtime="20251007 17:29:30.407"/>
</kw>
<msg timestamp="20251007 17:29:30.407" level="INFO">${result} = {"path":"","type":"ROOT","countStats":{"numVolume":3,"numBucket":2,"numDir":1,"numKey":11},"objectInfo":{"metadata":null,"name":null,"quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"creationTi...</msg>
<status status="PASS" starttime="20251007 17:29:30.391" endtime="20251007 17:29:30.407"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.407" endtime="20251007 17:29:30.407"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:29:30.407" endtime="20251007 17:29:30.408"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.391" endtime="20251007 17:29:30.408"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.390" endtime="20251007 17:29:30.408"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.390" endtime="20251007 17:29:30.408"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:30.389" endtime="20251007 17:29:30.408"/>
</test>
<test id="s1-s3-s2-t9" name="Check Recon Namespace Summary Volume" line="126">
<kw name="Wait For Summary">
<arg>${SUMMARY_URL}?path=/${VOLUME}</arg>
<arg>VOLUME</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:30.413" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:30.423" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:30.424" level="INFO">${output} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:30.411" endtime="20251007 17:29:30.424"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:30.424" level="INFO">{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:30.424" endtime="20251007 17:29:30.425"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:30.425" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:30.425" endtime="20251007 17:29:30.425"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.410" endtime="20251007 17:29:30.425"/>
</kw>
<msg timestamp="20251007 17:29:30.425" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:30.410" endtime="20251007 17:29:30.425"/>
</kw>
<msg timestamp="20251007 17:29:30.425" level="INFO">${result} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:30.410" endtime="20251007 17:29:30.425"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20251007 17:29:30.426" level="FAIL">'{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}' does not contain '"status":"OK"'</msg>
<status status="FAIL" starttime="20251007 17:29:30.426" endtime="20251007 17:29:30.426"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:30.426" endtime="20251007 17:29:30.426"/>
</kw>
<status status="FAIL" starttime="20251007 17:29:30.410" endtime="20251007 17:29:30.426"/>
</kw>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:40.431" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:40.441" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:40.441" level="INFO">${output} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:40.428" endtime="20251007 17:29:40.441"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:40.442" level="INFO">{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:40.441" endtime="20251007 17:29:40.442"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:40.442" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:40.442" endtime="20251007 17:29:40.442"/>
</kw>
<status status="PASS" starttime="20251007 17:29:40.428" endtime="20251007 17:29:40.442"/>
</kw>
<msg timestamp="20251007 17:29:40.442" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:40.428" endtime="20251007 17:29:40.442"/>
</kw>
<msg timestamp="20251007 17:29:40.442" level="INFO">${result} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:40.427" endtime="20251007 17:29:40.442"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20251007 17:29:40.443" level="FAIL">'{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}' does not contain '"status":"OK"'</msg>
<status status="FAIL" starttime="20251007 17:29:40.443" endtime="20251007 17:29:40.443"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:40.443" endtime="20251007 17:29:40.443"/>
</kw>
<status status="FAIL" starttime="20251007 17:29:40.427" endtime="20251007 17:29:40.443"/>
</kw>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:29:50.447" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:29:50.457" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:29:50.457" level="INFO">${output} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:50.445" endtime="20251007 17:29:50.457"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:29:50.458" level="INFO">{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:50.457" endtime="20251007 17:29:50.458"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:29:50.458" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:29:50.458" endtime="20251007 17:29:50.458"/>
</kw>
<status status="PASS" starttime="20251007 17:29:50.445" endtime="20251007 17:29:50.458"/>
</kw>
<msg timestamp="20251007 17:29:50.458" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:29:50.445" endtime="20251007 17:29:50.458"/>
</kw>
<msg timestamp="20251007 17:29:50.459" level="INFO">${result} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:29:50.444" endtime="20251007 17:29:50.459"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20251007 17:29:50.459" level="FAIL">'{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}' does not contain '"status":"OK"'</msg>
<status status="FAIL" starttime="20251007 17:29:50.459" endtime="20251007 17:29:50.459"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:29:50.459" endtime="20251007 17:29:50.459"/>
</kw>
<status status="FAIL" starttime="20251007 17:29:50.444" endtime="20251007 17:29:50.459"/>
</kw>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:00.464" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:00.474" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:00.474" level="INFO">${output} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:30:00.461" endtime="20251007 17:30:00.474"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:00.475" level="INFO">{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:30:00.475" endtime="20251007 17:30:00.475"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:00.476" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:00.475" endtime="20251007 17:30:00.476"/>
</kw>
<status status="PASS" starttime="20251007 17:30:00.461" endtime="20251007 17:30:00.476"/>
</kw>
<msg timestamp="20251007 17:30:00.476" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:00.461" endtime="20251007 17:30:00.476"/>
</kw>
<msg timestamp="20251007 17:30:00.476" level="INFO">${result} = {"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}</msg>
<status status="PASS" starttime="20251007 17:30:00.460" endtime="20251007 17:30:00.476"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20251007 17:30:00.477" level="FAIL">'{"path":"","type":"UNKNOWN","countStats":null,"objectInfo":null,"status":"PATH_NOT_FOUND"}' does not contain '"status":"OK"'</msg>
<status status="FAIL" starttime="20251007 17:30:00.476" endtime="20251007 17:30:00.477"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20251007 17:30:00.477" endtime="20251007 17:30:00.477"/>
</kw>
<status status="FAIL" starttime="20251007 17:30:00.460" endtime="20251007 17:30:00.477"/>
</kw>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.482" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.499" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.499" level="INFO">${output} = {"path":"","type":"VOLUME","countStats":{"numVolume":-1,"numBucket":1,"numDir":2,"numKey":2},"objectInfo":{"metadata":{},"name":"vol-pnltt","quotaInBytes":-1,"quotaInNamespace":-1,"usedNamespace":1,"c...</msg>
<status status="PASS" starttime="20251007 17:30:10.479" endtime="20251007 17:30:10.499"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.500" level="INFO">{"path":"","type":"VOLUME","countStats":{"numVolume":-1,"numBucket":1,"numDir":2,"numKey":2},"objectInfo":{"metadata":{},"name":"vol-pnltt","quotaInBytes":-1,"quotaInNamespace":-1,"usedNamespace":1,"creationTime":1759858157961,"modificationTime":1759858157961,"acls":[{"type":"USER","name":"hadoop","scope":"ACCESS","aclList":["ALL"]},{"type":"GROUP","name":"hadoop","scope":"ACCESS","aclList":["READ","LIST"]}],"admin":"hadoop","owner":"hadoop","volume":"vol-pnltt"},"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.500" endtime="20251007 17:30:10.500"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.501" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.500" endtime="20251007 17:30:10.501"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.479" endtime="20251007 17:30:10.501"/>
</kw>
<msg timestamp="20251007 17:30:10.501" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.479" endtime="20251007 17:30:10.501"/>
</kw>
<msg timestamp="20251007 17:30:10.501" level="INFO">${result} = {"path":"","type":"VOLUME","countStats":{"numVolume":-1,"numBucket":1,"numDir":2,"numKey":2},"objectInfo":{"metadata":{},"name":"vol-pnltt","quotaInBytes":-1,"quotaInNamespace":-1,"usedNamespace":1,"c...</msg>
<status status="PASS" starttime="20251007 17:30:10.478" endtime="20251007 17:30:10.501"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.501" endtime="20251007 17:30:10.502"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.502" endtime="20251007 17:30:10.502"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.477" endtime="20251007 17:30:10.502"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.409" endtime="20251007 17:30:10.502"/>
</kw>
<status status="PASS" starttime="20251007 17:29:30.409" endtime="20251007 17:30:10.502"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:29:30.409" endtime="20251007 17:30:10.502"/>
</test>
<test id="s1-s3-s2-t10" name="Check Recon Namespace Summary Bucket" line="129">
<kw name="Wait For Summary">
<arg>${SUMMARY_URL}?path=/${VOLUME}/${BUCKET}</arg>
<arg>BUCKET</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.507" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt/buc-priky 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.524" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.524" level="INFO">${output} = {"path":"","type":"BUCKET","countStats":{"numVolume":-1,"numBucket":-1,"numDir":2,"numKey":2},"objectInfo":{"versioningEnabled":false,"metadata":{},"name":"buc-priky","quotaInBytes":-1,"quotaInNamespa...</msg>
<status status="PASS" starttime="20251007 17:30:10.505" endtime="20251007 17:30:10.524"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.525" level="INFO">{"path":"","type":"BUCKET","countStats":{"numVolume":-1,"numBucket":-1,"numDir":2,"numKey":2},"objectInfo":{"versioningEnabled":false,"metadata":{},"name":"buc-priky","quotaInBytes":-1,"quotaInNamespace":-1,"usedNamespace":4,"creationTime":1759858161014,"modificationTime":1759858161014,"acls":[{"type":"USER","name":"hadoop","scope":"ACCESS","aclList":["ALL"]},{"type":"GROUP","name":"hadoop","scope":"ACCESS","aclList":["READ","LIST"]}],"volumeName":"vol-pnltt","storageType":"DISK","versioning":false,"usedBytes":35526,"encryptionInfo":null,"replicationConfigInfo":null,"sourceVolume":null,"sourceBucket":null,"bucketLayout":"FILE_SYSTEM_OPTIMIZED","owner":"hadoop"},"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.524" endtime="20251007 17:30:10.525"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.525" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.525" endtime="20251007 17:30:10.525"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.505" endtime="20251007 17:30:10.525"/>
</kw>
<msg timestamp="20251007 17:30:10.525" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.505" endtime="20251007 17:30:10.526"/>
</kw>
<msg timestamp="20251007 17:30:10.526" level="INFO">${result} = {"path":"","type":"BUCKET","countStats":{"numVolume":-1,"numBucket":-1,"numDir":2,"numKey":2},"objectInfo":{"versioningEnabled":false,"metadata":{},"name":"buc-priky","quotaInBytes":-1,"quotaInNamespa...</msg>
<status status="PASS" starttime="20251007 17:30:10.504" endtime="20251007 17:30:10.526"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.526" endtime="20251007 17:30:10.526"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.526" endtime="20251007 17:30:10.527"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.504" endtime="20251007 17:30:10.527"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.504" endtime="20251007 17:30:10.527"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.503" endtime="20251007 17:30:10.527"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.503" endtime="20251007 17:30:10.527"/>
</test>
<test id="s1-s3-s2-t11" name="Check Recon Namespace Summary Key" line="132">
<kw name="Wait For Summary">
<arg>${SUMMARY_URL}?path=/${VOLUME}/${BUCKET}/file1</arg>
<arg>KEY</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.532" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt/buc-priky/file1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.560" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.560" level="INFO">${output} = {"path":"","type":"KEY","countStats":{"numVolume":-1,"numBucket":-1,"numDir":-1,"numKey":0},"objectInfo":{"fileName":"file1","file":true,"metadata":{},"name":"file1","quotaInBytes":0,"quotaInNamespace...</msg>
<status status="PASS" starttime="20251007 17:30:10.530" endtime="20251007 17:30:10.560"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.561" level="INFO">{"path":"","type":"KEY","countStats":{"numVolume":-1,"numBucket":-1,"numDir":-1,"numKey":0},"objectInfo":{"fileName":"file1","file":true,"metadata":{},"name":"file1","quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"creationTime":1759858164070,"modificationTime":1759858165175,"acls":[{"type":"USER","name":"hadoop","scope":"ACCESS","aclList":["ALL"]},{"type":"GROUP","name":"hadoop","scope":"ACCESS","aclList":["READ","LIST"]}],"volumeName":"vol-pnltt","bucketName":"buc-priky","keyName":"file1","dataSize":5804,"keyLocationVersions":[{"version":0,"locationVersionMap":{"0":[{"blockID":{"containerBlockID":{"containerID":3,"localID":115816896921600012},"blockCommitSequenceId":17,"replicaIndex":null,"containerID":3,"localID":115816896921600012},"length":5804,"offset":0,"token":null,"createVersion":0,"pipeline":null,"partNumber":0,"underConstruction":false,"containerID":3,"localID":115816896921600012,"blockCommitSequenceId":17}]},"locationList":[{"blockID":{"containerBlockID":{"containerID":3,"localID":115816896921600012},"blockCommitSequenceId":17,"replicaIndex":null,"containerID":3,"localID":115816896921600012},"length":5804,"offset":0,"token":null,"createVersion":0,"pipeline":null,"partNumber":0,"underConstruction":false,"containerID":3,"localID":115816896921600012,"blockCommitSequenceId":17}],"blocksLatestVersionOnly":[{"blockID":{"containerBlockID":{"containerID":3,"localID":115816896921600012},"blockCommitSequenceId":17,"replicaIndex":null,"containerID":3,"localID":115816896921600012},"length":5804,"offset":0,"token":null,"createVersion":0,"pipeline":null,"partNumber":0,"underConstruction":false,"containerID":3,"localID":115816896921600012,"blockCommitSequenceId":17}],"locationLists":[[{"blockID":{"containerBlockID":{"containerID":3,"localID":115816896921600012},"blockCommitSequenceId":17,"replicaIndex":null,"containerID":3,"localID":115816896921600012},"length":5804,"offset":0,"token":null,"createVersion":0,"pipeline":null,"partNumber":0,"underConstruction":false,"containerID":3,"localID":115816896921600012,"blockCommitSequenceId":17}]],"multipartKey":false,"locationListCount":1}],"replicationConfig":{"replicationFactor":"THREE","requiredNodes":3,"minimumNodes":1,"replicationType":"RATIS"},"encInfo":null},"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.561" endtime="20251007 17:30:10.561"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.562" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.561" endtime="20251007 17:30:10.562"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.529" endtime="20251007 17:30:10.562"/>
</kw>
<msg timestamp="20251007 17:30:10.562" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.529" endtime="20251007 17:30:10.562"/>
</kw>
<msg timestamp="20251007 17:30:10.562" level="INFO">${result} = {"path":"","type":"KEY","countStats":{"numVolume":-1,"numBucket":-1,"numDir":-1,"numKey":0},"objectInfo":{"fileName":"file1","file":true,"metadata":{},"name":"file1","quotaInBytes":0,"quotaInNamespace...</msg>
<status status="PASS" starttime="20251007 17:30:10.529" endtime="20251007 17:30:10.562"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.562" endtime="20251007 17:30:10.562"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.563" endtime="20251007 17:30:10.563"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.529" endtime="20251007 17:30:10.563"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.528" endtime="20251007 17:30:10.563"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.528" endtime="20251007 17:30:10.563"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.527" endtime="20251007 17:30:10.563"/>
</test>
<test id="s1-s3-s2-t12" name="Check Recon Namespace Summary Directory" line="135">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${BUCKET_LAYOUT}' == 'LEGACY'</arg>
<arg>Wait For Summary</arg>
<arg>${SUMMARY_URL}?path=/${VOLUME}/${BUCKET}/dir1/dir2/</arg>
<arg>DIRECTORY</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:30:10.564" endtime="20251007 17:30:10.564"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${BUCKET_LAYOUT}' == 'FILE_SYSTEM_OPTIMIZED'</arg>
<arg>Wait For Summary</arg>
<arg>${SUMMARY_URL}?path=/${VOLUME}/${BUCKET}/dir1/dir2</arg>
<arg>DIRECTORY</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Wait For Summary">
<arg>${SUMMARY_URL}?path=/${VOLUME}/${BUCKET}/dir1/dir2</arg>
<arg>DIRECTORY</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.569" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/summary?path=/vol-pnltt/buc-priky/dir1/dir2 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.582" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.582" level="INFO">${output} = {"path":"","type":"DIRECTORY","countStats":{"numVolume":-1,"numBucket":-1,"numDir":0,"numKey":1},"objectInfo":{"metadata":{},"name":"dir2","quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"crea...</msg>
<status status="PASS" starttime="20251007 17:30:10.566" endtime="20251007 17:30:10.582"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.583" level="INFO">{"path":"","type":"DIRECTORY","countStats":{"numVolume":-1,"numBucket":-1,"numDir":0,"numKey":1},"objectInfo":{"metadata":{},"name":"dir2","quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"creationTime":1759858168482,"modificationTime":1759858168482,"acls":[{"type":"USER","name":"hadoop","scope":"ACCESS","aclList":["ALL"]},{"type":"GROUP","name":"hadoop","scope":"ACCESS","aclList":["READ","LIST"]}]},"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.582" endtime="20251007 17:30:10.583"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.583" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.583" endtime="20251007 17:30:10.583"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.566" endtime="20251007 17:30:10.583"/>
</kw>
<msg timestamp="20251007 17:30:10.583" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.566" endtime="20251007 17:30:10.583"/>
</kw>
<msg timestamp="20251007 17:30:10.583" level="INFO">${result} = {"path":"","type":"DIRECTORY","countStats":{"numVolume":-1,"numBucket":-1,"numDir":0,"numKey":1},"objectInfo":{"metadata":{},"name":"dir2","quotaInBytes":0,"quotaInNamespace":0,"usedNamespace":0,"crea...</msg>
<status status="PASS" starttime="20251007 17:30:10.566" endtime="20251007 17:30:10.583"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.584" endtime="20251007 17:30:10.584"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.584" endtime="20251007 17:30:10.584"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.565" endtime="20251007 17:30:10.584"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.565" endtime="20251007 17:30:10.584"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.565" endtime="20251007 17:30:10.584"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.564" endtime="20251007 17:30:10.584"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.564" endtime="20251007 17:30:10.585"/>
</test>
<test id="s1-s3-s2-t13" name="Check Recon Namespace Disk Usage" line="139">
<kw name="Wait For Summary">
<arg>${DISK_USAGE_URL}?path=/${VOLUME}/${BUCKET}&amp;files=true&amp;replica=true</arg>
<arg>\"sizeWithReplica\"</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.590" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/usage?path=/vol-pnltt/buc-priky&amp;files=true&amp;replica=true 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.599" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.599" level="INFO">${output} = {"status":"OK","path":"/vol-pnltt/buc-priky","size":17880,"sizeWithReplica":-1,"subPathCount":1,"subPaths":[{"key":false,"path":"/vol-pnltt/buc-priky/dir1","size":6038,"sizeWithReplica":-1,"isKey":fal...</msg>
<status status="PASS" starttime="20251007 17:30:10.588" endtime="20251007 17:30:10.599"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.600" level="INFO">{"status":"OK","path":"/vol-pnltt/buc-priky","size":17880,"sizeWithReplica":-1,"subPathCount":1,"subPaths":[{"key":false,"path":"/vol-pnltt/buc-priky/dir1","size":6038,"sizeWithReplica":-1,"isKey":false}],"sizeDirectKey":11842}</msg>
<status status="PASS" starttime="20251007 17:30:10.599" endtime="20251007 17:30:10.600"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.600" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.600" endtime="20251007 17:30:10.600"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.587" endtime="20251007 17:30:10.601"/>
</kw>
<msg timestamp="20251007 17:30:10.601" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.587" endtime="20251007 17:30:10.601"/>
</kw>
<msg timestamp="20251007 17:30:10.601" level="INFO">${result} = {"status":"OK","path":"/vol-pnltt/buc-priky","size":17880,"sizeWithReplica":-1,"subPathCount":1,"subPaths":[{"key":false,"path":"/vol-pnltt/buc-priky/dir1","size":6038,"sizeWithReplica":-1,"isKey":fal...</msg>
<status status="PASS" starttime="20251007 17:30:10.587" endtime="20251007 17:30:10.601"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.601" endtime="20251007 17:30:10.601"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.601" endtime="20251007 17:30:10.602"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.586" endtime="20251007 17:30:10.602"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.586" endtime="20251007 17:30:10.602"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.585" endtime="20251007 17:30:10.602"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.585" endtime="20251007 17:30:10.602"/>
</test>
<test id="s1-s3-s2-t14" name="Check Recon Namespace Volume Quota Usage" line="142">
<kw name="Wait For Summary">
<arg>${QUOTA_USAGE_URL}?path=/${VOLUME}</arg>
<arg>\"used\"</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.606" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/quota?path=/vol-pnltt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.615" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.615" level="INFO">${output} = {"allowed":-1,"used":11842,"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.605" endtime="20251007 17:30:10.615"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.616" level="INFO">{"allowed":-1,"used":11842,"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.615" endtime="20251007 17:30:10.616"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.616" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.616" endtime="20251007 17:30:10.616"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.604" endtime="20251007 17:30:10.616"/>
</kw>
<msg timestamp="20251007 17:30:10.616" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.604" endtime="20251007 17:30:10.617"/>
</kw>
<msg timestamp="20251007 17:30:10.617" level="INFO">${result} = {"allowed":-1,"used":11842,"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.604" endtime="20251007 17:30:10.617"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.617" endtime="20251007 17:30:10.617"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.617" endtime="20251007 17:30:10.617"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.603" endtime="20251007 17:30:10.617"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.603" endtime="20251007 17:30:10.617"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.603" endtime="20251007 17:30:10.618"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.602" endtime="20251007 17:30:10.618"/>
</test>
<test id="s1-s3-s2-t15" name="Check Recon Namespace Bucket Quota Usage" line="145">
<kw name="Wait For Summary">
<arg>${QUOTA_USAGE_URL}?path=/${VOLUME}/${BUCKET}</arg>
<arg>\"used\"</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.622" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/quota?path=/vol-pnltt/buc-priky 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.631" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.631" level="INFO">${output} = {"allowed":-1,"used":11842,"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.620" endtime="20251007 17:30:10.631"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.632" level="INFO">{"allowed":-1,"used":11842,"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.632" endtime="20251007 17:30:10.632"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.632" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.632" endtime="20251007 17:30:10.633"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.620" endtime="20251007 17:30:10.633"/>
</kw>
<msg timestamp="20251007 17:30:10.633" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.620" endtime="20251007 17:30:10.633"/>
</kw>
<msg timestamp="20251007 17:30:10.633" level="INFO">${result} = {"allowed":-1,"used":11842,"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.620" endtime="20251007 17:30:10.633"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.633" endtime="20251007 17:30:10.633"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.633" endtime="20251007 17:30:10.634"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.619" endtime="20251007 17:30:10.634"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.619" endtime="20251007 17:30:10.634"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.618" endtime="20251007 17:30:10.634"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.618" endtime="20251007 17:30:10.634"/>
</test>
<test id="s1-s3-s2-t16" name="Check Recon Namespace File Size Distribution Root" line="148">
<kw name="Wait For Summary">
<arg>${FILE_SIZE_DIST_URL}?path=/</arg>
<arg>\"dist\"</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>90sec</arg>
<arg>10sec</arg>
<arg>Test Summary</arg>
<arg>${url}</arg>
<arg>${expected}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Test Summary">
<arg>${url}</arg>
<arg>${expected}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.639" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/namespace/dist?path=/ 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:10.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:10.648" level="INFO">${output} = {"dist":[0,10,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.637" endtime="20251007 17:30:10.649"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:10.649" level="INFO">{"dist":[0,10,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.649" endtime="20251007 17:30:10.649"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:10.650" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:10.650" endtime="20251007 17:30:10.650"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.636" endtime="20251007 17:30:10.650"/>
</kw>
<msg timestamp="20251007 17:30:10.650" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.636" endtime="20251007 17:30:10.650"/>
</kw>
<msg timestamp="20251007 17:30:10.650" level="INFO">${result} = {"dist":[0,10,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"status":"OK"}</msg>
<status status="PASS" starttime="20251007 17:30:10.636" endtime="20251007 17:30:10.650"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"status\":\"OK\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.651" endtime="20251007 17:30:10.651"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:10.651" endtime="20251007 17:30:10.651"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.636" endtime="20251007 17:30:10.651"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.635" endtime="20251007 17:30:10.651"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.635" endtime="20251007 17:30:10.651"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.634" endtime="20251007 17:30:10.652"/>
</test>
<doc>Smoke test for Recon Namespace Summary Endpoint for FILE_SYSTEM_OPTIMIZED buckets.</doc>
<status status="PASS" starttime="20251007 17:29:15.145" endtime="20251007 17:30:10.652"/>
</suite>
<suite id="s1-s3-s3" name="Recon-Taskstatus" source="/opt/hadoop/smoketest/recon/recon-taskstatus.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20251007 17:30:10.666" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.666" endtime="20251007 17:30:10.666"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20251007 17:30:10.666" endtime="20251007 17:30:10.666"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251007 17:30:10.666" endtime="20251007 17:30:10.666"/>
</kw>
<status status="NOT RUN" starttime="20251007 17:30:10.666" endtime="20251007 17:30:10.666"/>
</branch>
<status status="NOT RUN" starttime="20251007 17:30:10.666" endtime="20251007 17:30:10.667"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20251007 17:30:10.667" endtime="20251007 17:30:10.667"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.666" endtime="20251007 17:30:10.667"/>
</kw>
<test id="s1-s3-s3-t1" name="Prepopulate Data and Trigger OM DB Sync" line="56">
<kw name="Kinit as ozone admin">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251007 17:30:10.667" endtime="20251007 17:30:10.668"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.667" endtime="20251007 17:30:10.668"/>
</kw>
<kw name="Freon DFSG" library="freon">
<arg>n=100</arg>
<arg>path=${KEYPATH}</arg>
<arg>size=100</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon dfsg -n ${n} --sync ${sync} -s ${size} --path ${path} --buffer ${buffer} --copy-buffer ${copy-buffer} -p ${prefix} -t ${threads} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:10.672" level="INFO">Running command 'ozone freon dfsg -n 100 --sync HSYNC -s 100 --path testvolume/testbucket/testkey --buffer 1024 --copy-buffer 1024 -p dfsg -t 1  2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:19.707" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:19.707" level="INFO">${output} = 2025-10-07 17:30:12,257 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dfsg and number-of-tests 100
2025-10-07 17:30:12,311 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out...</msg>
<status status="PASS" starttime="20251007 17:30:10.670" endtime="20251007 17:30:19.707"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:19.708" level="INFO">2025-10-07 17:30:12,257 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dfsg and number-of-tests 100
2025-10-07 17:30:12,311 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:30:12,336 [main] INFO freon.BaseFreonGenerator: Disabling FS cache: fs.ofs.impl.disable.cache
2025-10-07 17:30:13,312 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:30:13,998 [main] INFO rpc.RpcClient: Creating Volume: user, with hadoop as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-07 17:30:14,040 [main] INFO rpc.RpcClient: Creating Bucket: user/hadoop, with bucket layout FILE_SYSTEM_OPTIMIZED, hadoop as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-07 17:30:14,258 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-07 17:30:14,313 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-07 17:30:15,313 [Thread-5] INFO freon.ProgressBar: Progress: 5.00 % (5 out of 100)
2025-10-07 17:30:16,314 [Thread-5] INFO freon.ProgressBar: Progress: 28.00 % (28 out of 100)
2025-10-07 17:30:17,314 [Thread-5] INFO freon.ProgressBar: Progress: 53.00 % (53 out of 100)
2025-10-07 17:30:18,315 [Thread-5] INFO freon.ProgressBar: Progress: 79.00 % (79 out of 100)
2025-10-07 17:30:19,315 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-07 17:30:19,322 [shutdown-hook-0] INFO metrics: type=TIMER, name=file-create, count=100, min=29.272555, max=928.223674, mean=49.74543460962207, stddev=87.49409018098494, median=39.838705, p75=43.452208, p95=53.804364, p98=74.328832, p99=81.773038, p999=928.223674, mean_rate=19.09877676549917, m1=19.799999999999997, m5=19.799999999999997, m15=19.799999999999997, rate_unit=events/second, duration_unit=milliseconds
2025-10-07 17:30:19,323 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 7
2025-10-07 17:30:19,323 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-07 17:30:19,323 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251007 17:30:19.708" endtime="20251007 17:30:19.708"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:19.709" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:19.708" endtime="20251007 17:30:19.709"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.669" endtime="20251007 17:30:19.709"/>
</kw>
<msg timestamp="20251007 17:30:19.709" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:10.669" endtime="20251007 17:30:19.709"/>
</kw>
<msg timestamp="20251007 17:30:19.709" level="INFO">${result} = 2025-10-07 17:30:12,257 [main] INFO freon.BaseFreonGenerator: Executing test with prefix dfsg and number-of-tests 100
2025-10-07 17:30:12,311 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out...</msg>
<status status="PASS" starttime="20251007 17:30:10.669" endtime="20251007 17:30:19.709"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:19.709" endtime="20251007 17:30:19.710"/>
</kw>
<status status="PASS" starttime="20251007 17:30:10.668" endtime="20251007 17:30:19.710"/>
</kw>
<kw name="Sync OM Data">
<var>${result}</var>
<kw name="Log To Console" library="BuiltIn">
<arg>Sending CURL request to ${TRIGGER_SYNC_ENDPOINT}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:19.710" endtime="20251007 17:30:19.710"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${TRIGGER_SYNC_ENDPOINT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:19.714" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/triggerdbsync/om 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:19.725" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:19.725" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251007 17:30:19.711" endtime="20251007 17:30:19.725"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:19.725" level="INFO">true</msg>
<status status="PASS" starttime="20251007 17:30:19.725" endtime="20251007 17:30:19.726"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:19.726" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:19.726" endtime="20251007 17:30:19.726"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.711" endtime="20251007 17:30:19.726"/>
</kw>
<msg timestamp="20251007 17:30:19.726" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:19.711" endtime="20251007 17:30:19.726"/>
</kw>
<msg timestamp="20251007 17:30:19.726" level="INFO">${result} = true</msg>
<status status="PASS" starttime="20251007 17:30:19.711" endtime="20251007 17:30:19.727"/>
</kw>
<msg timestamp="20251007 17:30:19.727" level="INFO">${result} = true</msg>
<status status="PASS" starttime="20251007 17:30:19.710" endtime="20251007 17:30:19.727"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>true</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:19.727" endtime="20251007 17:30:19.727"/>
</kw>
<doc>Use Freon to prepopulate the OM DB with data and trigger OM DB sync.</doc>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:10.667" endtime="20251007 17:30:19.727"/>
</test>
<test id="s1-s3-s3-t2" name="Validate Task Status After Sync" line="65">
<kw name="Fetch Task Status">
<var>${tasks}</var>
<kw name="Log To Console" library="BuiltIn">
<arg>Sending CURL request to ${TASK_STATUS_ENDPOINT}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:19.729" endtime="20251007 17:30:19.729"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl -H "Accepts: application/json" --negotiate -u : -LSs ${TASK_STATUS_ENDPOINT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:19.734" level="INFO">Running command 'curl -H "Accepts: application/json" --negotiate -u : -LSs http://recon:9888/api/v1/task/status 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:19.751" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:19.751" level="INFO">${output} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:19.731" endtime="20251007 17:30:19.751"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:19.753" level="INFO">[{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1759858125866,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmSnapshotRequest","lastUpdatedTimestamp":1759858148236,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmDeltaRequest","lastUpdatedTimestamp":1759858219722,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"REPROCESS_STAGING","lastUpdatedTimestamp":1759858148595,"lastUpdatedSeqNumber":82,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskFSO","lastUpdatedTimestamp":1759858208311,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmTableInsightTask","lastUpdatedTimestamp":1759858208376,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"NSSummaryTask","lastUpdatedTimestamp":1759858208380,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskOBS","lastUpdatedTimestamp":1759858208382,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"FileSizeCountTaskOBS","lastUpdatedTimestamp":1759858208384,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"FileSizeCountTaskFSO","lastUpdatedTimestamp":1759858208388,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerSizeCountTask","lastUpdatedTimestamp":1759858185732,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0}]</msg>
<status status="PASS" starttime="20251007 17:30:19.752" endtime="20251007 17:30:19.753"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:19.753" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:19.753" endtime="20251007 17:30:19.753"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.730" endtime="20251007 17:30:19.753"/>
</kw>
<msg timestamp="20251007 17:30:19.754" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:19.730" endtime="20251007 17:30:19.754"/>
</kw>
<msg timestamp="20251007 17:30:19.754" level="INFO">${result} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:19.729" endtime="20251007 17:30:19.754"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${parsed_response}</var>
<arg>json.loads('''${result}''')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.755" level="INFO">${parsed_response} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.754" endtime="20251007 17:30:19.755"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${tasks}</var>
<arg>[task for task in ${parsed_response}]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.756" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.755" endtime="20251007 17:30:19.756"/>
</kw>
<msg timestamp="20251007 17:30:19.757" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.728" endtime="20251007 17:30:19.757"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${tasks}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20251007 17:30:19.757" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20251007 17:30:19.757" endtime="20251007 17:30:19.757"/>
</kw>
<for flavor="IN">
<var>${task}</var>
<value>@{tasks}</value>
<iter>
<var name="${task}">{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.758" endtime="20251007 17:30:19.758"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.758" endtime="20251007 17:30:19.759"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.759" endtime="20251007 17:30:19.759"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.759" endtime="20251007 17:30:19.759"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.760" endtime="20251007 17:30:19.760"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.758" endtime="20251007 17:30:19.760"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerHealthTask', 'lastUpdatedTimestamp': 1759858125866, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.760" endtime="20251007 17:30:19.760"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.761" endtime="20251007 17:30:19.761"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.761" endtime="20251007 17:30:19.761"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.761" endtime="20251007 17:30:19.762"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.762" endtime="20251007 17:30:19.762"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.760" endtime="20251007 17:30:19.762"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'OmSnapshotRequest', 'lastUpdatedTimestamp': 1759858148236, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.762" endtime="20251007 17:30:19.763"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.763" endtime="20251007 17:30:19.763"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.763" endtime="20251007 17:30:19.764"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.764" endtime="20251007 17:30:19.764"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.764" endtime="20251007 17:30:19.765"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.762" endtime="20251007 17:30:19.765"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'OmDeltaRequest', 'lastUpdatedTimestamp': 1759858219722, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.765" endtime="20251007 17:30:19.765"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.765" endtime="20251007 17:30:19.766"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.766" endtime="20251007 17:30:19.766"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.766" endtime="20251007 17:30:19.766"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.767" endtime="20251007 17:30:19.767"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.765" endtime="20251007 17:30:19.767"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'REPROCESS_STAGING', 'lastUpdatedTimestamp': 1759858148595, 'lastUpdatedSeqNumber': 82, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.767" endtime="20251007 17:30:19.767"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.768" endtime="20251007 17:30:19.768"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.768" endtime="20251007 17:30:19.768"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.768" endtime="20251007 17:30:19.769"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.769" endtime="20251007 17:30:19.769"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.767" endtime="20251007 17:30:19.769"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerKeyMapperTaskFSO', 'lastUpdatedTimestamp': 1759858208311, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.769" endtime="20251007 17:30:19.770"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.770" endtime="20251007 17:30:19.770"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.770" endtime="20251007 17:30:19.771"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.771" endtime="20251007 17:30:19.771"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.771" endtime="20251007 17:30:19.772"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.769" endtime="20251007 17:30:19.772"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'OmTableInsightTask', 'lastUpdatedTimestamp': 1759858208376, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.772" endtime="20251007 17:30:19.772"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.772" endtime="20251007 17:30:19.773"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.773" endtime="20251007 17:30:19.773"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.773" endtime="20251007 17:30:19.774"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.774" endtime="20251007 17:30:19.774"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.772" endtime="20251007 17:30:19.774"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'NSSummaryTask', 'lastUpdatedTimestamp': 1759858208380, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.774" endtime="20251007 17:30:19.775"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.775" endtime="20251007 17:30:19.775"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.775" endtime="20251007 17:30:19.776"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.776" endtime="20251007 17:30:19.776"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.776" endtime="20251007 17:30:19.777"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.774" endtime="20251007 17:30:19.777"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerKeyMapperTaskOBS', 'lastUpdatedTimestamp': 1759858208382, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.777" endtime="20251007 17:30:19.777"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.777" endtime="20251007 17:30:19.778"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.778" endtime="20251007 17:30:19.778"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.778" endtime="20251007 17:30:19.779"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.779" endtime="20251007 17:30:19.779"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.777" endtime="20251007 17:30:19.779"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'FileSizeCountTaskOBS', 'lastUpdatedTimestamp': 1759858208384, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.779" endtime="20251007 17:30:19.780"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.780" endtime="20251007 17:30:19.780"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.780" endtime="20251007 17:30:19.780"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.781" endtime="20251007 17:30:19.781"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.781" endtime="20251007 17:30:19.781"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.779" endtime="20251007 17:30:19.781"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'FileSizeCountTaskFSO', 'lastUpdatedTimestamp': 1759858208388, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.782" endtime="20251007 17:30:19.782"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.782" endtime="20251007 17:30:19.782"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.782" endtime="20251007 17:30:19.783"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.783" endtime="20251007 17:30:19.783"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.783" endtime="20251007 17:30:19.784"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.781" endtime="20251007 17:30:19.784"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerSizeCountTask', 'lastUpdatedTimestamp': 1759858185732, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>taskName</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.784" endtime="20251007 17:30:19.784"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedSeqNumber</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.784" endtime="20251007 17:30:19.785"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastUpdatedTimestamp</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.785" endtime="20251007 17:30:19.785"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>isCurrentTaskRunning</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.785" endtime="20251007 17:30:19.785"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${task}</arg>
<arg>lastTaskRunStatus</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20251007 17:30:19.786" endtime="20251007 17:30:19.786"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.784" endtime="20251007 17:30:19.786"/>
</iter>
<status status="PASS" starttime="20251007 17:30:19.757" endtime="20251007 17:30:19.786"/>
</for>
<doc>Validate that task status is updated after triggering the OM DB sync.</doc>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:19.728" endtime="20251007 17:30:19.786"/>
</test>
<test id="s1-s3-s3-t3" name="Validate Stats for Specific Task" line="79">
<kw name="Fetch Task Status">
<var>${tasks}</var>
<kw name="Log To Console" library="BuiltIn">
<arg>Sending CURL request to ${TASK_STATUS_ENDPOINT}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:19.788" endtime="20251007 17:30:19.788"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl -H "Accepts: application/json" --negotiate -u : -LSs ${TASK_STATUS_ENDPOINT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:19.794" level="INFO">Running command 'curl -H "Accepts: application/json" --negotiate -u : -LSs http://recon:9888/api/v1/task/status 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:19.809" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:19.809" level="INFO">${output} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:19.790" endtime="20251007 17:30:19.809"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:19.810" level="INFO">[{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1759858125866,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmSnapshotRequest","lastUpdatedTimestamp":1759858148236,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmDeltaRequest","lastUpdatedTimestamp":1759858219722,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"REPROCESS_STAGING","lastUpdatedTimestamp":1759858148595,"lastUpdatedSeqNumber":82,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskFSO","lastUpdatedTimestamp":1759858208311,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmTableInsightTask","lastUpdatedTimestamp":1759858208376,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"NSSummaryTask","lastUpdatedTimestamp":1759858208380,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskOBS","lastUpdatedTimestamp":1759858208382,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"FileSizeCountTaskOBS","lastUpdatedTimestamp":1759858208384,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"FileSizeCountTaskFSO","lastUpdatedTimestamp":1759858208388,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerSizeCountTask","lastUpdatedTimestamp":1759858185732,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0}]</msg>
<status status="PASS" starttime="20251007 17:30:19.810" endtime="20251007 17:30:19.811"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:19.811" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:19.811" endtime="20251007 17:30:19.811"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.789" endtime="20251007 17:30:19.811"/>
</kw>
<msg timestamp="20251007 17:30:19.812" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:19.789" endtime="20251007 17:30:19.812"/>
</kw>
<msg timestamp="20251007 17:30:19.812" level="INFO">${result} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:19.788" endtime="20251007 17:30:19.812"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${parsed_response}</var>
<arg>json.loads('''${result}''')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.813" level="INFO">${parsed_response} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.812" endtime="20251007 17:30:19.813"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${tasks}</var>
<arg>[task for task in ${parsed_response}]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.814" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.813" endtime="20251007 17:30:19.814"/>
</kw>
<msg timestamp="20251007 17:30:19.814" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.788" endtime="20251007 17:30:19.814"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${task_list}</var>
<arg>[task for task in ${tasks} if task["taskName"] == "${TASK_NAME_1}"]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.816" level="INFO">${task_list} = [{'taskName': 'ContainerHealthTask', 'lastUpdatedTimestamp': 1759858125866, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}]</msg>
<status status="PASS" starttime="20251007 17:30:19.815" endtime="20251007 17:30:19.816"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_length}</var>
<arg>${task_list}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251007 17:30:19.816" level="INFO">Length is 1</msg>
<msg timestamp="20251007 17:30:19.816" level="INFO">${list_length} = 1</msg>
<status status="PASS" starttime="20251007 17:30:19.816" endtime="20251007 17:30:19.816"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${list_length}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:19.817" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:19.816" endtime="20251007 17:30:19.817"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${task}</var>
<arg>${task_list}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251007 17:30:19.817" level="INFO">${task} = {'taskName': 'ContainerHealthTask', 'lastUpdatedTimestamp': 1759858125866, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</msg>
<status status="PASS" starttime="20251007 17:30:19.817" endtime="20251007 17:30:19.817"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.818" endtime="20251007 17:30:19.819"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.819" endtime="20251007 17:30:19.820"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["isCurrentTaskRunning"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.820" endtime="20251007 17:30:19.822"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastTaskRunStatus"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.822" endtime="20251007 17:30:19.824"/>
</kw>
<doc>Validate response for a specific task after OM DB sync.</doc>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:19.787" endtime="20251007 17:30:19.824"/>
</test>
<test id="s1-s3-s3-t4" name="Validate All Tasks Updated After Sync" line="96">
<kw name="Fetch Task Status">
<var>${tasks}</var>
<kw name="Log To Console" library="BuiltIn">
<arg>Sending CURL request to ${TASK_STATUS_ENDPOINT}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:19.825" endtime="20251007 17:30:19.826"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl -H "Accepts: application/json" --negotiate -u : -LSs ${TASK_STATUS_ENDPOINT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:19.831" level="INFO">Running command 'curl -H "Accepts: application/json" --negotiate -u : -LSs http://recon:9888/api/v1/task/status 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:19.846" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:19.846" level="INFO">${output} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:19.827" endtime="20251007 17:30:19.846"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:19.847" level="INFO">[{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1759858125866,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmSnapshotRequest","lastUpdatedTimestamp":1759858148236,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmDeltaRequest","lastUpdatedTimestamp":1759858219803,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"REPROCESS_STAGING","lastUpdatedTimestamp":1759858148595,"lastUpdatedSeqNumber":82,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskFSO","lastUpdatedTimestamp":1759858219807,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"OmTableInsightTask","lastUpdatedTimestamp":1759858219809,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"NSSummaryTask","lastUpdatedTimestamp":1759858219811,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"ContainerKeyMapperTaskOBS","lastUpdatedTimestamp":1759858219813,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"FileSizeCountTaskOBS","lastUpdatedTimestamp":1759858219814,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"FileSizeCountTaskFSO","lastUpdatedTimestamp":1759858219816,"lastUpdatedSeqNumber":104,"lastTaskRunStatus":0,"isCurrentTaskRunning":1},{"taskName":"ContainerSizeCountTask","lastUpdatedTimestamp":1759858185732,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0}]</msg>
<status status="PASS" starttime="20251007 17:30:19.846" endtime="20251007 17:30:19.847"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:19.848" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:19.847" endtime="20251007 17:30:19.848"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.827" endtime="20251007 17:30:19.848"/>
</kw>
<msg timestamp="20251007 17:30:19.848" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:19.826" endtime="20251007 17:30:19.848"/>
</kw>
<msg timestamp="20251007 17:30:19.848" level="INFO">${result} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:19.826" endtime="20251007 17:30:19.848"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${parsed_response}</var>
<arg>json.loads('''${result}''')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.849" level="INFO">${parsed_response} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.849" endtime="20251007 17:30:19.849"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${tasks}</var>
<arg>[task for task in ${parsed_response}]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:19.850" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.849" endtime="20251007 17:30:19.850"/>
</kw>
<msg timestamp="20251007 17:30:19.850" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:19.825" endtime="20251007 17:30:19.850"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${tasks}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20251007 17:30:19.851" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20251007 17:30:19.851" endtime="20251007 17:30:19.851"/>
</kw>
<for flavor="IN">
<var>${task}</var>
<value>@{tasks}</value>
<iter>
<var name="${task}">{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.851" endtime="20251007 17:30:19.853"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.853" endtime="20251007 17:30:19.855"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.851" endtime="20251007 17:30:19.855"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerHealthTask', 'lastUpdatedTimestamp': 1759858125866, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.855" endtime="20251007 17:30:19.856"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.857" endtime="20251007 17:30:19.858"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.855" endtime="20251007 17:30:19.858"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'OmSnapshotRequest', 'lastUpdatedTimestamp': 1759858148236, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.858" endtime="20251007 17:30:19.860"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.860" endtime="20251007 17:30:19.861"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.858" endtime="20251007 17:30:19.861"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'OmDeltaRequest', 'lastUpdatedTimestamp': 1759858219803, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.862" endtime="20251007 17:30:19.863"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.863" endtime="20251007 17:30:19.865"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.861" endtime="20251007 17:30:19.865"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'REPROCESS_STAGING', 'lastUpdatedTimestamp': 1759858148595, 'lastUpdatedSeqNumber': 82, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.865" endtime="20251007 17:30:19.867"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.867" endtime="20251007 17:30:19.886"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.865" endtime="20251007 17:30:19.886"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerKeyMapperTaskFSO', 'lastUpdatedTimestamp': 1759858219807, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.886" endtime="20251007 17:30:19.888"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.888" endtime="20251007 17:30:19.890"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.886" endtime="20251007 17:30:19.890"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'OmTableInsightTask', 'lastUpdatedTimestamp': 1759858219809, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.890" endtime="20251007 17:30:19.891"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.892" endtime="20251007 17:30:19.893"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.890" endtime="20251007 17:30:19.893"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'NSSummaryTask', 'lastUpdatedTimestamp': 1759858219811, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.893" endtime="20251007 17:30:19.895"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.895" endtime="20251007 17:30:19.896"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.893" endtime="20251007 17:30:19.896"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerKeyMapperTaskOBS', 'lastUpdatedTimestamp': 1759858219813, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.897" endtime="20251007 17:30:19.898"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.898" endtime="20251007 17:30:19.900"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.897" endtime="20251007 17:30:19.900"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'FileSizeCountTaskOBS', 'lastUpdatedTimestamp': 1759858219814, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.900" endtime="20251007 17:30:19.902"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.902" endtime="20251007 17:30:19.903"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.900" endtime="20251007 17:30:19.903"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'FileSizeCountTaskFSO', 'lastUpdatedTimestamp': 1759858219816, 'lastUpdatedSeqNumber': 104, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 1}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.904" endtime="20251007 17:30:19.905"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.905" endtime="20251007 17:30:19.907"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.904" endtime="20251007 17:30:19.907"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'ContainerSizeCountTask', 'lastUpdatedTimestamp': 1759858185732, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedTimestamp"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.907" endtime="20251007 17:30:19.909"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}!=${None}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251007 17:30:19.909" endtime="20251007 17:30:19.910"/>
</kw>
<status status="PASS" starttime="20251007 17:30:19.907" endtime="20251007 17:30:19.911"/>
</iter>
<status status="PASS" starttime="20251007 17:30:19.851" endtime="20251007 17:30:19.911"/>
</for>
<doc>Ensure all tasks have been updated after an OM DB sync operation.</doc>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:19.824" endtime="20251007 17:30:19.911"/>
</test>
<test id="s1-s3-s3-t5" name="Validate Sequence number is updated after sync" line="107">
<kw name="Log To Console" library="BuiltIn">
<arg>Triggering OM DB sync for updates</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:19.912" endtime="20251007 17:30:19.913"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Wait for few seconds to let previous OM DB Sync thread to finish</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:19.913" endtime="20251007 17:30:19.913"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20251007 17:30:21.914" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20251007 17:30:19.914" endtime="20251007 17:30:21.914"/>
</kw>
<kw name="Sync OM Data">
<kw name="Log To Console" library="BuiltIn">
<arg>Sending CURL request to ${TRIGGER_SYNC_ENDPOINT}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:21.915" endtime="20251007 17:30:21.915"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${TRIGGER_SYNC_ENDPOINT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:21.919" level="INFO">Running command 'curl --negotiate -u : -LSs http://recon:9888/api/v1/triggerdbsync/om 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:21.928" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:21.928" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251007 17:30:21.916" endtime="20251007 17:30:21.928"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:21.929" level="INFO">true</msg>
<status status="PASS" starttime="20251007 17:30:21.929" endtime="20251007 17:30:21.930"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:21.930" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:21.930" endtime="20251007 17:30:21.930"/>
</kw>
<status status="PASS" starttime="20251007 17:30:21.916" endtime="20251007 17:30:21.930"/>
</kw>
<msg timestamp="20251007 17:30:21.930" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:21.916" endtime="20251007 17:30:21.930"/>
</kw>
<msg timestamp="20251007 17:30:21.930" level="INFO">${result} = true</msg>
<status status="PASS" starttime="20251007 17:30:21.915" endtime="20251007 17:30:21.930"/>
</kw>
<status status="PASS" starttime="20251007 17:30:21.914" endtime="20251007 17:30:21.931"/>
</kw>
<kw name="Fetch Task Status">
<var>${tasks}</var>
<kw name="Log To Console" library="BuiltIn">
<arg>Sending CURL request to ${TASK_STATUS_ENDPOINT}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20251007 17:30:21.931" endtime="20251007 17:30:21.931"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl -H "Accepts: application/json" --negotiate -u : -LSs ${TASK_STATUS_ENDPOINT}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:21.936" level="INFO">Running command 'curl -H "Accepts: application/json" --negotiate -u : -LSs http://recon:9888/api/v1/task/status 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:21.946" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:21.946" level="INFO">${output} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:21.933" endtime="20251007 17:30:21.946"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:21.947" level="INFO">[{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1759858125866,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmSnapshotRequest","lastUpdatedTimestamp":1759858148236,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmDeltaRequest","lastUpdatedTimestamp":1759858221931,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"REPROCESS_STAGING","lastUpdatedTimestamp":1759858148595,"lastUpdatedSeqNumber":82,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskFSO","lastUpdatedTimestamp":1759858219838,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"OmTableInsightTask","lastUpdatedTimestamp":1759858219938,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"NSSummaryTask","lastUpdatedTimestamp":1759858219942,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerKeyMapperTaskOBS","lastUpdatedTimestamp":1759858219945,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"FileSizeCountTaskOBS","lastUpdatedTimestamp":1759858219947,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"FileSizeCountTaskFSO","lastUpdatedTimestamp":1759858219952,"lastUpdatedSeqNumber":816,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerSizeCountTask","lastUpdatedTimestamp":1759858185732,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0}]</msg>
<status status="PASS" starttime="20251007 17:30:21.946" endtime="20251007 17:30:21.947"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:21.947" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:21.947" endtime="20251007 17:30:21.947"/>
</kw>
<status status="PASS" starttime="20251007 17:30:21.932" endtime="20251007 17:30:21.948"/>
</kw>
<msg timestamp="20251007 17:30:21.948" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:21.932" endtime="20251007 17:30:21.948"/>
</kw>
<msg timestamp="20251007 17:30:21.948" level="INFO">${result} = [{"taskName":"PipelineSyncTask","lastUpdatedTimestamp":1759858125861,"lastUpdatedSeqNumber":0,"lastTaskRunStatus":0,"isCurrentTaskRunning":0},{"taskName":"ContainerHealthTask","lastUpdatedTimestamp":1...</msg>
<status status="PASS" starttime="20251007 17:30:21.932" endtime="20251007 17:30:21.948"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${parsed_response}</var>
<arg>json.loads('''${result}''')</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:21.948" level="INFO">${parsed_response} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:21.948" endtime="20251007 17:30:21.948"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${tasks}</var>
<arg>[task for task in ${parsed_response}]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:21.949" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:21.949" endtime="20251007 17:30:21.949"/>
</kw>
<msg timestamp="20251007 17:30:21.949" level="INFO">${tasks} = [{'taskName': 'PipelineSyncTask', 'lastUpdatedTimestamp': 1759858125861, 'lastUpdatedSeqNumber': 0, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'ContainerHealthTask', 'lastUpdated...</msg>
<status status="PASS" starttime="20251007 17:30:21.931" endtime="20251007 17:30:21.949"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${tasks}</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20251007 17:30:21.950" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20251007 17:30:21.949" endtime="20251007 17:30:21.950"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${om_delta_task_list}</var>
<arg>[task for task in ${tasks} if task["taskName"] == "OmDeltaRequest"]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:21.950" level="INFO">${om_delta_task_list} = [{'taskName': 'OmDeltaRequest', 'lastUpdatedTimestamp': 1759858221931, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}]</msg>
<status status="PASS" starttime="20251007 17:30:21.950" endtime="20251007 17:30:21.950"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_length}</var>
<arg>${om_delta_task_list}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251007 17:30:21.951" level="INFO">Length is 1</msg>
<msg timestamp="20251007 17:30:21.951" level="INFO">${list_length} = 1</msg>
<status status="PASS" starttime="20251007 17:30:21.951" endtime="20251007 17:30:21.951"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${list_length}</arg>
<arg>1</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:21.951" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:21.951" endtime="20251007 17:30:21.951"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${om_delta_task}</var>
<arg>${om_delta_task_list}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251007 17:30:21.952" level="INFO">${om_delta_task} = {'taskName': 'OmDeltaRequest', 'lastUpdatedTimestamp': 1759858221931, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</msg>
<status status="PASS" starttime="20251007 17:30:21.951" endtime="20251007 17:30:21.952"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${om_delta_task_seq_num}</var>
<arg>int(${om_delta_task["lastUpdatedSeqNumber"]})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:21.952" level="INFO">${om_delta_task_seq_num} = 816</msg>
<status status="PASS" starttime="20251007 17:30:21.952" endtime="20251007 17:30:21.952"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${om_task_names}</var>
<arg>["NSSummaryTask", "ContainerKeyMapperTask", "FileSizeCountTask", "OmTableInsightTask"]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:21.953" level="INFO">${om_task_names} = ['NSSummaryTask', 'ContainerKeyMapperTask', 'FileSizeCountTask', 'OmTableInsightTask']</msg>
<status status="PASS" starttime="20251007 17:30:21.952" endtime="20251007 17:30:21.953"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${om_tasks}</var>
<arg>[task for task in ${tasks} if task["taskName"] in ${om_task_names}]</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251007 17:30:21.953" level="INFO">${om_tasks} = [{'taskName': 'OmTableInsightTask', 'lastUpdatedTimestamp': 1759858219938, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}, {'taskName': 'NSSummaryTask', 'lastUpdatedTi...</msg>
<status status="PASS" starttime="20251007 17:30:21.953" endtime="20251007 17:30:21.953"/>
</kw>
<for flavor="IN">
<var>${task}</var>
<value>@{om_tasks}</value>
<iter>
<var name="${task}">{'taskName': 'OmTableInsightTask', 'lastUpdatedTimestamp': 1759858219938, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<if>
<branch type="IF" condition="${task[&quot;isCurrentTaskRunning&quot;]} == 0">
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}</arg>
<arg>${om_delta_task_seq_num}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20251007 17:30:21.954" endtime="20251007 17:30:21.955"/>
</kw>
<status status="PASS" starttime="20251007 17:30:21.954" endtime="20251007 17:30:21.955"/>
</branch>
<status status="PASS" starttime="20251007 17:30:21.954" endtime="20251007 17:30:21.955"/>
</if>
<status status="PASS" starttime="20251007 17:30:21.954" endtime="20251007 17:30:21.955"/>
</iter>
<iter>
<var name="${task}">{'taskName': 'NSSummaryTask', 'lastUpdatedTimestamp': 1759858219942, 'lastUpdatedSeqNumber': 816, 'lastTaskRunStatus': 0, 'isCurrentTaskRunning': 0}</var>
<if>
<branch type="IF" condition="${task[&quot;isCurrentTaskRunning&quot;]} == 0">
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${task["lastUpdatedSeqNumber"]}</arg>
<arg>${om_delta_task_seq_num}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20251007 17:30:21.956" endtime="20251007 17:30:21.956"/>
</kw>
<status status="PASS" starttime="20251007 17:30:21.955" endtime="20251007 17:30:21.956"/>
</branch>
<status status="PASS" starttime="20251007 17:30:21.955" endtime="20251007 17:30:21.956"/>
</if>
<status status="PASS" starttime="20251007 17:30:21.955" endtime="20251007 17:30:21.956"/>
</iter>
<status status="PASS" starttime="20251007 17:30:21.953" endtime="20251007 17:30:21.956"/>
</for>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:19.912" endtime="20251007 17:30:21.956"/>
</test>
<doc>Test to validate the recon task status API works properly</doc>
<status status="PASS" starttime="20251007 17:30:10.654" endtime="20251007 17:30:21.957"/>
</suite>
<status status="PASS" starttime="20251007 17:28:51.504" endtime="20251007 17:30:21.958"/>
</suite>
<suite id="s1-s4" name="Loaddata" source="/opt/hadoop/smoketest/topology/loaddata.robot">
<test id="s1-s4-t1" name="Create a volume, bucket and key" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create topvol1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:22.499" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:25.339" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:25.340" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:22.497" endtime="20251007 17:30:25.340"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:25.341" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:25.340" endtime="20251007 17:30:25.341"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:25.341" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:25.341" endtime="20251007 17:30:25.341"/>
</kw>
<status status="PASS" starttime="20251007 17:30:22.496" endtime="20251007 17:30:25.341"/>
</kw>
<msg timestamp="20251007 17:30:25.341" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:22.496" endtime="20251007 17:30:25.341"/>
</kw>
<msg timestamp="20251007 17:30:25.341" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:22.496" endtime="20251007 17:30:25.341"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:25.342" endtime="20251007 17:30:25.342"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:25.345" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:28.165" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:28.165" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:25.343" endtime="20251007 17:30:28.165"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:28.166" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:28.166" endtime="20251007 17:30:28.166"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:28.167" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:28.166" endtime="20251007 17:30:28.167"/>
</kw>
<status status="PASS" starttime="20251007 17:30:25.342" endtime="20251007 17:30:28.167"/>
</kw>
<msg timestamp="20251007 17:30:28.167" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:25.342" endtime="20251007 17:30:28.167"/>
</kw>
<msg timestamp="20251007 17:30:28.167" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:25.342" endtime="20251007 17:30:28.167"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:28.167" endtime="20251007 17:30:28.168"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:28.171" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:32.712" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:32.712" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:28.168" endtime="20251007 17:30:32.712"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:32.713" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:32.713" endtime="20251007 17:30:32.713"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:32.713" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:32.713" endtime="20251007 17:30:32.714"/>
</kw>
<status status="PASS" starttime="20251007 17:30:28.168" endtime="20251007 17:30:32.714"/>
</kw>
<msg timestamp="20251007 17:30:32.714" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:28.168" endtime="20251007 17:30:32.714"/>
</kw>
<msg timestamp="20251007 17:30:32.714" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:28.168" endtime="20251007 17:30:32.714"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:32.714" endtime="20251007 17:30:32.714"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:22.495" endtime="20251007 17:30:32.714"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251007 17:30:22.459" endtime="20251007 17:30:32.715"/>
</suite>
<suite id="s1-s5" name="readdata-first-half" source="/opt/hadoop/smoketest/topology/readdata.robot">
<test id="s1-s5-t1" name="Read data from previously created key" line="27">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20251007 17:30:36.845" level="INFO">${random} = 46456</msg>
<status status="PASS" starttime="20251007 17:30:36.845" endtime="20251007 17:30:36.845"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:30:36.849" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-46456 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:30:55.527" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:30:55.527" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:36.846" endtime="20251007 17:30:55.527"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:30:55.528" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:55.527" endtime="20251007 17:30:55.528"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:30:55.528" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:30:55.528" endtime="20251007 17:30:55.528"/>
</kw>
<status status="PASS" starttime="20251007 17:30:36.846" endtime="20251007 17:30:55.528"/>
</kw>
<msg timestamp="20251007 17:30:55.529" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:30:36.846" endtime="20251007 17:30:55.529"/>
</kw>
<msg timestamp="20251007 17:30:55.529" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:30:36.845" endtime="20251007 17:30:55.529"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:30:55.529" endtime="20251007 17:30:55.529"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:30:36.844" endtime="20251007 17:30:55.529"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251007 17:30:36.808" endtime="20251007 17:30:55.530"/>
</suite>
<suite id="s1-s6" name="readdata-second-half" source="/opt/hadoop/smoketest/topology/readdata.robot">
<test id="s1-s6-t1" name="Read data from previously created key" line="27">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20251007 17:31:16.119" level="INFO">${random} = 07656</msg>
<status status="PASS" starttime="20251007 17:31:16.118" endtime="20251007 17:31:16.119"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251007 17:31:16.122" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-07656 2&gt;&amp;1'.</msg>
<msg timestamp="20251007 17:31:50.617" level="INFO">${rc} = 0</msg>
<msg timestamp="20251007 17:31:50.617" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:31:16.120" endtime="20251007 17:31:50.617"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251007 17:31:50.618" level="INFO">WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:31:50.617" endtime="20251007 17:31:50.618"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251007 17:31:50.618" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251007 17:31:50.618" endtime="20251007 17:31:50.618"/>
</kw>
<status status="PASS" starttime="20251007 17:31:16.119" endtime="20251007 17:31:50.618"/>
</kw>
<msg timestamp="20251007 17:31:50.618" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251007 17:31:16.119" endtime="20251007 17:31:50.618"/>
</kw>
<msg timestamp="20251007 17:31:50.618" level="INFO">${output} = WARNING: HDFS_OM_SH_OPTS has been deprecated by OZONE_SH_OPTS.</msg>
<status status="PASS" starttime="20251007 17:31:16.119" endtime="20251007 17:31:50.619"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251007 17:31:50.619" endtime="20251007 17:31:50.619"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251007 17:31:16.118" endtime="20251007 17:31:50.619"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251007 17:31:16.084" endtime="20251007 17:31:50.620"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="177247"/>
</suite>
<statistics>
<total>
<stat pass="37" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="37" fail="0" skip="0" id="s1" name="ozone-topology">ozone-topology</stat>
<stat pass="2" fail="0" skip="0" id="s1-s1" name="Basic">ozone-topology.Basic</stat>
<stat pass="4" fail="0" skip="0" id="s1-s2" name="Cli">ozone-topology.Cli</stat>
<stat pass="28" fail="0" skip="0" id="s1-s3" name="Recon">ozone-topology.Recon</stat>
<stat pass="7" fail="0" skip="0" id="s1-s3-s1" name="Recon-Api">ozone-topology.Recon.Recon-Api</stat>
<stat pass="16" fail="0" skip="0" id="s1-s3-s2" name="Recon-Nssummary">ozone-topology.Recon.Recon-Nssummary</stat>
<stat pass="5" fail="0" skip="0" id="s1-s3-s3" name="Recon-Taskstatus">ozone-topology.Recon.Recon-Taskstatus</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="Loaddata">ozone-topology.Loaddata</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="readdata-first-half">ozone-topology.readdata-first-half</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="readdata-second-half">ozone-topology.readdata-second-half</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
