<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251019 03:20:12.671" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-debug-tools">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:16:15.513" endtime="20251019 03:16:15.513"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:15.517" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:16.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:16.501" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251019 03:16:15.514" endtime="20251019 03:16:16.501"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:16.502" level="INFO">true</msg>
<status status="PASS" starttime="20251019 03:16:16.501" endtime="20251019 03:16:16.502"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:16.502" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:16.502" endtime="20251019 03:16:16.502"/>
</kw>
<status status="PASS" starttime="20251019 03:16:15.514" endtime="20251019 03:16:16.502"/>
</kw>
<msg timestamp="20251019 03:16:16.503" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:15.514" endtime="20251019 03:16:16.503"/>
</kw>
<msg timestamp="20251019 03:16:16.503" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251019 03:16:15.514" endtime="20251019 03:16:16.503"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251019 03:16:16.503" endtime="20251019 03:16:16.503"/>
</kw>
<status status="NOT RUN" starttime="20251019 03:16:16.503" endtime="20251019 03:16:16.503"/>
</branch>
<status status="PASS" starttime="20251019 03:16:16.503" endtime="20251019 03:16:16.503"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251019 03:16:16.504" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251019 03:16:16.503" endtime="20251019 03:16:16.504"/>
</kw>
<status status="PASS" starttime="20251019 03:16:15.513" endtime="20251019 03:16:16.504"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251019 03:16:16.504" endtime="20251019 03:16:16.504"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:16.508" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:16.512" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:16.513" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20251019 03:16:16.506" endtime="20251019 03:16:16.513"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:16.513" level="INFO">om</msg>
<status status="PASS" starttime="20251019 03:16:16.513" endtime="20251019 03:16:16.513"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:16.514" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:16.514" endtime="20251019 03:16:16.514"/>
</kw>
<status status="PASS" starttime="20251019 03:16:16.505" endtime="20251019 03:16:16.514"/>
</kw>
<msg timestamp="20251019 03:16:16.514" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:16.505" endtime="20251019 03:16:16.514"/>
</kw>
<msg timestamp="20251019 03:16:16.514" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20251019 03:16:16.505" endtime="20251019 03:16:16.514"/>
</kw>
<msg timestamp="20251019 03:16:16.515" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:16:16.504" endtime="20251019 03:16:16.515"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251019 03:16:16.515" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:16:16.515" endtime="20251019 03:16:16.515"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:16.519" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:16.575" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:16.576" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:16:16.516" endtime="20251019 03:16:16.576"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:16.577" level="INFO"/>
<status status="PASS" starttime="20251019 03:16:16.576" endtime="20251019 03:16:16.577"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:16.577" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:16.577" endtime="20251019 03:16:16.577"/>
</kw>
<status status="PASS" starttime="20251019 03:16:16.516" endtime="20251019 03:16:16.577"/>
</kw>
<msg timestamp="20251019 03:16:16.577" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:16.516" endtime="20251019 03:16:16.577"/>
</kw>
<status status="PASS" starttime="20251019 03:16:16.515" endtime="20251019 03:16:16.578"/>
</kw>
<status status="PASS" starttime="20251019 03:16:16.515" endtime="20251019 03:16:16.578"/>
</kw>
<status status="PASS" starttime="20251019 03:16:15.512" endtime="20251019 03:16:16.578"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251019 03:16:15.512" endtime="20251019 03:16:16.578"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251019 03:16:15.466" endtime="20251019 03:16:16.579"/>
</suite>
<suite id="s1-s2" name="Auditparser" source="/opt/hadoop/smoketest/debug/auditparser.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:16:17.346" endtime="20251019 03:16:17.346"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:17.350" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:18.333" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:18.333" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251019 03:16:17.347" endtime="20251019 03:16:18.333"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:18.334" level="INFO">true</msg>
<status status="PASS" starttime="20251019 03:16:18.333" endtime="20251019 03:16:18.334"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:18.334" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:18.334" endtime="20251019 03:16:18.334"/>
</kw>
<status status="PASS" starttime="20251019 03:16:17.347" endtime="20251019 03:16:18.334"/>
</kw>
<msg timestamp="20251019 03:16:18.335" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:17.347" endtime="20251019 03:16:18.335"/>
</kw>
<msg timestamp="20251019 03:16:18.335" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251019 03:16:17.346" endtime="20251019 03:16:18.335"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251019 03:16:18.335" endtime="20251019 03:16:18.335"/>
</kw>
<status status="NOT RUN" starttime="20251019 03:16:18.335" endtime="20251019 03:16:18.335"/>
</branch>
<status status="PASS" starttime="20251019 03:16:18.335" endtime="20251019 03:16:18.335"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251019 03:16:18.336" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251019 03:16:18.336" endtime="20251019 03:16:18.336"/>
</kw>
<status status="PASS" starttime="20251019 03:16:17.346" endtime="20251019 03:16:18.336"/>
</kw>
<test id="s1-s2-t1" name="Testing audit parser" line="41">
<kw name="Create data" type="SETUP">
<kw name="Freon OMBG" library="freon">
<arg>prefix=auditparser</arg>
<arg>n=${buckets}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ombg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:18.342" level="INFO">Running command 'ozone freon ombg --om-service-id=omservice -t 1 -n5 -p auditparser  2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:23.495" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:23.495" level="INFO">${output} = 2025-10-19 03:16:20,313 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 5
2025-10-19 03:16:20,390 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (...</msg>
<status status="PASS" starttime="20251019 03:16:18.339" endtime="20251019 03:16:23.495"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:23.497" level="INFO">2025-10-19 03:16:20,313 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 5
2025-10-19 03:16:20,390 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 5)
2025-10-19 03:16:21,392 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 5)
2025-10-19 03:16:22,296 [main] INFO rpc.RpcClient: Creating Volume: vol1, with testuser as owner and space quota set to -1 bytes, counts quota set to -1
2025-10-19 03:16:22,392 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 5)
2025-10-19 03:16:23,393 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (5 out of 5)
2025-10-19 03:16:23,406 [shutdown-hook-0] INFO metrics: type=TIMER, name=bucket-create, count=5, min=24.177509, max=70.507026, mean=40.3061488, stddev=16.393525896029953, median=34.848102, p75=43.23162, p95=70.507026, p98=70.507026, p99=70.507026, p999=70.507026, mean_rate=5.323895018667812, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-10-19 03:16:23,407 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-10-19 03:16:23,407 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-19 03:16:23,407 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 5</msg>
<status status="PASS" starttime="20251019 03:16:23.496" endtime="20251019 03:16:23.497"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:23.498" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:23.497" endtime="20251019 03:16:23.498"/>
</kw>
<status status="PASS" starttime="20251019 03:16:18.339" endtime="20251019 03:16:23.498"/>
</kw>
<msg timestamp="20251019 03:16:23.498" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:18.339" endtime="20251019 03:16:23.498"/>
</kw>
<msg timestamp="20251019 03:16:23.498" level="INFO">${result} = 2025-10-19 03:16:20,313 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 5
2025-10-19 03:16:20,390 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (...</msg>
<status status="PASS" starttime="20251019 03:16:18.338" endtime="20251019 03:16:23.498"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:16:23.499" endtime="20251019 03:16:23.499"/>
</kw>
<status status="PASS" starttime="20251019 03:16:18.337" endtime="20251019 03:16:23.499"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=auditparser</arg>
<arg>n=100</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:23.505" level="INFO">Running command 'ozone freon ockg --om-service-id=omservice -t 1 -n100 -p auditparser  2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:38.006" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:38.006" level="INFO">${output} = 2025-10-19 03:16:25,472 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 100
2025-10-19 03:16:25,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 %...</msg>
<status status="PASS" starttime="20251019 03:16:23.502" endtime="20251019 03:16:38.006"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:38.007" level="INFO">2025-10-19 03:16:25,472 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 100
2025-10-19 03:16:25,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-19 03:16:26,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-19 03:16:27,463 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, testuser as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-10-19 03:16:27,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-19 03:16:27,839 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-10-19 03:16:27,907 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig0-
2025-10-19 03:16:28,536 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-19 03:16:29,541 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-10-19 03:16:30,399 [pool-2-thread-1] INFO netty.NettyConfigKeys$DataStream: setTlsConf GrpcTlsConfig1-
2025-10-19 03:16:30,554 [Thread-5] INFO freon.ProgressBar: Progress: 3.00 % (3 out of 100)
2025-10-19 03:16:31,555 [Thread-5] INFO freon.ProgressBar: Progress: 15.00 % (15 out of 100)
2025-10-19 03:16:32,555 [Thread-5] INFO freon.ProgressBar: Progress: 28.00 % (28 out of 100)
2025-10-19 03:16:33,557 [Thread-5] INFO freon.ProgressBar: Progress: 41.00 % (41 out of 100)
2025-10-19 03:16:34,557 [Thread-5] INFO freon.ProgressBar: Progress: 56.00 % (56 out of 100)
2025-10-19 03:16:35,558 [Thread-5] INFO freon.ProgressBar: Progress: 71.00 % (71 out of 100)
2025-10-19 03:16:36,559 [Thread-5] INFO freon.ProgressBar: Progress: 87.00 % (87 out of 100)
2025-10-19 03:16:37,560 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-10-19 03:16:37,595 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=100, min=50.652491, max=2580.03412, mean=97.14674419760348, stddev=243.92371734310106, median=70.144842, p75=77.901022, p95=93.135901, p98=167.037646, p99=262.414363, p999=2580.03412, mean_rate=9.918867138411295, m1=6.135591385410226, m5=5.55206262484112, m15=5.4509693983549505, rate_unit=events/second, duration_unit=milliseconds
2025-10-19 03:16:37,597 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 12
2025-10-19 03:16:37,597 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-10-19 03:16:37,597 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20251019 03:16:38.007" endtime="20251019 03:16:38.007"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:38.008" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:38.007" endtime="20251019 03:16:38.008"/>
</kw>
<status status="PASS" starttime="20251019 03:16:23.501" endtime="20251019 03:16:38.008"/>
</kw>
<msg timestamp="20251019 03:16:38.008" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:23.501" endtime="20251019 03:16:38.008"/>
</kw>
<msg timestamp="20251019 03:16:38.008" level="INFO">${result} = 2025-10-19 03:16:25,472 [main] INFO freon.BaseFreonGenerator: Executing test with prefix auditparser and number-of-tests 100
2025-10-19 03:16:25,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 %...</msg>
<status status="PASS" starttime="20251019 03:16:23.501" endtime="20251019 03:16:38.008"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:16:38.009" endtime="20251019 03:16:38.009"/>
</kw>
<status status="PASS" starttime="20251019 03:16:23.499" endtime="20251019 03:16:38.009"/>
</kw>
<status status="PASS" starttime="20251019 03:16:18.337" endtime="20251019 03:16:38.009"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${logdir}</var>
<arg>OZONE_LOG_DIR</arg>
<arg>/var/log/ozone</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20251019 03:16:38.010" level="INFO">${logdir} = /var/log/hadoop</msg>
<status status="PASS" starttime="20251019 03:16:38.009" endtime="20251019 03:16:38.010"/>
</kw>
<kw name="Execute" library="os">
<var>${logfile}</var>
<arg>ls -t "${logdir}" | grep om-audit | head -1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:38.014" level="INFO">Running command 'ls -t "/var/log/hadoop" | grep om-audit | head -1 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:38.018" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:38.019" level="INFO">${output} = om-audit-om1.log</msg>
<status status="PASS" starttime="20251019 03:16:38.011" endtime="20251019 03:16:38.019"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:38.019" level="INFO">om-audit-om1.log</msg>
<status status="PASS" starttime="20251019 03:16:38.019" endtime="20251019 03:16:38.019"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:38.020" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:38.020" endtime="20251019 03:16:38.020"/>
</kw>
<status status="PASS" starttime="20251019 03:16:38.010" endtime="20251019 03:16:38.020"/>
</kw>
<msg timestamp="20251019 03:16:38.020" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:38.010" endtime="20251019 03:16:38.020"/>
</kw>
<msg timestamp="20251019 03:16:38.020" level="INFO">${logfile} = om-audit-om1.log</msg>
<status status="PASS" starttime="20251019 03:16:38.010" endtime="20251019 03:16:38.020"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone debug auditparser "${auditworkdir}/audit.db" load "${logdir}/${logfile}"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:38.024" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" load "/var/log/hadoop/om-audit-om1.log" 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:39.967" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:39.967" level="INFO">${output} = /var/log/hadoop/om-audit-om1.log has been loaded successfully</msg>
<status status="PASS" starttime="20251019 03:16:38.021" endtime="20251019 03:16:39.967"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:39.968" level="INFO">/var/log/hadoop/om-audit-om1.log has been loaded successfully</msg>
<status status="PASS" starttime="20251019 03:16:39.967" endtime="20251019 03:16:39.968"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:39.968" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:39.968" endtime="20251019 03:16:39.969"/>
</kw>
<status status="PASS" starttime="20251019 03:16:38.021" endtime="20251019 03:16:39.969"/>
</kw>
<msg timestamp="20251019 03:16:39.969" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:38.021" endtime="20251019 03:16:39.969"/>
</kw>
<status status="PASS" starttime="20251019 03:16:38.021" endtime="20251019 03:16:39.969"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" template top5cmds</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:39.973" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" template top5cmds 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:41.691" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:41.691" level="INFO">${output} = ALLOCATE_KEY	100	
COMMIT_KEY	99	
CREATE_BUCKET	6	
CREATE_VOLUME	1	
</msg>
<status status="PASS" starttime="20251019 03:16:39.970" endtime="20251019 03:16:41.691"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:41.692" level="INFO">ALLOCATE_KEY	100	
COMMIT_KEY	99	
CREATE_BUCKET	6	
CREATE_VOLUME	1	
</msg>
<status status="PASS" starttime="20251019 03:16:41.691" endtime="20251019 03:16:41.692"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:41.692" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:41.692" endtime="20251019 03:16:41.692"/>
</kw>
<status status="PASS" starttime="20251019 03:16:39.970" endtime="20251019 03:16:41.693"/>
</kw>
<msg timestamp="20251019 03:16:41.693" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:39.969" endtime="20251019 03:16:41.693"/>
</kw>
<msg timestamp="20251019 03:16:41.693" level="INFO">${result} = ALLOCATE_KEY	100	
COMMIT_KEY	99	
CREATE_BUCKET	6	
CREATE_VOLUME	1	
</msg>
<status status="PASS" starttime="20251019 03:16:39.969" endtime="20251019 03:16:41.693"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>ALLOCATE_KEY</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:16:41.693" endtime="20251019 03:16:41.694"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" template top5users</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:41.698" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" template top5users 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:43.378" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:43.378" level="INFO">${output} = testuser/om@EXAMPLE.COM	206	
</msg>
<status status="PASS" starttime="20251019 03:16:41.695" endtime="20251019 03:16:43.378"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:43.379" level="INFO">testuser/om@EXAMPLE.COM	206	
</msg>
<status status="PASS" starttime="20251019 03:16:43.378" endtime="20251019 03:16:43.379"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:43.379" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:43.379" endtime="20251019 03:16:43.379"/>
</kw>
<status status="PASS" starttime="20251019 03:16:41.694" endtime="20251019 03:16:43.380"/>
</kw>
<msg timestamp="20251019 03:16:43.380" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:41.694" endtime="20251019 03:16:43.380"/>
</kw>
<msg timestamp="20251019 03:16:43.380" level="INFO">${result} = testuser/om@EXAMPLE.COM	206	
</msg>
<status status="PASS" starttime="20251019 03:16:41.694" endtime="20251019 03:16:43.380"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Set username</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set username">
<kw name="Get test user principal" library="commonlib">
<var>${principal}</var>
<arg>testuser</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:43.385" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:43.389" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:43.389" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20251019 03:16:43.382" endtime="20251019 03:16:43.389"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:43.390" level="INFO">om</msg>
<status status="PASS" starttime="20251019 03:16:43.389" endtime="20251019 03:16:43.390"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:43.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:43.390" endtime="20251019 03:16:43.390"/>
</kw>
<status status="PASS" starttime="20251019 03:16:43.382" endtime="20251019 03:16:43.390"/>
</kw>
<msg timestamp="20251019 03:16:43.391" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:43.381" endtime="20251019 03:16:43.391"/>
</kw>
<msg timestamp="20251019 03:16:43.391" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20251019 03:16:43.381" endtime="20251019 03:16:43.391"/>
</kw>
<msg timestamp="20251019 03:16:43.391" level="INFO">${principal} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:16:43.381" endtime="20251019 03:16:43.391"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${user}</arg>
<arg>${principal}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251019 03:16:43.391" level="INFO">${user} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:16:43.391" endtime="20251019 03:16:43.391"/>
</kw>
<status status="PASS" starttime="20251019 03:16:43.380" endtime="20251019 03:16:43.391"/>
</kw>
<status status="PASS" starttime="20251019 03:16:43.380" endtime="20251019 03:16:43.392"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${user}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:16:43.392" endtime="20251019 03:16:43.392"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" query "select count(*) from audit where op='CREATE_VOLUME' and RESULT='SUCCESS'"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:43.395" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" query "select count(*) from audit where op='CREATE_VOLUME' and RESULT='SUCCESS'" 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:45.101" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:45.101" level="INFO">${output} = 1	
</msg>
<status status="PASS" starttime="20251019 03:16:43.393" endtime="20251019 03:16:45.101"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:45.102" level="INFO">1	
</msg>
<status status="PASS" starttime="20251019 03:16:45.101" endtime="20251019 03:16:45.102"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:45.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:45.102" endtime="20251019 03:16:45.102"/>
</kw>
<status status="PASS" starttime="20251019 03:16:43.393" endtime="20251019 03:16:45.102"/>
</kw>
<msg timestamp="20251019 03:16:45.102" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:43.392" endtime="20251019 03:16:45.102"/>
</kw>
<msg timestamp="20251019 03:16:45.103" level="INFO">${result} = 1	
</msg>
<status status="PASS" starttime="20251019 03:16:43.392" endtime="20251019 03:16:45.103"/>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<var>${result}</var>
<arg>${result}</arg>
<doc>Converts the given item to a floating point number.</doc>
<msg timestamp="20251019 03:16:45.103" level="INFO">${result} = 1.0</msg>
<status status="PASS" starttime="20251019 03:16:45.103" endtime="20251019 03:16:45.103"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${result}&gt;=1</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:16:45.103" endtime="20251019 03:16:45.104"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone debug auditparser "${auditworkdir}/audit.db" query "select count(*) from audit where op='CREATE_BUCKET' and RESULT='SUCCESS'"</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:45.107" level="INFO">Running command 'ozone debug auditparser "/tmp/audit.db" query "select count(*) from audit where op='CREATE_BUCKET' and RESULT='SUCCESS'" 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:46.825" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:46.825" level="INFO">${output} = 6	
</msg>
<status status="PASS" starttime="20251019 03:16:45.105" endtime="20251019 03:16:46.825"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:46.826" level="INFO">6	
</msg>
<status status="PASS" starttime="20251019 03:16:46.826" endtime="20251019 03:16:46.826"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:46.827" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:46.827" endtime="20251019 03:16:46.827"/>
</kw>
<status status="PASS" starttime="20251019 03:16:45.104" endtime="20251019 03:16:46.827"/>
</kw>
<msg timestamp="20251019 03:16:46.827" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:45.104" endtime="20251019 03:16:46.827"/>
</kw>
<msg timestamp="20251019 03:16:46.827" level="INFO">${result} = 6	
</msg>
<status status="PASS" starttime="20251019 03:16:45.104" endtime="20251019 03:16:46.828"/>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<var>${result}</var>
<arg>${result}</arg>
<doc>Converts the given item to a floating point number.</doc>
<msg timestamp="20251019 03:16:46.828" level="INFO">${result} = 6.0</msg>
<status status="PASS" starttime="20251019 03:16:46.828" endtime="20251019 03:16:46.828"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${result}&gt;=${buckets}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:16:46.828" endtime="20251019 03:16:46.829"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:16:18.336" endtime="20251019 03:16:46.829"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20251019 03:16:17.301" endtime="20251019 03:16:46.830"/>
</suite>
<suite id="s1-s3" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s3-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:16:47.645" endtime="20251019 03:16:47.645"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:47.649" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:48.635" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:48.635" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251019 03:16:47.646" endtime="20251019 03:16:48.635"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:48.636" level="INFO">true</msg>
<status status="PASS" starttime="20251019 03:16:48.635" endtime="20251019 03:16:48.636"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:48.637" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:48.636" endtime="20251019 03:16:48.637"/>
</kw>
<status status="PASS" starttime="20251019 03:16:47.646" endtime="20251019 03:16:48.637"/>
</kw>
<msg timestamp="20251019 03:16:48.637" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:47.645" endtime="20251019 03:16:48.637"/>
</kw>
<msg timestamp="20251019 03:16:48.637" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251019 03:16:47.645" endtime="20251019 03:16:48.637"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251019 03:16:48.638" endtime="20251019 03:16:48.638"/>
</kw>
<status status="NOT RUN" starttime="20251019 03:16:48.637" endtime="20251019 03:16:48.638"/>
</branch>
<status status="PASS" starttime="20251019 03:16:48.637" endtime="20251019 03:16:48.638"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251019 03:16:48.638" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251019 03:16:48.638" endtime="20251019 03:16:48.638"/>
</kw>
<status status="PASS" starttime="20251019 03:16:47.645" endtime="20251019 03:16:48.639"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251019 03:16:48.639" endtime="20251019 03:16:48.639"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:48.643" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:48.647" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:48.647" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20251019 03:16:48.640" endtime="20251019 03:16:48.647"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:48.648" level="INFO">scm</msg>
<status status="PASS" starttime="20251019 03:16:48.648" endtime="20251019 03:16:48.648"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:48.648" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:48.648" endtime="20251019 03:16:48.649"/>
</kw>
<status status="PASS" starttime="20251019 03:16:48.640" endtime="20251019 03:16:48.649"/>
</kw>
<msg timestamp="20251019 03:16:48.649" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:48.640" endtime="20251019 03:16:48.649"/>
</kw>
<msg timestamp="20251019 03:16:48.649" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20251019 03:16:48.639" endtime="20251019 03:16:48.649"/>
</kw>
<msg timestamp="20251019 03:16:48.649" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:16:48.639" endtime="20251019 03:16:48.649"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251019 03:16:48.650" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:16:48.649" endtime="20251019 03:16:48.650"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:48.653" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:48.737" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:48.737" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:16:48.651" endtime="20251019 03:16:48.737"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:48.738" level="INFO"/>
<status status="PASS" starttime="20251019 03:16:48.737" endtime="20251019 03:16:48.738"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:48.738" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:48.738" endtime="20251019 03:16:48.738"/>
</kw>
<status status="PASS" starttime="20251019 03:16:48.651" endtime="20251019 03:16:48.738"/>
</kw>
<msg timestamp="20251019 03:16:48.738" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:48.650" endtime="20251019 03:16:48.739"/>
</kw>
<status status="PASS" starttime="20251019 03:16:48.650" endtime="20251019 03:16:48.739"/>
</kw>
<status status="PASS" starttime="20251019 03:16:48.650" endtime="20251019 03:16:48.739"/>
</kw>
<status status="PASS" starttime="20251019 03:16:47.644" endtime="20251019 03:16:48.739"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251019 03:16:47.644" endtime="20251019 03:16:48.739"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251019 03:16:47.604" endtime="20251019 03:16:48.740"/>
</suite>
<suite id="s1-s4" name="Ozone-Debug-Tests" source="/opt/hadoop/smoketest/debug/ozone-debug-tests.robot">
<kw name="Write keys" type="SETUP">
<kw name="Execute" library="os">
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME} --space-quota 100TB --namespace-quota 100</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:49.596" level="INFO">Running command 'ozone sh volume create o3://omservice/cli-debug-volume9798 --space-quota 100TB --namespace-quota 100 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:53.364" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:53.364" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:16:49.593" endtime="20251019 03:16:53.364"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:53.365" level="INFO"/>
<status status="PASS" starttime="20251019 03:16:53.364" endtime="20251019 03:16:53.365"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:53.365" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:53.365" endtime="20251019 03:16:53.365"/>
</kw>
<status status="PASS" starttime="20251019 03:16:49.593" endtime="20251019 03:16:53.365"/>
</kw>
<msg timestamp="20251019 03:16:53.365" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:49.592" endtime="20251019 03:16:53.366"/>
</kw>
<status status="PASS" starttime="20251019 03:16:49.592" endtime="20251019 03:16:53.366"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${BASE_PATH} --space-quota 1TB</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:53.369" level="INFO">Running command 'ozone sh bucket create o3://omservice/cli-debug-volume9798/cli-debug-bucket --space-quota 1TB 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:56.723" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:56.723" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:16:53.367" endtime="20251019 03:16:56.723"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:56.724" level="INFO"/>
<status status="PASS" starttime="20251019 03:16:56.723" endtime="20251019 03:16:56.724"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:56.724" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:56.724" endtime="20251019 03:16:56.724"/>
</kw>
<status status="PASS" starttime="20251019 03:16:53.366" endtime="20251019 03:16:56.724"/>
</kw>
<msg timestamp="20251019 03:16:56.724" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:53.366" endtime="20251019 03:16:56.725"/>
</kw>
<status status="PASS" starttime="20251019 03:16:53.366" endtime="20251019 03:16:56.725"/>
</kw>
<kw name="Execute" library="os">
<arg>dd if=/dev/urandom of=${TEMP_DIR}/${TESTFILE} bs=100000 count=15</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:56.728" level="INFO">Running command 'dd if=/dev/urandom of=/tmp/testfile bs=100000 count=15 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:16:56.738" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:16:56.738" level="INFO">${output} = 15+0 records in
15+0 records out
1500000 bytes (1.5 MB, 1.4 MiB) copied, 0.00594637 s, 252 MB/s</msg>
<status status="PASS" starttime="20251019 03:16:56.726" endtime="20251019 03:16:56.738"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:16:56.739" level="INFO">15+0 records in
15+0 records out
1500000 bytes (1.5 MB, 1.4 MiB) copied, 0.00594637 s, 252 MB/s</msg>
<status status="PASS" starttime="20251019 03:16:56.739" endtime="20251019 03:16:56.739"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:16:56.740" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:16:56.739" endtime="20251019 03:16:56.740"/>
</kw>
<status status="PASS" starttime="20251019 03:16:56.725" endtime="20251019 03:16:56.740"/>
</kw>
<msg timestamp="20251019 03:16:56.740" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:56.725" endtime="20251019 03:16:56.740"/>
</kw>
<status status="PASS" starttime="20251019 03:16:56.725" endtime="20251019 03:16:56.740"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put ${BASE_PATH}/${TESTFILE} ${TEMP_DIR}/${TESTFILE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:16:56.744" level="INFO">Running command 'ozone sh key put o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:02.423" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:02.423" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:16:56.742" endtime="20251019 03:17:02.423"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:02.424" level="INFO"/>
<status status="PASS" starttime="20251019 03:17:02.424" endtime="20251019 03:17:02.424"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:02.424" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:02.424" endtime="20251019 03:17:02.425"/>
</kw>
<status status="PASS" starttime="20251019 03:16:56.741" endtime="20251019 03:17:02.425"/>
</kw>
<msg timestamp="20251019 03:17:02.425" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:16:56.741" endtime="20251019 03:17:02.425"/>
</kw>
<status status="PASS" starttime="20251019 03:16:56.740" endtime="20251019 03:17:02.425"/>
</kw>
<kw name="Create Key" library="shell">
<arg>${BASE_PATH}/${RATIS_ONE_KEY}</arg>
<arg>${TEMP_DIR}/${TESTFILE}</arg>
<arg>--type RATIS --replication ONE</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put ${args} ${key} ${file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:02.429" level="INFO">Running command 'ozone sh key put --type RATIS --replication ONE o3://omservice/cli-debug-volume9798/cli-debug-bucket/ratis-one-key /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:07.997" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:07.997" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:17:02.426" endtime="20251019 03:17:07.997"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:07.998" level="INFO"/>
<status status="PASS" starttime="20251019 03:17:07.997" endtime="20251019 03:17:07.998"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:07.998" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:07.998" endtime="20251019 03:17:07.998"/>
</kw>
<status status="PASS" starttime="20251019 03:17:02.426" endtime="20251019 03:17:07.998"/>
</kw>
<msg timestamp="20251019 03:17:07.998" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:02.426" endtime="20251019 03:17:07.999"/>
</kw>
<msg timestamp="20251019 03:17:07.999" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:17:02.426" endtime="20251019 03:17:07.999"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:07.999" endtime="20251019 03:17:07.999"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Uploaded ${file} to ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:07.999" level="INFO">Uploaded /tmp/testfile to o3://omservice/cli-debug-volume9798/cli-debug-bucket/ratis-one-key</msg>
<status status="PASS" starttime="20251019 03:17:07.999" endtime="20251019 03:17:07.999"/>
</kw>
<status status="PASS" starttime="20251019 03:17:02.425" endtime="20251019 03:17:07.999"/>
</kw>
<kw name="Create Key" library="shell">
<arg>${BASE_PATH}/${RATIS_THREE_KEY}</arg>
<arg>${TEMP_DIR}/${TESTFILE}</arg>
<arg>--type RATIS --replication THREE</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put ${args} ${key} ${file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:08.003" level="INFO">Running command 'ozone sh key put --type RATIS --replication THREE o3://omservice/cli-debug-volume9798/cli-debug-bucket/ratis-three-key /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:13.420" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:13.420" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:17:08.001" endtime="20251019 03:17:13.420"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:13.421" level="INFO"/>
<status status="PASS" starttime="20251019 03:17:13.420" endtime="20251019 03:17:13.421"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:13.421" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:13.421" endtime="20251019 03:17:13.421"/>
</kw>
<status status="PASS" starttime="20251019 03:17:08.001" endtime="20251019 03:17:13.421"/>
</kw>
<msg timestamp="20251019 03:17:13.421" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:08.000" endtime="20251019 03:17:13.421"/>
</kw>
<msg timestamp="20251019 03:17:13.422" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:17:08.000" endtime="20251019 03:17:13.422"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:13.422" endtime="20251019 03:17:13.422"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Uploaded ${file} to ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:13.422" level="INFO">Uploaded /tmp/testfile to o3://omservice/cli-debug-volume9798/cli-debug-bucket/ratis-three-key</msg>
<status status="PASS" starttime="20251019 03:17:13.422" endtime="20251019 03:17:13.422"/>
</kw>
<status status="PASS" starttime="20251019 03:17:08.000" endtime="20251019 03:17:13.422"/>
</kw>
<kw name="Create Key" library="shell">
<arg>${BASE_PATH}/${EC_KEY}</arg>
<arg>${TEMP_DIR}/${TESTFILE}</arg>
<arg>--type EC --replication rs-3-2-1024k</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put ${args} ${key} ${file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:13.427" level="INFO">Running command 'ozone sh key put --type EC --replication rs-3-2-1024k o3://omservice/cli-debug-volume9798/cli-debug-bucket/ec-key /tmp/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:19.731" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:19.731" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:17:13.424" endtime="20251019 03:17:19.731"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:19.732" level="INFO"/>
<status status="PASS" starttime="20251019 03:17:19.731" endtime="20251019 03:17:19.732"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:19.732" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:19.732" endtime="20251019 03:17:19.732"/>
</kw>
<status status="PASS" starttime="20251019 03:17:13.424" endtime="20251019 03:17:19.732"/>
</kw>
<msg timestamp="20251019 03:17:19.733" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:13.423" endtime="20251019 03:17:19.733"/>
</kw>
<msg timestamp="20251019 03:17:19.733" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:17:13.423" endtime="20251019 03:17:19.733"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:19.733" endtime="20251019 03:17:19.733"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Uploaded ${file} to ${key}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:19.733" level="INFO">Uploaded /tmp/testfile to o3://omservice/cli-debug-volume9798/cli-debug-bucket/ec-key</msg>
<status status="PASS" starttime="20251019 03:17:19.733" endtime="20251019 03:17:19.733"/>
</kw>
<status status="PASS" starttime="20251019 03:17:13.422" endtime="20251019 03:17:19.734"/>
</kw>
<status status="PASS" starttime="20251019 03:16:49.592" endtime="20251019 03:17:19.734"/>
</kw>
<test id="s1-s4-t1" name="Test ozone debug replicas verify checksums, block-existence and container-state" line="62">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --checksums --block-existence --container-state ${BASE_PATH}/${TESTFILE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:19.738" level="INFO">Running command 'ozone debug replicas verify --checksums --block-existence --container-state o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:28.060" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:28.060" level="INFO">${output} = {
  "keys" : [ ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification S...</msg>
<status status="PASS" starttime="20251019 03:17:19.735" endtime="20251019 03:17:28.060"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:28.061" level="INFO">{
  "keys" : [ ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Key
Verification Types: checksum, blockExistence, containerState
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 1
Keys failed verification: 0

Total Execution time: 00:00:04,352
***************************************************</msg>
<status status="PASS" starttime="20251019 03:17:28.061" endtime="20251019 03:17:28.062"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:28.062" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:28.062" endtime="20251019 03:17:28.062"/>
</kw>
<status status="PASS" starttime="20251019 03:17:19.735" endtime="20251019 03:17:28.062"/>
</kw>
<msg timestamp="20251019 03:17:28.062" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:19.735" endtime="20251019 03:17:28.062"/>
</kw>
<msg timestamp="20251019 03:17:28.063" level="INFO">${output} = {
  "keys" : [ ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification S...</msg>
<status status="PASS" starttime="20251019 03:17:19.734" endtime="20251019 03:17:28.063"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:28.064" level="INFO">${json_split} = {
  "keys" : [ ],
  "pass" : true
}</msg>
<status status="PASS" starttime="20251019 03:17:28.063" endtime="20251019 03:17:28.064"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:28.064" level="INFO">${json} = {'keys': [], 'pass': True}</msg>
<status status="PASS" starttime="20251019 03:17:28.064" endtime="20251019 03:17:28.064"/>
</kw>
<msg timestamp="20251019 03:17:28.064" level="INFO">${json} = {'keys': [], 'pass': True}</msg>
<status status="PASS" starttime="20251019 03:17:28.063" endtime="20251019 03:17:28.064"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${json}[keys]</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:17:28.065" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:17:28.064" endtime="20251019 03:17:28.065"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${json}[pass]</arg>
<arg>${True}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:17:28.065" endtime="20251019 03:17:28.065"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:17:19.734" endtime="20251019 03:17:28.065"/>
</test>
<test id="s1-s4-t2" name="Test ozone debug replicas verify with RATIS ONE filter" line="70">
<kw name="Execute and validate replicas verify with filter">
<var>${key_names}</var>
<arg>RATIS</arg>
<arg>ONE</arg>
<arg>checksums</arg>
<arg>1</arg>
<kw name="Execute replicas verify with replication filter" library="ozone-debug-keywords">
<var>${output}</var>
<arg>${replication_type}</arg>
<arg>${replication_factor}</arg>
<arg>${verification_type}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --${verification_type} --type ${replication_type} --replication ${replication_factor} o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:28.071" level="INFO">Running command 'ozone debug replicas verify --checksums --type RATIS --replication ONE o3://omservice/cli-debug-volume9798/cli-debug-bucket --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:34.431" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:34.431" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 115816896...</msg>
<status status="PASS" starttime="20251019 03:17:28.068" endtime="20251019 03:17:34.431"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:34.432" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 115816896921600102,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : true
  } ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Bucket
Verification Types: checksum
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket

Number of Volumes processed: 0
Number of Buckets processed: 1
Number of Keys processed: 4

Keys passed verification: 1
Keys failed verification: 0

Total Execution time: 00:00:02,597
***************************************************</msg>
<status status="PASS" starttime="20251019 03:17:34.431" endtime="20251019 03:17:34.432"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:34.433" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:34.432" endtime="20251019 03:17:34.433"/>
</kw>
<status status="PASS" starttime="20251019 03:17:28.068" endtime="20251019 03:17:34.433"/>
</kw>
<msg timestamp="20251019 03:17:34.433" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:28.068" endtime="20251019 03:17:34.433"/>
</kw>
<msg timestamp="20251019 03:17:34.434" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 115816896...</msg>
<status status="PASS" starttime="20251019 03:17:28.067" endtime="20251019 03:17:34.434"/>
</kw>
<msg timestamp="20251019 03:17:34.434" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 115816896...</msg>
<status status="PASS" starttime="20251019 03:17:28.067" endtime="20251019 03:17:34.434"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:34.435" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-one-key",
    "blocks" : [ {
      "containerID" : 3,
      "blockID" : 115816896...</msg>
<status status="PASS" starttime="20251019 03:17:34.435" endtime="20251019 03:17:34.435"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:34.436" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uui...</msg>
<status status="PASS" starttime="20251019 03:17:34.435" endtime="20251019 03:17:34.436"/>
</kw>
<msg timestamp="20251019 03:17:34.436" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uui...</msg>
<status status="PASS" starttime="20251019 03:17:34.434" endtime="20251019 03:17:34.436"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:34.437" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uuid': 'b8f0...</msg>
<status status="PASS" starttime="20251019 03:17:34.437" endtime="20251019 03:17:34.437"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${key_count}</var>
<arg>${keys}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251019 03:17:34.437" level="INFO">Length is 1</msg>
<msg timestamp="20251019 03:17:34.438" level="INFO">${key_count} = 1</msg>
<status status="PASS" starttime="20251019 03:17:34.437" endtime="20251019 03:17:34.438"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${key_count}</arg>
<arg>${expected_key_count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:34.438" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:34.438" endtime="20251019 03:17:34.438"/>
</kw>
<kw name="Get key names from output" library="ozone-debug-keywords">
<var>${key_names}</var>
<arg>${json}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:34.439" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uuid': 'b8f0...</msg>
<status status="PASS" starttime="20251019 03:17:34.439" endtime="20251019 03:17:34.439"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${key_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20251019 03:17:34.440" level="INFO">${key_names} = []</msg>
<status status="PASS" starttime="20251019 03:17:34.439" endtime="20251019 03:17:34.440"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<value>@{keys}</value>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-one-key', 'blocks': [{'containerID': 3, 'blockID': 115816896921600102, 'replicas': [{'datanode': {'uuid': 'b8f06...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:34.441" level="INFO">${key_name} = ratis-one-key</msg>
<status status="PASS" starttime="20251019 03:17:34.440" endtime="20251019 03:17:34.441"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251019 03:17:34.441" endtime="20251019 03:17:34.441"/>
</kw>
<status status="PASS" starttime="20251019 03:17:34.440" endtime="20251019 03:17:34.441"/>
</iter>
<status status="PASS" starttime="20251019 03:17:34.440" endtime="20251019 03:17:34.441"/>
</for>
<msg timestamp="20251019 03:17:34.442" level="INFO">${key_names} = ['ratis-one-key']</msg>
<status status="PASS" starttime="20251019 03:17:34.438" endtime="20251019 03:17:34.442"/>
</kw>
<msg timestamp="20251019 03:17:34.442" level="INFO">${key_names} = ['ratis-one-key']</msg>
<status status="PASS" starttime="20251019 03:17:28.066" endtime="20251019 03:17:34.442"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_ONE_KEY}</arg>
<arg>Key ${RATIS_ONE_KEY} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:34.442" endtime="20251019 03:17:34.443"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${EC_KEY}</arg>
<arg>Key ${EC_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:34.443" endtime="20251019 03:17:34.443"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${TESTFILE}</arg>
<arg>Key ${TESTFILE} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:34.443" endtime="20251019 03:17:34.444"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_THREE_KEY}</arg>
<arg>Key ${RATIS_THREE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:34.444" endtime="20251019 03:17:34.445"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:17:28.066" endtime="20251019 03:17:34.445"/>
</test>
<test id="s1-s4-t3" name="Test ozone debug replicas verify with RATIS THREE filter" line="80">
<kw name="Execute and validate replicas verify with filter">
<var>${key_names}</var>
<arg>RATIS</arg>
<arg>THREE</arg>
<arg>checksums</arg>
<arg>2</arg>
<kw name="Execute replicas verify with replication filter" library="ozone-debug-keywords">
<var>${output}</var>
<arg>${replication_type}</arg>
<arg>${replication_factor}</arg>
<arg>${verification_type}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --${verification_type} --type ${replication_type} --replication ${replication_factor} o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:34.452" level="INFO">Running command 'ozone debug replicas verify --checksums --type RATIS --replication THREE o3://omservice/cli-debug-volume9798/cli-debug-bucket --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:42.305" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:42.305" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168...</msg>
<status status="PASS" starttime="20251019 03:17:34.448" endtime="20251019 03:17:42.305"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:42.306" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600103,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : true
  }, {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : true
  } ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Bucket
Verification Types: checksum
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket

Number of Volumes processed: 0
Number of Buckets processed: 1
Number of Keys processed: 4

Keys passed verification: 2
Keys failed verification: 0

Total Execution time: 00:00:03,982
***************************************************</msg>
<status status="PASS" starttime="20251019 03:17:42.305" endtime="20251019 03:17:42.306"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:42.306" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:42.306" endtime="20251019 03:17:42.306"/>
</kw>
<status status="PASS" starttime="20251019 03:17:34.448" endtime="20251019 03:17:42.307"/>
</kw>
<msg timestamp="20251019 03:17:42.307" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:34.448" endtime="20251019 03:17:42.307"/>
</kw>
<msg timestamp="20251019 03:17:42.307" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168...</msg>
<status status="PASS" starttime="20251019 03:17:34.447" endtime="20251019 03:17:42.307"/>
</kw>
<msg timestamp="20251019 03:17:42.307" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168...</msg>
<status status="PASS" starttime="20251019 03:17:34.447" endtime="20251019 03:17:42.307"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:42.309" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ratis-three-key",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 1158168...</msg>
<status status="PASS" starttime="20251019 03:17:42.308" endtime="20251019 03:17:42.309"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:42.310" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 2, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'u...</msg>
<status status="PASS" starttime="20251019 03:17:42.309" endtime="20251019 03:17:42.310"/>
</kw>
<msg timestamp="20251019 03:17:42.310" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 2, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'u...</msg>
<status status="PASS" starttime="20251019 03:17:42.308" endtime="20251019 03:17:42.310"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:42.311" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 2, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'uuid': 'eb...</msg>
<status status="PASS" starttime="20251019 03:17:42.310" endtime="20251019 03:17:42.311"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${key_count}</var>
<arg>${keys}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251019 03:17:42.311" level="INFO">Length is 2</msg>
<msg timestamp="20251019 03:17:42.311" level="INFO">${key_count} = 2</msg>
<status status="PASS" starttime="20251019 03:17:42.311" endtime="20251019 03:17:42.311"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${key_count}</arg>
<arg>${expected_key_count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:42.312" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:42.311" endtime="20251019 03:17:42.312"/>
</kw>
<kw name="Get key names from output" library="ozone-debug-keywords">
<var>${key_names}</var>
<arg>${json}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:42.312" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 2, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'uuid': 'eb...</msg>
<status status="PASS" starttime="20251019 03:17:42.312" endtime="20251019 03:17:42.312"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${key_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20251019 03:17:42.313" level="INFO">${key_names} = []</msg>
<status status="PASS" starttime="20251019 03:17:42.313" endtime="20251019 03:17:42.313"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<value>@{keys}</value>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ratis-three-key', 'blocks': [{'containerID': 2, 'blockID': 115816896921600103, 'replicas': [{'datanode': {'uuid': 'eb0...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:42.314" level="INFO">${key_name} = ratis-three-key</msg>
<status status="PASS" starttime="20251019 03:17:42.313" endtime="20251019 03:17:42.314"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251019 03:17:42.314" endtime="20251019 03:17:42.314"/>
</kw>
<status status="PASS" starttime="20251019 03:17:42.313" endtime="20251019 03:17:42.314"/>
</iter>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': 'eb003b00-1...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:42.314" level="INFO">${key_name} = testfile</msg>
<status status="PASS" starttime="20251019 03:17:42.314" endtime="20251019 03:17:42.314"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251019 03:17:42.315" endtime="20251019 03:17:42.315"/>
</kw>
<status status="PASS" starttime="20251019 03:17:42.314" endtime="20251019 03:17:42.315"/>
</iter>
<status status="PASS" starttime="20251019 03:17:42.313" endtime="20251019 03:17:42.315"/>
</for>
<msg timestamp="20251019 03:17:42.315" level="INFO">${key_names} = ['ratis-three-key', 'testfile']</msg>
<status status="PASS" starttime="20251019 03:17:42.312" endtime="20251019 03:17:42.315"/>
</kw>
<msg timestamp="20251019 03:17:42.315" level="INFO">${key_names} = ['ratis-three-key', 'testfile']</msg>
<status status="PASS" starttime="20251019 03:17:34.446" endtime="20251019 03:17:42.315"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${TESTFILE}</arg>
<arg>Key ${TESTFILE} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:42.315" endtime="20251019 03:17:42.316"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_THREE_KEY}</arg>
<arg>Key ${RATIS_THREE_KEY} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:42.316" endtime="20251019 03:17:42.316"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_ONE_KEY}</arg>
<arg>Key ${RATIS_ONE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:42.316" endtime="20251019 03:17:42.316"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${EC_KEY}</arg>
<arg>Key ${EC_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:42.317" endtime="20251019 03:17:42.317"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:17:34.445" endtime="20251019 03:17:42.317"/>
</test>
<test id="s1-s4-t4" name="Test ozone debug replicas verify with EC rs-3-2-1024k filter" line="90">
<kw name="Execute and validate replicas verify with filter">
<var>${key_names}</var>
<arg>EC</arg>
<arg>rs-3-2-1024k</arg>
<arg>checksums</arg>
<arg>1</arg>
<kw name="Execute replicas verify with replication filter" library="ozone-debug-keywords">
<var>${output}</var>
<arg>${replication_type}</arg>
<arg>${replication_factor}</arg>
<arg>${verification_type}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --${verification_type} --type ${replication_type} --replication ${replication_factor} o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:42.323" level="INFO">Running command 'ozone debug replicas verify --checksums --type EC --replication rs-3-2-1024k o3://omservice/cli-debug-volume9798/cli-debug-bucket --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:50.399" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:50.399" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 1158168969216001...</msg>
<status status="PASS" starttime="20251019 03:17:42.320" endtime="20251019 03:17:50.399"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:50.400" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 115816896921600104,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "ca647e68-2726-45a3-8ec8-dbcc04278b63",
          "hostname" : "ozonesecure-ha-datanode1-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 1
      }, {
        "datanode" : {
          "uuid" : "0223476b-82c7-4bdd-937a-dff3c249bf7b",
          "hostname" : "ozonesecure-ha-datanode2-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 2
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 3
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 4
      }, {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 5
      } ]
    } ],
    "pass" : true
  } ],
  "pass" : true
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Success
Verification Scope: Bucket
Verification Types: checksum
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket

Number of Volumes processed: 0
Number of Buckets processed: 1
Number of Keys processed: 4

Keys passed verification: 1
Keys failed verification: 0

Total Execution time: 00:00:04,171
***************************************************</msg>
<status status="PASS" starttime="20251019 03:17:50.399" endtime="20251019 03:17:50.400"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:50.401" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:50.400" endtime="20251019 03:17:50.401"/>
</kw>
<status status="PASS" starttime="20251019 03:17:42.320" endtime="20251019 03:17:50.401"/>
</kw>
<msg timestamp="20251019 03:17:50.401" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:42.320" endtime="20251019 03:17:50.401"/>
</kw>
<msg timestamp="20251019 03:17:50.401" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 1158168969216001...</msg>
<status status="PASS" starttime="20251019 03:17:42.319" endtime="20251019 03:17:50.401"/>
</kw>
<msg timestamp="20251019 03:17:50.401" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 1158168969216001...</msg>
<status status="PASS" starttime="20251019 03:17:42.319" endtime="20251019 03:17:50.401"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:50.402" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "ec-key",
    "blocks" : [ {
      "containerID" : 4,
      "blockID" : 1158168969216001...</msg>
<status status="PASS" starttime="20251019 03:17:50.402" endtime="20251019 03:17:50.402"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:17:50.403" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': 'ca...</msg>
<status status="PASS" starttime="20251019 03:17:50.402" endtime="20251019 03:17:50.403"/>
</kw>
<msg timestamp="20251019 03:17:50.403" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': 'ca...</msg>
<status status="PASS" starttime="20251019 03:17:50.401" endtime="20251019 03:17:50.403"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:50.404" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': 'ca647e68-27...</msg>
<status status="PASS" starttime="20251019 03:17:50.403" endtime="20251019 03:17:50.404"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${key_count}</var>
<arg>${keys}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20251019 03:17:50.404" level="INFO">Length is 1</msg>
<msg timestamp="20251019 03:17:50.404" level="INFO">${key_count} = 1</msg>
<status status="PASS" starttime="20251019 03:17:50.404" endtime="20251019 03:17:50.404"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${key_count}</arg>
<arg>${expected_key_count}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:50.405" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:50.404" endtime="20251019 03:17:50.405"/>
</kw>
<kw name="Get key names from output" library="ozone-debug-keywords">
<var>${key_names}</var>
<arg>${json}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${keys}</var>
<arg>${json}</arg>
<arg>keys</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:50.406" level="INFO">${keys} = [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': 'ca647e68-27...</msg>
<status status="PASS" starttime="20251019 03:17:50.405" endtime="20251019 03:17:50.406"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${key_names}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20251019 03:17:50.406" level="INFO">${key_names} = []</msg>
<status status="PASS" starttime="20251019 03:17:50.406" endtime="20251019 03:17:50.406"/>
</kw>
<for flavor="IN">
<var>${key}</var>
<value>@{keys}</value>
<iter>
<var name="${key}">{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'ec-key', 'blocks': [{'containerID': 4, 'blockID': 115816896921600104, 'replicas': [{'datanode': {'uuid': 'ca647e68-272...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${key_name}</var>
<arg>${key}</arg>
<arg>name</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:17:50.407" level="INFO">${key_name} = ec-key</msg>
<status status="PASS" starttime="20251019 03:17:50.406" endtime="20251019 03:17:50.407"/>
</kw>
<kw name="Append To List" library="Collections">
<arg>${key_names}</arg>
<arg>${key_name}</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20251019 03:17:50.407" endtime="20251019 03:17:50.407"/>
</kw>
<status status="PASS" starttime="20251019 03:17:50.406" endtime="20251019 03:17:50.407"/>
</iter>
<status status="PASS" starttime="20251019 03:17:50.406" endtime="20251019 03:17:50.407"/>
</for>
<msg timestamp="20251019 03:17:50.407" level="INFO">${key_names} = ['ec-key']</msg>
<status status="PASS" starttime="20251019 03:17:50.405" endtime="20251019 03:17:50.407"/>
</kw>
<msg timestamp="20251019 03:17:50.408" level="INFO">${key_names} = ['ec-key']</msg>
<status status="PASS" starttime="20251019 03:17:42.318" endtime="20251019 03:17:50.408"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${EC_KEY}</arg>
<arg>Key ${EC_KEY} not found in output</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:50.408" endtime="20251019 03:17:50.408"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${TESTFILE}</arg>
<arg>Key ${TESTFILE} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:50.408" endtime="20251019 03:17:50.408"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_ONE_KEY}</arg>
<arg>Key ${RATIS_ONE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:50.409" endtime="20251019 03:17:50.409"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${key_names}</arg>
<arg>${RATIS_THREE_KEY}</arg>
<arg>Key ${RATIS_THREE_KEY} should not be in filtered output</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:17:50.409" endtime="20251019 03:17:50.409"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:17:42.318" endtime="20251019 03:17:50.409"/>
</test>
<test id="s1-s4-t5" name="Test ozone debug version" line="100">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug version</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:50.414" level="INFO">Running command 'ozone debug version 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:52.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:52.090" level="INFO">${output} = {
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
   ...</msg>
<status status="PASS" starttime="20251019 03:17:50.411" endtime="20251019 03:17:52.090"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:52.091" level="INFO">{
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
        "name" : "COMBINED_PUTBLOCK_WRITECHUNK_RPC",
        "protoValue" : 2
      }
    },
    "om" : {
      "componentVersion" : {
        "name" : "S3_LIST_MULTIPART_UPLOADS_PAGINATION",
        "protoValue" : 11
      }
    }
  },
  "ozone" : {
    "revision" : "cfcfcd501f5297aa4b58157c37dd320dc163992d",
    "url" : "https://github.com/apache/ozone",
    "version" : "2.1.0-SNAPSHOT"
  }
}</msg>
<status status="PASS" starttime="20251019 03:17:52.090" endtime="20251019 03:17:52.091"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:52.091" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:52.091" endtime="20251019 03:17:52.091"/>
</kw>
<status status="PASS" starttime="20251019 03:17:50.411" endtime="20251019 03:17:52.092"/>
</kw>
<msg timestamp="20251019 03:17:52.092" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:50.411" endtime="20251019 03:17:52.092"/>
</kw>
<msg timestamp="20251019 03:17:52.092" level="INFO">${output} = {
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
   ...</msg>
<status status="PASS" starttime="20251019 03:17:50.410" endtime="20251019 03:17:52.092"/>
</kw>
<kw name="Execute" library="os">
<arg>echo '${output}' | jq -r '.' # validate JSON</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:52.096" level="INFO">Running command 'echo '{
  "components" : {
    "client" : {
      "componentVersion" : {
        "name" : "BUCKET_LAYOUT_SUPPORT",
        "protoValue" : 3
      }
    },
    "datanode" : {
      "componentVersion" : {
        "name" : "COMBINED_PUTBLOCK_WRITECHUNK_RPC",
        "protoValue" : 2
      }
    },
    "om" : {
      "componentVersion" : {
        "name" : "S3_LIST_MULTIPART_UPLOADS_PAGINATION",
        "protoValue" : 11
      }
    }
  },
  "ozone" : {
    "revision" : "cfcfcd501f5297aa4b58157c37dd320dc163992d",
    "url" : "https://github.com/apache/ozone",
    "version" : "2.1.0-SNAPSHOT"
  }
}' | jq -r '.' # validate JSON 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:17:52.102" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:17:52.102" level="INFO">${output} = {
  "components": {
    "client": {
      "componentVersion": {
        "name": "BUCKET_LAYOUT_SUPPORT",
        "protoValue": 3
      }
    },
    "datanode": {
      "componentVersion": {
        "n...</msg>
<status status="PASS" starttime="20251019 03:17:52.093" endtime="20251019 03:17:52.102"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:17:52.103" level="INFO">{
  "components": {
    "client": {
      "componentVersion": {
        "name": "BUCKET_LAYOUT_SUPPORT",
        "protoValue": 3
      }
    },
    "datanode": {
      "componentVersion": {
        "name": "COMBINED_PUTBLOCK_WRITECHUNK_RPC",
        "protoValue": 2
      }
    },
    "om": {
      "componentVersion": {
        "name": "S3_LIST_MULTIPART_UPLOADS_PAGINATION",
        "protoValue": 11
      }
    }
  },
  "ozone": {
    "revision": "cfcfcd501f5297aa4b58157c37dd320dc163992d",
    "url": "https://github.com/apache/ozone",
    "version": "2.1.0-SNAPSHOT"
  }
}</msg>
<status status="PASS" starttime="20251019 03:17:52.102" endtime="20251019 03:17:52.103"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:17:52.103" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:17:52.103" endtime="20251019 03:17:52.103"/>
</kw>
<status status="PASS" starttime="20251019 03:17:52.093" endtime="20251019 03:17:52.103"/>
</kw>
<msg timestamp="20251019 03:17:52.103" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:52.093" endtime="20251019 03:17:52.103"/>
</kw>
<status status="PASS" starttime="20251019 03:17:52.092" endtime="20251019 03:17:52.103"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:17:50.410" endtime="20251019 03:17:52.104"/>
</test>
<doc>Test ozone debug CLI</doc>
<status status="PASS" starttime="20251019 03:16:49.539" endtime="20251019 03:17:52.105"/>
</suite>
<suite id="s1-s5" name="Corrupt-Block-Checksum" source="/opt/hadoop/smoketest/debug/corrupt-block-checksum.robot">
<test id="s1-s5-t1" name="Test checksums with a corrupt block replica" line="33">
<kw name="Execute replicas verify checksums debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --checksums o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:17:59.420" level="INFO">Running command 'ozone debug replicas verify --checksums o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:18:07.998" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:18:07.998" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:17:59.417" endtime="20251019 03:18:07.998"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:18:07.999" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Checksum mismatched: this.checksums(0) != that.checksums(0), thisStartIndex=0, this=ChecksumData{CRC32, bytesPerChecksum=16384, checksums=[0B 3A DD 24, 4E 5F 27 20, BE 9E EE 68, 56 F2 4F 73, D1 91 03 F8, EB DA A3 4F, DD 79 90 68, BB FE F4 FC, 01 E5 49 D9, DB F0 87 2A, 11 8D D4 2F, 34 7A A5 68, 4A C0 63 FE, F9 52 17 23, B1 E9 C8 78, 5B 22 35 EC, 0E C0 46 BA, 3E 75 16 5F, 4F 78 90 0B, 68 B1 32 27, 60 23 A5 A2, C2 68 DF A6, CD 92 C5 7A, 3F E8 53 CF, 9C 6B 06 CB, 04 C8 CE 88, FE 50 1D 32, BF A2 92 5D, CB 1F 5F 9A, D3 76 07 26, 6E 7A 6C 20, 63 5F B4 94, B2 F9 83 E0, FE F0 26 C5, 8D 1D 20 D4, 1F C1 25 AB, 7B 85 6B 77, 92 3E 77 4C, AC 21 E9 C4, 51 66 51 BD, D9 4F DC 36, 27 06 7C 79, FA B9 21 E8, F3 FB A1 ED, 88 FE 31 1A, 76 0E F0 BE, CE AC 46 88, F3 EC 17 E5, 46 BF 36 7F, 6D D6 63 50, 70 2F 4D C5, 8B AB FD 71, EB 49 84 3C, F2 1B 17 E8, 09 5E EC CD, 16 48 00 A2, AE 9E 5C 8F, D7 62 1D 30, 90 D2 7C 6C, 12 A7 A1 28, 9B DE 7B 83, EF F1 97 DB, 44 61 38 C4, 99 60 54 43, 40 A0 A4 1B, 3A B6 D3 AA, 97 DB 10 09, F6 2B 87 63, AE BE F0 7C, E0 EF 18 83, 07 E6 3A 14, 16 1B F4 13, F7 8B 20 87, E2 C7 EF 05, 91 96 CB 96, D8 1C D1 E3, BF FF D6 40, 27 8C C5 F4, B6 9F 0E 0F, 19 45 63 51, 5A F9 97 58, 74 7F 11 21, EA C3 0F 62, 53 84 7A 12, 08 CA 97 46, E6 9E 77 88, 65 4E 77 A1, 07 D4 09 97, 8C 22 9D 6E, 69 A6 F8 E2, 78 D3 48 DB, 3C A0 75 95]}, that=ChecksumData{CRC32, bytesPerChecksum=16384, checksums=[EA 9E 85 C9]}"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: checksum
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed checksum verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:04,752
***************************************************</msg>
<status status="PASS" starttime="20251019 03:18:07.999" endtime="20251019 03:18:07.999"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:18:08.000" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:18:08.000" endtime="20251019 03:18:08.000"/>
</kw>
<status status="PASS" starttime="20251019 03:17:59.417" endtime="20251019 03:18:08.000"/>
</kw>
<msg timestamp="20251019 03:18:08.000" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:17:59.417" endtime="20251019 03:18:08.000"/>
</kw>
<msg timestamp="20251019 03:18:08.001" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:17:59.416" endtime="20251019 03:18:08.001"/>
</kw>
<msg timestamp="20251019 03:18:08.001" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:17:59.416" endtime="20251019 03:18:08.001"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:18:08.002" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:18:08.001" endtime="20251019 03:18:08.002"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:18:08.002" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:18:08.002" endtime="20251019 03:18:08.002"/>
</kw>
<msg timestamp="20251019 03:18:08.003" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:18:08.001" endtime="20251019 03:18:08.003"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${CORRUPT_DATANODE}</arg>
<arg>Checksum mismatched</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.004" level="INFO">${replicas} = [{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': False, 'fa...</msg>
<status status="PASS" starttime="20251019 03:18:08.003" endtime="20251019 03:18:08.004"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': False, 'fai...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.005" level="INFO">${datanode} = {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:18:08.005" endtime="20251019 03:18:08.005"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.006" level="INFO">${hostname} = ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:18:08.005" endtime="20251019 03:18:08.006"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.007" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': False, 'failures': [{'message': 'Checksum mismatched: this.checksums(0) != that.checksums(0), thisStartIndex=0, this=ChecksumData{CRC32, bytesPerChecks...</msg>
<status status="PASS" starttime="20251019 03:18:08.006" endtime="20251019 03:18:08.007"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:18:08.007" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': False, 'failures': [{'message': 'Checksum mismatched: this.checksums(0) != that.checksums(0), thisStartIndex=0, this=ChecksumData{CRC32, bytesPerChecksu...</msg>
<status status="PASS" starttime="20251019 03:18:08.007" endtime="20251019 03:18:08.007"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:08.007" endtime="20251019 03:18:08.008"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:08.008" endtime="20251019 03:18:08.009"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:18:08.009" endtime="20251019 03:18:08.009"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.006" endtime="20251019 03:18:08.009"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.006" endtime="20251019 03:18:08.009"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:18:08.010" endtime="20251019 03:18:08.010"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.005" endtime="20251019 03:18:08.010"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.010" level="INFO">${datanode} = {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:18:08.010" endtime="20251019 03:18:08.010"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.011" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:18:08.010" endtime="20251019 03:18:08.011"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:18:08.011" endtime="20251019 03:18:08.011"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.012" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:18:08.012" endtime="20251019 03:18:08.012"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:18:08.013" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:18:08.012" endtime="20251019 03:18:08.013"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:08.013" endtime="20251019 03:18:08.013"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:08.013" endtime="20251019 03:18:08.014"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:08.014" endtime="20251019 03:18:08.015"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:18:08.016" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:18:08.015" endtime="20251019 03:18:08.016"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.012" endtime="20251019 03:18:08.016"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.011" endtime="20251019 03:18:08.016"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.010" endtime="20251019 03:18:08.016"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.016" level="INFO">${datanode} = {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:18:08.016" endtime="20251019 03:18:08.016"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.017" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:18:08.016" endtime="20251019 03:18:08.017"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:18:08.017" endtime="20251019 03:18:08.017"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:08.018" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:18:08.018" endtime="20251019 03:18:08.018"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:18:08.019" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:18:08.018" endtime="20251019 03:18:08.019"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:08.019" endtime="20251019 03:18:08.020"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:08.020" endtime="20251019 03:18:08.020"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:08.020" endtime="20251019 03:18:08.021"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:18:08.022" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:18:08.021" endtime="20251019 03:18:08.022"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.018" endtime="20251019 03:18:08.022"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.017" endtime="20251019 03:18:08.022"/>
</kw>
<status status="PASS" starttime="20251019 03:18:08.016" endtime="20251019 03:18:08.022"/>
</iter>
<status status="PASS" starttime="20251019 03:18:08.004" endtime="20251019 03:18:08.022"/>
</for>
<status status="PASS" starttime="20251019 03:18:08.003" endtime="20251019 03:18:08.022"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:17:59.415" endtime="20251019 03:18:08.022"/>
</test>
<doc>Test checksums on a corrupt block replica</doc>
<status status="PASS" starttime="20251019 03:17:59.372" endtime="20251019 03:18:08.023"/>
</suite>
<suite id="s1-s6" name="Stale-Datanode-Checksum" source="/opt/hadoop/smoketest/debug/stale-datanode-checksum.robot">
<test id="s1-s6-t1" name="Test checksums with a stale datanode" line="32">
<kw name="Execute replicas verify checksums debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --checksums o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:18:35.693" level="INFO">Running command 'ozone debug replicas verify --checksums o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:18:56.745" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:18:56.745" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:18:35.690" endtime="20251019 03:18:56.745"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:18:56.746" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : false,
          "pass" : false,
          "failures" : [ {
            "message" : "org.apache.ratis.thirdparty.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "checksum",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: checksum
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed checksum verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:17,254
***************************************************</msg>
<status status="PASS" starttime="20251019 03:18:56.746" endtime="20251019 03:18:56.746"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:18:56.747" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:18:56.746" endtime="20251019 03:18:56.747"/>
</kw>
<status status="PASS" starttime="20251019 03:18:35.690" endtime="20251019 03:18:56.747"/>
</kw>
<msg timestamp="20251019 03:18:56.747" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:18:35.689" endtime="20251019 03:18:56.747"/>
</kw>
<msg timestamp="20251019 03:18:56.747" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:18:35.689" endtime="20251019 03:18:56.747"/>
</kw>
<msg timestamp="20251019 03:18:56.747" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:18:35.689" endtime="20251019 03:18:56.747"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:18:56.748" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:18:56.748" endtime="20251019 03:18:56.748"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:18:56.749" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:18:56.749" endtime="20251019 03:18:56.749"/>
</kw>
<msg timestamp="20251019 03:18:56.749" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:18:56.748" endtime="20251019 03:18:56.749"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${STALE_DATANODE}</arg>
<arg>UNAVAILABLE</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.751" level="INFO">${replicas} = [{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': False, 'pass': False, 'f...</msg>
<status status="PASS" starttime="20251019 03:18:56.750" endtime="20251019 03:18:56.751"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': False, 'pass': False, 'fa...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.751" level="INFO">${datanode} = {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:18:56.751" endtime="20251019 03:18:56.751"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.752" level="INFO">${hostname} = ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:18:56.751" endtime="20251019 03:18:56.752"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.753" level="INFO">${checks} = [{'type': 'checksum', 'completed': False, 'pass': False, 'failures': [{'message': 'org.apache.ratis.thirdparty.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception'}]}]</msg>
<status status="PASS" starttime="20251019 03:18:56.753" endtime="20251019 03:18:56.753"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:18:56.753" level="INFO">${check} = {'type': 'checksum', 'completed': False, 'pass': False, 'failures': [{'message': 'org.apache.ratis.thirdparty.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception'}]}</msg>
<status status="PASS" starttime="20251019 03:18:56.753" endtime="20251019 03:18:56.753"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:56.754" endtime="20251019 03:18:56.754"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:56.754" endtime="20251019 03:18:56.755"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:18:56.755" endtime="20251019 03:18:56.756"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.752" endtime="20251019 03:18:56.756"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.752" endtime="20251019 03:18:56.756"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:18:56.756" endtime="20251019 03:18:56.756"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.751" endtime="20251019 03:18:56.756"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.757" level="INFO">${datanode} = {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:18:56.756" endtime="20251019 03:18:56.757"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.757" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:18:56.757" endtime="20251019 03:18:56.757"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:18:56.757" endtime="20251019 03:18:56.757"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.758" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:18:56.758" endtime="20251019 03:18:56.758"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:18:56.759" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:18:56.759" endtime="20251019 03:18:56.759"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:56.759" endtime="20251019 03:18:56.760"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:56.760" endtime="20251019 03:18:56.760"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:56.760" endtime="20251019 03:18:56.761"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:18:56.762" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:18:56.761" endtime="20251019 03:18:56.762"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.758" endtime="20251019 03:18:56.762"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.758" endtime="20251019 03:18:56.762"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.756" endtime="20251019 03:18:56.762"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'checksum', 'completed': True, 'pass': True, 'fail...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.762" level="INFO">${datanode} = {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:18:56.762" endtime="20251019 03:18:56.762"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.763" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:18:56.763" endtime="20251019 03:18:56.763"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:18:56.763" endtime="20251019 03:18:56.763"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:18:56.764" level="INFO">${checks} = [{'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:18:56.764" endtime="20251019 03:18:56.764"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:18:56.765" level="INFO">${check} = {'type': 'checksum', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:18:56.764" endtime="20251019 03:18:56.765"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:18:56.765" endtime="20251019 03:18:56.765"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:56.765" endtime="20251019 03:18:56.766"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:18:56.766" endtime="20251019 03:18:56.767"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:18:56.767" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:18:56.767" endtime="20251019 03:18:56.767"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.764" endtime="20251019 03:18:56.767"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.763" endtime="20251019 03:18:56.768"/>
</kw>
<status status="PASS" starttime="20251019 03:18:56.762" endtime="20251019 03:18:56.768"/>
</iter>
<status status="PASS" starttime="20251019 03:18:56.751" endtime="20251019 03:18:56.768"/>
</for>
<status status="PASS" starttime="20251019 03:18:56.749" endtime="20251019 03:18:56.768"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:18:35.688" endtime="20251019 03:18:56.768"/>
</test>
<doc>Test checksums in case of a stale datanode</doc>
<status status="PASS" starttime="20251019 03:18:35.645" endtime="20251019 03:18:56.769"/>
</suite>
<suite id="s1-s7" name="Block-Existence-Check" source="/opt/hadoop/smoketest/debug/block-existence-check.robot">
<test id="s1-s7-t1" name="Test block existence with a block missing on a replica" line="32">
<kw name="Execute replicas verify block existence debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --block-existence o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:14.565" level="INFO">Running command 'ozone debug replicas verify --block-existence o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:20.771" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:20.771" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:14.562" endtime="20251019 03:19:20.771"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:20.772" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "blockExistence",
          "completed" : false,
          "pass" : false,
          "failures" : [ {
            "message" : "Unable to find the block with bcsID 197 .Container 2 bcsId is 0."
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "blockExistence",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "blockExistence",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: blockExistence
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed blockExistence verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,445
***************************************************</msg>
<status status="PASS" starttime="20251019 03:19:20.771" endtime="20251019 03:19:20.772"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:20.772" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:20.772" endtime="20251019 03:19:20.772"/>
</kw>
<status status="PASS" starttime="20251019 03:19:14.562" endtime="20251019 03:19:20.772"/>
</kw>
<msg timestamp="20251019 03:19:20.772" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:14.562" endtime="20251019 03:19:20.772"/>
</kw>
<msg timestamp="20251019 03:19:20.773" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:14.561" endtime="20251019 03:19:20.773"/>
</kw>
<msg timestamp="20251019 03:19:20.773" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:14.561" endtime="20251019 03:19:20.773"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:20.774" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:20.773" endtime="20251019 03:19:20.774"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:20.775" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:20.774" endtime="20251019 03:19:20.775"/>
</kw>
<msg timestamp="20251019 03:19:20.775" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:20.773" endtime="20251019 03:19:20.775"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Unable to find the block</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.776" level="INFO">${replicas} = [{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': False, 'pass': Fal...</msg>
<status status="PASS" starttime="20251019 03:19:20.775" endtime="20251019 03:19:20.776"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': False, 'pass': Fals...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.777" level="INFO">${datanode} = {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:20.777" endtime="20251019 03:19:20.777"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.777" level="INFO">${hostname} = ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:20.777" endtime="20251019 03:19:20.777"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.778" level="INFO">${checks} = [{'type': 'blockExistence', 'completed': False, 'pass': False, 'failures': [{'message': 'Unable to find the block with bcsID 197 .Container 2 bcsId is 0.'}]}]</msg>
<status status="PASS" starttime="20251019 03:19:20.778" endtime="20251019 03:19:20.778"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:20.779" level="INFO">${check} = {'type': 'blockExistence', 'completed': False, 'pass': False, 'failures': [{'message': 'Unable to find the block with bcsID 197 .Container 2 bcsId is 0.'}]}</msg>
<status status="PASS" starttime="20251019 03:19:20.779" endtime="20251019 03:19:20.779"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:20.779" endtime="20251019 03:19:20.780"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:20.780" endtime="20251019 03:19:20.781"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:19:20.781" endtime="20251019 03:19:20.781"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.778" endtime="20251019 03:19:20.781"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.777" endtime="20251019 03:19:20.781"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:20.782" endtime="20251019 03:19:20.782"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.776" endtime="20251019 03:19:20.782"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.782" level="INFO">${datanode} = {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:20.782" endtime="20251019 03:19:20.782"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.783" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:20.782" endtime="20251019 03:19:20.783"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:20.783" endtime="20251019 03:19:20.783"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.784" level="INFO">${checks} = [{'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:20.784" endtime="20251019 03:19:20.784"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:20.784" level="INFO">${check} = {'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:20.784" endtime="20251019 03:19:20.784"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:20.784" endtime="20251019 03:19:20.785"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:20.785" endtime="20251019 03:19:20.786"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:20.786" endtime="20251019 03:19:20.786"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:20.787" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:20.786" endtime="20251019 03:19:20.787"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.783" endtime="20251019 03:19:20.787"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.783" endtime="20251019 03:19:20.787"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.782" endtime="20251019 03:19:20.787"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'blockExistence', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.788" level="INFO">${datanode} = {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:20.787" endtime="20251019 03:19:20.788"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.788" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:20.788" endtime="20251019 03:19:20.788"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:20.788" endtime="20251019 03:19:20.789"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:20.790" level="INFO">${checks} = [{'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:20.789" endtime="20251019 03:19:20.790"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:20.790" level="INFO">${check} = {'type': 'blockExistence', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:20.790" endtime="20251019 03:19:20.790"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:20.790" endtime="20251019 03:19:20.791"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:20.791" endtime="20251019 03:19:20.791"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:20.791" endtime="20251019 03:19:20.792"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:20.793" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:20.792" endtime="20251019 03:19:20.793"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.789" endtime="20251019 03:19:20.793"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.789" endtime="20251019 03:19:20.793"/>
</kw>
<status status="PASS" starttime="20251019 03:19:20.787" endtime="20251019 03:19:20.793"/>
</iter>
<status status="PASS" starttime="20251019 03:19:20.776" endtime="20251019 03:19:20.793"/>
</for>
<status status="PASS" starttime="20251019 03:19:20.775" endtime="20251019 03:19:20.793"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:19:14.560" endtime="20251019 03:19:20.793"/>
</test>
<doc>Test existence of a block on a datanode</doc>
<status status="PASS" starttime="20251019 03:19:14.515" endtime="20251019 03:19:20.794"/>
</suite>
<suite id="s1-s8" name="Container-State-Verifier" source="/opt/hadoop/smoketest/debug/container-state-verifier.robot">
<test id="s1-s8-t1" name="Verify Container State With Unhealthy Container Replica" line="51">
<kw name="Verify Container State with Rule">
<arg>UNHEALTHY</arg>
<kw name="Create Container State Rule">
<var>${rule_file}</var>
<arg>${expected_state}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${rule_file}</var>
<arg>/tmp/container-state-${state}.btm</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251019 03:19:21.563" level="INFO">${rule_file} = /tmp/container-state-UNHEALTHY.btm</msg>
<status status="PASS" starttime="20251019 03:19:21.563" endtime="20251019 03:19:21.563"/>
</kw>
<kw name="Execute" library="os">
<arg>sed 's/STATE_PLACEHOLDER/${state}/g' ${TEMPLATE_RULE} &gt; ${rule_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:21.566" level="INFO">Running command 'sed 's/STATE_PLACEHOLDER/UNHEALTHY/g' /opt/hadoop/share/ozone/byteman/container-state-template.btm &gt; /tmp/container-state-UNHEALTHY.btm'.</msg>
<msg timestamp="20251019 03:19:21.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:21.570" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:21.564" endtime="20251019 03:19:21.570"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:21.571" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:21.570" endtime="20251019 03:19:21.571"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:21.571" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:21.571" endtime="20251019 03:19:21.571"/>
</kw>
<status status="PASS" starttime="20251019 03:19:21.563" endtime="20251019 03:19:21.571"/>
</kw>
<msg timestamp="20251019 03:19:21.571" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:21.563" endtime="20251019 03:19:21.572"/>
</kw>
<status status="PASS" starttime="20251019 03:19:21.563" endtime="20251019 03:19:21.572"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<arg>${rule_file}</arg>
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20251019 03:19:21.572" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:21.572" endtime="20251019 03:19:21.572"/>
</kw>
<msg timestamp="20251019 03:19:21.572" level="INFO">${rule_file} = /tmp/container-state-UNHEALTHY.btm</msg>
<status status="PASS" starttime="20251019 03:19:21.562" endtime="20251019 03:19:21.572"/>
</kw>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251019 03:19:21.813" level="INFO">Add rule /tmp/container-state-UNHEALTHY.btm for datanode3 successful.</msg>
<status status="PASS" starttime="20251019 03:19:21.572" endtime="20251019 03:19:21.813"/>
</kw>
<kw name="List Byteman Rules" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<doc>List Active Byteman rules for specific component and return file list</doc>
<msg timestamp="20251019 03:19:21.899" level="INFO">List rules for datanode3 successful.</msg>
<msg timestamp="20251019 03:19:21.900" level="INFO">Active rules in datanode3:
# File /tmp/container-state-UNHEALTHY.btm line 20</msg>
<status status="PASS" starttime="20251019 03:19:21.814" endtime="20251019 03:19:21.900"/>
</kw>
<kw name="Execute replicas verify container state debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --container-state o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:21.905" level="INFO">Running command 'ozone debug replicas verify --container-state o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:28.005" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:28.005" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:21.902" endtime="20251019 03:19:28.005"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:28.006" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Replica state is UNHEALTHY, Container state in SCM is CLOSED"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: containerState
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed containerState verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,107
***************************************************</msg>
<status status="PASS" starttime="20251019 03:19:28.005" endtime="20251019 03:19:28.006"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:28.006" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:28.006" endtime="20251019 03:19:28.006"/>
</kw>
<status status="PASS" starttime="20251019 03:19:21.902" endtime="20251019 03:19:28.006"/>
</kw>
<msg timestamp="20251019 03:19:28.006" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:21.902" endtime="20251019 03:19:28.006"/>
</kw>
<msg timestamp="20251019 03:19:28.007" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:21.901" endtime="20251019 03:19:28.007"/>
</kw>
<msg timestamp="20251019 03:19:28.007" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:21.900" endtime="20251019 03:19:28.007"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:28.008" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:28.007" endtime="20251019 03:19:28.008"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:28.008" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:28.008" endtime="20251019 03:19:28.008"/>
</kw>
<msg timestamp="20251019 03:19:28.008" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:28.007" endtime="20251019 03:19:28.008"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Replica state is ${expected_state}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.010" level="INFO">${replicas} = [{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': Fals...</msg>
<status status="PASS" starttime="20251019 03:19:28.009" endtime="20251019 03:19:28.010"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': False...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.010" level="INFO">${datanode} = {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:28.010" endtime="20251019 03:19:28.010"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.011" level="INFO">${hostname} = ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:28.010" endtime="20251019 03:19:28.011"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.012" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is UNHEALTHY, Container state in SCM is CLOSED'}]}]</msg>
<status status="PASS" starttime="20251019 03:19:28.012" endtime="20251019 03:19:28.012"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:28.012" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is UNHEALTHY, Container state in SCM is CLOSED'}]}</msg>
<status status="PASS" starttime="20251019 03:19:28.012" endtime="20251019 03:19:28.012"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:28.012" endtime="20251019 03:19:28.013"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:28.013" endtime="20251019 03:19:28.014"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:19:28.014" endtime="20251019 03:19:28.014"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.011" endtime="20251019 03:19:28.015"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.011" endtime="20251019 03:19:28.015"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:28.015" endtime="20251019 03:19:28.015"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.010" endtime="20251019 03:19:28.015"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.015" level="INFO">${datanode} = {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:28.015" endtime="20251019 03:19:28.015"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.016" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:28.015" endtime="20251019 03:19:28.016"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:28.016" endtime="20251019 03:19:28.016"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.017" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:28.017" endtime="20251019 03:19:28.017"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:28.017" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:28.017" endtime="20251019 03:19:28.017"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:28.017" endtime="20251019 03:19:28.018"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:28.018" endtime="20251019 03:19:28.019"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:28.019" endtime="20251019 03:19:28.019"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:28.020" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:28.019" endtime="20251019 03:19:28.020"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.016" endtime="20251019 03:19:28.020"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.016" endtime="20251019 03:19:28.020"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.015" endtime="20251019 03:19:28.020"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.020" level="INFO">${datanode} = {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:28.020" endtime="20251019 03:19:28.020"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.021" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:28.020" endtime="20251019 03:19:28.021"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:28.021" endtime="20251019 03:19:28.021"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:28.022" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:28.021" endtime="20251019 03:19:28.022"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:28.022" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:28.022" endtime="20251019 03:19:28.022"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:28.022" endtime="20251019 03:19:28.023"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:28.023" endtime="20251019 03:19:28.023"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:28.024" endtime="20251019 03:19:28.024"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:28.025" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:28.024" endtime="20251019 03:19:28.025"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.021" endtime="20251019 03:19:28.025"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.021" endtime="20251019 03:19:28.025"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.020" endtime="20251019 03:19:28.025"/>
</iter>
<status status="PASS" starttime="20251019 03:19:28.010" endtime="20251019 03:19:28.025"/>
</for>
<status status="PASS" starttime="20251019 03:19:28.009" endtime="20251019 03:19:28.025"/>
</kw>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251019 03:19:28.148" level="INFO">Remove rule /tmp/container-state-UNHEALTHY.btm for datanode3 successful.</msg>
<status status="PASS" starttime="20251019 03:19:28.025" endtime="20251019 03:19:28.149"/>
</kw>
<status status="PASS" starttime="20251019 03:19:21.562" endtime="20251019 03:19:28.149"/>
</kw>
<status status="PASS" starttime="20251019 03:19:21.561" endtime="20251019 03:19:28.149"/>
</test>
<test id="s1-s8-t2" name="Verify Container State With Deleted Container Replica" line="54">
<kw name="Verify Container State with Rule">
<arg>DELETED</arg>
<kw name="Create Container State Rule">
<var>${rule_file}</var>
<arg>${expected_state}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${rule_file}</var>
<arg>/tmp/container-state-${state}.btm</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251019 03:19:28.151" level="INFO">${rule_file} = /tmp/container-state-DELETED.btm</msg>
<status status="PASS" starttime="20251019 03:19:28.151" endtime="20251019 03:19:28.151"/>
</kw>
<kw name="Execute" library="os">
<arg>sed 's/STATE_PLACEHOLDER/${state}/g' ${TEMPLATE_RULE} &gt; ${rule_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:28.155" level="INFO">Running command 'sed 's/STATE_PLACEHOLDER/DELETED/g' /opt/hadoop/share/ozone/byteman/container-state-template.btm &gt; /tmp/container-state-DELETED.btm'.</msg>
<msg timestamp="20251019 03:19:28.159" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:28.159" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:28.152" endtime="20251019 03:19:28.159"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:28.160" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:28.159" endtime="20251019 03:19:28.160"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:28.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:28.160" endtime="20251019 03:19:28.160"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.152" endtime="20251019 03:19:28.160"/>
</kw>
<msg timestamp="20251019 03:19:28.160" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:28.152" endtime="20251019 03:19:28.161"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.152" endtime="20251019 03:19:28.161"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<arg>${rule_file}</arg>
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20251019 03:19:28.161" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:28.161" endtime="20251019 03:19:28.161"/>
</kw>
<msg timestamp="20251019 03:19:28.161" level="INFO">${rule_file} = /tmp/container-state-DELETED.btm</msg>
<status status="PASS" starttime="20251019 03:19:28.151" endtime="20251019 03:19:28.161"/>
</kw>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251019 03:19:28.292" level="INFO">Add rule /tmp/container-state-DELETED.btm for datanode3 successful.</msg>
<status status="PASS" starttime="20251019 03:19:28.161" endtime="20251019 03:19:28.292"/>
</kw>
<kw name="List Byteman Rules" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<doc>List Active Byteman rules for specific component and return file list</doc>
<msg timestamp="20251019 03:19:28.380" level="INFO">List rules for datanode3 successful.</msg>
<msg timestamp="20251019 03:19:28.380" level="INFO">Active rules in datanode3:
# File /tmp/container-state-DELETED.btm line 20</msg>
<status status="PASS" starttime="20251019 03:19:28.293" endtime="20251019 03:19:28.380"/>
</kw>
<kw name="Execute replicas verify container state debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --container-state o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:28.385" level="INFO">Running command 'ozone debug replicas verify --container-state o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:34.337" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:34.337" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:28.382" endtime="20251019 03:19:34.337"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:34.338" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Replica state is DELETED, Container state in SCM is CLOSED"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: containerState
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed containerState verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,058
***************************************************</msg>
<status status="PASS" starttime="20251019 03:19:34.337" endtime="20251019 03:19:34.338"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:34.339" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:34.338" endtime="20251019 03:19:34.339"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.382" endtime="20251019 03:19:34.339"/>
</kw>
<msg timestamp="20251019 03:19:34.339" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:28.382" endtime="20251019 03:19:34.339"/>
</kw>
<msg timestamp="20251019 03:19:34.339" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:28.381" endtime="20251019 03:19:34.339"/>
</kw>
<msg timestamp="20251019 03:19:34.339" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:28.381" endtime="20251019 03:19:34.339"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:34.340" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:34.340" endtime="20251019 03:19:34.340"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:34.341" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:34.340" endtime="20251019 03:19:34.341"/>
</kw>
<msg timestamp="20251019 03:19:34.341" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:34.339" endtime="20251019 03:19:34.341"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Replica state is ${expected_state}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.342" level="INFO">${replicas} = [{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': Fals...</msg>
<status status="PASS" starttime="20251019 03:19:34.342" endtime="20251019 03:19:34.342"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': False...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.343" level="INFO">${datanode} = {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:34.343" endtime="20251019 03:19:34.343"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.343" level="INFO">${hostname} = ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:34.343" endtime="20251019 03:19:34.343"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.344" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is DELETED, Container state in SCM is CLOSED'}]}]</msg>
<status status="PASS" starttime="20251019 03:19:34.344" endtime="20251019 03:19:34.344"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:34.345" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is DELETED, Container state in SCM is CLOSED'}]}</msg>
<status status="PASS" starttime="20251019 03:19:34.345" endtime="20251019 03:19:34.345"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:34.345" endtime="20251019 03:19:34.346"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:34.346" endtime="20251019 03:19:34.346"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:19:34.346" endtime="20251019 03:19:34.347"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.344" endtime="20251019 03:19:34.347"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.343" endtime="20251019 03:19:34.347"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:34.347" endtime="20251019 03:19:34.347"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.343" endtime="20251019 03:19:34.347"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.348" level="INFO">${datanode} = {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:34.348" endtime="20251019 03:19:34.348"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.348" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:34.348" endtime="20251019 03:19:34.348"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:34.348" endtime="20251019 03:19:34.349"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.350" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:34.349" endtime="20251019 03:19:34.350"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:34.350" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:34.350" endtime="20251019 03:19:34.350"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:34.350" endtime="20251019 03:19:34.351"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:34.351" endtime="20251019 03:19:34.351"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:34.351" endtime="20251019 03:19:34.352"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:34.353" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:34.352" endtime="20251019 03:19:34.353"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.349" endtime="20251019 03:19:34.353"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.349" endtime="20251019 03:19:34.353"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.348" endtime="20251019 03:19:34.353"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.353" level="INFO">${datanode} = {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:34.353" endtime="20251019 03:19:34.353"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.353" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:34.353" endtime="20251019 03:19:34.353"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:34.354" endtime="20251019 03:19:34.354"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:34.355" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:34.355" endtime="20251019 03:19:34.355"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:34.355" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:34.355" endtime="20251019 03:19:34.355"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:34.355" endtime="20251019 03:19:34.356"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:34.356" endtime="20251019 03:19:34.357"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:34.357" endtime="20251019 03:19:34.357"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:34.358" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:34.357" endtime="20251019 03:19:34.358"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.354" endtime="20251019 03:19:34.358"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.354" endtime="20251019 03:19:34.358"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.353" endtime="20251019 03:19:34.358"/>
</iter>
<status status="PASS" starttime="20251019 03:19:34.342" endtime="20251019 03:19:34.358"/>
</for>
<status status="PASS" starttime="20251019 03:19:34.341" endtime="20251019 03:19:34.358"/>
</kw>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251019 03:19:34.485" level="INFO">Remove rule /tmp/container-state-DELETED.btm for datanode3 successful.</msg>
<status status="PASS" starttime="20251019 03:19:34.358" endtime="20251019 03:19:34.485"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.150" endtime="20251019 03:19:34.485"/>
</kw>
<status status="PASS" starttime="20251019 03:19:28.150" endtime="20251019 03:19:34.486"/>
</test>
<test id="s1-s8-t3" name="Verify Container State With Invalid Container Replica" line="57">
<kw name="Verify Container State with Rule">
<arg>INVALID</arg>
<kw name="Create Container State Rule">
<var>${rule_file}</var>
<arg>${expected_state}</arg>
<kw name="Set Variable" library="BuiltIn">
<var>${rule_file}</var>
<arg>/tmp/container-state-${state}.btm</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20251019 03:19:34.488" level="INFO">${rule_file} = /tmp/container-state-INVALID.btm</msg>
<status status="PASS" starttime="20251019 03:19:34.488" endtime="20251019 03:19:34.488"/>
</kw>
<kw name="Execute" library="os">
<arg>sed 's/STATE_PLACEHOLDER/${state}/g' ${TEMPLATE_RULE} &gt; ${rule_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:34.493" level="INFO">Running command 'sed 's/STATE_PLACEHOLDER/INVALID/g' /opt/hadoop/share/ozone/byteman/container-state-template.btm &gt; /tmp/container-state-INVALID.btm'.</msg>
<msg timestamp="20251019 03:19:34.497" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:34.497" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:34.489" endtime="20251019 03:19:34.497"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:34.498" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:34.497" endtime="20251019 03:19:34.498"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:34.498" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:34.498" endtime="20251019 03:19:34.498"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.489" endtime="20251019 03:19:34.499"/>
</kw>
<msg timestamp="20251019 03:19:34.499" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:34.489" endtime="20251019 03:19:34.499"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.488" endtime="20251019 03:19:34.499"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<arg>${rule_file}</arg>
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20251019 03:19:34.499" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:34.499" endtime="20251019 03:19:34.499"/>
</kw>
<msg timestamp="20251019 03:19:34.500" level="INFO">${rule_file} = /tmp/container-state-INVALID.btm</msg>
<status status="PASS" starttime="20251019 03:19:34.488" endtime="20251019 03:19:34.500"/>
</kw>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251019 03:19:34.639" level="INFO">Add rule /tmp/container-state-INVALID.btm for datanode3 successful.</msg>
<status status="PASS" starttime="20251019 03:19:34.500" endtime="20251019 03:19:34.639"/>
</kw>
<kw name="List Byteman Rules" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<doc>List Active Byteman rules for specific component and return file list</doc>
<msg timestamp="20251019 03:19:34.724" level="INFO">List rules for datanode3 successful.</msg>
<msg timestamp="20251019 03:19:34.725" level="INFO">Active rules in datanode3:
# File /tmp/container-state-INVALID.btm line 20</msg>
<status status="PASS" starttime="20251019 03:19:34.640" endtime="20251019 03:19:34.725"/>
</kw>
<kw name="Execute replicas verify container state debug tool" library="ozone-debug-keywords">
<var>${output}</var>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone debug replicas verify --container-state o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/${TESTFILE} --all-results</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:34.733" level="INFO">Running command 'ozone debug replicas verify --container-state o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile --all-results 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:40.784" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:40.784" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:34.727" endtime="20251019 03:19:40.785"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:40.786" level="INFO">{
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 115816896921600101,
      "replicas" : [ {
        "datanode" : {
          "uuid" : "eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b",
          "hostname" : "ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : false,
          "failures" : [ {
            "message" : "Replica state is INVALID, Container state in SCM is CLOSED"
          } ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "b8f06fa9-0c21-450b-84bc-3c5e2ab0b485",
          "hostname" : "ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      }, {
        "datanode" : {
          "uuid" : "fb26cf4a-3934-48bc-a5b0-6b8724aac1f8",
          "hostname" : "ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net"
        },
        "checks" : [ {
          "type" : "containerState",
          "completed" : true,
          "pass" : true,
          "failures" : [ ]
        } ],
        "replicaIndex" : 0
      } ]
    } ],
    "pass" : false
  } ],
  "pass" : false
}

***************************************************
REPLICA VERIFICATION SUMMARY
***************************************************
Status: Completed with failures
Verification Scope: Key
Verification Types: containerState
URI: o3://omservice/cli-debug-volume9798/cli-debug-bucket/testfile

Number of Volumes processed: 0
Number of Buckets processed: 0
Number of Keys processed: 1

Keys passed verification: 0
Keys failed verification: 1

Keys failed containerState verification: 1
Note: A key may fail multiple verification types, so total may exceed overall failures.

Total Execution time: 00:00:02,206
***************************************************</msg>
<status status="PASS" starttime="20251019 03:19:40.785" endtime="20251019 03:19:40.786"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:40.786" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:40.786" endtime="20251019 03:19:40.786"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.727" endtime="20251019 03:19:40.786"/>
</kw>
<msg timestamp="20251019 03:19:40.786" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:34.727" endtime="20251019 03:19:40.786"/>
</kw>
<msg timestamp="20251019 03:19:40.787" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:34.726" endtime="20251019 03:19:40.787"/>
</kw>
<msg timestamp="20251019 03:19:40.787" level="INFO">${output} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:34.725" endtime="20251019 03:19:40.787"/>
</kw>
<kw name="Parse replicas verify JSON output" library="ozone-debug-keywords">
<var>${json}</var>
<arg>${output}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${json_split}</var>
<arg>'''${output}'''.split('***')[0].strip()</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:40.788" level="INFO">${json_split} = {
  "keys" : [ {
    "volumeName" : "cli-debug-volume9798",
    "bucketName" : "cli-debug-bucket",
    "name" : "testfile",
    "blocks" : [ {
      "containerID" : 2,
      "blockID" : 11581689692160...</msg>
<status status="PASS" starttime="20251019 03:19:40.787" endtime="20251019 03:19:40.788"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${json}</var>
<arg>json.loads('''${json_split}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20251019 03:19:40.789" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:40.788" endtime="20251019 03:19:40.789"/>
</kw>
<msg timestamp="20251019 03:19:40.789" level="INFO">${json} = {'keys': [{'volumeName': 'cli-debug-volume9798', 'bucketName': 'cli-debug-bucket', 'name': 'testfile', 'blocks': [{'containerID': 2, 'blockID': 115816896921600101, 'replicas': [{'datanode': {'uuid': '...</msg>
<status status="PASS" starttime="20251019 03:19:40.787" endtime="20251019 03:19:40.789"/>
</kw>
<kw name="Check to Verify Replicas" library="ozone-debug-keywords">
<arg>${json}</arg>
<arg>${CHECK_TYPE}</arg>
<arg>${DATANODE}</arg>
<arg>Replica state is ${expected_state}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${replicas}</var>
<arg>${json['keys'][0]['blocks'][0]}</arg>
<arg>replicas</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.790" level="INFO">${replicas} = [{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': Fals...</msg>
<status status="PASS" starttime="20251019 03:19:40.789" endtime="20251019 03:19:40.790"/>
</kw>
<for flavor="IN">
<var>${replica}</var>
<value>@{replicas}</value>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': False...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.791" level="INFO">${datanode} = {'uuid': 'eb003b00-1bdb-45f8-a0fe-b15af3c8ea2b', 'hostname': 'ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:40.791" endtime="20251019 03:19:40.791"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.791" level="INFO">${hostname} = ozonesecure-ha-datanode3-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:40.791" endtime="20251019 03:19:40.791"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Failed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.792" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is INVALID, Container state in SCM is CLOSED'}]}]</msg>
<status status="PASS" starttime="20251019 03:19:40.792" endtime="20251019 03:19:40.792"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:40.793" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': False, 'failures': [{'message': 'Replica state is INVALID, Container state in SCM is CLOSED'}]}</msg>
<status status="PASS" starttime="20251019 03:19:40.793" endtime="20251019 03:19:40.793"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:40.793" endtime="20251019 03:19:40.794"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['pass']}</arg>
<arg>${False}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:40.794" endtime="20251019 03:19:40.794"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${check['failures'][0]['message']}</arg>
<arg>${expected_message}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20251019 03:19:40.794" endtime="20251019 03:19:40.795"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.792" endtime="20251019 03:19:40.795"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.791" endtime="20251019 03:19:40.795"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:40.795" endtime="20251019 03:19:40.795"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.791" endtime="20251019 03:19:40.795"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.796" level="INFO">${datanode} = {'uuid': 'b8f06fa9-0c21-450b-84bc-3c5e2ab0b485', 'hostname': 'ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:40.796" endtime="20251019 03:19:40.796"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.796" level="INFO">${hostname} = ozonesecure-ha-datanode4-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:40.796" endtime="20251019 03:19:40.796"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:40.796" endtime="20251019 03:19:40.796"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.797" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:40.797" endtime="20251019 03:19:40.797"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:40.798" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:40.797" endtime="20251019 03:19:40.798"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:40.798" endtime="20251019 03:19:40.798"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:40.798" endtime="20251019 03:19:40.799"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:40.799" endtime="20251019 03:19:40.800"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:40.800" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:40.800" endtime="20251019 03:19:40.800"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.797" endtime="20251019 03:19:40.801"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.797" endtime="20251019 03:19:40.801"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.795" endtime="20251019 03:19:40.801"/>
</iter>
<iter>
<var name="${replica}">{'datanode': {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}, 'checks': [{'type': 'containerState', 'completed': True, 'pass': True,...</var>
<kw name="Get From Dictionary" library="Collections">
<var>${datanode}</var>
<arg>${replica}</arg>
<arg>datanode</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.801" level="INFO">${datanode} = {'uuid': 'fb26cf4a-3934-48bc-a5b0-6b8724aac1f8', 'hostname': 'ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net'}</msg>
<status status="PASS" starttime="20251019 03:19:40.801" endtime="20251019 03:19:40.801"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${hostname}</var>
<arg>${datanode}</arg>
<arg>hostname</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.802" level="INFO">${hostname} = ozonesecure-ha-datanode5-1.ozonesecure-ha_ozone_net</msg>
<status status="PASS" starttime="20251019 03:19:40.801" endtime="20251019 03:19:40.802"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' == '${faulty_datanode}'</arg>
<arg>Check Replica Failed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<arg>${expected_message}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:40.802" endtime="20251019 03:19:40.802"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${hostname}' != '${faulty_datanode}'</arg>
<arg>Check Replica Passed</arg>
<arg>${replica}</arg>
<arg>${check_type}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Check Replica Passed" library="ozone-debug-keywords">
<arg>${replica}</arg>
<arg>${check_type}</arg>
<kw name="Get From Dictionary" library="Collections">
<var>${checks}</var>
<arg>${replica}</arg>
<arg>checks</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20251019 03:19:40.803" level="INFO">${checks} = [{'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}]</msg>
<status status="PASS" starttime="20251019 03:19:40.803" endtime="20251019 03:19:40.803"/>
</kw>
<kw name="Get From List" library="Collections">
<var>${check}</var>
<arg>${checks}</arg>
<arg>0</arg>
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<msg timestamp="20251019 03:19:40.803" level="INFO">${check} = {'type': 'containerState', 'completed': True, 'pass': True, 'failures': []}</msg>
<status status="PASS" starttime="20251019 03:19:40.803" endtime="20251019 03:19:40.803"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${check['type']}</arg>
<arg>${check_type}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20251019 03:19:40.804" endtime="20251019 03:19:40.804"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['completed']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:40.804" endtime="20251019 03:19:40.805"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${check['pass']}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20251019 03:19:40.805" endtime="20251019 03:19:40.805"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${check['failures']}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20251019 03:19:40.806" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20251019 03:19:40.805" endtime="20251019 03:19:40.806"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.802" endtime="20251019 03:19:40.806"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.802" endtime="20251019 03:19:40.806"/>
</kw>
<status status="PASS" starttime="20251019 03:19:40.801" endtime="20251019 03:19:40.806"/>
</iter>
<status status="PASS" starttime="20251019 03:19:40.790" endtime="20251019 03:19:40.806"/>
</for>
<status status="PASS" starttime="20251019 03:19:40.789" endtime="20251019 03:19:40.806"/>
</kw>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${FAULT_INJ_DATANODE}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251019 03:19:40.932" level="INFO">Remove rule /tmp/container-state-INVALID.btm for datanode3 successful.</msg>
<status status="PASS" starttime="20251019 03:19:40.806" endtime="20251019 03:19:40.932"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.487" endtime="20251019 03:19:40.933"/>
</kw>
<status status="PASS" starttime="20251019 03:19:34.486" endtime="20251019 03:19:40.933"/>
</test>
<doc>Test container state on a UNHEALTHY, DELETED and INVALID container</doc>
<status status="PASS" starttime="20251019 03:19:21.507" endtime="20251019 03:19:40.934"/>
</suite>
<suite id="s1-s9" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s9-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:19:41.688" endtime="20251019 03:19:41.688"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:41.691" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:42.698" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:42.698" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251019 03:19:41.689" endtime="20251019 03:19:42.698"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:42.699" level="INFO">true</msg>
<status status="PASS" starttime="20251019 03:19:42.698" endtime="20251019 03:19:42.699"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:42.699" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:42.699" endtime="20251019 03:19:42.699"/>
</kw>
<status status="PASS" starttime="20251019 03:19:41.688" endtime="20251019 03:19:42.700"/>
</kw>
<msg timestamp="20251019 03:19:42.700" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:41.688" endtime="20251019 03:19:42.700"/>
</kw>
<msg timestamp="20251019 03:19:42.700" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251019 03:19:41.688" endtime="20251019 03:19:42.700"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251019 03:19:42.700" endtime="20251019 03:19:42.700"/>
</kw>
<status status="NOT RUN" starttime="20251019 03:19:42.700" endtime="20251019 03:19:42.701"/>
</branch>
<status status="PASS" starttime="20251019 03:19:42.700" endtime="20251019 03:19:42.701"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251019 03:19:42.701" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251019 03:19:42.701" endtime="20251019 03:19:42.701"/>
</kw>
<status status="PASS" starttime="20251019 03:19:41.687" endtime="20251019 03:19:42.701"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251019 03:19:42.701" endtime="20251019 03:19:42.701"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:42.705" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:42.709" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:42.710" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20251019 03:19:42.703" endtime="20251019 03:19:42.710"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:42.710" level="INFO">om</msg>
<status status="PASS" starttime="20251019 03:19:42.710" endtime="20251019 03:19:42.710"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:42.711" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:42.710" endtime="20251019 03:19:42.711"/>
</kw>
<status status="PASS" starttime="20251019 03:19:42.702" endtime="20251019 03:19:42.711"/>
</kw>
<msg timestamp="20251019 03:19:42.711" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:42.702" endtime="20251019 03:19:42.711"/>
</kw>
<msg timestamp="20251019 03:19:42.711" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20251019 03:19:42.702" endtime="20251019 03:19:42.711"/>
</kw>
<msg timestamp="20251019 03:19:42.711" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:19:42.702" endtime="20251019 03:19:42.711"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251019 03:19:42.712" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:19:42.712" endtime="20251019 03:19:42.712"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:42.716" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:42.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:42.807" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:42.713" endtime="20251019 03:19:42.807"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:42.808" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:42.808" endtime="20251019 03:19:42.809"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:42.809" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:42.809" endtime="20251019 03:19:42.809"/>
</kw>
<status status="PASS" starttime="20251019 03:19:42.713" endtime="20251019 03:19:42.809"/>
</kw>
<msg timestamp="20251019 03:19:42.809" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:42.713" endtime="20251019 03:19:42.809"/>
</kw>
<status status="PASS" starttime="20251019 03:19:42.712" endtime="20251019 03:19:42.810"/>
</kw>
<status status="PASS" starttime="20251019 03:19:42.712" endtime="20251019 03:19:42.810"/>
</kw>
<status status="PASS" starttime="20251019 03:19:41.687" endtime="20251019 03:19:42.810"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251019 03:19:41.686" endtime="20251019 03:19:42.810"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251019 03:19:41.647" endtime="20251019 03:19:42.811"/>
</suite>
<suite id="s1-s10" name="Ozone-Debug-Tests-Ec3-2" source="/opt/hadoop/smoketest/debug/ozone-debug-tests-ec3-2.robot">
<kw name="Create Volume Bucket" type="SETUP">
<kw name="Execute" library="os">
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:43.605" level="INFO">Running command 'ozone sh volume create o3://omservice/cli-debug-ec-volume9798 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:47.248" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:47.248" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:43.603" endtime="20251019 03:19:47.249"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:47.249" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:47.249" endtime="20251019 03:19:47.250"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:47.250" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:47.250" endtime="20251019 03:19:47.250"/>
</kw>
<status status="PASS" starttime="20251019 03:19:43.603" endtime="20251019 03:19:47.250"/>
</kw>
<msg timestamp="20251019 03:19:47.250" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:43.602" endtime="20251019 03:19:47.250"/>
</kw>
<status status="PASS" starttime="20251019 03:19:43.602" endtime="20251019 03:19:47.251"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:47.254" level="INFO">Running command 'ozone sh bucket create o3://omservice/cli-debug-ec-volume9798/cli-debug-ec-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:51.134" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:51.134" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:47.252" endtime="20251019 03:19:51.134"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:51.135" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:51.134" endtime="20251019 03:19:51.135"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:51.135" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:51.135" endtime="20251019 03:19:51.135"/>
</kw>
<status status="PASS" starttime="20251019 03:19:47.251" endtime="20251019 03:19:51.135"/>
</kw>
<msg timestamp="20251019 03:19:51.135" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:47.251" endtime="20251019 03:19:51.135"/>
</kw>
<status status="PASS" starttime="20251019 03:19:47.251" endtime="20251019 03:19:51.135"/>
</kw>
<status status="PASS" starttime="20251019 03:19:43.602" endtime="20251019 03:19:51.135"/>
</kw>
<test id="s1-s10-t1" name="Test ozone debug replicas chunk-info" line="46">
<kw name="Create EC key">
<arg>1048576</arg>
<arg>3</arg>
<kw name="Execute" library="os">
<arg>dd if=/dev/urandom of=${TEMP_DIR}/testfile bs=${bs} count=${count}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:51.140" level="INFO">Running command 'dd if=/dev/urandom of=/tmp/testfile bs=1048576 count=3 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:51.156" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:51.156" level="INFO">${output} = 3+0 records in
3+0 records out
3145728 bytes (3.1 MB, 3.0 MiB) copied, 0.0118088 s, 266 MB/s</msg>
<status status="PASS" starttime="20251019 03:19:51.138" endtime="20251019 03:19:51.156"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:51.157" level="INFO">3+0 records in
3+0 records out
3145728 bytes (3.1 MB, 3.0 MiB) copied, 0.0118088 s, 266 MB/s</msg>
<status status="PASS" starttime="20251019 03:19:51.157" endtime="20251019 03:19:51.157"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:51.158" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:51.158" endtime="20251019 03:19:51.158"/>
</kw>
<status status="PASS" starttime="20251019 03:19:51.137" endtime="20251019 03:19:51.158"/>
</kw>
<msg timestamp="20251019 03:19:51.158" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:51.137" endtime="20251019 03:19:51.158"/>
</kw>
<status status="PASS" starttime="20251019 03:19:51.137" endtime="20251019 03:19:51.158"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/testfile ${TEMP_DIR}/testfile -r rs-${EC_DATA}-${EC_PARITY}-1024k -t EC</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:51.162" level="INFO">Running command 'ozone sh key put o3://omservice/cli-debug-ec-volume9798/cli-debug-ec-bucket/testfile /tmp/testfile -r rs-3-2-1024k -t EC 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:19:57.186" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:19:57.186" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:19:51.160" endtime="20251019 03:19:57.186"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:19:57.187" level="INFO"/>
<status status="PASS" starttime="20251019 03:19:57.186" endtime="20251019 03:19:57.187"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:19:57.188" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:19:57.187" endtime="20251019 03:19:57.188"/>
</kw>
<status status="PASS" starttime="20251019 03:19:51.159" endtime="20251019 03:19:57.188"/>
</kw>
<msg timestamp="20251019 03:19:57.188" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:51.159" endtime="20251019 03:19:57.188"/>
</kw>
<status status="PASS" starttime="20251019 03:19:51.158" endtime="20251019 03:19:57.188"/>
</kw>
<status status="PASS" starttime="20251019 03:19:51.136" endtime="20251019 03:19:57.188"/>
</kw>
<kw name="Execute" library="os">
<var>${count}</var>
<arg>ozone debug replicas chunk-info o3://${OM_SERVICE_ID}/${VOLUME}/${BUCKET}/testfile | jq '[.keyLocations[0][] | select(.file | test("\\\\.block$")) | .file] | length'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:19:57.193" level="INFO">Running command 'ozone debug replicas chunk-info o3://omservice/cli-debug-ec-volume9798/cli-debug-ec-bucket/testfile | jq '[.keyLocations[0][] | select(.file | test("\\.block$")) | .file] | length' 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:20:03.201" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:20:03.201" level="INFO">${output} = 5</msg>
<status status="PASS" starttime="20251019 03:19:57.189" endtime="20251019 03:20:03.201"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:20:03.202" level="INFO">5</msg>
<status status="PASS" starttime="20251019 03:20:03.202" endtime="20251019 03:20:03.202"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:20:03.203" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:20:03.202" endtime="20251019 03:20:03.203"/>
</kw>
<status status="PASS" starttime="20251019 03:19:57.189" endtime="20251019 03:20:03.203"/>
</kw>
<msg timestamp="20251019 03:20:03.203" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:19:57.189" endtime="20251019 03:20:03.203"/>
</kw>
<msg timestamp="20251019 03:20:03.203" level="INFO">${count} = 5</msg>
<status status="PASS" starttime="20251019 03:19:57.188" endtime="20251019 03:20:03.203"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${count}</arg>
<arg>5</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20251019 03:20:03.204" endtime="20251019 03:20:03.204"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20251019 03:19:51.136" endtime="20251019 03:20:03.204"/>
</test>
<doc>Test ozone Debug CLI for EC(3,2) replicated keys</doc>
<status status="PASS" starttime="20251019 03:19:43.556" endtime="20251019 03:20:03.205"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="170638"/>
</suite>
<statistics>
<total>
<stat pass="16" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="16" fail="0" skip="0" id="s1" name="ozonesecure-ha-debug-tools">ozonesecure-ha-debug-tools</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-debug-tools.Kinit</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Auditparser">ozonesecure-ha-debug-tools.Auditparser</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Kinit">ozonesecure-ha-debug-tools.Kinit</stat>
<stat pass="5" fail="0" skip="0" id="s1-s4" name="Ozone-Debug-Tests">ozonesecure-ha-debug-tools.Ozone-Debug-Tests</stat>
<stat pass="1" fail="0" skip="0" id="s1-s5" name="Corrupt-Block-Checksum">ozonesecure-ha-debug-tools.Corrupt-Block-Checksum</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Stale-Datanode-Checksum">ozonesecure-ha-debug-tools.Stale-Datanode-Checksum</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Block-Existence-Check">ozonesecure-ha-debug-tools.Block-Existence-Check</stat>
<stat pass="3" fail="0" skip="0" id="s1-s8" name="Container-State-Verifier">ozonesecure-ha-debug-tools.Container-State-Verifier</stat>
<stat pass="1" fail="0" skip="0" id="s1-s9" name="Kinit">ozonesecure-ha-debug-tools.Kinit</stat>
<stat pass="1" fail="0" skip="0" id="s1-s10" name="Ozone-Debug-Tests-Ec3-2">ozonesecure-ha-debug-tools.Ozone-Debug-Tests-Ec3-2</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
