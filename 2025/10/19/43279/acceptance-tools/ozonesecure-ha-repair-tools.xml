<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20251019 03:24:41.002" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-repair-tools">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20251019 03:22:38.087" endtime="20251019 03:22:38.087"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:22:38.091" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:22:39.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:22:39.105" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20251019 03:22:38.088" endtime="20251019 03:22:39.105"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:22:39.106" level="INFO">true</msg>
<status status="PASS" starttime="20251019 03:22:39.105" endtime="20251019 03:22:39.106"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:22:39.106" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:22:39.106" endtime="20251019 03:22:39.107"/>
</kw>
<status status="PASS" starttime="20251019 03:22:38.088" endtime="20251019 03:22:39.107"/>
</kw>
<msg timestamp="20251019 03:22:39.107" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:22:38.087" endtime="20251019 03:22:39.107"/>
</kw>
<msg timestamp="20251019 03:22:39.107" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20251019 03:22:38.087" endtime="20251019 03:22:39.107"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20251019 03:22:39.107" endtime="20251019 03:22:39.108"/>
</kw>
<status status="NOT RUN" starttime="20251019 03:22:39.107" endtime="20251019 03:22:39.108"/>
</branch>
<status status="PASS" starttime="20251019 03:22:39.107" endtime="20251019 03:22:39.108"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20251019 03:22:39.108" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20251019 03:22:39.108" endtime="20251019 03:22:39.108"/>
</kw>
<status status="PASS" starttime="20251019 03:22:38.087" endtime="20251019 03:22:39.108"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20251019 03:22:39.108" endtime="20251019 03:22:39.108"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:22:39.113" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:22:39.117" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:22:39.117" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20251019 03:22:39.110" endtime="20251019 03:22:39.117"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:22:39.118" level="INFO">scm</msg>
<status status="PASS" starttime="20251019 03:22:39.117" endtime="20251019 03:22:39.118"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:22:39.118" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:22:39.118" endtime="20251019 03:22:39.118"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.109" endtime="20251019 03:22:39.119"/>
</kw>
<msg timestamp="20251019 03:22:39.119" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:22:39.109" endtime="20251019 03:22:39.119"/>
</kw>
<msg timestamp="20251019 03:22:39.119" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20251019 03:22:39.109" endtime="20251019 03:22:39.119"/>
</kw>
<msg timestamp="20251019 03:22:39.119" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:22:39.109" endtime="20251019 03:22:39.119"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20251019 03:22:39.119" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20251019 03:22:39.119" endtime="20251019 03:22:39.120"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:22:39.123" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:22:39.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:22:39.172" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:22:39.121" endtime="20251019 03:22:39.172"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:22:39.173" level="INFO"/>
<status status="PASS" starttime="20251019 03:22:39.172" endtime="20251019 03:22:39.173"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:22:39.174" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:22:39.173" endtime="20251019 03:22:39.174"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.121" endtime="20251019 03:22:39.174"/>
</kw>
<msg timestamp="20251019 03:22:39.174" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:22:39.120" endtime="20251019 03:22:39.174"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.120" endtime="20251019 03:22:39.174"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.120" endtime="20251019 03:22:39.174"/>
</kw>
<status status="PASS" starttime="20251019 03:22:38.086" endtime="20251019 03:22:39.174"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20251019 03:22:38.086" endtime="20251019 03:22:39.174"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20251019 03:22:38.047" endtime="20251019 03:22:39.175"/>
</suite>
<suite id="s1-s2" name="Ratis-Transaction-Repair" source="/opt/hadoop/smoketest/repair/ratis-transaction-repair.robot">
<test id="s1-s2-t1" name="Verify OM crash at bucket create" line="31">
<kw name="Inject Fault Into OMs Only" library="BytemanKeywords">
<arg>${CRASH_RULE}</arg>
<kw name="Log" library="BuiltIn">
<arg>Injecting fault ${rule_file} into oms only</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:22:39.948" level="INFO">Injecting fault /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm into oms only</msg>
<status status="PASS" starttime="20251019 03:22:39.948" endtime="20251019 03:22:39.948"/>
</kw>
<for flavor="IN">
<var>${component}</var>
<value>@{OM_COMPONENTS}</value>
<iter>
<var name="${component}">om1</var>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Add Byteman Rule</arg>
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251019 03:22:40.179" level="INFO">Add rule /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm for om1 successful.</msg>
<status status="PASS" starttime="20251019 03:22:39.948" endtime="20251019 03:22:40.180"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.948" endtime="20251019 03:22:40.180"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.948" endtime="20251019 03:22:40.180"/>
</iter>
<iter>
<var name="${component}">om2</var>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Add Byteman Rule</arg>
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251019 03:22:40.410" level="INFO">Add rule /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm for om2 successful.</msg>
<status status="PASS" starttime="20251019 03:22:40.181" endtime="20251019 03:22:40.411"/>
</kw>
<status status="PASS" starttime="20251019 03:22:40.181" endtime="20251019 03:22:40.411"/>
</kw>
<status status="PASS" starttime="20251019 03:22:40.180" endtime="20251019 03:22:40.411"/>
</iter>
<iter>
<var name="${component}">om3</var>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Add Byteman Rule</arg>
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Add Byteman Rule" library="BytemanLibrary">
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Add Byteman rule into specific component</doc>
<msg timestamp="20251019 03:22:40.637" level="INFO">Add rule /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm for om3 successful.</msg>
<status status="PASS" starttime="20251019 03:22:40.413" endtime="20251019 03:22:40.638"/>
</kw>
<status status="PASS" starttime="20251019 03:22:40.412" endtime="20251019 03:22:40.638"/>
</kw>
<status status="PASS" starttime="20251019 03:22:40.412" endtime="20251019 03:22:40.638"/>
</iter>
<status status="PASS" starttime="20251019 03:22:39.948" endtime="20251019 03:22:40.638"/>
</for>
<status status="PASS" starttime="20251019 03:22:39.947" endtime="20251019 03:22:40.638"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/${VOLUME}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20251019 03:22:40.644" level="INFO">Running command 'ozone sh volume create o3://omservice/test-txn-vol 2&gt;&amp;1'.</msg>
<msg timestamp="20251019 03:22:44.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20251019 03:22:44.414" level="INFO">${output} = </msg>
<status status="PASS" starttime="20251019 03:22:40.641" endtime="20251019 03:22:44.414"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:22:44.415" level="INFO"/>
<status status="PASS" starttime="20251019 03:22:44.415" endtime="20251019 03:22:44.415"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20251019 03:22:44.416" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20251019 03:22:44.415" endtime="20251019 03:22:44.416"/>
</kw>
<status status="PASS" starttime="20251019 03:22:40.640" endtime="20251019 03:22:44.416"/>
</kw>
<msg timestamp="20251019 03:22:44.416" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20251019 03:22:40.640" endtime="20251019 03:22:44.417"/>
</kw>
<status status="PASS" starttime="20251019 03:22:40.639" endtime="20251019 03:22:44.417"/>
</kw>
<kw name="Run Process" library="Process">
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/${VOLUME}/${BAD_BUCKET}</arg>
<arg>timeout=${TIMEOUT}</arg>
<arg>shell=True</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20251019 03:22:44.417" level="INFO">Starting process:
ozone sh bucket create o3://omservice/test-txn-vol/bucket-crash-1</msg>
<msg timestamp="20251019 03:22:44.422" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20251019 03:22:54.441" level="INFO">Process did not complete in 10 seconds.</msg>
<msg timestamp="20251019 03:22:54.442" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20251019 03:22:54.542" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20251019 03:22:44.417" endtime="20251019 03:22:54.542"/>
</kw>
<kw name="Remove Fault From OMs Only" library="BytemanKeywords">
<arg>${CRASH_RULE}</arg>
<kw name="Log" library="BuiltIn">
<arg>Removing fault ${rule_file} from oms only</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20251019 03:22:54.544" level="INFO">Removing fault /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm from oms only</msg>
<status status="PASS" starttime="20251019 03:22:54.544" endtime="20251019 03:22:54.544"/>
</kw>
<for flavor="IN">
<var>${component}</var>
<value>@{OM_COMPONENTS}</value>
<iter>
<var name="${component}">om1</var>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Remove Byteman Rule</arg>
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251019 03:22:54.681" level="INFO">Remove rule /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm for om1 successful.</msg>
<status status="PASS" starttime="20251019 03:22:54.545" endtime="20251019 03:22:54.681"/>
</kw>
<status status="PASS" starttime="20251019 03:22:54.544" endtime="20251019 03:22:54.682"/>
</kw>
<status status="PASS" starttime="20251019 03:22:54.544" endtime="20251019 03:22:54.682"/>
</iter>
<iter>
<var name="${component}">om2</var>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Remove Byteman Rule</arg>
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251019 03:22:54.812" level="INFO">Remove rule /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm for om2 successful.</msg>
<status status="PASS" starttime="20251019 03:22:54.683" endtime="20251019 03:22:54.813"/>
</kw>
<status status="PASS" starttime="20251019 03:22:54.682" endtime="20251019 03:22:54.813"/>
</kw>
<status status="PASS" starttime="20251019 03:22:54.682" endtime="20251019 03:22:54.813"/>
</iter>
<iter>
<var name="${component}">om3</var>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Remove Byteman Rule</arg>
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Remove Byteman Rule" library="BytemanLibrary">
<arg>${component}</arg>
<arg>${rule_file}</arg>
<doc>Remove Byteman rule for specific component</doc>
<msg timestamp="20251019 03:22:54.950" level="INFO">Remove rule /opt/hadoop/share/ozone/byteman/fail-create-bucket.btm for om3 successful.</msg>
<status status="PASS" starttime="20251019 03:22:54.814" endtime="20251019 03:22:54.950"/>
</kw>
<status status="PASS" starttime="20251019 03:22:54.813" endtime="20251019 03:22:54.950"/>
</kw>
<status status="PASS" starttime="20251019 03:22:54.813" endtime="20251019 03:22:54.950"/>
</iter>
<status status="PASS" starttime="20251019 03:22:54.544" endtime="20251019 03:22:54.950"/>
</for>
<status status="PASS" starttime="20251019 03:22:54.543" endtime="20251019 03:22:54.950"/>
</kw>
<status status="PASS" starttime="20251019 03:22:39.946" endtime="20251019 03:22:54.951"/>
</test>
<doc>Test recovering from OM crash due to transaction failure</doc>
<status status="PASS" starttime="20251019 03:22:39.897" endtime="20251019 03:22:54.952"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="16183"/>
</suite>
<statistics>
<total>
<stat pass="2" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="0" skip="0" id="s1" name="ozonesecure-ha-repair-tools">ozonesecure-ha-repair-tools</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-repair-tools.Kinit</stat>
<stat pass="1" fail="0" skip="0" id="s1-s2" name="Ratis-Transaction-Repair">ozonesecure-ha-repair-tools.Ratis-Transaction-Repair</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
