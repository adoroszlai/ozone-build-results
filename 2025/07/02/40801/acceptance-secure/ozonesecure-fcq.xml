<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250702 18:32:15.303" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-fcq" source="/opt/hadoop/smoketest/fcq/s3_om_fcq.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250702 18:31:25.409" endtime="20250702 18:31:25.409"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:25.412" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:26.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:26.285" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250702 18:31:25.410" endtime="20250702 18:31:26.285"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:26.286" level="INFO">true</msg>
<status status="PASS" starttime="20250702 18:31:26.286" endtime="20250702 18:31:26.286"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:26.287" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:26.286" endtime="20250702 18:31:26.287"/>
</kw>
<status status="PASS" starttime="20250702 18:31:25.409" endtime="20250702 18:31:26.287"/>
</kw>
<msg timestamp="20250702 18:31:26.287" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:25.409" endtime="20250702 18:31:26.287"/>
</kw>
<msg timestamp="20250702 18:31:26.287" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250702 18:31:25.409" endtime="20250702 18:31:26.287"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250702 18:31:26.288" endtime="20250702 18:31:26.288"/>
</kw>
<status status="NOT RUN" starttime="20250702 18:31:26.287" endtime="20250702 18:31:26.288"/>
</branch>
<status status="PASS" starttime="20250702 18:31:26.287" endtime="20250702 18:31:26.288"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250702 18:31:26.288" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250702 18:31:26.288" endtime="20250702 18:31:26.288"/>
</kw>
<status status="PASS" starttime="20250702 18:31:25.409" endtime="20250702 18:31:26.288"/>
</kw>
<test id="s1-t1" name="Test setup headers" line="65">
<kw name="Setup headers">
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250702 18:31:26.290" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.290"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.290"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.290"/>
</kw>
<status status="NOT RUN" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.290"/>
</branch>
<status status="NOT RUN" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.290"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.290"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.290" endtime="20250702 18:31:26.291"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250702 18:31:26.291" endtime="20250702 18:31:26.291"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:26.294" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:26.298" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:26.299" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250702 18:31:26.292" endtime="20250702 18:31:26.299"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:26.299" level="INFO">s3g</msg>
<status status="PASS" starttime="20250702 18:31:26.299" endtime="20250702 18:31:26.299"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:26.300" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:26.300" endtime="20250702 18:31:26.300"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.292" endtime="20250702 18:31:26.300"/>
</kw>
<msg timestamp="20250702 18:31:26.300" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:26.291" endtime="20250702 18:31:26.300"/>
</kw>
<msg timestamp="20250702 18:31:26.301" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250702 18:31:26.291" endtime="20250702 18:31:26.301"/>
</kw>
<msg timestamp="20250702 18:31:26.301" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:26.291" endtime="20250702 18:31:26.301"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250702 18:31:26.301" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:26.301" endtime="20250702 18:31:26.301"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:26.305" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:26.345" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:26.345" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:26.303" endtime="20250702 18:31:26.345"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:26.346" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:26.345" endtime="20250702 18:31:26.346"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:26.346" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:26.346" endtime="20250702 18:31:26.346"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.303" endtime="20250702 18:31:26.346"/>
</kw>
<msg timestamp="20250702 18:31:26.346" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:26.302" endtime="20250702 18:31:26.346"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.302" endtime="20250702 18:31:26.346"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.302" endtime="20250702 18:31:26.346"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.289" endtime="20250702 18:31:26.347"/>
</kw>
<kw name="Setup secure v4 headers" library="commonawslib">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:26.350" level="INFO">Running command 'ozone s3 getsecret  2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:29.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:29.275" level="INFO">${output} = awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:26.347" endtime="20250702 18:31:29.275"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:29.276" level="INFO">awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:29.276" endtime="20250702 18:31:29.276"/>
</kw>
<msg timestamp="20250702 18:31:29.276" level="INFO">${result} = awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:26.347" endtime="20250702 18:31:29.276"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${exists}</var>
<arg>Should Contain</arg>
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20250702 18:31:29.277" level="FAIL">'awsAccessKey=testuser/s3g@EXAMPLE.COM
awsSecret=b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5' does not contain 'S3_SECRET_ALREADY_EXISTS'</msg>
<status status="FAIL" starttime="20250702 18:31:29.277" endtime="20250702 18:31:29.277"/>
</kw>
<msg timestamp="20250702 18:31:29.277" level="INFO">${exists} = False</msg>
<status status="PASS" starttime="20250702 18:31:29.277" endtime="20250702 18:31:29.277"/>
</kw>
<if>
<branch type="IF" condition="${exists}">
<kw name="Execute" library="os">
<arg>ozone s3 revokesecret -y ${OM_HA_PARAM}</arg>
<status status="NOT RUN" starttime="20250702 18:31:29.278" endtime="20250702 18:31:29.278"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<status status="NOT RUN" starttime="20250702 18:31:29.278" endtime="20250702 18:31:29.278"/>
</kw>
<status status="NOT RUN" starttime="20250702 18:31:29.278" endtime="20250702 18:31:29.278"/>
</branch>
<status status="PASS" starttime="20250702 18:31:29.277" endtime="20250702 18:31:29.278"/>
</if>
<kw name="Get Regexp Matches" library="String">
<var>${accessKey}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsAccessKey=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250702 18:31:29.278" level="INFO">${accessKey} = ['testuser/s3g@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250702 18:31:29.278" endtime="20250702 18:31:29.279"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey}</arg>
<arg>testuser</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20250702 18:31:29.279" level="INFO">${accessKey} = ['testuser/s3g@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250702 18:31:29.279" endtime="20250702 18:31:29.279"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${secret}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsSecret=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250702 18:31:29.279" level="INFO">${secret} = ['b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5']</msg>
<status status="PASS" starttime="20250702 18:31:29.279" endtime="20250702 18:31:29.279"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250702 18:31:29.280" level="INFO">${accessKey} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:29.279" endtime="20250702 18:31:29.280"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${secret}</var>
<arg>${secret[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250702 18:31:29.281" level="INFO">${secret} = b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:29.280" endtime="20250702 18:31:29.281"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.signature_version s3v4</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:29.284" level="INFO">Running command 'aws configure set default.s3.signature_version s3v4 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:29.658" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:29.658" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:29.282" endtime="20250702 18:31:29.658"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:29.658" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:29.658" endtime="20250702 18:31:29.658"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:29.659" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:29.658" endtime="20250702 18:31:29.659"/>
</kw>
<status status="PASS" starttime="20250702 18:31:29.281" endtime="20250702 18:31:29.659"/>
</kw>
<msg timestamp="20250702 18:31:29.659" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:29.281" endtime="20250702 18:31:29.659"/>
</kw>
<status status="PASS" starttime="20250702 18:31:29.281" endtime="20250702 18:31:29.659"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_access_key_id ${accessKey}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:29.662" level="INFO">Running command 'aws configure set aws_access_key_id testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:30.004" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:30.004" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:29.660" endtime="20250702 18:31:30.004"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:30.005" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:30.005" endtime="20250702 18:31:30.005"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:30.005" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:30.005" endtime="20250702 18:31:30.006"/>
</kw>
<status status="PASS" starttime="20250702 18:31:29.660" endtime="20250702 18:31:30.006"/>
</kw>
<msg timestamp="20250702 18:31:30.006" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:29.659" endtime="20250702 18:31:30.006"/>
</kw>
<status status="PASS" starttime="20250702 18:31:29.659" endtime="20250702 18:31:30.006"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key ${secret}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:30.009" level="INFO">Running command 'aws configure set aws_secret_access_key b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:30.367" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:30.367" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:30.007" endtime="20250702 18:31:30.367"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:30.368" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:30.368" endtime="20250702 18:31:30.368"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:30.369" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:30.368" endtime="20250702 18:31:30.369"/>
</kw>
<status status="PASS" starttime="20250702 18:31:30.007" endtime="20250702 18:31:30.369"/>
</kw>
<msg timestamp="20250702 18:31:30.369" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:30.006" endtime="20250702 18:31:30.369"/>
</kw>
<status status="PASS" starttime="20250702 18:31:30.006" endtime="20250702 18:31:30.369"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set region us-west-1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:30.372" level="INFO">Running command 'aws configure set region us-west-1 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:30.719" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:30.719" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:30.370" endtime="20250702 18:31:30.719"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:30.720" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:30.720" endtime="20250702 18:31:30.720"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:30.720" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:30.720" endtime="20250702 18:31:30.720"/>
</kw>
<status status="PASS" starttime="20250702 18:31:30.370" endtime="20250702 18:31:30.721"/>
</kw>
<msg timestamp="20250702 18:31:30.721" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:30.369" endtime="20250702 18:31:30.721"/>
</kw>
<status status="PASS" starttime="20250702 18:31:30.369" endtime="20250702 18:31:30.721"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.addressing_style ${OZONE_S3_ADDRESS_STYLE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:30.724" level="INFO">Running command 'aws configure set default.s3.addressing_style path 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:31.077" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:31.077" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:30.722" endtime="20250702 18:31:31.077"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:31.078" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:31.078" endtime="20250702 18:31:31.078"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:31.079" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:31.078" endtime="20250702 18:31:31.079"/>
</kw>
<status status="PASS" starttime="20250702 18:31:30.722" endtime="20250702 18:31:31.079"/>
</kw>
<msg timestamp="20250702 18:31:31.079" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:30.721" endtime="20250702 18:31:31.079"/>
</kw>
<status status="PASS" starttime="20250702 18:31:30.721" endtime="20250702 18:31:31.079"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.347" endtime="20250702 18:31:31.079"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.289" endtime="20250702 18:31:31.079"/>
</kw>
<status status="PASS" starttime="20250702 18:31:26.288" endtime="20250702 18:31:31.079"/>
</test>
<test id="s1-t2" name="Test setup credentials" line="68">
<kw name="Setup aws credentials">
<kw name="Execute" library="os">
<var>${accessKey}</var>
<arg>aws configure get aws_access_key_id</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:31.084" level="INFO">Running command 'aws configure get aws_access_key_id 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:31.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:31.440" level="INFO">${output} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:31.082" endtime="20250702 18:31:31.441"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:31.441" level="INFO">testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:31.441" endtime="20250702 18:31:31.441"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:31.442" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:31.441" endtime="20250702 18:31:31.442"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.081" endtime="20250702 18:31:31.442"/>
</kw>
<msg timestamp="20250702 18:31:31.442" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:31.081" endtime="20250702 18:31:31.442"/>
</kw>
<msg timestamp="20250702 18:31:31.442" level="INFO">${accessKey} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:31.080" endtime="20250702 18:31:31.442"/>
</kw>
<kw name="Execute" library="os">
<var>${secret}</var>
<arg>aws configure get aws_secret_access_key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:31.445" level="INFO">Running command 'aws configure get aws_secret_access_key 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:31.786" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:31.787" level="INFO">${output} = b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:31.443" endtime="20250702 18:31:31.787"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:31.787" level="INFO">b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:31.787" endtime="20250702 18:31:31.787"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:31.788" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:31.788" endtime="20250702 18:31:31.788"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.443" endtime="20250702 18:31:31.788"/>
</kw>
<msg timestamp="20250702 18:31:31.788" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:31.443" endtime="20250702 18:31:31.788"/>
</kw>
<msg timestamp="20250702 18:31:31.788" level="INFO">${secret} = b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5</msg>
<status status="PASS" starttime="20250702 18:31:31.442" endtime="20250702 18:31:31.788"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>AWS_SECRET_ACCESS_KEY</arg>
<arg>${secret}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20250702 18:31:31.789" level="INFO">Environment variable 'AWS_SECRET_ACCESS_KEY' set to value 'b08a4446e0c96ca0f6d5e970da0ebe2806583da0cd391b0875e4872fb5f7b0a5'.</msg>
<status status="PASS" starttime="20250702 18:31:31.788" endtime="20250702 18:31:31.789"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>AWS_ACCESS_KEY_ID</arg>
<arg>${accessKey}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20250702 18:31:31.789" level="INFO">Environment variable 'AWS_ACCESS_KEY_ID' set to value 'testuser/s3g@EXAMPLE.COM'.</msg>
<status status="PASS" starttime="20250702 18:31:31.789" endtime="20250702 18:31:31.789"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.080" endtime="20250702 18:31:31.789"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.080" endtime="20250702 18:31:31.789"/>
</test>
<test id="s1-t3" name="Test create bucket 1" line="71">
<kw name="Setup bucket1">
<kw name="Execute AWSS3APICli" library="commonawslib">
<arg>create-bucket --bucket bucket1</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${ENDPOINT_URL} ${command}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:31.793" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 create-bucket --bucket bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:33.693" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:33.693" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket1"
}</msg>
<status status="PASS" starttime="20250702 18:31:31.791" endtime="20250702 18:31:33.693"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:33.694" level="INFO">{
    "Location": "http://s3g:9878/bucket1"
}</msg>
<status status="PASS" starttime="20250702 18:31:33.693" endtime="20250702 18:31:33.694"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:33.694" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:33.694" endtime="20250702 18:31:33.694"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.791" endtime="20250702 18:31:33.694"/>
</kw>
<msg timestamp="20250702 18:31:33.694" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:31.791" endtime="20250702 18:31:33.694"/>
</kw>
<msg timestamp="20250702 18:31:33.694" level="INFO">${output} = {
    "Location": "http://s3g:9878/bucket1"
}</msg>
<status status="PASS" starttime="20250702 18:31:31.790" endtime="20250702 18:31:33.694"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.790" endtime="20250702 18:31:33.695"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.790" endtime="20250702 18:31:33.695"/>
</kw>
<status status="PASS" starttime="20250702 18:31:31.789" endtime="20250702 18:31:33.695"/>
</test>
<test id="s1-t4" name="Test OM JMX endpoint" line="74">
<kw name="Verify endpoint is up">
<arg>${OM_JMX_ENDPOINT}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit HTTP user" library="commonlib">
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250702 18:31:33.697" endtime="20250702 18:31:33.697"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${principal}</var>
<arg>HTTP</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:33.700" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:33.704" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:33.704" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250702 18:31:33.698" endtime="20250702 18:31:33.704"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:33.704" level="INFO">s3g</msg>
<status status="PASS" starttime="20250702 18:31:33.704" endtime="20250702 18:31:33.704"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:33.705" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:33.704" endtime="20250702 18:31:33.705"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.698" endtime="20250702 18:31:33.705"/>
</kw>
<msg timestamp="20250702 18:31:33.705" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:33.697" endtime="20250702 18:31:33.705"/>
</kw>
<msg timestamp="20250702 18:31:33.705" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250702 18:31:33.697" endtime="20250702 18:31:33.705"/>
</kw>
<msg timestamp="20250702 18:31:33.705" level="INFO">${principal} = HTTP/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250702 18:31:33.697" endtime="20250702 18:31:33.705"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/HTTP.keytab ${principal}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/HTTP.keytab ${principal}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:33.708" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/HTTP.keytab HTTP/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:33.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:33.754" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250702 18:31:33.706" endtime="20250702 18:31:33.754"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:33.755" level="INFO"/>
<status status="PASS" starttime="20250702 18:31:33.754" endtime="20250702 18:31:33.755"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:33.755" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:33.755" endtime="20250702 18:31:33.755"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.706" endtime="20250702 18:31:33.755"/>
</kw>
<msg timestamp="20250702 18:31:33.755" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:33.706" endtime="20250702 18:31:33.755"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.706" endtime="20250702 18:31:33.755"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.705" endtime="20250702 18:31:33.755"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.696" endtime="20250702 18:31:33.755"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.696" endtime="20250702 18:31:33.756"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -v -s -I ${url}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:33.759" level="INFO">Running command 'curl --negotiate -u : -v -s -I http://om:9874/jmx 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:34.108" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:34.108" level="INFO">${output} = * Uses proxy env variable no_proxy == 'om,scm,recon,s3g,kdc,localhost,127.0.0.1'
*   Trying 172.18.0.3:9874...
* Connected to om (172.18.0.3) port 9874 (#0)
* Server auth using Negotiate with user ''
...</msg>
<status status="PASS" starttime="20250702 18:31:33.756" endtime="20250702 18:31:34.108"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:34.109" level="INFO">* Uses proxy env variable no_proxy == 'om,scm,recon,s3g,kdc,localhost,127.0.0.1'
*   Trying 172.18.0.3:9874...
* Connected to om (172.18.0.3) port 9874 (#0)
* Server auth using Negotiate with user ''
&gt; HEAD /jmx HTTP/1.1
&gt; Host: om:9874
&gt; Authorization: Negotiate YIICewYGKwYBBQUCoIICbzCCAmugDTALBgkqhkiG9xIBAgKiggJYBIICVGCCAlAGCSqGSIb3EgECAgEAboICPzCCAjugAwIBBaEDAgEOogcDBQAgAAAAo4IBT2GCAUswggFHoAMCAQWhDRsLRVhBTVBMRS5DT02iFTAToAMCAQOhDDAKGwRIVFRQGwJvbaOCARgwggEUoAMCARKhAwIBAaKCAQYEggECM5Ft71S70A31Ui9WggDik17Z+EtYS75rLXTzk9fbgp2ZWnS8dUT3Z+69BIMcznaTa7M4D/4XYyWR2YjhdCuAPD/pif2gtw+TgiAeuUkUW9S79pGFTQ7m7eLOiZfye/nWILapG1XE1gjHAmqEC2AcEvUVPG9lAPqeytt47sh9rPYATqkwWsnXgmaHqUV71j9kZr8KBYHrPmoTx1KZfc7GZDDeBxA4HIiz0F1WZnKl+2mtwnjwnfOzDeVoW8YgGg6t4Jx1vbK+dOT7BSTcWNh9vuwUbWndCPMmlge+7z3qemxoek3yC73coXcstmEW73Gd/B8Y6sQIAgS5XxfDz5lbM48ZpIHSMIHPoAMCARKigccEgcSdQ4tKIxWDiz51iKh6UZ2QtXysOmuxYvDybfvlpDJEpKKVGyAqBaokP8J4ZTRZkuwNfOCVurWEx2MHyZtPoghgfKqznPeD08dBa5Xf7IctbAVZJiqdBakAqhVTu/yNPMCRCanyzX6QmYh66hAXphw6F+uQouun/bddva7bbS4lX7mawFAQaKQEA+QE1TnHdWIfWiJJRwgL5YICYA7mPJ/1CirGW3mXhzHfusiy+R5XOx0eNlDjCcD9NXed6BqbDBURO5A+
&gt; User-Agent: curl/7.76.1
&gt; Accept: */*
&gt; 
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Date: Wed, 02 Jul 2025 18:31:33 GMT
&lt; Cache-Control: no-cache
&lt; Expires: Wed, 02 Jul 2025 18:31:33 GMT
&lt; Pragma: no-cache
&lt; Content-Type: application/json; charset=utf8
&lt; X-Content-Type-Options: nosniff
&lt; X-XSS-Protection: 1; mode=block
&lt; X-FRAME-OPTIONS: SAMEORIGIN
&lt; WWW-Authenticate: Negotiate oYGFMIGCoAMKAQChCwYJKoZIhvcSAQICom4EbGBqBgkqhkiG9xIBAgICAG9bMFmgAwIBBaEDAgEPok0wS6ADAgESokQEQnrAqB297phVO/0TuUT5mQvg/1cPqCMpnL5j44Sq3OTlWalYnTDmA2xEpxx3Vbirn+S9pjOmfKU04dz73xNm4LJIvA==
&lt; Set-Cookie: hadoop.auth="u=HTTP&amp;p=HTTP/s3g@EXAMPLE.COM&amp;t=kerberos&amp;e=1751517093876&amp;s=k0rdgbtw8/vg8tFmDjZ/r3Iz5dUaYzIRLksyJcd+DpU="; Path=/; HttpOnly
&lt; Access-Control-Allow-Methods: GET
&lt; Access-Control-Allow-Origin: *
&lt; Content-Length: 414515
&lt; 
* Connection #0 to host om left intact
HTTP/1.1 200 OK
Date: Wed, 02 Jul 2025 18:31:33 GMT
Cache-Control: no-cache
Expires: Wed, 02 Jul 2025 18:31:33 GMT
Pragma: no-cache
Content-Type: application/json; charset=utf8
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
WWW-Authenticate: Negotiate oYGFMIGCoAMKAQChCwYJKoZIhvcSAQICom4EbGBqBgkqhkiG9xIBAgICAG9bMFmgAwIBBaEDAgEPok0wS6ADAgESokQEQnrAqB297phVO/0TuUT5mQvg/1cPqCMpnL5j44Sq3OTlWalYnTDmA2xEpxx3Vbirn+S9pjOmfKU04dz73xNm4LJIvA==
Set-Cookie: hadoop.auth="u=HTTP&amp;p=HTTP/s3g@EXAMPLE.COM&amp;t=kerberos&amp;e=1751517093876&amp;s=k0rdgbtw8/vg8tFmDjZ/r3Iz5dUaYzIRLksyJcd+DpU="; Path=/; HttpOnly
Access-Control-Allow-Methods: GET
Access-Control-Allow-Origin: *
Content-Length: 414515
</msg>
<status status="PASS" starttime="20250702 18:31:34.109" endtime="20250702 18:31:34.109"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:34.110" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:34.110" endtime="20250702 18:31:34.110"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.756" endtime="20250702 18:31:34.110"/>
</kw>
<msg timestamp="20250702 18:31:34.110" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:33.756" endtime="20250702 18:31:34.110"/>
</kw>
<msg timestamp="20250702 18:31:34.111" level="INFO">${result} = * Uses proxy env variable no_proxy == 'om,scm,recon,s3g,kdc,localhost,127.0.0.1'
*   Trying 172.18.0.3:9874...
* Connected to om (172.18.0.3) port 9874 (#0)
* Server auth using Negotiate with user ''
...</msg>
<status status="PASS" starttime="20250702 18:31:33.756" endtime="20250702 18:31:34.111"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200 OK</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250702 18:31:34.111" endtime="20250702 18:31:34.111"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.696" endtime="20250702 18:31:34.111"/>
</kw>
<status status="PASS" starttime="20250702 18:31:33.695" endtime="20250702 18:31:34.111"/>
</test>
<test id="s1-t5" name="Test metrics are registered" line="77">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${OM_JMX_ENDPOINT} | grep ${DECAY_RPC_SCHEDULER_METRICS_NAME}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:34.119" level="INFO">Running command 'curl --negotiate -u : -LSs http://om:9874/jmx | grep DecayRpcSchedulerMetrics2.ipc.9862 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:31:34.220" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:31:34.220" level="INFO">${output} =     "name" : "Hadoop:service=OzoneManager,name=DecayRpcSchedulerMetrics2.ipc.9862",
    "modelerType" : "DecayRpcSchedulerMetrics2.ipc.9862",</msg>
<status status="PASS" starttime="20250702 18:31:34.114" endtime="20250702 18:31:34.220"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:31:34.221" level="INFO">    "name" : "Hadoop:service=OzoneManager,name=DecayRpcSchedulerMetrics2.ipc.9862",
    "modelerType" : "DecayRpcSchedulerMetrics2.ipc.9862",</msg>
<status status="PASS" starttime="20250702 18:31:34.221" endtime="20250702 18:31:34.221"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:31:34.222" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:31:34.221" endtime="20250702 18:31:34.222"/>
</kw>
<status status="PASS" starttime="20250702 18:31:34.114" endtime="20250702 18:31:34.222"/>
</kw>
<msg timestamp="20250702 18:31:34.222" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:34.113" endtime="20250702 18:31:34.222"/>
</kw>
<msg timestamp="20250702 18:31:34.222" level="INFO">${result} =     "name" : "Hadoop:service=OzoneManager,name=DecayRpcSchedulerMetrics2.ipc.9862",
    "modelerType" : "DecayRpcSchedulerMetrics2.ipc.9862",</msg>
<status status="PASS" starttime="20250702 18:31:34.113" endtime="20250702 18:31:34.222"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${DECAY_RPC_SCHEDULER_METRICS_NAME}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250702 18:31:34.223" endtime="20250702 18:31:34.223"/>
</kw>
<status status="PASS" starttime="20250702 18:31:34.112" endtime="20250702 18:31:34.223"/>
</test>
<test id="s1-t6" name="Run freon s3kg" line="81">
<kw name="Freon s3kg">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon s3kg -e ${S3_ENDPOINT_URL} -t ${threads} -n ${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:31:34.231" level="INFO">Running command 'ozone freon s3kg -e http://s3g:9878 -t 10 -n 1000 -p s3bg  2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:32:07.810" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:32:07.810" level="INFO">${output} = 2025-07-02 18:31:35,936 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-02 18:31:36,216 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250702 18:31:34.228" endtime="20250702 18:32:07.810"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:32:07.811" level="INFO">2025-07-02 18:31:35,936 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-02 18:31:36,216 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-07-02 18:31:36,217 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-07-02 18:31:36,430 [main] INFO freon.BaseFreonGenerator: Executing test with prefix s3bg and number-of-tests 1000
2025-07-02 18:31:36,529 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-07-02 18:31:37,531 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-07-02 18:31:38,533 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-07-02 18:31:39,535 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1000)
2025-07-02 18:31:40,539 [Thread-5] INFO freon.ProgressBar: Progress: 2.10 % (21 out of 1000)
2025-07-02 18:31:41,540 [Thread-5] INFO freon.ProgressBar: Progress: 4.50 % (45 out of 1000)
2025-07-02 18:31:42,543 [Thread-5] INFO freon.ProgressBar: Progress: 6.80 % (68 out of 1000)
2025-07-02 18:31:43,562 [Thread-5] INFO freon.ProgressBar: Progress: 9.40 % (94 out of 1000)
2025-07-02 18:31:44,622 [Thread-5] INFO freon.ProgressBar: Progress: 11.70 % (117 out of 1000)
2025-07-02 18:31:45,638 [Thread-5] INFO freon.ProgressBar: Progress: 14.10 % (141 out of 1000)
2025-07-02 18:31:46,639 [Thread-5] INFO freon.ProgressBar: Progress: 17.00 % (170 out of 1000)
2025-07-02 18:31:47,642 [Thread-5] INFO freon.ProgressBar: Progress: 19.80 % (198 out of 1000)
2025-07-02 18:31:48,655 [Thread-5] INFO freon.ProgressBar: Progress: 22.50 % (225 out of 1000)
2025-07-02 18:31:49,658 [Thread-5] INFO freon.ProgressBar: Progress: 24.90 % (249 out of 1000)
2025-07-02 18:31:50,660 [Thread-5] INFO freon.ProgressBar: Progress: 28.40 % (284 out of 1000)
2025-07-02 18:31:51,674 [Thread-5] INFO freon.ProgressBar: Progress: 31.80 % (318 out of 1000)
2025-07-02 18:31:52,677 [Thread-5] INFO freon.ProgressBar: Progress: 35.80 % (358 out of 1000)
2025-07-02 18:31:53,688 [Thread-5] INFO freon.ProgressBar: Progress: 39.00 % (390 out of 1000)
2025-07-02 18:31:54,695 [Thread-5] INFO freon.ProgressBar: Progress: 42.90 % (429 out of 1000)
2025-07-02 18:31:55,700 [Thread-5] INFO freon.ProgressBar: Progress: 47.10 % (471 out of 1000)
2025-07-02 18:31:56,706 [Thread-5] INFO freon.ProgressBar: Progress: 51.10 % (511 out of 1000)
2025-07-02 18:31:57,711 [Thread-5] INFO freon.ProgressBar: Progress: 55.10 % (551 out of 1000)
2025-07-02 18:31:58,714 [Thread-5] INFO freon.ProgressBar: Progress: 59.10 % (591 out of 1000)
2025-07-02 18:31:59,718 [Thread-5] INFO freon.ProgressBar: Progress: 62.90 % (629 out of 1000)
2025-07-02 18:32:00,718 [Thread-5] INFO freon.ProgressBar: Progress: 67.10 % (671 out of 1000)
2025-07-02 18:32:01,719 [Thread-5] INFO freon.ProgressBar: Progress: 71.40 % (714 out of 1000)
2025-07-02 18:32:02,733 [Thread-5] INFO freon.ProgressBar: Progress: 76.10 % (761 out of 1000)
2025-07-02 18:32:03,733 [Thread-5] INFO freon.ProgressBar: Progress: 80.00 % (800 out of 1000)
2025-07-02 18:32:04,737 [Thread-5] INFO freon.ProgressBar: Progress: 85.90 % (859 out of 1000)
2025-07-02 18:32:05,743 [Thread-5] INFO freon.ProgressBar: Progress: 90.90 % (909 out of 1000)
2025-07-02 18:32:06,748 [Thread-5] INFO freon.ProgressBar: Progress: 95.90 % (959 out of 1000)
2025-07-02 18:32:07,749 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1000 out of 1000)
2025-07-02 18:32:07,764 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1000, min=94.537404, max=2590.204435, mean=288.1559857261377, stddev=222.6789478254011, median=252.882378, p75=321.056833, p95=456.350436, p98=496.707014, p99=563.093729, p999=2590.202502, mean_rate=32.64785165077654, m1=20.54826937025652, m5=13.636997743103578, m15=12.294354639402417, rate_unit=events/second, duration_unit=milliseconds
2025-07-02 18:32:07,765 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 31
2025-07-02 18:32:07,765 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-07-02 18:32:07,765 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1000</msg>
<status status="PASS" starttime="20250702 18:32:07.810" endtime="20250702 18:32:07.811"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:32:07.811" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:32:07.811" endtime="20250702 18:32:07.811"/>
</kw>
<status status="PASS" starttime="20250702 18:31:34.227" endtime="20250702 18:32:07.811"/>
</kw>
<msg timestamp="20250702 18:32:07.811" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:31:34.227" endtime="20250702 18:32:07.811"/>
</kw>
<msg timestamp="20250702 18:32:07.812" level="INFO">${result} = 2025-07-02 18:31:35,936 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-02 18:31:36,216 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250702 18:31:34.226" endtime="20250702 18:32:07.812"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250702 18:32:07.812" endtime="20250702 18:32:07.812"/>
</kw>
<status status="PASS" starttime="20250702 18:31:34.225" endtime="20250702 18:32:07.812"/>
</kw>
<status status="PASS" starttime="20250702 18:31:34.224" endtime="20250702 18:32:07.812"/>
</test>
<test id="s1-t7" name="Test caller from metrics" line="84">
<kw name="Check metrics caller">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -LSs ${OM_JMX_ENDPOINT} | sed -n '/${DECAY_RPC_SCHEDULER_METRICS_NAME}/,/}/p' | grep 'Caller('</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250702 18:32:07.817" level="INFO">Running command 'curl --negotiate -u : -LSs http://om:9874/jmx | sed -n '/DecayRpcSchedulerMetrics2.ipc.9862/,/}/p' | grep 'Caller(' 2&gt;&amp;1'.</msg>
<msg timestamp="20250702 18:32:07.943" level="INFO">${rc} = 0</msg>
<msg timestamp="20250702 18:32:07.943" level="INFO">${output} =     "Caller(testuser/s3g@EXAMPLE.COM).Volume" : 4002,
    "Caller(testuser/s3g@EXAMPLE.COM).Priority" : 3,</msg>
<status status="PASS" starttime="20250702 18:32:07.814" endtime="20250702 18:32:07.944"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250702 18:32:07.945" level="INFO">    "Caller(testuser/s3g@EXAMPLE.COM).Volume" : 4002,
    "Caller(testuser/s3g@EXAMPLE.COM).Priority" : 3,</msg>
<status status="PASS" starttime="20250702 18:32:07.944" endtime="20250702 18:32:07.945"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250702 18:32:07.945" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250702 18:32:07.945" endtime="20250702 18:32:07.946"/>
</kw>
<status status="PASS" starttime="20250702 18:32:07.814" endtime="20250702 18:32:07.946"/>
</kw>
<msg timestamp="20250702 18:32:07.946" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250702 18:32:07.814" endtime="20250702 18:32:07.946"/>
</kw>
<msg timestamp="20250702 18:32:07.946" level="INFO">${result} =     "Caller(testuser/s3g@EXAMPLE.COM).Volume" : 4002,
    "Caller(testuser/s3g@EXAMPLE.COM).Priority" : 3,</msg>
<status status="PASS" starttime="20250702 18:32:07.813" endtime="20250702 18:32:07.946"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${TEST_USER}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250702 18:32:07.946" endtime="20250702 18:32:07.947"/>
</kw>
<status status="PASS" starttime="20250702 18:32:07.813" endtime="20250702 18:32:07.947"/>
</kw>
<status status="PASS" starttime="20250702 18:32:07.813" endtime="20250702 18:32:07.947"/>
</test>
<doc>S3 gateway test with aws cli</doc>
<status status="PASS" starttime="20250702 18:31:25.351" endtime="20250702 18:32:07.948"/>
</suite>
<statistics>
<total>
<stat pass="7" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="7" fail="0" skip="0" id="s1" name="ozonesecure-fcq">ozonesecure-fcq</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
