<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250714 15:34:59.950" rpa="false" schemaversion="4">
<suite id="s1" name="ozone">
<suite id="s1-s1" name="Lib" source="/opt/hadoop/smoketest/lib">
<suite id="s1-s1-s1" name="Fs Tests" source="/opt/hadoop/smoketest/lib/fs_tests.robot">
<test id="s1-s1-s1-t1" name="Format o3fs URL without path" line="22">
<kw name="Format o3fs URL" library="fs">
<var>${result}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_leading}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>.</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>.</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.033" level="INFO">${first} = o</msg>
<status status="PASS" starttime="20250714 14:53:40.033" endtime="20250714 14:53:40.033"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.033" level="INFO">${result} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.033" endtime="20250714 14:53:40.033"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.032" endtime="20250714 14:53:40.033"/>
</kw>
<msg timestamp="20250714 14:53:40.033" level="INFO">${om_with_leading} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.032" endtime="20250714 14:53:40.033"/>
</kw>
<msg timestamp="20250714 14:53:40.034" level="INFO">${result} = o3fs://bucket1.vol1.om/</msg>
<status status="PASS" starttime="20250714 14:53:40.031" endtime="20250714 14:53:40.034"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>o3fs://bucket1.vol1.om/</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.034" endtime="20250714 14:53:40.034"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.030" endtime="20250714 14:53:40.034"/>
</test>
<test id="s1-s1-s1-t2" name="Format o3fs URL with path" line="26">
<kw name="Format o3fs URL" library="fs">
<var>${result}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<arg>dir/file</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_leading}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>.</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>.</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.036" level="INFO">${first} = o</msg>
<status status="PASS" starttime="20250714 14:53:40.036" endtime="20250714 14:53:40.036"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.036" level="INFO">${result} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.036" endtime="20250714 14:53:40.036"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.036" endtime="20250714 14:53:40.037"/>
</kw>
<msg timestamp="20250714 14:53:40.037" level="INFO">${om_with_leading} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.035" endtime="20250714 14:53:40.037"/>
</kw>
<msg timestamp="20250714 14:53:40.037" level="INFO">${result} = o3fs://bucket1.vol1.om/dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.035" endtime="20250714 14:53:40.037"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>o3fs://bucket1.vol1.om/dir/file</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.037" endtime="20250714 14:53:40.037"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.034" endtime="20250714 14:53:40.037"/>
</test>
<test id="s1-s1-s1-t3" name="Format o3fs URL with OM" line="30">
<kw name="Format o3fs URL" library="fs">
<var>${result}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<arg>dir/file</arg>
<arg>omservice</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_leading}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>.</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>.</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.039" level="INFO">${first} = o</msg>
<status status="PASS" starttime="20250714 14:53:40.039" endtime="20250714 14:53:40.039"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.039" level="INFO">${result} = .omservice</msg>
<status status="PASS" starttime="20250714 14:53:40.039" endtime="20250714 14:53:40.039"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.039" endtime="20250714 14:53:40.040"/>
</kw>
<msg timestamp="20250714 14:53:40.040" level="INFO">${om_with_leading} = .omservice</msg>
<status status="PASS" starttime="20250714 14:53:40.038" endtime="20250714 14:53:40.040"/>
</kw>
<msg timestamp="20250714 14:53:40.040" level="INFO">${result} = o3fs://bucket1.vol1.omservice/dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.038" endtime="20250714 14:53:40.040"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>o3fs://bucket1.vol1.omservice/dir/file</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.040" endtime="20250714 14:53:40.040"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.037" endtime="20250714 14:53:40.040"/>
</test>
<test id="s1-s1-s1-t4" name="Format ofs URL without path" line="35">
<kw name="Format ofs URL" library="fs">
<var>${result}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_trailing}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Trailing</arg>
<arg>/</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Trailing" library="string">
<arg>/</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.043" level="INFO">${last} = m</msg>
<status status="PASS" starttime="20250714 14:53:40.042" endtime="20250714 14:53:40.043"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.043" level="INFO">${result} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.043" endtime="20250714 14:53:40.043"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.042" endtime="20250714 14:53:40.043"/>
</kw>
<msg timestamp="20250714 14:53:40.043" level="INFO">${om_with_trailing} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.042" endtime="20250714 14:53:40.043"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${path_with_leading}</var>
<arg>'${path}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>/</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20250714 14:53:40.044" endtime="20250714 14:53:40.044"/>
</kw>
<msg timestamp="20250714 14:53:40.045" level="INFO">${path_with_leading} = </msg>
<status status="PASS" starttime="20250714 14:53:40.043" endtime="20250714 14:53:40.045"/>
</kw>
<msg timestamp="20250714 14:53:40.045" level="INFO">${result} = ofs://om/vol1/bucket1</msg>
<status status="PASS" starttime="20250714 14:53:40.041" endtime="20250714 14:53:40.045"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>ofs://om/vol1/bucket1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.045" endtime="20250714 14:53:40.045"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.040" endtime="20250714 14:53:40.045"/>
</test>
<test id="s1-s1-s1-t5" name="Format ofs URL with path" line="39">
<kw name="Format ofs URL" library="fs">
<var>${result}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<arg>dir/file</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_trailing}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Trailing</arg>
<arg>/</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Trailing" library="string">
<arg>/</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.047" level="INFO">${last} = m</msg>
<status status="PASS" starttime="20250714 14:53:40.047" endtime="20250714 14:53:40.047"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.047" level="INFO">${result} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.047" endtime="20250714 14:53:40.047"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.047" endtime="20250714 14:53:40.048"/>
</kw>
<msg timestamp="20250714 14:53:40.048" level="INFO">${om_with_trailing} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.046" endtime="20250714 14:53:40.048"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${path_with_leading}</var>
<arg>'${path}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>/</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>/</arg>
<arg>${path}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.049" level="INFO">${first} = d</msg>
<status status="PASS" starttime="20250714 14:53:40.049" endtime="20250714 14:53:40.049"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.049" level="INFO">${result} = /dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.049" endtime="20250714 14:53:40.049"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.048" endtime="20250714 14:53:40.049"/>
</kw>
<msg timestamp="20250714 14:53:40.049" level="INFO">${path_with_leading} = /dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.048" endtime="20250714 14:53:40.049"/>
</kw>
<msg timestamp="20250714 14:53:40.050" level="INFO">${result} = ofs://om/vol1/bucket1/dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.046" endtime="20250714 14:53:40.050"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>ofs://om/vol1/bucket1/dir/file</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.050" endtime="20250714 14:53:40.050"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.045" endtime="20250714 14:53:40.050"/>
</test>
<test id="s1-s1-s1-t6" name="Format ofs URL with OM" line="43">
<kw name="Format ofs URL" library="fs">
<var>${result}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<arg>dir/file</arg>
<arg>om:1234</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_trailing}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Trailing</arg>
<arg>/</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Trailing" library="string">
<arg>/</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.052" level="INFO">${last} = 4</msg>
<status status="PASS" starttime="20250714 14:53:40.052" endtime="20250714 14:53:40.052"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.052" level="INFO">${result} = om:1234/</msg>
<status status="PASS" starttime="20250714 14:53:40.052" endtime="20250714 14:53:40.052"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.051" endtime="20250714 14:53:40.052"/>
</kw>
<msg timestamp="20250714 14:53:40.052" level="INFO">${om_with_trailing} = om:1234/</msg>
<status status="PASS" starttime="20250714 14:53:40.051" endtime="20250714 14:53:40.052"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${path_with_leading}</var>
<arg>'${path}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>/</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>/</arg>
<arg>${path}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.053" level="INFO">${first} = d</msg>
<status status="PASS" starttime="20250714 14:53:40.053" endtime="20250714 14:53:40.053"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.054" level="INFO">${result} = /dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.054" endtime="20250714 14:53:40.054"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.053" endtime="20250714 14:53:40.054"/>
</kw>
<msg timestamp="20250714 14:53:40.054" level="INFO">${path_with_leading} = /dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.052" endtime="20250714 14:53:40.054"/>
</kw>
<msg timestamp="20250714 14:53:40.054" level="INFO">${result} = ofs://om:1234/vol1/bucket1/dir/file</msg>
<status status="PASS" starttime="20250714 14:53:40.050" endtime="20250714 14:53:40.054"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>ofs://om:1234/vol1/bucket1/dir/file</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.054" endtime="20250714 14:53:40.055"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.050" endtime="20250714 14:53:40.055"/>
</test>
<test id="s1-s1-s1-t7" name="Format FS URL with ofs scheme" line="48">
<kw name="Format FS URL" library="fs">
<var>${result}</var>
<arg>ofs</arg>
<arg>vol1</arg>
<arg>bucket1</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${url}</var>
<arg>'${scheme}' == 'o3fs'</arg>
<arg>Format o3fs URL</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<arg>ELSE IF</arg>
<arg>'${scheme}' == 'ofs'</arg>
<arg>Format ofs URL</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>Unsupported FS scheme: ${scheme}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Format ofs URL" library="fs">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_trailing}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Trailing</arg>
<arg>/</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Trailing" library="string">
<arg>/</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.058" level="INFO">${last} = m</msg>
<status status="PASS" starttime="20250714 14:53:40.057" endtime="20250714 14:53:40.058"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.058" level="INFO">${result} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.058" endtime="20250714 14:53:40.058"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.057" endtime="20250714 14:53:40.058"/>
</kw>
<msg timestamp="20250714 14:53:40.058" level="INFO">${om_with_trailing} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.056" endtime="20250714 14:53:40.058"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${path_with_leading}</var>
<arg>'${path}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>/</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20250714 14:53:40.059" endtime="20250714 14:53:40.059"/>
</kw>
<msg timestamp="20250714 14:53:40.059" level="INFO">${path_with_leading} = </msg>
<status status="PASS" starttime="20250714 14:53:40.058" endtime="20250714 14:53:40.059"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.056" endtime="20250714 14:53:40.059"/>
</kw>
<msg timestamp="20250714 14:53:40.059" level="INFO">${url} = ofs://om/vol1/bucket1</msg>
<status status="PASS" starttime="20250714 14:53:40.056" endtime="20250714 14:53:40.059"/>
</kw>
<msg timestamp="20250714 14:53:40.060" level="INFO">${result} = ofs://om/vol1/bucket1</msg>
<status status="PASS" starttime="20250714 14:53:40.055" endtime="20250714 14:53:40.060"/>
</kw>
<kw name="Format ofs URL" library="fs">
<var>${expected}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_trailing}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Trailing</arg>
<arg>/</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Trailing" library="string">
<arg>/</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.061" level="INFO">${last} = m</msg>
<status status="PASS" starttime="20250714 14:53:40.061" endtime="20250714 14:53:40.061"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.062" level="INFO">${result} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.062" endtime="20250714 14:53:40.062"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.061" endtime="20250714 14:53:40.062"/>
</kw>
<msg timestamp="20250714 14:53:40.062" level="INFO">${om_with_trailing} = om/</msg>
<status status="PASS" starttime="20250714 14:53:40.060" endtime="20250714 14:53:40.062"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${path_with_leading}</var>
<arg>'${path}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>/</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20250714 14:53:40.063" endtime="20250714 14:53:40.063"/>
</kw>
<msg timestamp="20250714 14:53:40.063" level="INFO">${path_with_leading} = </msg>
<status status="PASS" starttime="20250714 14:53:40.062" endtime="20250714 14:53:40.063"/>
</kw>
<msg timestamp="20250714 14:53:40.063" level="INFO">${expected} = ofs://om/vol1/bucket1</msg>
<status status="PASS" starttime="20250714 14:53:40.060" endtime="20250714 14:53:40.063"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.063" endtime="20250714 14:53:40.064"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.055" endtime="20250714 14:53:40.064"/>
</test>
<test id="s1-s1-s1-t8" name="Format FS URL with o3fs scheme" line="53">
<kw name="Format FS URL" library="fs">
<var>${result}</var>
<arg>o3fs</arg>
<arg>vol1</arg>
<arg>bucket1</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${url}</var>
<arg>'${scheme}' == 'o3fs'</arg>
<arg>Format o3fs URL</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<arg>ELSE IF</arg>
<arg>'${scheme}' == 'ofs'</arg>
<arg>Format ofs URL</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>Unsupported FS scheme: ${scheme}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Format o3fs URL" library="fs">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_leading}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>.</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>.</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.067" level="INFO">${first} = o</msg>
<status status="PASS" starttime="20250714 14:53:40.066" endtime="20250714 14:53:40.067"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.067" level="INFO">${result} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.067" endtime="20250714 14:53:40.067"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.066" endtime="20250714 14:53:40.067"/>
</kw>
<msg timestamp="20250714 14:53:40.067" level="INFO">${om_with_leading} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.066" endtime="20250714 14:53:40.067"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.065" endtime="20250714 14:53:40.067"/>
</kw>
<msg timestamp="20250714 14:53:40.067" level="INFO">${url} = o3fs://bucket1.vol1.om/</msg>
<status status="PASS" starttime="20250714 14:53:40.065" endtime="20250714 14:53:40.067"/>
</kw>
<msg timestamp="20250714 14:53:40.068" level="INFO">${result} = o3fs://bucket1.vol1.om/</msg>
<status status="PASS" starttime="20250714 14:53:40.064" endtime="20250714 14:53:40.068"/>
</kw>
<kw name="Format o3fs URL" library="fs">
<var>${expected}</var>
<arg>vol1</arg>
<arg>bucket1</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${om_with_leading}</var>
<arg>'${om}' != '${EMPTY}'</arg>
<arg>Ensure Leading</arg>
<arg>.</arg>
<arg>${om}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Ensure Leading" library="string">
<arg>.</arg>
<arg>${om}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.069" level="INFO">${first} = o</msg>
<status status="PASS" starttime="20250714 14:53:40.069" endtime="20250714 14:53:40.069"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.070" level="INFO">${result} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.069" endtime="20250714 14:53:40.070"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.069" endtime="20250714 14:53:40.070"/>
</kw>
<msg timestamp="20250714 14:53:40.070" level="INFO">${om_with_leading} = .om</msg>
<status status="PASS" starttime="20250714 14:53:40.068" endtime="20250714 14:53:40.070"/>
</kw>
<msg timestamp="20250714 14:53:40.070" level="INFO">${expected} = o3fs://bucket1.vol1.om/</msg>
<status status="PASS" starttime="20250714 14:53:40.068" endtime="20250714 14:53:40.070"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${expected}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.070" endtime="20250714 14:53:40.070"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.064" endtime="20250714 14:53:40.070"/>
</test>
<test id="s1-s1-s1-t9" name="Format FS URL with unsupported scheme" line="58">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<var>${result}</var>
<arg>*</arg>
<arg>Format FS URL</arg>
<arg>http</arg>
<arg>org</arg>
<arg>apache</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="Format FS URL" library="fs">
<arg>http</arg>
<arg>org</arg>
<arg>apache</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${url}</var>
<arg>'${scheme}' == 'o3fs'</arg>
<arg>Format o3fs URL</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<arg>ELSE IF</arg>
<arg>'${scheme}' == 'ofs'</arg>
<arg>Format ofs URL</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${path}</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>Unsupported FS scheme: ${scheme}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Fail" library="BuiltIn">
<arg>Unsupported FS scheme: ${scheme}</arg>
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<msg timestamp="20250714 14:53:40.072" level="FAIL">Unsupported FS scheme: http</msg>
<status status="FAIL" starttime="20250714 14:53:40.072" endtime="20250714 14:53:40.072"/>
</kw>
<status status="FAIL" starttime="20250714 14:53:40.072" endtime="20250714 14:53:40.072"/>
</kw>
<status status="FAIL" starttime="20250714 14:53:40.071" endtime="20250714 14:53:40.072"/>
</kw>
<msg timestamp="20250714 14:53:40.073" level="INFO">${result} = Unsupported FS scheme: http</msg>
<status status="PASS" starttime="20250714 14:53:40.071" endtime="20250714 14:53:40.073"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>http</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:53:40.073" endtime="20250714 14:53:40.073"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>nsupported</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:53:40.073" endtime="20250714 14:53:40.073"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.071" endtime="20250714 14:53:40.073"/>
</test>
<status status="PASS" starttime="20250714 14:53:40.022" endtime="20250714 14:53:40.074"/>
</suite>
<suite id="s1-s1-s2" name="Os Tests" source="/opt/hadoop/smoketest/lib/os_tests.robot">
<test id="s1-s1-s2-t1" name="Execute" line="22">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>echo 42</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:40.089" level="INFO">Running command 'echo 42 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:40.090" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:53:40.090" level="INFO">${output} = 42</msg>
<status status="PASS" starttime="20250714 14:53:40.087" endtime="20250714 14:53:40.090"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:40.091" level="INFO">42</msg>
<status status="PASS" starttime="20250714 14:53:40.091" endtime="20250714 14:53:40.091"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:53:40.091" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:53:40.091" endtime="20250714 14:53:40.091"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.087" endtime="20250714 14:53:40.091"/>
</kw>
<msg timestamp="20250714 14:53:40.091" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:53:40.086" endtime="20250714 14:53:40.092"/>
</kw>
<msg timestamp="20250714 14:53:40.092" level="INFO">${output} = 42</msg>
<status status="PASS" starttime="20250714 14:53:40.086" endtime="20250714 14:53:40.092"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}</arg>
<arg>42</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.092" endtime="20250714 14:53:40.092"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.086" endtime="20250714 14:53:40.092"/>
</test>
<test id="s1-s1-s2-t2" name="Execute failing command" line="26">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>*</arg>
<arg>Execute</arg>
<arg>false</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="Execute" library="os">
<arg>false</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:40.095" level="INFO">Running command 'false 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:40.097" level="INFO">${rc} = 1</msg>
<msg timestamp="20250714 14:53:40.097" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:53:40.094" endtime="20250714 14:53:40.097"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:40.097" level="INFO"/>
<status status="PASS" starttime="20250714 14:53:40.097" endtime="20250714 14:53:40.097"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:53:40.098" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 14:53:40.098" level="FAIL">1 != 0</msg>
<status status="FAIL" starttime="20250714 14:53:40.098" endtime="20250714 14:53:40.098"/>
</kw>
<status status="FAIL" starttime="20250714 14:53:40.093" endtime="20250714 14:53:40.098"/>
</kw>
<msg timestamp="20250714 14:53:40.098" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 14:53:40.093" endtime="20250714 14:53:40.098"/>
</kw>
<status status="FAIL" starttime="20250714 14:53:40.093" endtime="20250714 14:53:40.098"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.093" endtime="20250714 14:53:40.098"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.092" endtime="20250714 14:53:40.098"/>
</test>
<test id="s1-s1-s2-t3" name="Execute And Ignore Error" line="29">
<kw name="Execute And Ignore Error" library="os">
<var>${output}</var>
<arg>echo 123 &amp;&amp; false</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:40.101" level="INFO">Running command 'echo 123 &amp;&amp; false 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:40.102" level="INFO">${rc} = 1</msg>
<msg timestamp="20250714 14:53:40.102" level="INFO">${output} = 123</msg>
<status status="PASS" starttime="20250714 14:53:40.099" endtime="20250714 14:53:40.102"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:40.103" level="INFO">123</msg>
<status status="PASS" starttime="20250714 14:53:40.103" endtime="20250714 14:53:40.103"/>
</kw>
<msg timestamp="20250714 14:53:40.103" level="INFO">${output} = 123</msg>
<status status="PASS" starttime="20250714 14:53:40.099" endtime="20250714 14:53:40.103"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}</arg>
<arg>123</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.103" endtime="20250714 14:53:40.103"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.099" endtime="20250714 14:53:40.104"/>
</test>
<test id="s1-s1-s2-t4" name="Execute and checkrc" line="33">
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>echo failure &amp;&amp; exit 1</arg>
<arg>1</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:40.107" level="INFO">Running command 'echo failure &amp;&amp; exit 1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:40.108" level="INFO">${rc} = 1</msg>
<msg timestamp="20250714 14:53:40.108" level="INFO">${output} = failure</msg>
<status status="PASS" starttime="20250714 14:53:40.105" endtime="20250714 14:53:40.108"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:40.108" level="INFO">failure</msg>
<status status="PASS" starttime="20250714 14:53:40.108" endtime="20250714 14:53:40.108"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:53:40.109" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:53:40.109" endtime="20250714 14:53:40.109"/>
</kw>
<msg timestamp="20250714 14:53:40.109" level="INFO">${output} = failure</msg>
<status status="PASS" starttime="20250714 14:53:40.104" endtime="20250714 14:53:40.109"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}</arg>
<arg>failure</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.109" endtime="20250714 14:53:40.109"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.104" endtime="20250714 14:53:40.109"/>
</test>
<test id="s1-s1-s2-t5" name="Execute and checkrc RC mismatch" line="37">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<arg>*</arg>
<arg>Execute and checkrc</arg>
<arg>echo failure &amp;&amp; exit 3</arg>
<arg>1</arg>
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<kw name="Execute and checkrc" library="os">
<arg>echo failure &amp;&amp; exit 3</arg>
<arg>1</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:40.112" level="INFO">Running command 'echo failure &amp;&amp; exit 3 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:40.114" level="INFO">${rc} = 3</msg>
<msg timestamp="20250714 14:53:40.114" level="INFO">${output} = failure</msg>
<status status="PASS" starttime="20250714 14:53:40.111" endtime="20250714 14:53:40.114"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:40.114" level="INFO">failure</msg>
<status status="PASS" starttime="20250714 14:53:40.114" endtime="20250714 14:53:40.114"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:53:40.115" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 14:53:40.115" level="FAIL">3 != 1</msg>
<status status="FAIL" starttime="20250714 14:53:40.114" endtime="20250714 14:53:40.115"/>
</kw>
<status status="FAIL" starttime="20250714 14:53:40.110" endtime="20250714 14:53:40.115"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.110" endtime="20250714 14:53:40.115"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.110" endtime="20250714 14:53:40.115"/>
</test>
<status status="PASS" starttime="20250714 14:53:40.074" endtime="20250714 14:53:40.116"/>
</suite>
<suite id="s1-s1-s3" name="String Tests" source="/opt/hadoop/smoketest/lib/string_tests.robot">
<test id="s1-s1-s3-t1" name="Ensure Leading without Leading" line="22">
<kw name="Ensure Leading" library="string">
<var>${result}</var>
<arg>/</arg>
<arg>a/b</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.119" level="INFO">${first} = a</msg>
<status status="PASS" starttime="20250714 14:53:40.119" endtime="20250714 14:53:40.119"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.120" level="INFO">${result} = /a/b</msg>
<status status="PASS" starttime="20250714 14:53:40.119" endtime="20250714 14:53:40.120"/>
</kw>
<msg timestamp="20250714 14:53:40.120" level="INFO">${result} = /a/b</msg>
<status status="PASS" starttime="20250714 14:53:40.119" endtime="20250714 14:53:40.120"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>/a/b</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.120" endtime="20250714 14:53:40.120"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.118" endtime="20250714 14:53:40.120"/>
</test>
<test id="s1-s1-s3-t2" name="Ensure Leading with Leading" line="26">
<kw name="Ensure Leading" library="string">
<var>${result}</var>
<arg>_</arg>
<arg>_a_b_c</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.121" level="INFO">${first} = _</msg>
<status status="PASS" starttime="20250714 14:53:40.121" endtime="20250714 14:53:40.121"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.122" level="INFO">${result} = _a_b_c</msg>
<status status="PASS" starttime="20250714 14:53:40.122" endtime="20250714 14:53:40.122"/>
</kw>
<msg timestamp="20250714 14:53:40.122" level="INFO">${result} = _a_b_c</msg>
<status status="PASS" starttime="20250714 14:53:40.121" endtime="20250714 14:53:40.122"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>_a_b_c</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.122" endtime="20250714 14:53:40.122"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.121" endtime="20250714 14:53:40.122"/>
</test>
<test id="s1-s1-s3-t3" name="Ensure Leading for empty" line="30">
<kw name="Ensure Leading" library="string">
<var>${result}</var>
<arg>|</arg>
<arg>${EMPTY}</arg>
<kw name="Get Substring" library="String">
<var>${first}</var>
<arg>${string}</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.124" level="INFO">${first} = </msg>
<status status="PASS" starttime="20250714 14:53:40.124" endtime="20250714 14:53:40.124"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${first}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${char}${string}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.124" level="INFO">${result} = |</msg>
<status status="PASS" starttime="20250714 14:53:40.124" endtime="20250714 14:53:40.124"/>
</kw>
<msg timestamp="20250714 14:53:40.124" level="INFO">${result} = |</msg>
<status status="PASS" starttime="20250714 14:53:40.123" endtime="20250714 14:53:40.124"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>|</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.124" endtime="20250714 14:53:40.125"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.123" endtime="20250714 14:53:40.125"/>
</test>
<test id="s1-s1-s3-t4" name="Ensure Trailing without Trailing" line="35">
<kw name="Ensure Trailing" library="string">
<var>${result}</var>
<arg>.</arg>
<arg>x.y.z</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.126" level="INFO">${last} = z</msg>
<status status="PASS" starttime="20250714 14:53:40.126" endtime="20250714 14:53:40.126"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.126" level="INFO">${result} = x.y.z.</msg>
<status status="PASS" starttime="20250714 14:53:40.126" endtime="20250714 14:53:40.126"/>
</kw>
<msg timestamp="20250714 14:53:40.126" level="INFO">${result} = x.y.z.</msg>
<status status="PASS" starttime="20250714 14:53:40.125" endtime="20250714 14:53:40.126"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>x.y.z.</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.126" endtime="20250714 14:53:40.126"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.125" endtime="20250714 14:53:40.127"/>
</test>
<test id="s1-s1-s3-t5" name="Ensure Trailing with Trailing" line="39">
<kw name="Ensure Trailing" library="string">
<var>${result}</var>
<arg>x</arg>
<arg>axbxcx</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.128" level="INFO">${last} = x</msg>
<status status="PASS" starttime="20250714 14:53:40.127" endtime="20250714 14:53:40.128"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.128" level="INFO">${result} = axbxcx</msg>
<status status="PASS" starttime="20250714 14:53:40.128" endtime="20250714 14:53:40.128"/>
</kw>
<msg timestamp="20250714 14:53:40.128" level="INFO">${result} = axbxcx</msg>
<status status="PASS" starttime="20250714 14:53:40.127" endtime="20250714 14:53:40.128"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>axbxcx</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.128" endtime="20250714 14:53:40.128"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.127" endtime="20250714 14:53:40.128"/>
</test>
<test id="s1-s1-s3-t6" name="Ensure Trailing for empty" line="43">
<kw name="Ensure Trailing" library="string">
<var>${result}</var>
<arg>=</arg>
<arg>${EMPTY}</arg>
<kw name="Get Substring" library="String">
<var>${last}</var>
<arg>${string}</arg>
<arg>-1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250714 14:53:40.130" level="INFO">${last} = </msg>
<status status="PASS" starttime="20250714 14:53:40.129" endtime="20250714 14:53:40.130"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>'${last}' == '${char}'</arg>
<arg>${string}</arg>
<arg>${string}${char}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:53:40.130" level="INFO">${result} = =</msg>
<status status="PASS" starttime="20250714 14:53:40.130" endtime="20250714 14:53:40.130"/>
</kw>
<msg timestamp="20250714 14:53:40.130" level="INFO">${result} = =</msg>
<status status="PASS" starttime="20250714 14:53:40.129" endtime="20250714 14:53:40.130"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>=</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:40.130" endtime="20250714 14:53:40.130"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.129" endtime="20250714 14:53:40.131"/>
</test>
<status status="PASS" starttime="20250714 14:53:40.116" endtime="20250714 14:53:40.131"/>
</suite>
<status status="PASS" starttime="20250714 14:53:40.005" endtime="20250714 14:53:40.132"/>
</suite>
<suite id="s1-s2" name="Ozone-Lib" source="/opt/hadoop/smoketest/ozone-lib">
<suite id="s1-s2-s1" name="Shell Tests" source="/opt/hadoop/smoketest/ozone-lib/shell_tests.robot">
<test id="s1-s2-s1-t1" name="Bucket Exists should not if No Such Volume" line="27">
<kw name="Bucket Exists" library="shell">
<var>${exists}</var>
<arg>o3://${OM_SERVICE_ID}/no-such-volume/any-bucket</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>timeout 15 ozone sh bucket info ${bucket}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:40.679" level="INFO">Running command 'timeout 15 ozone sh bucket info o3://om/no-such-volume/any-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:45.712" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:53:45.712" level="INFO">${output} = VOLUME_NOT_FOUND Volume no-such-volume is not found</msg>
<status status="PASS" starttime="20250714 14:53:40.677" endtime="20250714 14:53:45.712"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${rc} != 0</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 14:53:45.713" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:53:45.713" endtime="20250714 14:53:45.713"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'VOLUME_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20250714 14:53:45.713" endtime="20250714 14:53:45.713"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'BUCKET_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20250714 14:53:45.714" endtime="20250714 14:53:45.714"/>
</kw>
<msg timestamp="20250714 14:53:45.714" level="INFO">${exists} = False</msg>
<status status="PASS" starttime="20250714 14:53:40.677" endtime="20250714 14:53:45.714"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${exists}</arg>
<arg>${FALSE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:45.714" endtime="20250714 14:53:45.714"/>
</kw>
<status status="PASS" starttime="20250714 14:53:40.676" endtime="20250714 14:53:45.714"/>
</test>
<test id="s1-s2-s1-t2" name="Bucket Exists should not if No Such Bucket" line="31">
<kw name="Execute And Ignore Error" library="os">
<arg>ozone sh volume create o3://${OM_SERVICE_ID}/vol1</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:45.717" level="INFO">Running command 'ozone sh volume create o3://om/vol1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:48.622" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:53:48.622" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:53:45.715" endtime="20250714 14:53:48.622"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:48.624" level="INFO"/>
<status status="PASS" starttime="20250714 14:53:48.623" endtime="20250714 14:53:48.624"/>
</kw>
<status status="PASS" starttime="20250714 14:53:45.715" endtime="20250714 14:53:48.625"/>
</kw>
<kw name="Bucket Exists" library="shell">
<var>${exists}</var>
<arg>o3://${OM_SERVICE_ID}/vol1/no-such-bucket</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>timeout 15 ozone sh bucket info ${bucket}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:48.630" level="INFO">Running command 'timeout 15 ozone sh bucket info o3://om/vol1/no-such-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:51.363" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:53:51.363" level="INFO">${output} = BUCKET_NOT_FOUND Bucket not found: vol1/no-such-bucket</msg>
<status status="PASS" starttime="20250714 14:53:48.625" endtime="20250714 14:53:51.363"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${rc} != 0</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 14:53:51.364" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:53:51.364" endtime="20250714 14:53:51.364"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'VOLUME_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20250714 14:53:51.364" endtime="20250714 14:53:51.364"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'BUCKET_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20250714 14:53:51.365" endtime="20250714 14:53:51.365"/>
</kw>
<msg timestamp="20250714 14:53:51.365" level="INFO">${exists} = False</msg>
<status status="PASS" starttime="20250714 14:53:48.625" endtime="20250714 14:53:51.365"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${exists}</arg>
<arg>${FALSE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:51.365" endtime="20250714 14:53:51.365"/>
</kw>
<status status="PASS" starttime="20250714 14:53:45.715" endtime="20250714 14:53:51.365"/>
</test>
<test id="s1-s2-s1-t3" name="Bucket Exists" line="36">
<kw name="Execute And Ignore Error" library="os">
<arg>ozone sh bucket create o3://${OM_SERVICE_ID}/vol1/bucket</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:51.369" level="INFO">Running command 'ozone sh bucket create o3://om/vol1/bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:54.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:53:54.440" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:53:51.367" endtime="20250714 14:53:54.440"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:53:54.441" level="INFO"/>
<status status="PASS" starttime="20250714 14:53:54.440" endtime="20250714 14:53:54.441"/>
</kw>
<status status="PASS" starttime="20250714 14:53:51.366" endtime="20250714 14:53:54.441"/>
</kw>
<kw name="Bucket Exists" library="shell">
<var>${exists}</var>
<arg>o3://${OM_SERVICE_ID}/vol1/bucket</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>timeout 15 ozone sh bucket info ${bucket}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:54.444" level="INFO">Running command 'timeout 15 ozone sh bucket info o3://om/vol1/bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:57.516" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:53:57.516" level="INFO">${output} = {
  "metadata" : { },
  "volumeName" : "vol1",
  "name" : "bucket",
  "storageType" : "DISK",
  "versioning" : false,
  "listCacheSize" : 1000,
  "usedBytes" : 0,
  "usedNamespace" : 0,
  "creationTim...</msg>
<status status="PASS" starttime="20250714 14:53:54.442" endtime="20250714 14:53:57.516"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${rc} != 0</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:53:57.516" endtime="20250714 14:53:57.517"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'VOLUME_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:53:57.517" endtime="20250714 14:53:57.517"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'BUCKET_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:53:57.517" endtime="20250714 14:53:57.517"/>
</kw>
<msg timestamp="20250714 14:53:57.518" level="INFO">${exists} = True</msg>
<status status="PASS" starttime="20250714 14:53:54.441" endtime="20250714 14:53:57.518"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${exists}</arg>
<arg>${TRUE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:57.518" endtime="20250714 14:53:57.518"/>
</kw>
<status status="PASS" starttime="20250714 14:53:51.366" endtime="20250714 14:53:57.518"/>
</test>
<test id="s1-s2-s1-t4" name="Bucket Exists should not if No Such OM service" line="41">
<kw name="Bucket Exists" library="shell">
<var>${exists}</var>
<arg>o3://no-such-host/any-volume/any-bucket</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>timeout 15 ozone sh bucket info ${bucket}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:57.521" level="INFO">Running command 'timeout 15 ozone sh bucket info o3://no-such-host/any-volume/any-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:53:58.797" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:53:58.797" level="INFO">${output} = Cannot resolve OM host no-such-host in the URI</msg>
<status status="PASS" starttime="20250714 14:53:57.519" endtime="20250714 14:53:58.797"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${rc} != 0</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 14:53:58.798" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:53:58.798" endtime="20250714 14:53:58.798"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'VOLUME_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20250714 14:53:58.798" endtime="20250714 14:53:58.798"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'BUCKET_NOT_FOUND' in '''${output}'''</arg>
<arg>${FALSE}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20250714 14:53:58.798" endtime="20250714 14:53:58.798"/>
</kw>
<msg timestamp="20250714 14:53:58.799" level="INFO">${exists} = False</msg>
<status status="PASS" starttime="20250714 14:53:57.519" endtime="20250714 14:53:58.799"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${exists}</arg>
<arg>${FALSE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:53:58.799" endtime="20250714 14:53:58.799"/>
</kw>
<status status="PASS" starttime="20250714 14:53:57.518" endtime="20250714 14:53:58.799"/>
</test>
<test id="s1-s2-s1-t5" name="Key Should Match Local File" line="46">
<kw name="Execute" library="os" type="SETUP">
<arg>ozone sh key put o3://${OM_SERVICE_ID}/vol1/bucket/passwd /etc/passwd</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:53:58.803" level="INFO">Running command 'ozone sh key put o3://om/vol1/bucket/passwd /etc/passwd 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:03.844" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:03.844" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:53:58.801" endtime="20250714 14:54:03.845"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:03.845" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:03.845" endtime="20250714 14:54:03.845"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:03.846" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:03.845" endtime="20250714 14:54:03.846"/>
</kw>
<status status="PASS" starttime="20250714 14:53:58.801" endtime="20250714 14:54:03.846"/>
</kw>
<msg timestamp="20250714 14:54:03.846" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:53:58.800" endtime="20250714 14:54:03.846"/>
</kw>
<status status="PASS" starttime="20250714 14:53:58.800" endtime="20250714 14:54:03.846"/>
</kw>
<kw name="Key Should Match Local File" library="shell">
<arg>o3://${OM_SERVICE_ID}/vol1/bucket/passwd</arg>
<arg>/etc/passwd</arg>
<kw name="Compare Key With Local File" library="shell">
<var>${matches}</var>
<arg>${key}</arg>
<arg>${file}</arg>
<kw name="Generate Random String" library="String">
<var>${postfix}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:03.847" level="INFO">${postfix} = 56261</msg>
<status status="PASS" starttime="20250714 14:54:03.847" endtime="20250714 14:54:03.847"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${tmpfile}</var>
<arg>/tmp/tempkey-${postfix}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250714 14:54:03.848" level="INFO">${tmpfile} = /tmp/tempkey-56261</msg>
<status status="PASS" starttime="20250714 14:54:03.848" endtime="20250714 14:54:03.848"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone ${cmd} ${key} ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:03.851" level="INFO">Running command 'ozone sh key get o3://om/vol1/bucket/passwd /tmp/tempkey-56261 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:08.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:08.406" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:03.849" endtime="20250714 14:54:08.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:08.406" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:08.406" endtime="20250714 14:54:08.406"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:08.407" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:08.407" endtime="20250714 14:54:08.407"/>
</kw>
<status status="PASS" starttime="20250714 14:54:03.848" endtime="20250714 14:54:08.407"/>
</kw>
<msg timestamp="20250714 14:54:08.407" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:03.848" endtime="20250714 14:54:08.407"/>
</kw>
<status status="PASS" starttime="20250714 14:54:03.848" endtime="20250714 14:54:08.407"/>
</kw>
<kw name="Run And Return Rc" library="OperatingSystem">
<var>${rc}</var>
<arg>diff -q ${file} ${tmpfile}</arg>
<doc>Runs the given command in the system and returns the return code.</doc>
<msg timestamp="20250714 14:54:08.409" level="INFO">Running command 'diff -q /etc/passwd /tmp/tempkey-56261 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:08.412" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20250714 14:54:08.407" endtime="20250714 14:54:08.412"/>
</kw>
<kw name="Execute" library="os">
<arg>rm -f ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:08.415" level="INFO">Running command 'rm -f /tmp/tempkey-56261 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:08.418" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:08.418" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:08.413" endtime="20250714 14:54:08.418"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:08.419" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:08.418" endtime="20250714 14:54:08.419"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:08.419" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:08.419" endtime="20250714 14:54:08.419"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.413" endtime="20250714 14:54:08.419"/>
</kw>
<msg timestamp="20250714 14:54:08.419" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:08.413" endtime="20250714 14:54:08.419"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.412" endtime="20250714 14:54:08.419"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>${rc} == 0</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:54:08.420" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20250714 14:54:08.420" endtime="20250714 14:54:08.420"/>
</kw>
<msg timestamp="20250714 14:54:08.420" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20250714 14:54:03.847" endtime="20250714 14:54:08.420"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${matches}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250714 14:54:08.420" endtime="20250714 14:54:08.420"/>
</kw>
<status status="PASS" starttime="20250714 14:54:03.846" endtime="20250714 14:54:08.420"/>
</kw>
<status status="PASS" starttime="20250714 14:53:58.800" endtime="20250714 14:54:08.420"/>
</test>
<test id="s1-s2-s1-t6" name="Compare Key With Local File with Different File" line="50">
<kw name="Create Random File KB" library="os">
<var>${random_file}</var>
<arg>42</arg>
<kw name="Create Random File" library="os">
<var>${path}</var>
<arg>${size_in_kilobytes}</arg>
<arg>1024</arg>
<arg>${path}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${path}</var>
<arg>'${path}' == '${EMPTY}'</arg>
<arg>Get Random Filename</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${path}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Get Random Filename" library="os">
<kw name="Generate Random String" library="String">
<var>${postfix}</var>
<arg>10</arg>
<arg>[LOWER]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:08.423" level="INFO">${postfix} = xatihuyoqv</msg>
<status status="PASS" starttime="20250714 14:54:08.423" endtime="20250714 14:54:08.423"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${tmpfile}</var>
<arg>/tmp/tempfile-${postfix}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250714 14:54:08.424" level="INFO">${tmpfile} = /tmp/tempfile-xatihuyoqv</msg>
<status status="PASS" starttime="20250714 14:54:08.423" endtime="20250714 14:54:08.424"/>
</kw>
<kw name="File Should Not Exist" library="OperatingSystem">
<arg>${tmpfile}</arg>
<doc>Fails if the given path points to an existing file.</doc>
<msg timestamp="20250714 14:54:08.424" level="INFO" html="true">File '&lt;a href="file:///tmp/tempfile-xatihuyoqv"&gt;/tmp/tempfile-xatihuyoqv&lt;/a&gt;' does not exist.</msg>
<status status="PASS" starttime="20250714 14:54:08.424" endtime="20250714 14:54:08.424"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.423" endtime="20250714 14:54:08.424"/>
</kw>
<msg timestamp="20250714 14:54:08.424" level="INFO">${path} = /tmp/tempfile-xatihuyoqv</msg>
<status status="PASS" starttime="20250714 14:54:08.422" endtime="20250714 14:54:08.424"/>
</kw>
<kw name="Execute" library="os">
<arg>dd if=/dev/urandom of=${path} bs=${block_size} count=${block_count} status=none</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:08.427" level="INFO">Running command 'dd if=/dev/urandom of=/tmp/tempfile-xatihuyoqv bs=1024 count=42 status=none 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:08.430" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:08.430" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:08.425" endtime="20250714 14:54:08.430"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:08.431" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:08.431" endtime="20250714 14:54:08.431"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:08.431" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:08.431" endtime="20250714 14:54:08.431"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.425" endtime="20250714 14:54:08.431"/>
</kw>
<msg timestamp="20250714 14:54:08.431" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:08.425" endtime="20250714 14:54:08.431"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.424" endtime="20250714 14:54:08.432"/>
</kw>
<msg timestamp="20250714 14:54:08.432" level="INFO">${path} = /tmp/tempfile-xatihuyoqv</msg>
<status status="PASS" starttime="20250714 14:54:08.422" endtime="20250714 14:54:08.432"/>
</kw>
<msg timestamp="20250714 14:54:08.432" level="INFO">${random_file} = /tmp/tempfile-xatihuyoqv</msg>
<status status="PASS" starttime="20250714 14:54:08.421" endtime="20250714 14:54:08.432"/>
</kw>
<kw name="Compare Key With Local File" library="shell">
<var>${matches}</var>
<arg>o3://${OM_SERVICE_ID}/vol1/bucket/passwd</arg>
<arg>${random_file}</arg>
<kw name="Generate Random String" library="String">
<var>${postfix}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:08.433" level="INFO">${postfix} = 15243</msg>
<status status="PASS" starttime="20250714 14:54:08.432" endtime="20250714 14:54:08.433"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${tmpfile}</var>
<arg>/tmp/tempkey-${postfix}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250714 14:54:08.433" level="INFO">${tmpfile} = /tmp/tempkey-15243</msg>
<status status="PASS" starttime="20250714 14:54:08.433" endtime="20250714 14:54:08.433"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone ${cmd} ${key} ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:08.435" level="INFO">Running command 'ozone sh key get o3://om/vol1/bucket/passwd /tmp/tempkey-15243 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:12.491" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:12.491" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:08.434" endtime="20250714 14:54:12.491"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:12.492" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:12.492" endtime="20250714 14:54:12.492"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:12.492" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:12.492" endtime="20250714 14:54:12.493"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.433" endtime="20250714 14:54:12.493"/>
</kw>
<msg timestamp="20250714 14:54:12.493" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:08.433" endtime="20250714 14:54:12.493"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.433" endtime="20250714 14:54:12.493"/>
</kw>
<kw name="Run And Return Rc" library="OperatingSystem">
<var>${rc}</var>
<arg>diff -q ${file} ${tmpfile}</arg>
<doc>Runs the given command in the system and returns the return code.</doc>
<msg timestamp="20250714 14:54:12.495" level="INFO">Running command 'diff -q /tmp/tempfile-xatihuyoqv /tmp/tempkey-15243 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:12.498" level="INFO">${rc} = 1</msg>
<status status="PASS" starttime="20250714 14:54:12.493" endtime="20250714 14:54:12.498"/>
</kw>
<kw name="Execute" library="os">
<arg>rm -f ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:12.501" level="INFO">Running command 'rm -f /tmp/tempkey-15243 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:12.504" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:12.504" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:12.499" endtime="20250714 14:54:12.504"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:12.504" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:12.504" endtime="20250714 14:54:12.505"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:12.505" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:12.505" endtime="20250714 14:54:12.505"/>
</kw>
<status status="PASS" starttime="20250714 14:54:12.499" endtime="20250714 14:54:12.505"/>
</kw>
<msg timestamp="20250714 14:54:12.505" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:12.498" endtime="20250714 14:54:12.505"/>
</kw>
<status status="PASS" starttime="20250714 14:54:12.498" endtime="20250714 14:54:12.505"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>${rc} == 0</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:54:12.506" level="INFO">${result} = False</msg>
<status status="PASS" starttime="20250714 14:54:12.505" endtime="20250714 14:54:12.506"/>
</kw>
<msg timestamp="20250714 14:54:12.506" level="INFO">${matches} = False</msg>
<status status="PASS" starttime="20250714 14:54:08.432" endtime="20250714 14:54:12.506"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${matches}</arg>
<arg>${FALSE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:54:12.506" endtime="20250714 14:54:12.506"/>
</kw>
<kw name="Remove File" library="OperatingSystem" type="TEARDOWN">
<arg>${random_file}</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20250714 14:54:12.507" level="INFO" html="true">Removed file '&lt;a href="file:///tmp/tempfile-xatihuyoqv"&gt;/tmp/tempfile-xatihuyoqv&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20250714 14:54:12.506" endtime="20250714 14:54:12.507"/>
</kw>
<status status="PASS" starttime="20250714 14:54:08.421" endtime="20250714 14:54:12.507"/>
</test>
<test id="s1-s2-s1-t7" name="Compare Key With Local File if File Does Not Exist" line="56">
<kw name="Compare Key With Local File" library="shell">
<var>${matches}</var>
<arg>o3://${OM_SERVICE_ID}/vol1/bucket/passwd</arg>
<arg>/no-such-file</arg>
<kw name="Generate Random String" library="String">
<var>${postfix}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:12.508" level="INFO">${postfix} = 96090</msg>
<status status="PASS" starttime="20250714 14:54:12.508" endtime="20250714 14:54:12.508"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${tmpfile}</var>
<arg>/tmp/tempkey-${postfix}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250714 14:54:12.508" level="INFO">${tmpfile} = /tmp/tempkey-96090</msg>
<status status="PASS" starttime="20250714 14:54:12.508" endtime="20250714 14:54:12.508"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone ${cmd} ${key} ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:12.511" level="INFO">Running command 'ozone sh key get o3://om/vol1/bucket/passwd /tmp/tempkey-96090 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:16.624" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:16.624" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:12.509" endtime="20250714 14:54:16.624"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:16.625" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:16.624" endtime="20250714 14:54:16.625"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:16.625" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:16.625" endtime="20250714 14:54:16.625"/>
</kw>
<status status="PASS" starttime="20250714 14:54:12.509" endtime="20250714 14:54:16.626"/>
</kw>
<msg timestamp="20250714 14:54:16.626" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:12.509" endtime="20250714 14:54:16.626"/>
</kw>
<status status="PASS" starttime="20250714 14:54:12.508" endtime="20250714 14:54:16.626"/>
</kw>
<kw name="Run And Return Rc" library="OperatingSystem">
<var>${rc}</var>
<arg>diff -q ${file} ${tmpfile}</arg>
<doc>Runs the given command in the system and returns the return code.</doc>
<msg timestamp="20250714 14:54:16.628" level="INFO">Running command 'diff -q /no-such-file /tmp/tempkey-96090 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:16.631" level="INFO">${rc} = 2</msg>
<status status="PASS" starttime="20250714 14:54:16.626" endtime="20250714 14:54:16.631"/>
</kw>
<kw name="Execute" library="os">
<arg>rm -f ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:16.634" level="INFO">Running command 'rm -f /tmp/tempkey-96090 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:16.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:16.637" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:16.632" endtime="20250714 14:54:16.637"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:16.638" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:16.637" endtime="20250714 14:54:16.638"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:16.638" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:16.638" endtime="20250714 14:54:16.638"/>
</kw>
<status status="PASS" starttime="20250714 14:54:16.632" endtime="20250714 14:54:16.638"/>
</kw>
<msg timestamp="20250714 14:54:16.638" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:16.631" endtime="20250714 14:54:16.638"/>
</kw>
<status status="PASS" starttime="20250714 14:54:16.631" endtime="20250714 14:54:16.639"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>${rc} == 0</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:54:16.639" level="INFO">${result} = False</msg>
<status status="PASS" starttime="20250714 14:54:16.639" endtime="20250714 14:54:16.639"/>
</kw>
<msg timestamp="20250714 14:54:16.639" level="INFO">${matches} = False</msg>
<status status="PASS" starttime="20250714 14:54:12.507" endtime="20250714 14:54:16.639"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${matches}</arg>
<arg>${FALSE}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:54:16.639" endtime="20250714 14:54:16.639"/>
</kw>
<status status="PASS" starttime="20250714 14:54:12.507" endtime="20250714 14:54:16.640"/>
</test>
<test id="s1-s2-s1-t8" name="Rejects Put Key With Zero Expected Generation" line="60">
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>ozone sh key put --expectedGeneration 0 o3://${OM_SERVICE_ID}/vol1/bucket/passwd /etc/passwd</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:16.643" level="INFO">Running command 'ozone sh key put --expectedGeneration 0 o3://om/vol1/bucket/passwd /etc/passwd 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:19.577" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:54:19.577" level="INFO">${output} = expectedGeneration must be positive, but was 0</msg>
<status status="PASS" starttime="20250714 14:54:16.641" endtime="20250714 14:54:19.577"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:19.577" level="INFO">expectedGeneration must be positive, but was 0</msg>
<status status="PASS" starttime="20250714 14:54:19.577" endtime="20250714 14:54:19.577"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:19.578" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:19.578" endtime="20250714 14:54:19.578"/>
</kw>
<msg timestamp="20250714 14:54:19.578" level="INFO">${output} = expectedGeneration must be positive, but was 0</msg>
<status status="PASS" starttime="20250714 14:54:16.640" endtime="20250714 14:54:19.578"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>must be positive</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:19.578" endtime="20250714 14:54:19.578"/>
</kw>
<status status="PASS" starttime="20250714 14:54:16.640" endtime="20250714 14:54:19.579"/>
</test>
<test id="s1-s2-s1-t9" name="Rejects Put Key With Negative Expected Generation" line="64">
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>ozone sh key put --expectedGeneration -1 o3://${OM_SERVICE_ID}/vol1/bucket/passwd /etc/passwd</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:19.582" level="INFO">Running command 'ozone sh key put --expectedGeneration -1 o3://om/vol1/bucket/passwd /etc/passwd 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:22.968" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:54:22.968" level="INFO">${output} = expectedGeneration must be positive, but was -1</msg>
<status status="PASS" starttime="20250714 14:54:19.580" endtime="20250714 14:54:22.968"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:22.969" level="INFO">expectedGeneration must be positive, but was -1</msg>
<status status="PASS" starttime="20250714 14:54:22.968" endtime="20250714 14:54:22.969"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:22.969" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:22.969" endtime="20250714 14:54:22.970"/>
</kw>
<msg timestamp="20250714 14:54:22.970" level="INFO">${output} = expectedGeneration must be positive, but was -1</msg>
<status status="PASS" starttime="20250714 14:54:19.579" endtime="20250714 14:54:22.970"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>must be positive</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:22.970" endtime="20250714 14:54:22.970"/>
</kw>
<status status="PASS" starttime="20250714 14:54:19.579" endtime="20250714 14:54:22.970"/>
</test>
<status status="PASS" starttime="20250714 14:53:40.655" endtime="20250714 14:54:22.972"/>
</suite>
<status status="PASS" starttime="20250714 14:53:40.639" endtime="20250714 14:54:22.975"/>
</suite>
<suite id="s1-s3" name="Basic" source="/opt/hadoop/smoketest/basic">
<suite id="s1-s3-s1" name="Basic" source="/opt/hadoop/smoketest/basic/basic.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:23.598" endtime="20250714 14:54:23.598"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:23.601" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:24.488" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:24.488" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20250714 14:54:23.599" endtime="20250714 14:54:24.488"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:24.489" level="INFO">false</msg>
<status status="PASS" starttime="20250714 14:54:24.488" endtime="20250714 14:54:24.489"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:24.489" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:24.489" endtime="20250714 14:54:24.489"/>
</kw>
<status status="PASS" starttime="20250714 14:54:23.598" endtime="20250714 14:54:24.490"/>
</kw>
<msg timestamp="20250714 14:54:24.490" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:23.598" endtime="20250714 14:54:24.490"/>
</kw>
<msg timestamp="20250714 14:54:24.490" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20250714 14:54:23.598" endtime="20250714 14:54:24.490"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250714 14:54:24.491" endtime="20250714 14:54:24.491"/>
</kw>
<status status="NOT RUN" starttime="20250714 14:54:24.490" endtime="20250714 14:54:24.491"/>
</branch>
<status status="PASS" starttime="20250714 14:54:24.490" endtime="20250714 14:54:24.491"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250714 14:54:24.492" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20250714 14:54:24.491" endtime="20250714 14:54:24.492"/>
</kw>
<status status="PASS" starttime="20250714 14:54:23.598" endtime="20250714 14:54:24.492"/>
</kw>
<test id="s1-s3-s1-t1" name="Check webui static resources" line="30">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit HTTP user</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:24.493" endtime="20250714 14:54:24.493"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>curl --negotiate -u : -s -I http://${SCM}:9876/static/bootstrap-3.4.1/js/bootstrap.min.js</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:24.497" level="INFO">Running command 'curl --negotiate -u : -s -I http://scm:9876/static/bootstrap-3.4.1/js/bootstrap.min.js 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:24.537" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:24.537" level="INFO">${output} = HTTP/1.1 200 OK
Date: Mon, 14 Jul 2025 14:54:24 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
Last-Modified: Wed, 12 Mar 2025 22:12:52 GMT
Content-Typ...</msg>
<status status="PASS" starttime="20250714 14:54:24.495" endtime="20250714 14:54:24.538"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:24.538" level="INFO">HTTP/1.1 200 OK
Date: Mon, 14 Jul 2025 14:54:24 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
Last-Modified: Wed, 12 Mar 2025 22:12:52 GMT
Content-Type: application/javascript
Accept-Ranges: bytes
Content-Length: 39680
</msg>
<status status="PASS" starttime="20250714 14:54:24.538" endtime="20250714 14:54:24.538"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:24.539" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:24.539" endtime="20250714 14:54:24.539"/>
</kw>
<status status="PASS" starttime="20250714 14:54:24.494" endtime="20250714 14:54:24.539"/>
</kw>
<msg timestamp="20250714 14:54:24.539" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:24.494" endtime="20250714 14:54:24.539"/>
</kw>
<msg timestamp="20250714 14:54:24.539" level="INFO">${result} = HTTP/1.1 200 OK
Date: Mon, 14 Jul 2025 14:54:24 GMT
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
X-FRAME-OPTIONS: SAMEORIGIN
Last-Modified: Wed, 12 Mar 2025 22:12:52 GMT
Content-Typ...</msg>
<status status="PASS" starttime="20250714 14:54:24.494" endtime="20250714 14:54:24.539"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>200</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:24.539" endtime="20250714 14:54:24.540"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250714 14:54:24.492" endtime="20250714 14:54:24.540"/>
</test>
<test id="s1-s3-s1-t2" name="Basic Freon smoketest" line="35">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:24.541" endtime="20250714 14:54:24.541"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:24.542" level="INFO">${random} = bmt2lhepVB</msg>
<status status="PASS" starttime="20250714 14:54:24.541" endtime="20250714 14:54:24.542"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:24.547" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p bmt2lhepVB  2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:29.652" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:29.652" level="INFO">${output} = 2025-07-14 14:54:25,833 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-14 14:54:26,001 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250714 14:54:24.544" endtime="20250714 14:54:29.652"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:29.653" level="INFO">2025-07-14 14:54:25,833 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-14 14:54:26,001 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-07-14 14:54:26,001 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-07-14 14:54:26,178 [main] INFO freon.BaseFreonGenerator: Executing test with prefix bmt2lhepVB and number-of-tests 1
2025-07-14 14:54:26,244 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-07-14 14:54:27,245 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-07-14 14:54:27,672 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, hadoop as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-07-14 14:54:27,831 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-07-14 14:54:28,245 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-07-14 14:54:29,246 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-07-14 14:54:29,271 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=1, min=938.954166, max=938.954166, mean=938.954166, stddev=0.0, median=938.954166, p75=938.954166, p95=938.954166, p98=938.954166, p99=938.954166, p999=938.954166, mean_rate=0.6351009737575173, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-07-14 14:54:29,272 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-07-14 14:54:29,272 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-07-14 14:54:29,272 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20250714 14:54:29.652" endtime="20250714 14:54:29.653"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:29.653" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:29.653" endtime="20250714 14:54:29.653"/>
</kw>
<status status="PASS" starttime="20250714 14:54:24.544" endtime="20250714 14:54:29.653"/>
</kw>
<msg timestamp="20250714 14:54:29.653" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:24.544" endtime="20250714 14:54:29.653"/>
</kw>
<msg timestamp="20250714 14:54:29.654" level="INFO">${result} = 2025-07-14 14:54:25,833 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-14 14:54:26,001 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250714 14:54:24.543" endtime="20250714 14:54:29.654"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:29.654" endtime="20250714 14:54:29.654"/>
</kw>
<status status="PASS" starttime="20250714 14:54:24.542" endtime="20250714 14:54:29.654"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockv ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:29.658" level="INFO">Running command 'ozone freon ockv  -t 1 -n1 -p bmt2lhepVB  2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:34.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:34.755" level="INFO">${output} = 2025-07-14 14:54:30,958 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-14 14:54:31,120 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250714 14:54:29.656" endtime="20250714 14:54:34.755"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:34.755" level="INFO">2025-07-14 14:54:30,958 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-14 14:54:31,120 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-07-14 14:54:31,120 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-07-14 14:54:31,295 [main] INFO freon.BaseFreonGenerator: Executing test with prefix bmt2lhepVB and number-of-tests 1
2025-07-14 14:54:31,360 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-07-14 14:54:32,361 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-07-14 14:54:33,081 [main] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-07-14 14:54:33,362 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 1)
2025-07-14 14:54:34,362 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (1 out of 1)
2025-07-14 14:54:34,379 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-validate, count=1, min=21.43663, max=21.43663, mean=21.43663, stddev=0.0, median=21.43663, p75=21.43663, p95=21.43663, p98=21.43663, p99=21.43663, p999=21.43663, mean_rate=1.7429738983540883, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-07-14 14:54:34,379 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 3
2025-07-14 14:54:34,379 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-07-14 14:54:34,379 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 1</msg>
<status status="PASS" starttime="20250714 14:54:34.755" endtime="20250714 14:54:34.756"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:34.756" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:34.756" endtime="20250714 14:54:34.756"/>
</kw>
<status status="PASS" starttime="20250714 14:54:29.656" endtime="20250714 14:54:34.756"/>
</kw>
<msg timestamp="20250714 14:54:34.756" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:29.655" endtime="20250714 14:54:34.756"/>
</kw>
<msg timestamp="20250714 14:54:34.756" level="INFO">${result} = 2025-07-14 14:54:30,958 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-14 14:54:31,120 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250714 14:54:29.655" endtime="20250714 14:54:34.756"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:34.757" endtime="20250714 14:54:34.757"/>
</kw>
<status status="PASS" starttime="20250714 14:54:29.654" endtime="20250714 14:54:34.757"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250714 14:54:24.540" endtime="20250714 14:54:34.757"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250714 14:54:23.573" endtime="20250714 14:54:34.758"/>
</suite>
<suite id="s1-s3-s2" name="Getconf" source="/opt/hadoop/smoketest/basic/getconf.robot">
<test id="s1-s3-s2-t1" name="Get OM" line="22">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone getconf ozonemanagers</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:34.765" level="INFO">Running command 'ozone getconf ozonemanagers 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:35.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:35.781" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250714 14:54:34.763" endtime="20250714 14:54:35.781"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:35.782" level="INFO">om</msg>
<status status="PASS" starttime="20250714 14:54:35.782" endtime="20250714 14:54:35.782"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:35.783" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:35.783" endtime="20250714 14:54:35.783"/>
</kw>
<status status="PASS" starttime="20250714 14:54:34.762" endtime="20250714 14:54:35.783"/>
</kw>
<msg timestamp="20250714 14:54:35.783" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:34.762" endtime="20250714 14:54:35.783"/>
</kw>
<msg timestamp="20250714 14:54:35.783" level="INFO">${result} = om</msg>
<status status="PASS" starttime="20250714 14:54:34.762" endtime="20250714 14:54:35.783"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>om</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:35.783" endtime="20250714 14:54:35.784"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone getconf -ozonemanagers</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:35.788" level="INFO">Running command 'ozone getconf -ozonemanagers 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:36.831" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:36.831" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250714 14:54:35.785" endtime="20250714 14:54:36.831"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:36.832" level="INFO">om</msg>
<status status="PASS" starttime="20250714 14:54:36.832" endtime="20250714 14:54:36.832"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:36.833" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:36.833" endtime="20250714 14:54:36.833"/>
</kw>
<status status="PASS" starttime="20250714 14:54:35.784" endtime="20250714 14:54:36.833"/>
</kw>
<msg timestamp="20250714 14:54:36.833" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:35.784" endtime="20250714 14:54:36.833"/>
</kw>
<msg timestamp="20250714 14:54:36.833" level="INFO">${result} = om</msg>
<status status="PASS" starttime="20250714 14:54:35.784" endtime="20250714 14:54:36.833"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>om</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:36.833" endtime="20250714 14:54:36.834"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250714 14:54:34.762" endtime="20250714 14:54:36.834"/>
</test>
<test id="s1-s3-s2-t2" name="Get SCM" line="28">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone getconf storagecontainermanagers</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:36.838" level="INFO">Running command 'ozone getconf storagecontainermanagers 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:37.818" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:37.818" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250714 14:54:36.835" endtime="20250714 14:54:37.818"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:37.819" level="INFO">scm</msg>
<status status="PASS" starttime="20250714 14:54:37.818" endtime="20250714 14:54:37.819"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:37.819" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:37.819" endtime="20250714 14:54:37.819"/>
</kw>
<status status="PASS" starttime="20250714 14:54:36.835" endtime="20250714 14:54:37.820"/>
</kw>
<msg timestamp="20250714 14:54:37.820" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:36.835" endtime="20250714 14:54:37.820"/>
</kw>
<msg timestamp="20250714 14:54:37.820" level="INFO">${result} = scm</msg>
<status status="PASS" starttime="20250714 14:54:36.835" endtime="20250714 14:54:37.820"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>scm</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:37.820" endtime="20250714 14:54:37.820"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone getconf -storagecontainermanagers</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:37.823" level="INFO">Running command 'ozone getconf -storagecontainermanagers 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:38.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:38.803" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250714 14:54:37.821" endtime="20250714 14:54:38.803"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:38.804" level="INFO">scm</msg>
<status status="PASS" starttime="20250714 14:54:38.803" endtime="20250714 14:54:38.804"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:38.804" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:38.804" endtime="20250714 14:54:38.804"/>
</kw>
<status status="PASS" starttime="20250714 14:54:37.821" endtime="20250714 14:54:38.805"/>
</kw>
<msg timestamp="20250714 14:54:38.805" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:37.821" endtime="20250714 14:54:38.805"/>
</kw>
<msg timestamp="20250714 14:54:38.805" level="INFO">${result} = scm</msg>
<status status="PASS" starttime="20250714 14:54:37.820" endtime="20250714 14:54:38.805"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>scm</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:38.805" endtime="20250714 14:54:38.805"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250714 14:54:36.834" endtime="20250714 14:54:38.805"/>
</test>
<test id="s1-s3-s2-t3" name="Get existing config key" line="34">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone getconf confKey ozone.om.address</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:38.809" level="INFO">Running command 'ozone getconf confKey ozone.om.address 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:39.683" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:39.683" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250714 14:54:38.807" endtime="20250714 14:54:39.683"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:39.684" level="INFO">om</msg>
<status status="PASS" starttime="20250714 14:54:39.684" endtime="20250714 14:54:39.684"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:39.685" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:39.684" endtime="20250714 14:54:39.685"/>
</kw>
<status status="PASS" starttime="20250714 14:54:38.807" endtime="20250714 14:54:39.685"/>
</kw>
<msg timestamp="20250714 14:54:39.685" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:38.807" endtime="20250714 14:54:39.685"/>
</kw>
<msg timestamp="20250714 14:54:39.685" level="INFO">${result} = om</msg>
<status status="PASS" starttime="20250714 14:54:38.806" endtime="20250714 14:54:39.685"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>om</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:39.685" endtime="20250714 14:54:39.685"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>is missing</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:39.685" endtime="20250714 14:54:39.686"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone getconf -confKey ozone.om.address</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:39.689" level="INFO">Running command 'ozone getconf -confKey ozone.om.address 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:40.551" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:40.551" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250714 14:54:39.687" endtime="20250714 14:54:40.551"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:40.552" level="INFO">om</msg>
<status status="PASS" starttime="20250714 14:54:40.551" endtime="20250714 14:54:40.552"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:40.552" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:40.552" endtime="20250714 14:54:40.553"/>
</kw>
<status status="PASS" starttime="20250714 14:54:39.687" endtime="20250714 14:54:40.553"/>
</kw>
<msg timestamp="20250714 14:54:40.553" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:39.686" endtime="20250714 14:54:40.553"/>
</kw>
<msg timestamp="20250714 14:54:40.553" level="INFO">${result} = om</msg>
<status status="PASS" starttime="20250714 14:54:39.686" endtime="20250714 14:54:40.553"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>om</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:40.553" endtime="20250714 14:54:40.553"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>is missing</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:40.553" endtime="20250714 14:54:40.554"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250714 14:54:38.806" endtime="20250714 14:54:40.554"/>
</test>
<test id="s1-s3-s2-t4" name="Get undefined config key" line="42">
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone getconf confKey no-such-config-key</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:40.557" level="INFO">Running command 'ozone getconf confKey no-such-config-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:41.444" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:54:41.444" level="INFO">${output} = Configuration no-such-config-key is missing.</msg>
<status status="PASS" starttime="20250714 14:54:40.555" endtime="20250714 14:54:41.444"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:41.445" level="INFO">Configuration no-such-config-key is missing.</msg>
<status status="PASS" starttime="20250714 14:54:41.445" endtime="20250714 14:54:41.445"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:41.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:41.445" endtime="20250714 14:54:41.446"/>
</kw>
<msg timestamp="20250714 14:54:41.446" level="INFO">${result} = Configuration no-such-config-key is missing.</msg>
<status status="PASS" starttime="20250714 14:54:40.555" endtime="20250714 14:54:41.446"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Configuration no-such-config-key is missing</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:41.446" endtime="20250714 14:54:41.446"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone getconf -confKey no-such-config-key</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:41.449" level="INFO">Running command 'ozone getconf -confKey no-such-config-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:42.389" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:54:42.389" level="INFO">${output} = Configuration no-such-config-key is missing.</msg>
<status status="PASS" starttime="20250714 14:54:41.447" endtime="20250714 14:54:42.389"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:42.390" level="INFO">Configuration no-such-config-key is missing.</msg>
<status status="PASS" starttime="20250714 14:54:42.389" endtime="20250714 14:54:42.390"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:42.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:42.390" endtime="20250714 14:54:42.390"/>
</kw>
<msg timestamp="20250714 14:54:42.391" level="INFO">${result} = Configuration no-such-config-key is missing.</msg>
<status status="PASS" starttime="20250714 14:54:41.446" endtime="20250714 14:54:42.391"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Configuration no-such-config-key is missing</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:42.391" endtime="20250714 14:54:42.391"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250714 14:54:40.554" endtime="20250714 14:54:42.391"/>
</test>
<doc>Test 'ozone getconf' command</doc>
<status status="PASS" starttime="20250714 14:54:34.759" endtime="20250714 14:54:42.392"/>
</suite>
<suite id="s1-s3-s3" name="Links" source="/opt/hadoop/smoketest/basic/links.robot">
<kw name="Create volumes" type="SETUP">
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 14:54:42.408" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:42.408" endtime="20250714 14:54:42.409"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250714 14:54:42.409" endtime="20250714 14:54:42.409"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250714 14:54:42.409" endtime="20250714 14:54:42.409"/>
</kw>
<status status="NOT RUN" starttime="20250714 14:54:42.409" endtime="20250714 14:54:42.409"/>
</branch>
<status status="NOT RUN" starttime="20250714 14:54:42.409" endtime="20250714 14:54:42.409"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250714 14:54:42.409" endtime="20250714 14:54:42.409"/>
</kw>
<status status="PASS" starttime="20250714 14:54:42.408" endtime="20250714 14:54:42.409"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:42.410" level="INFO">${random} = 73899</msg>
<status status="PASS" starttime="20250714 14:54:42.409" endtime="20250714 14:54:42.410"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${source}</arg>
<arg>${random}-source</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250714 14:54:42.410" level="INFO">${source} = 73899-source</msg>
<status status="PASS" starttime="20250714 14:54:42.410" endtime="20250714 14:54:42.411"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${target}</arg>
<arg>${random}-target</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250714 14:54:42.411" level="INFO">${target} = 73899-target</msg>
<status status="PASS" starttime="20250714 14:54:42.411" endtime="20250714 14:54:42.411"/>
</kw>
<kw name="Ozone Shell Batch" library="shell">
<arg>volume create ${source}</arg>
<arg>volume create ${target}</arg>
<kw name="Catenate" library="BuiltIn">
<var>${cmd}</var>
<arg>SEPARATOR=' --execute '</arg>
<arg>@{commands}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20250714 14:54:42.412" level="INFO">${cmd} = volume create 73899-source' --execute 'volume create 73899-target</msg>
<status status="PASS" starttime="20250714 14:54:42.412" endtime="20250714 14:54:42.412"/>
</kw>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:42.415" level="INFO">Running command 'ozone sh --execute 'volume create 73899-source' --execute 'volume create 73899-target' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:45.525" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:45.525" level="INFO">${output} = volume create 73899-source
volume create 73899-target</msg>
<status status="PASS" starttime="20250714 14:54:42.412" endtime="20250714 14:54:45.525"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:45.526" level="INFO">volume create 73899-source
volume create 73899-target</msg>
<status status="PASS" starttime="20250714 14:54:45.526" endtime="20250714 14:54:45.526"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:45.527" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:45.526" endtime="20250714 14:54:45.527"/>
</kw>
<status status="PASS" starttime="20250714 14:54:42.412" endtime="20250714 14:54:45.527"/>
</kw>
<msg timestamp="20250714 14:54:45.527" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:42.412" endtime="20250714 14:54:45.527"/>
</kw>
<status status="PASS" starttime="20250714 14:54:42.411" endtime="20250714 14:54:45.527"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Setup ACL tests</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:45.527" endtime="20250714 14:54:45.527"/>
</kw>
<status status="PASS" starttime="20250714 14:54:42.408" endtime="20250714 14:54:45.527"/>
</kw>
<test id="s1-s3-s3-t1" name="Link to non-existent bucket" line="92">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:45.528" endtime="20250714 14:54:45.528"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket link ${source}/no-such-bucket ${target}/dangling-link</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:45.532" level="INFO">Running command 'ozone sh bucket link 73899-source/no-such-bucket 73899-target/dangling-link 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:48.256" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:48.256" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:45.529" endtime="20250714 14:54:48.256"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:48.257" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:48.256" endtime="20250714 14:54:48.257"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:48.257" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:48.257" endtime="20250714 14:54:48.257"/>
</kw>
<status status="PASS" starttime="20250714 14:54:45.529" endtime="20250714 14:54:48.258"/>
</kw>
<msg timestamp="20250714 14:54:48.258" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:45.529" endtime="20250714 14:54:48.258"/>
</kw>
<status status="PASS" starttime="20250714 14:54:45.529" endtime="20250714 14:54:48.258"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh key list ${target}/dangling-link</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:48.261" level="INFO">Running command 'ozone sh key list 73899-target/dangling-link 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:51.126" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:54:51.126" level="INFO">${output} = BUCKET_NOT_FOUND Bucket not found: 73899-source/no-such-bucket</msg>
<status status="PASS" starttime="20250714 14:54:48.258" endtime="20250714 14:54:51.126"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:51.127" level="INFO">BUCKET_NOT_FOUND Bucket not found: 73899-source/no-such-bucket</msg>
<status status="PASS" starttime="20250714 14:54:51.126" endtime="20250714 14:54:51.127"/>
</kw>
<msg timestamp="20250714 14:54:51.127" level="INFO">${result} = BUCKET_NOT_FOUND Bucket not found: 73899-source/no-such-bucket</msg>
<status status="PASS" starttime="20250714 14:54:48.258" endtime="20250714 14:54:51.127"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>BUCKET_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:54:51.127" endtime="20250714 14:54:51.127"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:54:45.528" endtime="20250714 14:54:51.128"/>
</test>
<test id="s1-s3-s3-t2" name="Key create passthrough" line="97">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:51.128" endtime="20250714 14:54:51.129"/>
</kw>
<kw name="Ozone Shell Batch" library="shell">
<arg>bucket link ${source}/bucket1 ${target}/link1</arg>
<arg>bucket create ${source}/bucket1</arg>
<arg>key put ${target}/link1/key1 /etc/passwd</arg>
<kw name="Catenate" library="BuiltIn">
<var>${cmd}</var>
<arg>SEPARATOR=' --execute '</arg>
<arg>@{commands}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20250714 14:54:51.130" level="INFO">${cmd} = bucket link 73899-source/bucket1 73899-target/link1' --execute 'bucket create 73899-source/bucket1' --execute 'key put 73899-target/link1/key1 /etc/passwd</msg>
<status status="PASS" starttime="20250714 14:54:51.129" endtime="20250714 14:54:51.130"/>
</kw>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:51.132" level="INFO">Running command 'ozone sh --execute 'bucket link 73899-source/bucket1 73899-target/link1' --execute 'bucket create 73899-source/bucket1' --execute 'key put 73899-target/link1/key1 /etc/passwd' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:55.707" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:55.707" level="INFO">${output} = bucket link 73899-source/bucket1 73899-target/link1
bucket create 73899-source/bucket1
key put 73899-target/link1/key1 /etc/passwd</msg>
<status status="PASS" starttime="20250714 14:54:51.130" endtime="20250714 14:54:55.707"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:55.708" level="INFO">bucket link 73899-source/bucket1 73899-target/link1
bucket create 73899-source/bucket1
key put 73899-target/link1/key1 /etc/passwd</msg>
<status status="PASS" starttime="20250714 14:54:55.708" endtime="20250714 14:54:55.708"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:55.708" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:55.708" endtime="20250714 14:54:55.709"/>
</kw>
<status status="PASS" starttime="20250714 14:54:51.130" endtime="20250714 14:54:55.709"/>
</kw>
<msg timestamp="20250714 14:54:55.709" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:51.130" endtime="20250714 14:54:55.709"/>
</kw>
<status status="PASS" starttime="20250714 14:54:51.129" endtime="20250714 14:54:55.709"/>
</kw>
<kw name="Key Should Match Local File" library="shell">
<arg>${target}/link1/key1</arg>
<arg>/etc/passwd</arg>
<kw name="Compare Key With Local File" library="shell">
<var>${matches}</var>
<arg>${key}</arg>
<arg>${file}</arg>
<kw name="Generate Random String" library="String">
<var>${postfix}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:54:55.710" level="INFO">${postfix} = 67729</msg>
<status status="PASS" starttime="20250714 14:54:55.710" endtime="20250714 14:54:55.710"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${tmpfile}</var>
<arg>/tmp/tempkey-${postfix}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250714 14:54:55.710" level="INFO">${tmpfile} = /tmp/tempkey-67729</msg>
<status status="PASS" starttime="20250714 14:54:55.710" endtime="20250714 14:54:55.710"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone ${cmd} ${key} ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:55.713" level="INFO">Running command 'ozone sh key get 73899-target/link1/key1 /tmp/tempkey-67729 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:59.867" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:59.867" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:55.711" endtime="20250714 14:54:59.868"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:59.868" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:59.868" endtime="20250714 14:54:59.868"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:59.869" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:59.869" endtime="20250714 14:54:59.869"/>
</kw>
<status status="PASS" starttime="20250714 14:54:55.711" endtime="20250714 14:54:59.869"/>
</kw>
<msg timestamp="20250714 14:54:59.869" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:55.711" endtime="20250714 14:54:59.869"/>
</kw>
<status status="PASS" starttime="20250714 14:54:55.710" endtime="20250714 14:54:59.869"/>
</kw>
<kw name="Run And Return Rc" library="OperatingSystem">
<var>${rc}</var>
<arg>diff -q ${file} ${tmpfile}</arg>
<doc>Runs the given command in the system and returns the return code.</doc>
<msg timestamp="20250714 14:54:59.871" level="INFO">Running command 'diff -q /etc/passwd /tmp/tempkey-67729 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:59.874" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20250714 14:54:59.869" endtime="20250714 14:54:59.874"/>
</kw>
<kw name="Execute" library="os">
<arg>rm -f ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:59.878" level="INFO">Running command 'rm -f /tmp/tempkey-67729 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:54:59.881" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:54:59.881" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:59.876" endtime="20250714 14:54:59.881"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:54:59.881" level="INFO"/>
<status status="PASS" starttime="20250714 14:54:59.881" endtime="20250714 14:54:59.881"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:54:59.882" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:54:59.881" endtime="20250714 14:54:59.882"/>
</kw>
<status status="PASS" starttime="20250714 14:54:59.875" endtime="20250714 14:54:59.882"/>
</kw>
<msg timestamp="20250714 14:54:59.882" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:59.875" endtime="20250714 14:54:59.882"/>
</kw>
<status status="PASS" starttime="20250714 14:54:59.874" endtime="20250714 14:54:59.882"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>${rc} == 0</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:54:59.882" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20250714 14:54:59.882" endtime="20250714 14:54:59.882"/>
</kw>
<msg timestamp="20250714 14:54:59.883" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20250714 14:54:55.709" endtime="20250714 14:54:59.883"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${matches}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250714 14:54:59.883" endtime="20250714 14:54:59.883"/>
</kw>
<status status="PASS" starttime="20250714 14:54:55.709" endtime="20250714 14:54:59.883"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:54:51.128" endtime="20250714 14:54:59.883"/>
</test>
<test id="s1-s3-s3-t3" name="Key read passthrough" line="103">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:54:59.884" endtime="20250714 14:54:59.884"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put ${source}/bucket1/key2 /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:54:59.887" level="INFO">Running command 'ozone sh key put 73899-source/bucket1/key2 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:04.111" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:04.111" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:54:59.885" endtime="20250714 14:55:04.111"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:04.112" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:04.112" endtime="20250714 14:55:04.112"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:04.113" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:04.112" endtime="20250714 14:55:04.113"/>
</kw>
<status status="PASS" starttime="20250714 14:54:59.885" endtime="20250714 14:55:04.113"/>
</kw>
<msg timestamp="20250714 14:55:04.113" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:54:59.885" endtime="20250714 14:55:04.113"/>
</kw>
<status status="PASS" starttime="20250714 14:54:59.884" endtime="20250714 14:55:04.113"/>
</kw>
<kw name="Key Should Match Local File" library="shell">
<arg>${source}/bucket1/key2</arg>
<arg>/opt/hadoop/NOTICE.txt</arg>
<kw name="Compare Key With Local File" library="shell">
<var>${matches}</var>
<arg>${key}</arg>
<arg>${file}</arg>
<kw name="Generate Random String" library="String">
<var>${postfix}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 14:55:04.114" level="INFO">${postfix} = 94934</msg>
<status status="PASS" starttime="20250714 14:55:04.114" endtime="20250714 14:55:04.114"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${tmpfile}</var>
<arg>/tmp/tempkey-${postfix}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250714 14:55:04.114" level="INFO">${tmpfile} = /tmp/tempkey-94934</msg>
<status status="PASS" starttime="20250714 14:55:04.114" endtime="20250714 14:55:04.115"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone ${cmd} ${key} ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:04.117" level="INFO">Running command 'ozone sh key get 73899-source/bucket1/key2 /tmp/tempkey-94934 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:08.455" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:08.455" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:55:04.115" endtime="20250714 14:55:08.455"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:08.456" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:08.455" endtime="20250714 14:55:08.456"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:08.456" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:08.456" endtime="20250714 14:55:08.457"/>
</kw>
<status status="PASS" starttime="20250714 14:55:04.115" endtime="20250714 14:55:08.457"/>
</kw>
<msg timestamp="20250714 14:55:08.457" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:04.115" endtime="20250714 14:55:08.457"/>
</kw>
<status status="PASS" starttime="20250714 14:55:04.115" endtime="20250714 14:55:08.457"/>
</kw>
<kw name="Run And Return Rc" library="OperatingSystem">
<var>${rc}</var>
<arg>diff -q ${file} ${tmpfile}</arg>
<doc>Runs the given command in the system and returns the return code.</doc>
<msg timestamp="20250714 14:55:08.459" level="INFO">Running command 'diff -q /opt/hadoop/NOTICE.txt /tmp/tempkey-94934 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:08.462" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20250714 14:55:08.457" endtime="20250714 14:55:08.462"/>
</kw>
<kw name="Execute" library="os">
<arg>rm -f ${tmpfile}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:08.466" level="INFO">Running command 'rm -f /tmp/tempkey-94934 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:08.469" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:08.469" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:55:08.463" endtime="20250714 14:55:08.469"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:08.470" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:08.469" endtime="20250714 14:55:08.470"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:08.470" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:08.470" endtime="20250714 14:55:08.470"/>
</kw>
<status status="PASS" starttime="20250714 14:55:08.463" endtime="20250714 14:55:08.470"/>
</kw>
<msg timestamp="20250714 14:55:08.470" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:08.463" endtime="20250714 14:55:08.470"/>
</kw>
<status status="PASS" starttime="20250714 14:55:08.462" endtime="20250714 14:55:08.470"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${result}</var>
<arg>${rc} == 0</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20250714 14:55:08.471" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20250714 14:55:08.470" endtime="20250714 14:55:08.471"/>
</kw>
<msg timestamp="20250714 14:55:08.471" level="INFO">${matches} = True</msg>
<status status="PASS" starttime="20250714 14:55:04.113" endtime="20250714 14:55:08.471"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${matches}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250714 14:55:08.471" endtime="20250714 14:55:08.471"/>
</kw>
<status status="PASS" starttime="20250714 14:55:04.113" endtime="20250714 14:55:08.471"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:54:59.883" endtime="20250714 14:55:08.471"/>
</test>
<test id="s1-s3-s3-t4" name="Key list passthrough" line="107">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:55:08.472" endtime="20250714 14:55:08.473"/>
</kw>
<kw name="Execute" library="os">
<var>${target_list}</var>
<arg>ozone sh key list ${target}/link1 | jq -r '.[].name'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:08.475" level="INFO">Running command 'ozone sh key list 73899-target/link1 | jq -r '.[].name' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:11.624" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:11.624" level="INFO">${output} = key1
key2</msg>
<status status="PASS" starttime="20250714 14:55:08.473" endtime="20250714 14:55:11.624"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:11.625" level="INFO">key1
key2</msg>
<status status="PASS" starttime="20250714 14:55:11.624" endtime="20250714 14:55:11.625"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:11.625" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:11.625" endtime="20250714 14:55:11.625"/>
</kw>
<status status="PASS" starttime="20250714 14:55:08.473" endtime="20250714 14:55:11.625"/>
</kw>
<msg timestamp="20250714 14:55:11.625" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:08.473" endtime="20250714 14:55:11.626"/>
</kw>
<msg timestamp="20250714 14:55:11.626" level="INFO">${target_list} = key1
key2</msg>
<status status="PASS" starttime="20250714 14:55:08.473" endtime="20250714 14:55:11.626"/>
</kw>
<kw name="Execute" library="os">
<var>${source_list}</var>
<arg>ozone sh key list ${source}/bucket1 | jq -r '.[].name'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:11.629" level="INFO">Running command 'ozone sh key list 73899-source/bucket1 | jq -r '.[].name' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:14.612" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:14.612" level="INFO">${output} = key1
key2</msg>
<status status="PASS" starttime="20250714 14:55:11.627" endtime="20250714 14:55:14.612"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:14.613" level="INFO">key1
key2</msg>
<status status="PASS" starttime="20250714 14:55:14.612" endtime="20250714 14:55:14.613"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:14.613" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:14.613" endtime="20250714 14:55:14.613"/>
</kw>
<status status="PASS" starttime="20250714 14:55:11.626" endtime="20250714 14:55:14.614"/>
</kw>
<msg timestamp="20250714 14:55:14.614" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:11.626" endtime="20250714 14:55:14.614"/>
</kw>
<msg timestamp="20250714 14:55:14.614" level="INFO">${source_list} = key1
key2</msg>
<status status="PASS" starttime="20250714 14:55:11.626" endtime="20250714 14:55:14.614"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${target_list}</arg>
<arg>${source_list}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:14.614" endtime="20250714 14:55:14.614"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${source_list}</arg>
<arg>key1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:14.614" endtime="20250714 14:55:14.615"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${source_list}</arg>
<arg>key2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:14.615" endtime="20250714 14:55:14.615"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:55:08.472" endtime="20250714 14:55:14.615"/>
</test>
<test id="s1-s3-s3-t5" name="Key delete passthrough" line="114">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:55:14.616" endtime="20250714 14:55:14.616"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key delete ${target}/link1/key2</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:14.619" level="INFO">Running command 'ozone sh key delete 73899-target/link1/key2 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:17.570" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:17.570" level="INFO">${output} = Key moved inside Trash: /.Trash/hadoop/Current/key2 </msg>
<status status="PASS" starttime="20250714 14:55:14.617" endtime="20250714 14:55:17.570"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:17.571" level="INFO">Key moved inside Trash: /.Trash/hadoop/Current/key2 </msg>
<status status="PASS" starttime="20250714 14:55:17.571" endtime="20250714 14:55:17.571"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:17.572" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:17.571" endtime="20250714 14:55:17.572"/>
</kw>
<status status="PASS" starttime="20250714 14:55:14.617" endtime="20250714 14:55:17.572"/>
</kw>
<msg timestamp="20250714 14:55:17.572" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:14.617" endtime="20250714 14:55:17.572"/>
</kw>
<status status="PASS" starttime="20250714 14:55:14.616" endtime="20250714 14:55:17.572"/>
</kw>
<kw name="Execute" library="os">
<var>${bucket1keys}</var>
<arg>ozone sh key list ${source}/bucket1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:17.576" level="INFO">Running command 'ozone sh key list 73899-source/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:20.743" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:20.743" level="INFO">${output} = [ {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "20...</msg>
<status status="PASS" starttime="20250714 14:55:17.574" endtime="20250714 14:55:20.743"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:20.744" level="INFO">[ {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.455Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.455Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/Current/",
  "owner" : "",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.468Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/Current/key2",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-14T14:55:02.559Z",
  "modificationTime" : "2025-07-14T14:55:03.688Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : true
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : "key1",
  "owner" : "hadoop",
  "dataSize" : 1062,
  "creationTime" : "2025-07-14T14:54:54.154Z",
  "modificationTime" : "2025-07-14T14:54:55.292Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : true
} ]</msg>
<status status="PASS" starttime="20250714 14:55:20.744" endtime="20250714 14:55:20.744"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:20.745" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:20.744" endtime="20250714 14:55:20.745"/>
</kw>
<status status="PASS" starttime="20250714 14:55:17.573" endtime="20250714 14:55:20.745"/>
</kw>
<msg timestamp="20250714 14:55:20.745" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:17.573" endtime="20250714 14:55:20.745"/>
</kw>
<msg timestamp="20250714 14:55:20.745" level="INFO">${bucket1keys} = [ {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "20...</msg>
<status status="PASS" starttime="20250714 14:55:17.572" endtime="20250714 14:55:20.745"/>
</kw>
<kw name="Execute" library="os">
<var>${source_list}</var>
<arg>echo '${bucket1keys}' | jq -r '.[] | select(.name | startswith(".Trash")) | .name'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:20.748" level="INFO">Running command 'echo '[ {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.455Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.455Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/Current/",
  "owner" : "",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.468Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/Current/key2",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-14T14:55:02.559Z",
  "modificationTime" : "2025-07-14T14:55:03.688Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : true
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : "key1",
  "owner" : "hadoop",
  "dataSize" : 1062,
  "creationTime" : "2025-07-14T14:54:54.154Z",
  "modificationTime" : "2025-07-14T14:54:55.292Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : true
} ]' | jq -r '.[] | select(.name | startswith(".Trash")) | .name' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:20.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:20.753" level="INFO">${output} = .Trash/
.Trash/hadoop/
.Trash/hadoop/Current/
.Trash/hadoop/Current/key2</msg>
<status status="PASS" starttime="20250714 14:55:20.746" endtime="20250714 14:55:20.753"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:20.754" level="INFO">.Trash/
.Trash/hadoop/
.Trash/hadoop/Current/
.Trash/hadoop/Current/key2</msg>
<status status="PASS" starttime="20250714 14:55:20.753" endtime="20250714 14:55:20.754"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:20.754" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:20.754" endtime="20250714 14:55:20.754"/>
</kw>
<status status="PASS" starttime="20250714 14:55:20.746" endtime="20250714 14:55:20.754"/>
</kw>
<msg timestamp="20250714 14:55:20.754" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:20.746" endtime="20250714 14:55:20.754"/>
</kw>
<msg timestamp="20250714 14:55:20.755" level="INFO">${source_list} = .Trash/
.Trash/hadoop/
.Trash/hadoop/Current/
.Trash/hadoop/Current/key2</msg>
<status status="PASS" starttime="20250714 14:55:20.745" endtime="20250714 14:55:20.755"/>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<arg>${source_list}</arg>
<arg>.Trash/hadoop</arg>
<arg>.Trash/testuser</arg>
<arg>.Trash/root</arg>
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<status status="PASS" starttime="20250714 14:55:20.755" endtime="20250714 14:55:20.755"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${source_list}</arg>
<arg>key2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:20.755" endtime="20250714 14:55:20.755"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>echo '${bucket1keys}' | jq -r '.[] | select(.name | startswith(".Trash") | not) | .name'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:20.758" level="INFO">Running command 'echo '[ {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.455Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/",
  "owner" : "hadoop",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.455Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/Current/",
  "owner" : "",
  "dataSize" : 0,
  "creationTime" : "2025-07-14T14:55:17.455Z",
  "modificationTime" : "2025-07-14T14:55:17.468Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : false
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : ".Trash/hadoop/Current/key2",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-14T14:55:02.559Z",
  "modificationTime" : "2025-07-14T14:55:03.688Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : true
}, {
  "volumeName" : "73899-source",
  "bucketName" : "bucket1",
  "name" : "key1",
  "owner" : "hadoop",
  "dataSize" : 1062,
  "creationTime" : "2025-07-14T14:54:54.154Z",
  "modificationTime" : "2025-07-14T14:54:55.292Z",
  "replicationConfig" : {
    "replicationFactor" : "THREE",
    "requiredNodes" : 3,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "file" : true
} ]' | jq -r '.[] | select(.name | startswith(".Trash") | not) | .name' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:20.762" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:20.762" level="INFO">${output} = key1</msg>
<status status="PASS" starttime="20250714 14:55:20.756" endtime="20250714 14:55:20.763"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:20.763" level="INFO">key1</msg>
<status status="PASS" starttime="20250714 14:55:20.763" endtime="20250714 14:55:20.763"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:20.764" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:20.763" endtime="20250714 14:55:20.764"/>
</kw>
<status status="PASS" starttime="20250714 14:55:20.756" endtime="20250714 14:55:20.764"/>
</kw>
<msg timestamp="20250714 14:55:20.764" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:20.756" endtime="20250714 14:55:20.764"/>
</kw>
<msg timestamp="20250714 14:55:20.764" level="INFO">${result} = key1</msg>
<status status="PASS" starttime="20250714 14:55:20.755" endtime="20250714 14:55:20.764"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>key2</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:20.764" endtime="20250714 14:55:20.764"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:55:14.615" endtime="20250714 14:55:20.765"/>
</test>
<test id="s1-s3-s3-t6" name="Bucket list contains links" line="123">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:55:20.765" endtime="20250714 14:55:20.766"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket list ${target}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:20.768" level="INFO">Running command 'ozone sh bucket list 73899-target 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:23.976" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:23.976" level="INFO">${output} = [ {
  "volumeName" : "73899-target",
  "name" : "dangling-link",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "no-such-bucket",
  "creationTime" : "2025-07-14T14:54:48.149Z",
  "modificationT...</msg>
<status status="PASS" starttime="20250714 14:55:20.766" endtime="20250714 14:55:23.977"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:23.977" level="INFO">[ {
  "volumeName" : "73899-target",
  "name" : "dangling-link",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "no-such-bucket",
  "creationTime" : "2025-07-14T14:54:48.149Z",
  "modificationTime" : "2025-07-14T14:54:48.149Z",
  "owner" : "hadoop",
  "link" : true
}, {
  "volumeName" : "73899-target",
  "name" : "link1",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "bucket1",
  "creationTime" : "2025-07-14T14:54:54.055Z",
  "modificationTime" : "2025-07-14T14:54:54.055Z",
  "owner" : "hadoop",
  "link" : true
} ]</msg>
<status status="PASS" starttime="20250714 14:55:23.977" endtime="20250714 14:55:23.977"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:23.978" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:23.978" endtime="20250714 14:55:23.978"/>
</kw>
<status status="PASS" starttime="20250714 14:55:20.766" endtime="20250714 14:55:23.978"/>
</kw>
<msg timestamp="20250714 14:55:23.978" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:20.766" endtime="20250714 14:55:23.978"/>
</kw>
<msg timestamp="20250714 14:55:23.978" level="INFO">${result} = [ {
  "volumeName" : "73899-target",
  "name" : "dangling-link",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "no-such-bucket",
  "creationTime" : "2025-07-14T14:54:48.149Z",
  "modificationT...</msg>
<status status="PASS" starttime="20250714 14:55:20.766" endtime="20250714 14:55:23.978"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>link1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:23.978" endtime="20250714 14:55:23.979"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>dangling-link</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:23.979" endtime="20250714 14:55:23.979"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:55:20.765" endtime="20250714 14:55:23.979"/>
</test>
<test id="s1-s3-s3-t7" name="Bucket info shows source" line="128">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:55:23.980" endtime="20250714 14:55:23.980"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${target}/link1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:23.984" level="INFO">Running command 'ozone sh bucket info 73899-target/link1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:27.040" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:27.040" level="INFO">${output} = {
  "volumeName" : "73899-target",
  "name" : "link1",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "bucket1",
  "creationTime" : "2025-07-14T14:54:54.055Z",
  "modificationTime" : "2025-07-1...</msg>
<status status="PASS" starttime="20250714 14:55:23.982" endtime="20250714 14:55:27.040"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:27.040" level="INFO">{
  "volumeName" : "73899-target",
  "name" : "link1",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "bucket1",
  "creationTime" : "2025-07-14T14:54:54.055Z",
  "modificationTime" : "2025-07-14T14:54:54.055Z",
  "owner" : "hadoop",
  "link" : true
}</msg>
<status status="PASS" starttime="20250714 14:55:27.040" endtime="20250714 14:55:27.041"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:27.041" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:27.041" endtime="20250714 14:55:27.041"/>
</kw>
<status status="PASS" starttime="20250714 14:55:23.981" endtime="20250714 14:55:27.041"/>
</kw>
<msg timestamp="20250714 14:55:27.041" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:23.981" endtime="20250714 14:55:27.041"/>
</kw>
<msg timestamp="20250714 14:55:27.041" level="INFO">${result} = {
  "volumeName" : "73899-target",
  "name" : "link1",
  "sourceVolume" : "73899-source",
  "sourceBucket" : "bucket1",
  "creationTime" : "2025-07-14T14:54:54.055Z",
  "modificationTime" : "2025-07-1...</msg>
<status status="PASS" starttime="20250714 14:55:23.980" endtime="20250714 14:55:27.041"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${source}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.041" endtime="20250714 14:55:27.042"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>bucket1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.042" endtime="20250714 14:55:27.042"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${target}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.042" endtime="20250714 14:55:27.042"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>link1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.042" endtime="20250714 14:55:27.043"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>modificationTime</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.043" endtime="20250714 14:55:27.043"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>creationTime</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.043" endtime="20250714 14:55:27.043"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>metadata</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:55:27.043" endtime="20250714 14:55:27.043"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:55:23.980" endtime="20250714 14:55:27.044"/>
</test>
<test id="s1-s3-s3-t8" name="Source and target bucket have different ACLs" line="138">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:55:27.045" endtime="20250714 14:55:27.045"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket addacl --acl user:user1:rwxy ${target}/link1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:27.048" level="INFO">Running command 'ozone sh bucket addacl --acl user:user1:rwxy 73899-target/link1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:30.046" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:30.046" level="INFO">${output} = ACL user:user1:rwxy[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:55:27.046" endtime="20250714 14:55:30.046"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:30.047" level="INFO">ACL user:user1:rwxy[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:55:30.047" endtime="20250714 14:55:30.047"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:30.048" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:30.047" endtime="20250714 14:55:30.048"/>
</kw>
<status status="PASS" starttime="20250714 14:55:27.045" endtime="20250714 14:55:30.048"/>
</kw>
<msg timestamp="20250714 14:55:30.048" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:27.045" endtime="20250714 14:55:30.048"/>
</kw>
<status status="PASS" starttime="20250714 14:55:27.045" endtime="20250714 14:55:30.048"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>bucket</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>${EMPTY}</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:30.052" level="INFO">Running command 'ozone sh bucket getacl 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:33.078" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:33.078" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:55:30.050" endtime="20250714 14:55:33.078"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:33.079" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:33.078" endtime="20250714 14:55:33.079"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:33.079" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:33.079" endtime="20250714 14:55:33.079"/>
</kw>
<status status="PASS" starttime="20250714 14:55:30.050" endtime="20250714 14:55:33.079"/>
</kw>
<msg timestamp="20250714 14:55:33.079" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:30.050" endtime="20250714 14:55:33.079"/>
</kw>
<msg timestamp="20250714 14:55:33.080" level="INFO">${actual_acls} = </msg>
<status status="PASS" starttime="20250714 14:55:30.049" endtime="20250714 14:55:33.080"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:33.080" endtime="20250714 14:55:33.080"/>
</kw>
<status status="PASS" starttime="20250714 14:55:30.048" endtime="20250714 14:55:33.080"/>
</kw>
<kw name="Verify Bucket ACL">
<arg>--source=false</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>${EMPTY}</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh bucket getacl ${source_option} ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:33.085" level="INFO">Running command 'ozone sh bucket getacl --source=false 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:36.087" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:36.087" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:55:33.082" endtime="20250714 14:55:36.087"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:36.088" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:36.087" endtime="20250714 14:55:36.088"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:36.088" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:36.088" endtime="20250714 14:55:36.088"/>
</kw>
<status status="PASS" starttime="20250714 14:55:33.082" endtime="20250714 14:55:36.088"/>
</kw>
<msg timestamp="20250714 14:55:36.088" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:33.082" endtime="20250714 14:55:36.088"/>
</kw>
<msg timestamp="20250714 14:55:36.088" level="INFO">${actual_acls} = </msg>
<status status="PASS" starttime="20250714 14:55:33.081" endtime="20250714 14:55:36.089"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:36.089" endtime="20250714 14:55:36.089"/>
</kw>
<status status="PASS" starttime="20250714 14:55:33.080" endtime="20250714 14:55:36.089"/>
</kw>
<kw name="Verify Bucket ACL">
<arg>--source</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL WRITE_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh bucket getacl ${source_option} ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:36.093" level="INFO">Running command 'ozone sh bucket getacl --source 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:39.239" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:39.239" level="INFO">${output} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:55:36.091" endtime="20250714 14:55:39.239"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:39.240" level="INFO">READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:55:39.239" endtime="20250714 14:55:39.240"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:39.240" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:39.240" endtime="20250714 14:55:39.240"/>
</kw>
<status status="PASS" starttime="20250714 14:55:36.090" endtime="20250714 14:55:39.240"/>
</kw>
<msg timestamp="20250714 14:55:39.240" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:36.090" endtime="20250714 14:55:39.241"/>
</kw>
<msg timestamp="20250714 14:55:39.241" level="INFO">${actual_acls} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:55:36.089" endtime="20250714 14:55:39.241"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:39.241" endtime="20250714 14:55:39.241"/>
</kw>
<status status="PASS" starttime="20250714 14:55:36.089" endtime="20250714 14:55:39.241"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>bucket</arg>
<arg>${source}/bucket1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL WRITE_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:39.245" level="INFO">Running command 'ozone sh bucket getacl 73899-source/bucket1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:42.267" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:42.267" level="INFO">${output} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:55:39.243" endtime="20250714 14:55:42.267"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:42.268" level="INFO">READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:55:42.267" endtime="20250714 14:55:42.268"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:42.268" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:42.268" endtime="20250714 14:55:42.268"/>
</kw>
<status status="PASS" starttime="20250714 14:55:39.242" endtime="20250714 14:55:42.269"/>
</kw>
<msg timestamp="20250714 14:55:42.269" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:39.242" endtime="20250714 14:55:42.269"/>
</kw>
<msg timestamp="20250714 14:55:42.269" level="INFO">${actual_acls} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:55:39.242" endtime="20250714 14:55:42.269"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:42.269" endtime="20250714 14:55:42.269"/>
</kw>
<status status="PASS" starttime="20250714 14:55:39.241" endtime="20250714 14:55:42.269"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket removeacl --acl user:user1:y ${target}/link1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:42.272" level="INFO">Running command 'ozone sh bucket removeacl --acl user:user1:y 73899-target/link1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:45.106" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:45.106" level="INFO">${output} = ACL user:user1:y[ACCESS] removed successfully.</msg>
<status status="PASS" starttime="20250714 14:55:42.270" endtime="20250714 14:55:45.106"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:45.107" level="INFO">ACL user:user1:y[ACCESS] removed successfully.</msg>
<status status="PASS" starttime="20250714 14:55:45.106" endtime="20250714 14:55:45.107"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:45.107" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:45.107" endtime="20250714 14:55:45.107"/>
</kw>
<status status="PASS" starttime="20250714 14:55:42.270" endtime="20250714 14:55:45.107"/>
</kw>
<msg timestamp="20250714 14:55:45.107" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:42.270" endtime="20250714 14:55:45.108"/>
</kw>
<status status="PASS" starttime="20250714 14:55:42.269" endtime="20250714 14:55:45.108"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>bucket</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>${EMPTY}</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:45.112" level="INFO">Running command 'ozone sh bucket getacl 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:48.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:48.095" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:55:45.109" endtime="20250714 14:55:48.096"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:48.096" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:48.096" endtime="20250714 14:55:48.096"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:48.097" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:48.097" endtime="20250714 14:55:48.097"/>
</kw>
<status status="PASS" starttime="20250714 14:55:45.109" endtime="20250714 14:55:48.097"/>
</kw>
<msg timestamp="20250714 14:55:48.097" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:45.109" endtime="20250714 14:55:48.097"/>
</kw>
<msg timestamp="20250714 14:55:48.097" level="INFO">${actual_acls} = </msg>
<status status="PASS" starttime="20250714 14:55:45.108" endtime="20250714 14:55:48.097"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:48.097" endtime="20250714 14:55:48.098"/>
</kw>
<status status="PASS" starttime="20250714 14:55:45.108" endtime="20250714 14:55:48.098"/>
</kw>
<kw name="Verify Bucket ACL">
<arg>--source</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh bucket getacl ${source_option} ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:48.101" level="INFO">Running command 'ozone sh bucket getacl --source 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:51.284" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:51.284" level="INFO">${output} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:55:48.099" endtime="20250714 14:55:51.285"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:51.285" level="INFO">READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:55:51.285" endtime="20250714 14:55:51.285"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:51.286" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:51.286" endtime="20250714 14:55:51.286"/>
</kw>
<status status="PASS" starttime="20250714 14:55:48.099" endtime="20250714 14:55:51.286"/>
</kw>
<msg timestamp="20250714 14:55:51.286" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:48.099" endtime="20250714 14:55:51.286"/>
</kw>
<msg timestamp="20250714 14:55:51.286" level="INFO">${actual_acls} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:55:48.098" endtime="20250714 14:55:51.286"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:51.286" endtime="20250714 14:55:51.287"/>
</kw>
<status status="PASS" starttime="20250714 14:55:48.098" endtime="20250714 14:55:51.287"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket setacl --acl user:user1:rw ${source}/bucket1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:51.290" level="INFO">Running command 'ozone sh bucket setacl --acl user:user1:rw 73899-source/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:54.133" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:54.133" level="INFO">${output} = ACLs set successfully.</msg>
<status status="PASS" starttime="20250714 14:55:51.288" endtime="20250714 14:55:54.133"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:54.134" level="INFO">ACLs set successfully.</msg>
<status status="PASS" starttime="20250714 14:55:54.134" endtime="20250714 14:55:54.134"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:54.135" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:54.134" endtime="20250714 14:55:54.135"/>
</kw>
<status status="PASS" starttime="20250714 14:55:51.287" endtime="20250714 14:55:54.135"/>
</kw>
<msg timestamp="20250714 14:55:54.135" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:51.287" endtime="20250714 14:55:54.135"/>
</kw>
<status status="PASS" starttime="20250714 14:55:51.287" endtime="20250714 14:55:54.135"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>bucket</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>${EMPTY}</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:54.139" level="INFO">Running command 'ozone sh bucket getacl 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:57.054" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:57.055" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:55:54.137" endtime="20250714 14:55:57.055"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:57.055" level="INFO"/>
<status status="PASS" starttime="20250714 14:55:57.055" endtime="20250714 14:55:57.055"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:57.056" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:57.056" endtime="20250714 14:55:57.056"/>
</kw>
<status status="PASS" starttime="20250714 14:55:54.137" endtime="20250714 14:55:57.056"/>
</kw>
<msg timestamp="20250714 14:55:57.056" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:54.137" endtime="20250714 14:55:57.056"/>
</kw>
<msg timestamp="20250714 14:55:57.056" level="INFO">${actual_acls} = </msg>
<status status="PASS" starttime="20250714 14:55:54.136" endtime="20250714 14:55:57.056"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:57.056" endtime="20250714 14:55:57.057"/>
</kw>
<status status="PASS" starttime="20250714 14:55:54.135" endtime="20250714 14:55:57.057"/>
</kw>
<kw name="Verify Bucket ACL">
<arg>--source</arg>
<arg>${target}/link1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh bucket getacl ${source_option} ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:57.060" level="INFO">Running command 'ozone sh bucket getacl --source 73899-target/link1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:55:59.859" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:55:59.859" level="INFO">${output} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:55:57.058" endtime="20250714 14:55:59.859"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:55:59.860" level="INFO">READ WRITE</msg>
<status status="PASS" starttime="20250714 14:55:59.859" endtime="20250714 14:55:59.860"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:55:59.860" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:55:59.860" endtime="20250714 14:55:59.860"/>
</kw>
<status status="PASS" starttime="20250714 14:55:57.058" endtime="20250714 14:55:59.860"/>
</kw>
<msg timestamp="20250714 14:55:59.860" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:57.058" endtime="20250714 14:55:59.860"/>
</kw>
<msg timestamp="20250714 14:55:59.861" level="INFO">${actual_acls} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:55:57.057" endtime="20250714 14:55:59.861"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:55:59.861" endtime="20250714 14:55:59.861"/>
</kw>
<status status="PASS" starttime="20250714 14:55:57.057" endtime="20250714 14:55:59.861"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket addacl --acl group:group2:r ${source}/bucket1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:55:59.864" level="INFO">Running command 'ozone sh bucket addacl --acl group:group2:r 73899-source/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:02.611" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:02.611" level="INFO">${output} = ACL group:group2:r[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:55:59.862" endtime="20250714 14:56:02.611"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:02.612" level="INFO">ACL group:group2:r[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:02.612" endtime="20250714 14:56:02.612"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:02.613" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:02.612" endtime="20250714 14:56:02.613"/>
</kw>
<status status="PASS" starttime="20250714 14:55:59.862" endtime="20250714 14:56:02.613"/>
</kw>
<msg timestamp="20250714 14:56:02.613" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:55:59.861" endtime="20250714 14:56:02.613"/>
</kw>
<status status="PASS" starttime="20250714 14:55:59.861" endtime="20250714 14:56:02.613"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>bucket</arg>
<arg>${target}/link1</arg>
<arg>GROUP</arg>
<arg>group2</arg>
<arg>${EMPTY}</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:02.618" level="INFO">Running command 'ozone sh bucket getacl 73899-target/link1 | jq -r '.[] | select(.type == "GROUP") | select(.name == "group2") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:05.515" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:05.515" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:56:02.616" endtime="20250714 14:56:05.515"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:05.516" level="INFO"/>
<status status="PASS" starttime="20250714 14:56:05.515" endtime="20250714 14:56:05.516"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:05.516" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:05.516" endtime="20250714 14:56:05.516"/>
</kw>
<status status="PASS" starttime="20250714 14:56:02.616" endtime="20250714 14:56:05.516"/>
</kw>
<msg timestamp="20250714 14:56:05.516" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:02.615" endtime="20250714 14:56:05.517"/>
</kw>
<msg timestamp="20250714 14:56:05.517" level="INFO">${actual_acls} = </msg>
<status status="PASS" starttime="20250714 14:56:02.615" endtime="20250714 14:56:05.517"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:05.517" endtime="20250714 14:56:05.517"/>
</kw>
<status status="PASS" starttime="20250714 14:56:02.614" endtime="20250714 14:56:05.517"/>
</kw>
<kw name="Verify Bucket ACL">
<arg>--source</arg>
<arg>${target}/link1</arg>
<arg>GROUP</arg>
<arg>group2</arg>
<arg>READ</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh bucket getacl ${source_option} ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:05.521" level="INFO">Running command 'ozone sh bucket getacl --source 73899-target/link1 | jq -r '.[] | select(.type == "GROUP") | select(.name == "group2") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:08.587" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:08.587" level="INFO">${output} = READ</msg>
<status status="PASS" starttime="20250714 14:56:05.519" endtime="20250714 14:56:08.587"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:08.588" level="INFO">READ</msg>
<status status="PASS" starttime="20250714 14:56:08.587" endtime="20250714 14:56:08.588"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:08.588" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:08.588" endtime="20250714 14:56:08.588"/>
</kw>
<status status="PASS" starttime="20250714 14:56:05.519" endtime="20250714 14:56:08.589"/>
</kw>
<msg timestamp="20250714 14:56:08.589" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:05.518" endtime="20250714 14:56:08.589"/>
</kw>
<msg timestamp="20250714 14:56:08.589" level="INFO">${actual_acls} = READ</msg>
<status status="PASS" starttime="20250714 14:56:05.518" endtime="20250714 14:56:08.589"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:08.589" endtime="20250714 14:56:08.589"/>
</kw>
<status status="PASS" starttime="20250714 14:56:05.517" endtime="20250714 14:56:08.589"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:55:27.044" endtime="20250714 14:56:08.589"/>
</test>
<test id="s1-s3-s3-t9" name="Source and target key have same ACLs" line="157">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:56:08.590" endtime="20250714 14:56:08.591"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key addacl --acl user:user1:rwxy ${source}/bucket1/key1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:08.594" level="INFO">Running command 'ozone sh key addacl --acl user:user1:rwxy 73899-source/bucket1/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:11.430" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:11.430" level="INFO">${output} = ACL user:user1:rwxy[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:08.591" endtime="20250714 14:56:11.430"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:11.431" level="INFO">ACL user:user1:rwxy[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:11.431" endtime="20250714 14:56:11.431"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:11.432" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:11.431" endtime="20250714 14:56:11.432"/>
</kw>
<status status="PASS" starttime="20250714 14:56:08.591" endtime="20250714 14:56:11.432"/>
</kw>
<msg timestamp="20250714 14:56:11.432" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:08.591" endtime="20250714 14:56:11.432"/>
</kw>
<status status="PASS" starttime="20250714 14:56:08.591" endtime="20250714 14:56:11.432"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${target}/link1/key1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL WRITE_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:11.436" level="INFO">Running command 'ozone sh key getacl 73899-target/link1/key1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:14.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:14.498" level="INFO">${output} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:11.434" endtime="20250714 14:56:14.498"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:14.499" level="INFO">READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:14.499" endtime="20250714 14:56:14.499"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:14.500" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:14.500" endtime="20250714 14:56:14.500"/>
</kw>
<status status="PASS" starttime="20250714 14:56:11.433" endtime="20250714 14:56:14.500"/>
</kw>
<msg timestamp="20250714 14:56:14.500" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:11.433" endtime="20250714 14:56:14.500"/>
</kw>
<msg timestamp="20250714 14:56:14.500" level="INFO">${actual_acls} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:11.433" endtime="20250714 14:56:14.500"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:14.500" endtime="20250714 14:56:14.501"/>
</kw>
<status status="PASS" starttime="20250714 14:56:11.432" endtime="20250714 14:56:14.501"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${source}/bucket1/key1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL WRITE_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:14.505" level="INFO">Running command 'ozone sh key getacl 73899-source/bucket1/key1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:17.475" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:17.475" level="INFO">${output} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:14.503" endtime="20250714 14:56:17.475"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:17.476" level="INFO">READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:17.476" endtime="20250714 14:56:17.476"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:17.477" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:17.476" endtime="20250714 14:56:17.477"/>
</kw>
<status status="PASS" starttime="20250714 14:56:14.502" endtime="20250714 14:56:17.477"/>
</kw>
<msg timestamp="20250714 14:56:17.477" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:14.502" endtime="20250714 14:56:17.477"/>
</kw>
<msg timestamp="20250714 14:56:17.477" level="INFO">${actual_acls} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:14.501" endtime="20250714 14:56:17.477"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:17.477" endtime="20250714 14:56:17.477"/>
</kw>
<status status="PASS" starttime="20250714 14:56:14.501" endtime="20250714 14:56:17.478"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key removeacl --acl user:user1:y ${target}/link1/key1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:17.481" level="INFO">Running command 'ozone sh key removeacl --acl user:user1:y 73899-target/link1/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:20.307" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:20.307" level="INFO">${output} = ACL user:user1:y[ACCESS] removed successfully.</msg>
<status status="PASS" starttime="20250714 14:56:17.479" endtime="20250714 14:56:20.307"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:20.308" level="INFO">ACL user:user1:y[ACCESS] removed successfully.</msg>
<status status="PASS" starttime="20250714 14:56:20.307" endtime="20250714 14:56:20.308"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:20.308" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:20.308" endtime="20250714 14:56:20.308"/>
</kw>
<status status="PASS" starttime="20250714 14:56:17.478" endtime="20250714 14:56:20.309"/>
</kw>
<msg timestamp="20250714 14:56:20.309" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:17.478" endtime="20250714 14:56:20.309"/>
</kw>
<status status="PASS" starttime="20250714 14:56:17.478" endtime="20250714 14:56:20.309"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${target}/link1/key1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:20.312" level="INFO">Running command 'ozone sh key getacl 73899-target/link1/key1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:23.336" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:23.336" level="INFO">${output} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:20.310" endtime="20250714 14:56:23.336"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:23.337" level="INFO">READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:23.337" endtime="20250714 14:56:23.337"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:23.338" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:23.337" endtime="20250714 14:56:23.338"/>
</kw>
<status status="PASS" starttime="20250714 14:56:20.310" endtime="20250714 14:56:23.338"/>
</kw>
<msg timestamp="20250714 14:56:23.338" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:20.310" endtime="20250714 14:56:23.338"/>
</kw>
<msg timestamp="20250714 14:56:23.338" level="INFO">${actual_acls} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:20.309" endtime="20250714 14:56:23.338"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:23.338" endtime="20250714 14:56:23.339"/>
</kw>
<status status="PASS" starttime="20250714 14:56:20.309" endtime="20250714 14:56:23.339"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${source}/bucket1/key1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:23.342" level="INFO">Running command 'ozone sh key getacl 73899-source/bucket1/key1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:26.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:26.287" level="INFO">${output} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:23.340" endtime="20250714 14:56:26.287"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:26.288" level="INFO">READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:26.287" endtime="20250714 14:56:26.288"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:26.288" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:26.288" endtime="20250714 14:56:26.288"/>
</kw>
<status status="PASS" starttime="20250714 14:56:23.340" endtime="20250714 14:56:26.289"/>
</kw>
<msg timestamp="20250714 14:56:26.289" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:23.340" endtime="20250714 14:56:26.289"/>
</kw>
<msg timestamp="20250714 14:56:26.289" level="INFO">${actual_acls} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:23.339" endtime="20250714 14:56:26.289"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:26.289" endtime="20250714 14:56:26.289"/>
</kw>
<status status="PASS" starttime="20250714 14:56:23.339" endtime="20250714 14:56:26.289"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key setacl --acl user:user1:rw ${source}/bucket1/key1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:26.293" level="INFO">Running command 'ozone sh key setacl --acl user:user1:rw 73899-source/bucket1/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:29.131" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:29.131" level="INFO">${output} = ACLs set successfully.</msg>
<status status="PASS" starttime="20250714 14:56:26.291" endtime="20250714 14:56:29.131"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:29.132" level="INFO">ACLs set successfully.</msg>
<status status="PASS" starttime="20250714 14:56:29.131" endtime="20250714 14:56:29.132"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:29.132" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:29.132" endtime="20250714 14:56:29.133"/>
</kw>
<status status="PASS" starttime="20250714 14:56:26.290" endtime="20250714 14:56:29.133"/>
</kw>
<msg timestamp="20250714 14:56:29.133" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:26.290" endtime="20250714 14:56:29.133"/>
</kw>
<status status="PASS" starttime="20250714 14:56:26.289" endtime="20250714 14:56:29.133"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${target}/link1/key1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:29.136" level="INFO">Running command 'ozone sh key getacl 73899-target/link1/key1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:32.096" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:32.096" level="INFO">${output} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:56:29.134" endtime="20250714 14:56:32.096"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:32.097" level="INFO">READ WRITE</msg>
<status status="PASS" starttime="20250714 14:56:32.097" endtime="20250714 14:56:32.097"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:32.098" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:32.097" endtime="20250714 14:56:32.098"/>
</kw>
<status status="PASS" starttime="20250714 14:56:29.134" endtime="20250714 14:56:32.098"/>
</kw>
<msg timestamp="20250714 14:56:32.098" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:29.134" endtime="20250714 14:56:32.098"/>
</kw>
<msg timestamp="20250714 14:56:32.098" level="INFO">${actual_acls} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:56:29.133" endtime="20250714 14:56:32.098"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:32.098" endtime="20250714 14:56:32.099"/>
</kw>
<status status="PASS" starttime="20250714 14:56:29.133" endtime="20250714 14:56:32.099"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${source}/bucket1/key1</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:32.103" level="INFO">Running command 'ozone sh key getacl 73899-source/bucket1/key1 | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:35.031" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:35.031" level="INFO">${output} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:56:32.100" endtime="20250714 14:56:35.031"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:35.032" level="INFO">READ WRITE</msg>
<status status="PASS" starttime="20250714 14:56:35.031" endtime="20250714 14:56:35.032"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:35.032" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:35.032" endtime="20250714 14:56:35.032"/>
</kw>
<status status="PASS" starttime="20250714 14:56:32.100" endtime="20250714 14:56:35.032"/>
</kw>
<msg timestamp="20250714 14:56:35.032" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:32.100" endtime="20250714 14:56:35.033"/>
</kw>
<msg timestamp="20250714 14:56:35.033" level="INFO">${actual_acls} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:56:32.099" endtime="20250714 14:56:35.033"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:35.033" endtime="20250714 14:56:35.033"/>
</kw>
<status status="PASS" starttime="20250714 14:56:32.099" endtime="20250714 14:56:35.033"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key addacl --acl group:group2:r ${source}/bucket1/key1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:35.036" level="INFO">Running command 'ozone sh key addacl --acl group:group2:r 73899-source/bucket1/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:37.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:37.678" level="INFO">${output} = ACL group:group2:r[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:35.034" endtime="20250714 14:56:37.678"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:37.679" level="INFO">ACL group:group2:r[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:37.679" endtime="20250714 14:56:37.679"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:37.680" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:37.680" endtime="20250714 14:56:37.680"/>
</kw>
<status status="PASS" starttime="20250714 14:56:35.034" endtime="20250714 14:56:37.680"/>
</kw>
<msg timestamp="20250714 14:56:37.680" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:35.034" endtime="20250714 14:56:37.680"/>
</kw>
<status status="PASS" starttime="20250714 14:56:35.033" endtime="20250714 14:56:37.680"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${target}/link1/key1</arg>
<arg>GROUP</arg>
<arg>group2</arg>
<arg>READ</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:37.684" level="INFO">Running command 'ozone sh key getacl 73899-target/link1/key1 | jq -r '.[] | select(.type == "GROUP") | select(.name == "group2") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:40.588" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:40.588" level="INFO">${output} = READ</msg>
<status status="PASS" starttime="20250714 14:56:37.682" endtime="20250714 14:56:40.588"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:40.589" level="INFO">READ</msg>
<status status="PASS" starttime="20250714 14:56:40.588" endtime="20250714 14:56:40.589"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:40.589" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:40.589" endtime="20250714 14:56:40.589"/>
</kw>
<status status="PASS" starttime="20250714 14:56:37.682" endtime="20250714 14:56:40.589"/>
</kw>
<msg timestamp="20250714 14:56:40.589" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:37.681" endtime="20250714 14:56:40.589"/>
</kw>
<msg timestamp="20250714 14:56:40.590" level="INFO">${actual_acls} = READ</msg>
<status status="PASS" starttime="20250714 14:56:37.681" endtime="20250714 14:56:40.590"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:40.590" endtime="20250714 14:56:40.590"/>
</kw>
<status status="PASS" starttime="20250714 14:56:37.680" endtime="20250714 14:56:40.590"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>key</arg>
<arg>${source}/bucket1/key1</arg>
<arg>GROUP</arg>
<arg>group2</arg>
<arg>READ</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:40.594" level="INFO">Running command 'ozone sh key getacl 73899-source/bucket1/key1 | jq -r '.[] | select(.type == "GROUP") | select(.name == "group2") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:43.477" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:43.477" level="INFO">${output} = READ</msg>
<status status="PASS" starttime="20250714 14:56:40.592" endtime="20250714 14:56:43.477"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:43.478" level="INFO">READ</msg>
<status status="PASS" starttime="20250714 14:56:43.477" endtime="20250714 14:56:43.478"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:43.478" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:43.478" endtime="20250714 14:56:43.478"/>
</kw>
<status status="PASS" starttime="20250714 14:56:40.591" endtime="20250714 14:56:43.479"/>
</kw>
<msg timestamp="20250714 14:56:43.479" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:40.591" endtime="20250714 14:56:43.479"/>
</kw>
<msg timestamp="20250714 14:56:43.479" level="INFO">${actual_acls} = READ</msg>
<status status="PASS" starttime="20250714 14:56:40.591" endtime="20250714 14:56:43.479"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:43.479" endtime="20250714 14:56:43.479"/>
</kw>
<status status="PASS" starttime="20250714 14:56:40.590" endtime="20250714 14:56:43.479"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:56:08.590" endtime="20250714 14:56:43.479"/>
</test>
<test id="s1-s3-s3-t10" name="Source and target prefix have same ACLs" line="172">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:56:43.480" endtime="20250714 14:56:43.481"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh prefix addacl --acl user:user1:rwxy ${source}/bucket1/prefix1/</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:43.484" level="INFO">Running command 'ozone sh prefix addacl --acl user:user1:rwxy 73899-source/bucket1/prefix1/ 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:46.285" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:46.285" level="INFO">${output} = ACL user:user1:rwxy[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:43.481" endtime="20250714 14:56:46.285"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:46.286" level="INFO">ACL user:user1:rwxy[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:56:46.285" endtime="20250714 14:56:46.286"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:46.286" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:46.286" endtime="20250714 14:56:46.286"/>
</kw>
<status status="PASS" starttime="20250714 14:56:43.481" endtime="20250714 14:56:46.286"/>
</kw>
<msg timestamp="20250714 14:56:46.286" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:43.481" endtime="20250714 14:56:46.286"/>
</kw>
<status status="PASS" starttime="20250714 14:56:43.481" endtime="20250714 14:56:46.286"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${target}/link1/prefix1/</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL WRITE_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:46.290" level="INFO">Running command 'ozone sh prefix getacl 73899-target/link1/prefix1/ | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:49.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:49.219" level="INFO">${output} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:46.288" endtime="20250714 14:56:49.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:49.220" level="INFO">READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:49.219" endtime="20250714 14:56:49.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:49.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:49.220" endtime="20250714 14:56:49.220"/>
</kw>
<status status="PASS" starttime="20250714 14:56:46.288" endtime="20250714 14:56:49.220"/>
</kw>
<msg timestamp="20250714 14:56:49.220" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:46.288" endtime="20250714 14:56:49.220"/>
</kw>
<msg timestamp="20250714 14:56:49.220" level="INFO">${actual_acls} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:46.287" endtime="20250714 14:56:49.220"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:49.221" endtime="20250714 14:56:49.221"/>
</kw>
<status status="PASS" starttime="20250714 14:56:46.287" endtime="20250714 14:56:49.221"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${source}/bucket1/prefix1/</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL WRITE_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:49.224" level="INFO">Running command 'ozone sh prefix getacl 73899-source/bucket1/prefix1/ | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:52.137" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:52.137" level="INFO">${output} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:49.222" endtime="20250714 14:56:52.137"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:52.138" level="INFO">READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:52.137" endtime="20250714 14:56:52.138"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:52.138" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:52.138" endtime="20250714 14:56:52.138"/>
</kw>
<status status="PASS" starttime="20250714 14:56:49.222" endtime="20250714 14:56:52.139"/>
</kw>
<msg timestamp="20250714 14:56:52.139" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:49.222" endtime="20250714 14:56:52.139"/>
</kw>
<msg timestamp="20250714 14:56:52.139" level="INFO">${actual_acls} = READ WRITE READ_ACL WRITE_ACL</msg>
<status status="PASS" starttime="20250714 14:56:49.221" endtime="20250714 14:56:52.139"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:52.139" endtime="20250714 14:56:52.139"/>
</kw>
<status status="PASS" starttime="20250714 14:56:49.221" endtime="20250714 14:56:52.139"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh prefix removeacl --acl user:user1:y ${target}/link1/prefix1/</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:52.142" level="INFO">Running command 'ozone sh prefix removeacl --acl user:user1:y 73899-target/link1/prefix1/ 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:54.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:54.897" level="INFO">${output} = ACL user:user1:y[ACCESS] removed successfully.</msg>
<status status="PASS" starttime="20250714 14:56:52.140" endtime="20250714 14:56:54.897"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:54.898" level="INFO">ACL user:user1:y[ACCESS] removed successfully.</msg>
<status status="PASS" starttime="20250714 14:56:54.898" endtime="20250714 14:56:54.898"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:54.899" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:54.899" endtime="20250714 14:56:54.899"/>
</kw>
<status status="PASS" starttime="20250714 14:56:52.140" endtime="20250714 14:56:54.899"/>
</kw>
<msg timestamp="20250714 14:56:54.899" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:52.140" endtime="20250714 14:56:54.899"/>
</kw>
<status status="PASS" starttime="20250714 14:56:52.139" endtime="20250714 14:56:54.899"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${target}/link1/prefix1/</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:54.903" level="INFO">Running command 'ozone sh prefix getacl 73899-target/link1/prefix1/ | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:56:57.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:56:57.937" level="INFO">${output} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:54.901" endtime="20250714 14:56:57.937"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:56:57.937" level="INFO">READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:57.937" endtime="20250714 14:56:57.938"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:56:57.938" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:56:57.938" endtime="20250714 14:56:57.938"/>
</kw>
<status status="PASS" starttime="20250714 14:56:54.901" endtime="20250714 14:56:57.938"/>
</kw>
<msg timestamp="20250714 14:56:57.938" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:54.900" endtime="20250714 14:56:57.938"/>
</kw>
<msg timestamp="20250714 14:56:57.938" level="INFO">${actual_acls} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:54.900" endtime="20250714 14:56:57.939"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:56:57.939" endtime="20250714 14:56:57.939"/>
</kw>
<status status="PASS" starttime="20250714 14:56:54.899" endtime="20250714 14:56:57.939"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${source}/bucket1/prefix1/</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE READ_ACL</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:56:57.944" level="INFO">Running command 'ozone sh prefix getacl 73899-source/bucket1/prefix1/ | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:00.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:00.863" level="INFO">${output} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:57.941" endtime="20250714 14:57:00.863"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:00.864" level="INFO">READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:57:00.863" endtime="20250714 14:57:00.864"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:00.864" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:00.864" endtime="20250714 14:57:00.864"/>
</kw>
<status status="PASS" starttime="20250714 14:56:57.941" endtime="20250714 14:57:00.864"/>
</kw>
<msg timestamp="20250714 14:57:00.864" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:56:57.940" endtime="20250714 14:57:00.865"/>
</kw>
<msg timestamp="20250714 14:57:00.865" level="INFO">${actual_acls} = READ WRITE READ_ACL</msg>
<status status="PASS" starttime="20250714 14:56:57.940" endtime="20250714 14:57:00.865"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:57:00.865" endtime="20250714 14:57:00.865"/>
</kw>
<status status="PASS" starttime="20250714 14:56:57.939" endtime="20250714 14:57:00.865"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh prefix setacl --acl user:user1:rw ${source}/bucket1/prefix1/</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:00.868" level="INFO">Running command 'ozone sh prefix setacl --acl user:user1:rw 73899-source/bucket1/prefix1/ 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:03.623" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:03.623" level="INFO">${output} = ACLs set successfully.</msg>
<status status="PASS" starttime="20250714 14:57:00.866" endtime="20250714 14:57:03.623"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:03.624" level="INFO">ACLs set successfully.</msg>
<status status="PASS" starttime="20250714 14:57:03.624" endtime="20250714 14:57:03.624"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:03.624" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:03.624" endtime="20250714 14:57:03.625"/>
</kw>
<status status="PASS" starttime="20250714 14:57:00.866" endtime="20250714 14:57:03.625"/>
</kw>
<msg timestamp="20250714 14:57:03.625" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:00.866" endtime="20250714 14:57:03.625"/>
</kw>
<status status="PASS" starttime="20250714 14:57:00.865" endtime="20250714 14:57:03.625"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${target}/link1/prefix1/</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:03.629" level="INFO">Running command 'ozone sh prefix getacl 73899-target/link1/prefix1/ | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:06.717" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:06.717" level="INFO">${output} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:57:03.626" endtime="20250714 14:57:06.717"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:06.718" level="INFO">READ WRITE</msg>
<status status="PASS" starttime="20250714 14:57:06.718" endtime="20250714 14:57:06.718"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:06.719" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:06.718" endtime="20250714 14:57:06.719"/>
</kw>
<status status="PASS" starttime="20250714 14:57:03.626" endtime="20250714 14:57:06.719"/>
</kw>
<msg timestamp="20250714 14:57:06.719" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:03.626" endtime="20250714 14:57:06.719"/>
</kw>
<msg timestamp="20250714 14:57:06.719" level="INFO">${actual_acls} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:57:03.626" endtime="20250714 14:57:06.719"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:57:06.719" endtime="20250714 14:57:06.719"/>
</kw>
<status status="PASS" starttime="20250714 14:57:03.625" endtime="20250714 14:57:06.719"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${source}/bucket1/prefix1/</arg>
<arg>USER</arg>
<arg>user1</arg>
<arg>READ WRITE</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:06.723" level="INFO">Running command 'ozone sh prefix getacl 73899-source/bucket1/prefix1/ | jq -r '.[] | select(.type == "USER") | select(.name == "user1") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:09.577" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:09.577" level="INFO">${output} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:57:06.721" endtime="20250714 14:57:09.577"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:09.578" level="INFO">READ WRITE</msg>
<status status="PASS" starttime="20250714 14:57:09.577" endtime="20250714 14:57:09.578"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:09.578" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:09.578" endtime="20250714 14:57:09.578"/>
</kw>
<status status="PASS" starttime="20250714 14:57:06.721" endtime="20250714 14:57:09.578"/>
</kw>
<msg timestamp="20250714 14:57:09.578" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:06.721" endtime="20250714 14:57:09.578"/>
</kw>
<msg timestamp="20250714 14:57:09.579" level="INFO">${actual_acls} = READ WRITE</msg>
<status status="PASS" starttime="20250714 14:57:06.720" endtime="20250714 14:57:09.579"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:57:09.579" endtime="20250714 14:57:09.579"/>
</kw>
<status status="PASS" starttime="20250714 14:57:06.720" endtime="20250714 14:57:09.579"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh prefix addacl --acl group:group2:r ${source}/bucket1/prefix1/</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:09.582" level="INFO">Running command 'ozone sh prefix addacl --acl group:group2:r 73899-source/bucket1/prefix1/ 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:12.354" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:12.354" level="INFO">${output} = ACL group:group2:r[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:57:09.580" endtime="20250714 14:57:12.354"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:12.355" level="INFO">ACL group:group2:r[ACCESS] added successfully.</msg>
<status status="PASS" starttime="20250714 14:57:12.355" endtime="20250714 14:57:12.355"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:12.356" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:12.355" endtime="20250714 14:57:12.356"/>
</kw>
<status status="PASS" starttime="20250714 14:57:09.580" endtime="20250714 14:57:12.356"/>
</kw>
<msg timestamp="20250714 14:57:12.356" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:09.579" endtime="20250714 14:57:12.356"/>
</kw>
<status status="PASS" starttime="20250714 14:57:09.579" endtime="20250714 14:57:12.356"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${target}/link1/prefix1/</arg>
<arg>GROUP</arg>
<arg>group2</arg>
<arg>READ</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:12.360" level="INFO">Running command 'ozone sh prefix getacl 73899-target/link1/prefix1/ | jq -r '.[] | select(.type == "GROUP") | select(.name == "group2") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:15.362" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:15.362" level="INFO">${output} = READ</msg>
<status status="PASS" starttime="20250714 14:57:12.358" endtime="20250714 14:57:15.362"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:15.363" level="INFO">READ</msg>
<status status="PASS" starttime="20250714 14:57:15.363" endtime="20250714 14:57:15.363"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:15.364" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:15.363" endtime="20250714 14:57:15.364"/>
</kw>
<status status="PASS" starttime="20250714 14:57:12.357" endtime="20250714 14:57:15.364"/>
</kw>
<msg timestamp="20250714 14:57:15.364" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:12.357" endtime="20250714 14:57:15.364"/>
</kw>
<msg timestamp="20250714 14:57:15.364" level="INFO">${actual_acls} = READ</msg>
<status status="PASS" starttime="20250714 14:57:12.357" endtime="20250714 14:57:15.364"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:57:15.364" endtime="20250714 14:57:15.364"/>
</kw>
<status status="PASS" starttime="20250714 14:57:12.356" endtime="20250714 14:57:15.364"/>
</kw>
<kw name="Verify ACL" library="shell">
<arg>prefix</arg>
<arg>${source}/bucket1/prefix1/</arg>
<arg>GROUP</arg>
<arg>group2</arg>
<arg>READ</arg>
<kw name="Execute" library="os">
<var>${actual_acls}</var>
<arg>ozone sh ${object_type} getacl ${object} | jq -r '.[] | select(.type == "${type}") | select(.name == "${name}") | .aclList[]' | xargs</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:15.368" level="INFO">Running command 'ozone sh prefix getacl 73899-source/bucket1/prefix1/ | jq -r '.[] | select(.type == "GROUP") | select(.name == "group2") | .aclList[]' | xargs 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:18.383" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:18.383" level="INFO">${output} = READ</msg>
<status status="PASS" starttime="20250714 14:57:15.366" endtime="20250714 14:57:18.383"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:18.384" level="INFO">READ</msg>
<status status="PASS" starttime="20250714 14:57:18.383" endtime="20250714 14:57:18.384"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:18.384" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:18.384" endtime="20250714 14:57:18.384"/>
</kw>
<status status="PASS" starttime="20250714 14:57:15.366" endtime="20250714 14:57:18.385"/>
</kw>
<msg timestamp="20250714 14:57:18.385" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:15.365" endtime="20250714 14:57:18.385"/>
</kw>
<msg timestamp="20250714 14:57:18.385" level="INFO">${actual_acls} = READ</msg>
<status status="PASS" starttime="20250714 14:57:15.365" endtime="20250714 14:57:18.385"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acls}</arg>
<arg>${actual_acls}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250714 14:57:18.385" endtime="20250714 14:57:18.385"/>
</kw>
<status status="PASS" starttime="20250714 14:57:15.365" endtime="20250714 14:57:18.385"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:56:43.480" endtime="20250714 14:57:18.386"/>
</test>
<test id="s1-s3-s3-t11" name="Buckets and links share namespace" line="187">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:18.386" endtime="20250714 14:57:18.387"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket link ${source}/bucket2 ${target}/link2</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:18.390" level="INFO">Running command 'ozone sh bucket link 73899-source/bucket2 73899-target/link2 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:21.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:21.257" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:57:18.388" endtime="20250714 14:57:21.257"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:21.258" level="INFO"/>
<status status="PASS" starttime="20250714 14:57:21.257" endtime="20250714 14:57:21.258"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:21.258" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:21.258" endtime="20250714 14:57:21.258"/>
</kw>
<status status="PASS" starttime="20250714 14:57:18.387" endtime="20250714 14:57:21.258"/>
</kw>
<msg timestamp="20250714 14:57:21.258" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:18.387" endtime="20250714 14:57:21.258"/>
</kw>
<status status="PASS" starttime="20250714 14:57:18.387" endtime="20250714 14:57:21.258"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${target}/link2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:21.261" level="INFO">Running command 'ozone sh bucket create 73899-target/link2 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:24.150" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:57:24.150" level="INFO">${output} = BUCKET_ALREADY_EXISTS Bucket already exist</msg>
<status status="PASS" starttime="20250714 14:57:21.259" endtime="20250714 14:57:24.150"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:24.151" level="INFO">BUCKET_ALREADY_EXISTS Bucket already exist</msg>
<status status="PASS" starttime="20250714 14:57:24.150" endtime="20250714 14:57:24.151"/>
</kw>
<msg timestamp="20250714 14:57:24.151" level="INFO">${result} = BUCKET_ALREADY_EXISTS Bucket already exist</msg>
<status status="PASS" starttime="20250714 14:57:21.259" endtime="20250714 14:57:24.151"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>BUCKET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:57:24.151" endtime="20250714 14:57:24.151"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${target}/bucket3</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:24.155" level="INFO">Running command 'ozone sh bucket create 73899-target/bucket3 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:26.941" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:26.941" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250714 14:57:24.152" endtime="20250714 14:57:26.941"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:26.942" level="INFO"/>
<status status="PASS" starttime="20250714 14:57:26.941" endtime="20250714 14:57:26.942"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:26.942" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:26.942" endtime="20250714 14:57:26.942"/>
</kw>
<status status="PASS" starttime="20250714 14:57:24.152" endtime="20250714 14:57:26.943"/>
</kw>
<msg timestamp="20250714 14:57:26.943" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:24.152" endtime="20250714 14:57:26.943"/>
</kw>
<status status="PASS" starttime="20250714 14:57:24.151" endtime="20250714 14:57:26.943"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh bucket link ${source}/bucket1 ${target}/bucket3</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:26.946" level="INFO">Running command 'ozone sh bucket link 73899-source/bucket1 73899-target/bucket3 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:29.729" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:57:29.729" level="INFO">${output} = BUCKET_ALREADY_EXISTS Bucket already exist</msg>
<status status="PASS" starttime="20250714 14:57:26.943" endtime="20250714 14:57:29.729"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:29.730" level="INFO">BUCKET_ALREADY_EXISTS Bucket already exist</msg>
<status status="PASS" starttime="20250714 14:57:29.729" endtime="20250714 14:57:29.730"/>
</kw>
<msg timestamp="20250714 14:57:29.730" level="INFO">${result} = BUCKET_ALREADY_EXISTS Bucket already exist</msg>
<status status="PASS" starttime="20250714 14:57:26.943" endtime="20250714 14:57:29.730"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>BUCKET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:57:29.730" endtime="20250714 14:57:29.731"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:57:18.386" endtime="20250714 14:57:29.731"/>
</test>
<test id="s1-s3-s3-t12" name="Can follow link with read access" line="196">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.732" endtime="20250714 14:57:29.732"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Can follow link with read access</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.732" endtime="20250714 14:57:29.732"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:57:29.731" endtime="20250714 14:57:29.732"/>
</test>
<test id="s1-s3-s3-t13" name="Cannot follow link without read access" line="199">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.733" endtime="20250714 14:57:29.733"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Cannot follow link without read access</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.733" endtime="20250714 14:57:29.733"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:57:29.733" endtime="20250714 14:57:29.734"/>
</test>
<test id="s1-s3-s3-t14" name="ACL verified on source and target bucket" line="202">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.734" endtime="20250714 14:57:29.734"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>ACL verified on source and target bucket</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.735" endtime="20250714 14:57:29.735"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:57:29.734" endtime="20250714 14:57:29.735"/>
</test>
<test id="s1-s3-s3-t15" name="Loop in link chain is detected" line="205">
<kw name="Create link loop" type="SETUP">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:29.736" endtime="20250714 14:57:29.736"/>
</kw>
<kw name="Ozone Shell Batch" library="shell">
<arg>bucket link ${target}/loop1 ${target}/loop2</arg>
<arg>bucket link ${target}/loop2 ${target}/loop3</arg>
<arg>bucket link ${target}/loop3 ${target}/loop1</arg>
<kw name="Catenate" library="BuiltIn">
<var>${cmd}</var>
<arg>SEPARATOR=' --execute '</arg>
<arg>@{commands}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20250714 14:57:29.737" level="INFO">${cmd} = bucket link 73899-target/loop1 73899-target/loop2' --execute 'bucket link 73899-target/loop2 73899-target/loop3' --execute 'bucket link 73899-target/loop3 73899-target/loop1</msg>
<status status="PASS" starttime="20250714 14:57:29.736" endtime="20250714 14:57:29.737"/>
</kw>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:29.739" level="INFO">Running command 'ozone sh --execute 'bucket link 73899-target/loop1 73899-target/loop2' --execute 'bucket link 73899-target/loop2 73899-target/loop3' --execute 'bucket link 73899-target/loop3 73899-target/loop1' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:32.748" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:32.748" level="INFO">${output} = bucket link 73899-target/loop1 73899-target/loop2
bucket link 73899-target/loop2 73899-target/loop3
bucket link 73899-target/loop3 73899-target/loop1</msg>
<status status="PASS" starttime="20250714 14:57:29.737" endtime="20250714 14:57:32.748"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:32.749" level="INFO">bucket link 73899-target/loop1 73899-target/loop2
bucket link 73899-target/loop2 73899-target/loop3
bucket link 73899-target/loop3 73899-target/loop1</msg>
<status status="PASS" starttime="20250714 14:57:32.749" endtime="20250714 14:57:32.749"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:32.749" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:32.749" endtime="20250714 14:57:32.750"/>
</kw>
<status status="PASS" starttime="20250714 14:57:29.737" endtime="20250714 14:57:32.750"/>
</kw>
<msg timestamp="20250714 14:57:32.750" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:29.737" endtime="20250714 14:57:32.750"/>
</kw>
<status status="PASS" starttime="20250714 14:57:29.736" endtime="20250714 14:57:32.750"/>
</kw>
<status status="PASS" starttime="20250714 14:57:29.735" endtime="20250714 14:57:32.750"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh key list ${target}/loop2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:32.753" level="INFO">Running command 'ozone sh key list 73899-target/loop2 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:35.536" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 14:57:35.536" level="INFO">${output} = DETECTED_LOOP_IN_BUCKET_LINKS Detected loop in bucket links</msg>
<status status="PASS" starttime="20250714 14:57:32.750" endtime="20250714 14:57:35.536"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:35.537" level="INFO">DETECTED_LOOP_IN_BUCKET_LINKS Detected loop in bucket links</msg>
<status status="PASS" starttime="20250714 14:57:35.537" endtime="20250714 14:57:35.537"/>
</kw>
<msg timestamp="20250714 14:57:35.538" level="INFO">${result} = DETECTED_LOOP_IN_BUCKET_LINKS Detected loop in bucket links</msg>
<status status="PASS" starttime="20250714 14:57:32.750" endtime="20250714 14:57:35.538"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>DETECTED_LOOP</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250714 14:57:35.538" endtime="20250714 14:57:35.538"/>
</kw>
<kw name="Delete link loop" type="TEARDOWN">
<kw name="Ozone Shell Batch" library="shell">
<arg>bucket delete ${target}/loop1</arg>
<arg>bucket delete ${target}/loop2</arg>
<arg>bucket delete ${target}/loop3</arg>
<kw name="Catenate" library="BuiltIn">
<var>${cmd}</var>
<arg>SEPARATOR=' --execute '</arg>
<arg>@{commands}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20250714 14:57:35.539" level="INFO">${cmd} = bucket delete 73899-target/loop1' --execute 'bucket delete 73899-target/loop2' --execute 'bucket delete 73899-target/loop3</msg>
<status status="PASS" starttime="20250714 14:57:35.539" endtime="20250714 14:57:35.539"/>
</kw>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:35.542" level="INFO">Running command 'ozone sh --execute 'bucket delete 73899-target/loop1' --execute 'bucket delete 73899-target/loop2' --execute 'bucket delete 73899-target/loop3' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 14:57:38.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20250714 14:57:38.498" level="INFO">${output} = bucket delete 73899-target/loop1
Bucket loop1 is deleted
bucket delete 73899-target/loop2
Bucket loop2 is deleted
bucket delete 73899-target/loop3
Bucket loop3 is deleted</msg>
<status status="PASS" starttime="20250714 14:57:35.540" endtime="20250714 14:57:38.498"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 14:57:38.499" level="INFO">bucket delete 73899-target/loop1
Bucket loop1 is deleted
bucket delete 73899-target/loop2
Bucket loop2 is deleted
bucket delete 73899-target/loop3
Bucket loop3 is deleted</msg>
<status status="PASS" starttime="20250714 14:57:38.498" endtime="20250714 14:57:38.499"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 14:57:38.499" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 14:57:38.499" endtime="20250714 14:57:38.499"/>
</kw>
<status status="PASS" starttime="20250714 14:57:35.540" endtime="20250714 14:57:38.500"/>
</kw>
<msg timestamp="20250714 14:57:38.500" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 14:57:35.539" endtime="20250714 14:57:38.500"/>
</kw>
<status status="PASS" starttime="20250714 14:57:35.539" endtime="20250714 14:57:38.500"/>
</kw>
<status status="PASS" starttime="20250714 14:57:35.538" endtime="20250714 14:57:38.500"/>
</kw>
<timeout value="4 minutes"/>
<status status="PASS" starttime="20250714 14:57:29.735" endtime="20250714 14:57:38.500"/>
</test>
<test id="s1-s3-s3-t16" name="Multiple links to same bucket are allowed" line="211">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 14:57:38.501" endtime="20250714 14:57:38.501"/>
</kw>
<kw name="Ozone Shell Batch" library="shell">
<arg>bucket link ${source}/bucket1 ${target}/link3</arg>
<arg>key put ${target}/link3/key3 /etc/group</arg>
<kw name="Catenate" library="BuiltIn">
<var>${cmd}</var>
<arg>SEPARATOR=' --execute '</arg>
<arg>@{commands}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20250714 14:57:38.502" level="INFO">${cmd} = bucket link 73899-source/bucket1 73899-target/link3' --execute 'key put 73899-target/link3/key3 /etc/group</msg>
<status status="PASS" starttime="20250714 14:57:38.502" endtime="20250714 14:57:38.502"/>
</kw>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 14:57:38.505" level="INFO">Running command 'ozone sh --execute 'bucket link 73899-source/bucket1 73899-target/link3' --execute 'key put 73899-target/link3/key3 /etc/group' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:01:38.501" level="FAIL">Test timeout 4 minutes exceeded.</msg>
<status status="FAIL" starttime="20250714 14:57:38.503" endtime="20250714 15:01:38.501"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20250714 15:01:38.502" endtime="20250714 15:01:38.502"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20250714 15:01:38.502" endtime="20250714 15:01:38.502"/>
</kw>
<status status="FAIL" starttime="20250714 14:57:38.502" endtime="20250714 15:01:38.502"/>
</kw>
<msg timestamp="20250714 15:01:38.502" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 14:57:38.502" endtime="20250714 15:01:38.502"/>
</kw>
<status status="FAIL" starttime="20250714 14:57:38.501" endtime="20250714 15:01:38.502"/>
</kw>
<kw name="Key Should Match Local File" library="shell">
<arg>${target}/link1/key3</arg>
<arg>/etc/group</arg>
<status status="NOT RUN" starttime="20250714 15:01:38.503" endtime="20250714 15:01:38.503"/>
</kw>
<timeout value="4 minutes"/>
<status status="FAIL" starttime="20250714 14:57:38.500" endtime="20250714 15:01:38.503">Test timeout 4 minutes exceeded.</status>
</test>
<test id="s1-s3-s3-t17" name="Source bucket not affected by deleting link" line="216">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:01:38.504" endtime="20250714 15:01:38.504"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete ${target}/link1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:01:38.508" level="INFO">Running command 'ozone sh bucket delete 73899-target/link1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:05:38.504" level="FAIL">Test timeout 4 minutes exceeded.</msg>
<status status="FAIL" starttime="20250714 15:01:38.506" endtime="20250714 15:05:38.505"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20250714 15:05:38.505" endtime="20250714 15:05:38.505"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20250714 15:05:38.505" endtime="20250714 15:05:38.505"/>
</kw>
<status status="FAIL" starttime="20250714 15:01:38.505" endtime="20250714 15:05:38.505"/>
</kw>
<msg timestamp="20250714 15:05:38.505" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:01:38.505" endtime="20250714 15:05:38.505"/>
</kw>
<status status="FAIL" starttime="20250714 15:01:38.505" endtime="20250714 15:05:38.506"/>
</kw>
<kw name="Execute" library="os">
<var>${bucket_list}</var>
<arg>ozone sh bucket list ${target}</arg>
<status status="NOT RUN" starttime="20250714 15:05:38.506" endtime="20250714 15:05:38.506"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${bucket_list}</arg>
<arg>link1</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:05:38.506" endtime="20250714 15:05:38.506"/>
</kw>
<kw name="Execute" library="os">
<var>${source_list}</var>
<arg>ozone sh key list ${source}/bucket1 | jq -r '.[].name'</arg>
<status status="NOT RUN" starttime="20250714 15:05:38.506" endtime="20250714 15:05:38.506"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${source_list}</arg>
<arg>key1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:05:38.506" endtime="20250714 15:05:38.506"/>
</kw>
<timeout value="4 minutes"/>
<status status="FAIL" starttime="20250714 15:01:38.503" endtime="20250714 15:05:38.506">Test timeout 4 minutes exceeded.</status>
</test>
<test id="s1-s3-s3-t18" name="Setting bucket property on link not allowed" line="223">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:05:38.507" endtime="20250714 15:05:38.508"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket link ${source}/bucket1 ${target}/link4</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:05:38.511" level="INFO">Running command 'ozone sh bucket link 73899-source/bucket1 73899-target/link4 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:09:38.507" level="FAIL">Test timeout 4 minutes exceeded.</msg>
<status status="FAIL" starttime="20250714 15:05:38.509" endtime="20250714 15:09:38.507"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20250714 15:09:38.508" endtime="20250714 15:09:38.508"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20250714 15:09:38.508" endtime="20250714 15:09:38.508"/>
</kw>
<status status="FAIL" starttime="20250714 15:05:38.508" endtime="20250714 15:09:38.508"/>
</kw>
<msg timestamp="20250714 15:09:38.508" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:05:38.508" endtime="20250714 15:09:38.508"/>
</kw>
<status status="FAIL" starttime="20250714 15:05:38.508" endtime="20250714 15:09:38.508"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh bucket setquota ${target}/link4 --quota 1GB</arg>
<status status="NOT RUN" starttime="20250714 15:09:38.509" endtime="20250714 15:09:38.509"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>NOT_SUPPORTED_OPERATION</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:09:38.509" endtime="20250714 15:09:38.509"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${target}/link4</arg>
<status status="NOT RUN" starttime="20250714 15:09:38.509" endtime="20250714 15:09:38.509"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>sourceBucket</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:09:38.509" endtime="20250714 15:09:38.509"/>
</kw>
<timeout value="4 minutes"/>
<status status="FAIL" starttime="20250714 15:05:38.507" endtime="20250714 15:09:38.509">Test timeout 4 minutes exceeded.</status>
</test>
<doc>Test bucket links via Ozone CLI</doc>
<status status="FAIL" starttime="20250714 14:54:42.393" endtime="20250714 15:09:38.510"/>
</suite>
<suite id="s1-s3-s4" name="Ozone-Shell-Single" source="/opt/hadoop/smoketest/basic/ozone-shell-single.robot">
<kw name="Generate prefix" library="ozone-shell-lib" type="SETUP">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 15:09:38.542" level="INFO">${random} = 04326</msg>
<status status="PASS" starttime="20250714 15:09:38.542" endtime="20250714 15:09:38.542"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${prefix}</arg>
<arg>${random}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250714 15:09:38.542" level="INFO">${prefix} = 04326</msg>
<status status="PASS" starttime="20250714 15:09:38.542" endtime="20250714 15:09:38.542"/>
</kw>
<status status="PASS" starttime="20250714 15:09:38.541" endtime="20250714 15:09:38.542"/>
</kw>
<test id="s1-s3-s4-t1" name="Test ozone shell" line="26">
<kw name="Test ozone shell" library="ozone-shell-lib">
<arg>${EMPTY}</arg>
<arg>${EMPTY}</arg>
<arg>${prefix}-without-scheme</arg>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:09:38.547" level="INFO">Running command 'ozone sh volume info /04326-without-scheme 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:38.543" level="FAIL">Test timeout 10 minutes exceeded.</msg>
<status status="FAIL" starttime="20250714 15:09:38.544" endtime="20250714 15:19:38.543"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.543" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<status status="FAIL" starttime="20250714 15:09:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>VOLUME_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume create ${protocol}${server}/${volume} --space-quota 100TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume list ${protocol}${server}/ | jq -r '.[] | select(.name=="${volume}")'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>creationTime</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.544" endtime="20250714 15:19:38.544"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume setquota ${protocol}${server}/${volume} --space-quota 10TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>10995116277760</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1 --space-quota 10TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .storageType' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>DISK</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.545"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>10995116277760</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.545" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>100</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket setquota ${protocol}${server}/${volume}/bb1 --space-quota 1TB --namespace-quota 1000</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>1099511627776</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.546" endtime="20250714 15:19:38.546"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>1000</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket list ${protocol}${server}/${volume}/ | jq -r '.[] | select(.name=="bb1") | .volumeName'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${volume}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Test key handling</arg>
<arg>${protocol}</arg>
<arg>${server}</arg>
<arg>${volume}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume clrquota --space-quota ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume clrquota --namespace-quota ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInNamespace'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.547" endtime="20250714 15:19:38.547"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket clrquota --space-quota ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name=="bb1") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket clrquota --namespace-quota ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name=="bb1") | .quotaInNamespace'</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete -r --yes ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.548" endtime="20250714 15:19:38.548"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume info ${protocol}${server}/${volume} &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="${volume}") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="${volume}") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.549" endtime="20250714 15:19:38.549"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.550" endtime="20250714 15:19:38.550"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.550" endtime="20250714 15:19:38.550"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.550" endtime="20250714 15:19:38.550"/>
</kw>
<status status="FAIL" starttime="20250714 15:09:38.543" endtime="20250714 15:19:38.550"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:09:38.543" endtime="20250714 15:19:38.550">Test timeout 10 minutes exceeded.</status>
</test>
<doc>Test ozone shell CLI usage</doc>
<status status="FAIL" starttime="20250714 15:09:38.513" endtime="20250714 15:19:38.551"/>
</suite>
<suite id="s1-s3-s5" name="Ozone-Shell" source="/opt/hadoop/smoketest/basic/ozone-shell.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Generate prefix</arg>
<arg>AND</arg>
<arg>Get Security Enabled From Config</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Generate prefix" library="ozone-shell-lib">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 15:19:38.558" level="INFO">${random} = 87764</msg>
<status status="PASS" starttime="20250714 15:19:38.558" endtime="20250714 15:19:38.558"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${prefix}</arg>
<arg>${random}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250714 15:19:38.559" level="INFO">${prefix} = 87764</msg>
<status status="PASS" starttime="20250714 15:19:38.559" endtime="20250714 15:19:38.559"/>
</kw>
<status status="PASS" starttime="20250714 15:19:38.558" endtime="20250714 15:19:38.559"/>
</kw>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 15:19:38.559" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 15:19:38.559" endtime="20250714 15:19:38.559"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250714 15:19:38.559" endtime="20250714 15:19:38.560"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.560" endtime="20250714 15:19:38.560"/>
</kw>
<status status="NOT RUN" starttime="20250714 15:19:38.560" endtime="20250714 15:19:38.560"/>
</branch>
<status status="NOT RUN" starttime="20250714 15:19:38.560" endtime="20250714 15:19:38.560"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250714 15:19:38.560" endtime="20250714 15:19:38.560"/>
</kw>
<status status="PASS" starttime="20250714 15:19:38.559" endtime="20250714 15:19:38.560"/>
</kw>
<status status="PASS" starttime="20250714 15:19:38.558" endtime="20250714 15:19:38.560"/>
</kw>
<test id="s1-s3-s5-t1" name="RpcClient with port" line="27">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:38.561" endtime="20250714 15:19:38.561"/>
</kw>
<kw name="Test ozone shell" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-with-host</arg>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:38.564" level="INFO">Running command 'ozone sh volume info o3://om:9862/87764-with-host 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:39.823" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:19:39.823" level="INFO">${output} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:38.561" endtime="20250714 15:19:39.823"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:19:39.824" level="INFO">Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:39.824" endtime="20250714 15:19:39.824"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:19:39.825" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 15:19:39.825" endtime="20250714 15:19:39.825"/>
</kw>
<msg timestamp="20250714 15:19:39.825" level="INFO">${result} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:38.561" endtime="20250714 15:19:39.825"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>VOLUME_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20250714 15:19:39.826" level="FAIL">'Cannot resolve OM host om in the URI' does not contain 'VOLUME_NOT_FOUND'</msg>
<status status="FAIL" starttime="20250714 15:19:39.825" endtime="20250714 15:19:39.826"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume create ${protocol}${server}/${volume} --space-quota 100TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.826" endtime="20250714 15:19:39.826"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.826" endtime="20250714 15:19:39.826"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume list ${protocol}${server}/ | jq -r '.[] | select(.name=="${volume}")'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.826" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>creationTime</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume setquota ${protocol}${server}/${volume} --space-quota 10TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>10995116277760</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1 --space-quota 10TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .storageType' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>DISK</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.827" endtime="20250714 15:19:39.827"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>10995116277760</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>100</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket setquota ${protocol}${server}/${volume}/bb1 --space-quota 1TB --namespace-quota 1000</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>1099511627776</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.828" endtime="20250714 15:19:39.828"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>1000</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket list ${protocol}${server}/${volume}/ | jq -r '.[] | select(.name=="bb1") | .volumeName'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${volume}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Test key handling</arg>
<arg>${protocol}</arg>
<arg>${server}</arg>
<arg>${volume}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume clrquota --space-quota ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume clrquota --namespace-quota ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInNamespace'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.829" endtime="20250714 15:19:39.829"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket clrquota --space-quota ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name=="bb1") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket clrquota --namespace-quota ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name=="bb1") | .quotaInNamespace'</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete -r --yes ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.830"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume info ${protocol}${server}/${volume} &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.830" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="${volume}") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="${volume}") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.831" endtime="20250714 15:19:39.831"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:39.832" endtime="20250714 15:19:39.832"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.832" endtime="20250714 15:19:39.832"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:39.832" endtime="20250714 15:19:39.832"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:38.561" endtime="20250714 15:19:39.832"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:38.560" endtime="20250714 15:19:39.832">'Cannot resolve OM host om in the URI' does not contain 'VOLUME_NOT_FOUND'</status>
</test>
<test id="s1-s3-s5-t2" name="RpcClient with execution errors" line="30">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:39.833" endtime="20250714 15:19:39.833"/>
</kw>
<kw name="Test ozone shell errors" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-with-errors</arg>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume create ${protocol}${server}/${volume} --space-quota 1.5GB</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:39.836" level="INFO">Running command 'ozone sh volume create o3://om:9862/87764-with-errors --space-quota 1.5GB 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:41.059" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:19:41.059" level="INFO">${output} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:39.834" endtime="20250714 15:19:41.060"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:19:41.060" level="INFO">Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:41.060" endtime="20250714 15:19:41.061"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:19:41.061" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250714 15:19:41.061" endtime="20250714 15:19:41.061"/>
</kw>
<msg timestamp="20250714 15:19:41.061" level="INFO">${result} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:39.834" endtime="20250714 15:19:41.061"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5GB is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20250714 15:19:41.062" level="FAIL">'Cannot resolve OM host om in the URI' does not contain '1.5GB is invalid'</msg>
<status status="FAIL" starttime="20250714 15:19:41.061" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume create ${protocol}${server}/${volume} --namespace-quota 1.5</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5 is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh volume create ${protocol}${server}/${volume}</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bucket_1</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>INVALID_BUCKET_NAME</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bucket1 --space-quota 1.5GB</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5GB is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.062" endtime="20250714 15:19:41.062"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bucket1 --namespace-quota 1.5</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5 is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bucket1 --layout Invalid</arg>
<arg>2</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Usage</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bucket1</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh key info ${protocol}${server}/${volume}/bucket1/non-existing</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>KEY_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh key put ${protocol}${server}/${volume}/bucket1/key1 unexisting --type invalid</arg>
<arg>2</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket setquota ${volume}/bucket1 --space-quota 1.5</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.063" endtime="20250714 15:19:41.063"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5 is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket setquota ${volume}/bucket1 --namespace-quota 1.5</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5 is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume setquota ${volume} --space-quota 1.5</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5 is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume setquota ${volume} --namespace-quota 1.5</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>1.5 is invalid</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh bucket setquota ${volume}/bucket1 --space-quota 2KB</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh key put ${volume}/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.064" endtime="20250714 15:19:41.064"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>QUOTA_EXCEEDED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume setquota ${volume} --space-quota 1KB</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>QUOTA_EXCEEDED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh bucket clrquota ${volume}/bucket1 --space-quota</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume setquota ${volume} --space-quota 1GB</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>QUOTA_ERROR</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh bucket delete ${protocol}${server}/${volume}/bucket1</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh volume setquota ${volume} --space-quota 1GB</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bucket1</arg>
<arg>255</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.065"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>QUOTA_ERROR</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:41.065" endtime="20250714 15:19:41.066"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<arg>0</arg>
<status status="NOT RUN" starttime="20250714 15:19:41.066" endtime="20250714 15:19:41.066"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:39.833" endtime="20250714 15:19:41.066"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:39.832" endtime="20250714 15:19:41.066">'Cannot resolve OM host om in the URI' does not contain '1.5GB is invalid'</status>
</test>
<test id="s1-s3-s5-t3" name="RpcClient volume acls" line="33">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:41.067" endtime="20250714 15:19:41.067"/>
</kw>
<kw name="Test Volume Acls" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-acls</arg>
<kw name="Execute" library="os">
<arg>ozone sh volume create ${protocol}${server}/${volume}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:41.071" level="INFO">Running command 'ozone sh volume create o3://om:9862/87764-acls 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:42.284" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:19:42.284" level="INFO">${output} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:41.068" endtime="20250714 15:19:42.284"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:19:42.285" level="INFO">Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:42.285" endtime="20250714 15:19:42.285"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:19:42.286" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 15:19:42.286" level="FAIL">255 != 0</msg>
<status status="FAIL" starttime="20250714 15:19:42.286" endtime="20250714 15:19:42.286"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:41.068" endtime="20250714 15:19:42.286"/>
</kw>
<msg timestamp="20250714 15:19:42.286" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:19:41.068" endtime="20250714 15:19:42.286"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:41.068" endtime="20250714 15:19:42.286"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume getacl ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .aclScope=="ACCESS" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${acl_check}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume addacl ${protocol}${server}/${volume} -a user:superuser1:rwxy[DEFAULT]</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume getacl ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume removeacl ${protocol}${server}/${volume} -a user:superuser1:xy</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.287"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume getacl ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.287" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["READ", "WRITE"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume setacl ${protocol}${server}/${volume} -al user:superuser1:rwxy[DEFAULT],group:superuser1:a,user:testuser:rwxyc,group:superuser1:a[DEFAULT]</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume getacl ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="GROUP" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:42.288" endtime="20250714 15:19:42.288"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:41.067" endtime="20250714 15:19:42.288"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:41.066" endtime="20250714 15:19:42.289">255 != 0</status>
</test>
<test id="s1-s3-s5-t4" name="RpcClient bucket acls" line="36">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:42.290" endtime="20250714 15:19:42.290"/>
</kw>
<kw name="Test Bucket Acls" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-acls</arg>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:42.293" level="INFO">Running command 'ozone sh bucket create o3://om:9862/87764-acls/bb1 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:43.527" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:19:43.527" level="INFO">${output} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:42.291" endtime="20250714 15:19:43.527"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:19:43.529" level="INFO">Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:43.528" endtime="20250714 15:19:43.529"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:19:43.529" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 15:19:43.529" level="FAIL">255 != 0</msg>
<status status="FAIL" starttime="20250714 15:19:43.529" endtime="20250714 15:19:43.529"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:42.291" endtime="20250714 15:19:43.529"/>
</kw>
<msg timestamp="20250714 15:19:43.530" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:19:42.291" endtime="20250714 15:19:43.530"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:42.290" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket getacl ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .aclScope=="ACCESS" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${acl_check}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket addacl ${protocol}${server}/${volume}/bb1 -a user:superuser1:rwxy</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket getacl ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:43.530" endtime="20250714 15:19:43.530"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket removeacl ${protocol}${server}/${volume}/bb1 -a user:superuser1:xy</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket getacl ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket setacl ${protocol}${server}/${volume}/bb1 -al user:superuser1:rwxy,group:superuser1:a,user:testuser:rwxyc,group:superuser1:a[DEFAULT]</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket getacl ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="GROUP" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:43.531" endtime="20250714 15:19:43.531"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:43.532" endtime="20250714 15:19:43.532"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:42.290" endtime="20250714 15:19:43.532"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:42.289" endtime="20250714 15:19:43.532">255 != 0</status>
</test>
<test id="s1-s3-s5-t5" name="RpcClient key acls" line="39">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:43.533" endtime="20250714 15:19:43.533"/>
</kw>
<kw name="Test key Acls" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-acls</arg>
<kw name="Execute" library="os">
<arg>ozone sh key put ${protocol}${server}/${volume}/bb1/key2 /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:43.536" level="INFO">Running command 'ozone sh key put o3://om:9862/87764-acls/bb1/key2 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:44.713" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:19:44.713" level="INFO">${output} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:43.534" endtime="20250714 15:19:44.713"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:19:44.714" level="INFO">Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:44.714" endtime="20250714 15:19:44.714"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:19:44.715" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 15:19:44.715" level="FAIL">255 != 0</msg>
<status status="FAIL" starttime="20250714 15:19:44.714" endtime="20250714 15:19:44.715"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:43.534" endtime="20250714 15:19:44.715"/>
</kw>
<msg timestamp="20250714 15:19:44.715" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:19:43.534" endtime="20250714 15:19:44.715"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:43.533" endtime="20250714 15:19:44.715"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key getacl ${protocol}${server}/${volume}/bb1/key2</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.715" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .aclScope=="ACCESS" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${acl_check}</arg>
<doc>Verifies that the given item is not empty.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key addacl ${protocol}${server}/${volume}/bb1/key2 -a user:superuser1:rwxy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key getacl ${protocol}${server}/${volume}/bb1/key2</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key removeacl ${protocol}${server}/${volume}/bb1/key2 -a user:superuser1:xy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key getacl ${protocol}${server}/${volume}/bb1/key2</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.716"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.716" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key setacl ${protocol}${server}/${volume}/bb1/key2 -al user:superuser1:rwxy,group:superuser1:a,user:testuser:rwxyc</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key getacl ${protocol}${server}/${volume}/bb1/key2</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="GROUP" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.717" endtime="20250714 15:19:44.717"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:43.533" endtime="20250714 15:19:44.718"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:43.532" endtime="20250714 15:19:44.718">255 != 0</status>
</test>
<test id="s1-s3-s5-t6" name="Test native authorizer" line="43">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:44.719" endtime="20250714 15:19:44.719"/>
</kw>
<kw name="Test native authorizer" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-acls</arg>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 15:19:44.720" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 15:19:44.719" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume removeacl ${protocol}${server}/${volume} -a group:root:a</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh bucket list ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>PERMISSION_DENIED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh key list ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>PERMISSION_DENIED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.720"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh volume addacl ${protocol}${server}/${volume} -a user:testuser2:xy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.720" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>PERMISSION_DENIED User testuser2 doesn't have WRITE_ACL permission to access volume</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume addacl ${protocol}${server}/${volume} -a user:testuser2:xyrw</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh bucket list ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.721" endtime="20250714 15:19:44.721"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>PERMISSION_DENIED User testuser2 doesn't have LIST permission to access volume</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume addacl ${protocol}${server}/${volume} -a user:testuser2:l</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket list ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume getacl ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone sh key list ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>PERMISSION_DENIED</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket addacl ${protocol}${server}/${volume}/bb1 -a user:testuser2:a</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket getacl ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.722" endtime="20250714 15:19:44.722"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser2</arg>
<arg>testuser2.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.723" endtime="20250714 15:19:44.723"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket getacl ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.723" endtime="20250714 15:19:44.723"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key list ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.723" endtime="20250714 15:19:44.723"/>
</kw>
<kw name="Execute" library="os">
<arg>kdestroy</arg>
<status status="NOT RUN" starttime="20250714 15:19:44.723" endtime="20250714 15:19:44.723"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:19:44.723" endtime="20250714 15:19:44.723"/>
</kw>
<status status="PASS" starttime="20250714 15:19:44.719" endtime="20250714 15:19:44.723"/>
</kw>
<timeout value="10 minutes"/>
<status status="PASS" starttime="20250714 15:19:44.718" endtime="20250714 15:19:44.723"/>
</test>
<test id="s1-s3-s5-t7" name="RpcClient prefix acls" line="46">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:44.724" endtime="20250714 15:19:44.724"/>
</kw>
<kw name="Test prefix Acls" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-acls</arg>
<kw name="Execute" library="os">
<arg>ozone sh prefix addacl ${protocol}${server}/${volume}/bb1/prefix1/ -a user:superuser1:rwxy[DEFAULT]</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:44.727" level="INFO">Running command 'ozone sh prefix addacl o3://om:9862/87764-acls/bb1/prefix1/ -a user:superuser1:rwxy[DEFAULT] 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:19:46.036" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:19:46.036" level="INFO">${output} = Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:44.725" endtime="20250714 15:19:46.036"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:19:46.037" level="INFO">Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:19:46.037" endtime="20250714 15:19:46.037"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:19:46.038" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 15:19:46.038" level="FAIL">255 != 0</msg>
<status status="FAIL" starttime="20250714 15:19:46.037" endtime="20250714 15:19:46.038"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:44.725" endtime="20250714 15:19:46.038"/>
</kw>
<msg timestamp="20250714 15:19:46.038" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:19:44.725" endtime="20250714 15:19:46.038"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:44.724" endtime="20250714 15:19:46.038"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh prefix getacl ${protocol}${server}/${volume}/bb1/prefix1/</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.038" endtime="20250714 15:19:46.038"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.038" endtime="20250714 15:19:46.038"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh prefix removeacl ${protocol}${server}/${volume}/bb1/prefix1/ -a user:superuser1:xy</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh prefix getacl ${protocol}${server}/${volume}/bb1/prefix1/</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["READ", "WRITE"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh prefix setacl ${protocol}${server}/${volume}/bb1/prefix1/ -al user:superuser1:rwxy[DEFAULT],group:superuser1:a[DEFAULT],user:testuser:rwxyc</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh prefix getacl ${protocol}${server}/${volume}/bb1/prefix1/</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.039"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="GROUP" and .name=="superuser1" and .aclScope=="DEFAULT" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.039" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put ${protocol}${server}/${volume}/bb1/prefix1/key1 /opt/hadoop/NOTICE.txt</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key getacl ${protocol}${server}/${volume}/bb1/prefix1/key1</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="USER" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["READ", "WRITE", "READ_ACL", "WRITE_ACL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Execute" library="os">
<var>${acl_check}</var>
<arg>echo '${result}' | jq -r '.[] | select(.type=="GROUP" and .name=="superuser1" and .aclScope=="ACCESS" and (.aclList | contains(["ALL"]))) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${acl_check}</arg>
<arg>superuser1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:19:46.040" endtime="20250714 15:19:46.040"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:44.724" endtime="20250714 15:19:46.040"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:44.723" endtime="20250714 15:19:46.041">255 != 0</status>
</test>
<test id="s1-s3-s5-t8" name="RpcClient without host" line="49">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:19:46.042" endtime="20250714 15:19:46.042"/>
</kw>
<kw name="Test ozone shell" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>${EMPTY}</arg>
<arg>${prefix}-without-host</arg>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:19:46.045" level="INFO">Running command 'ozone sh volume info o3:///87764-without-host 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:29:46.042" level="FAIL">Test timeout 10 minutes exceeded.</msg>
<status status="FAIL" starttime="20250714 15:19:46.043" endtime="20250714 15:29:46.042"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.042" endtime="20250714 15:29:46.042"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.042" endtime="20250714 15:29:46.042"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:46.043" endtime="20250714 15:29:46.042"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>VOLUME_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.042" endtime="20250714 15:29:46.042"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume create ${protocol}${server}/${volume} --space-quota 100TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume list ${protocol}${server}/ | jq -r '.[] | select(.name=="${volume}")'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>creationTime</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume setquota ${protocol}${server}/${volume} --space-quota 10TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>10995116277760</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1 --space-quota 10TB --namespace-quota 100</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.043"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.043" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .storageType' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>DISK</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>10995116277760</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>100</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket setquota ${protocol}${server}/${volume}/bb1 --space-quota 1TB --namespace-quota 1000</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.044" endtime="20250714 15:29:46.044"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>1099511627776</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>1000</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket list ${protocol}${server}/${volume}/ | jq -r '.[] | select(.name=="bb1") | .volumeName'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>${volume}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<arg>Test key handling</arg>
<arg>${protocol}</arg>
<arg>${server}</arg>
<arg>${volume}</arg>
<doc>Executes the given keyword with the given arguments.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.045"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume clrquota --space-quota ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.045" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume clrquota --namespace-quota ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume info ${protocol}${server}/${volume} | jq -r '. | select(.name=="${volume}") | .quotaInNamespace'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket clrquota --space-quota ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name=="bb1") | .quotaInBytes'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket clrquota --namespace-quota ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.046" endtime="20250714 15:29:46.046"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 | jq -r '. | select(.name=="bb1") | .quotaInNamespace'</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete -r --yes ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume info ${protocol}${server}/${volume} &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="${volume}") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="${volume}") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.047" endtime="20250714 15:29:46.047"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket info ${protocol}${server}/${volume}/bb1 &gt; ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInBytes' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>jq -r '. | select(.name=="bb1") | .quotaInNamespace' ${TMP_JSON}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${result}</arg>
<arg>-1</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket delete ${protocol}${server}/${volume}/bb1</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume delete ${protocol}${server}/${volume}</arg>
<status status="NOT RUN" starttime="20250714 15:29:46.048" endtime="20250714 15:29:46.048"/>
</kw>
<status status="FAIL" starttime="20250714 15:19:46.042" endtime="20250714 15:29:46.048"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:19:46.041" endtime="20250714 15:29:46.049">Test timeout 10 minutes exceeded.</status>
</test>
<test id="s1-s3-s5-t9" name="RpcClient Delete key" line="52">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:29:46.050" endtime="20250714 15:29:46.050"/>
</kw>
<kw name="Test Delete key with Trash" library="ozone-shell-lib">
<arg>o3://</arg>
<arg>om:9862</arg>
<arg>${prefix}-with-del</arg>
<kw name="Ozone Shell Batch" library="shell">
<arg>volume create ${protocol}${server}/${volume}</arg>
<arg>bucket create ${protocol}${server}/${volume}/bfso --layout FILE_SYSTEM_OPTIMIZED</arg>
<arg>key put -t RATIS ${protocol}${server}/${volume}/bfso/key3 /opt/hadoop/NOTICE.txt</arg>
<arg>key delete ${protocol}${server}/${volume}/bfso/key3</arg>
<kw name="Catenate" library="BuiltIn">
<var>${cmd}</var>
<arg>SEPARATOR=' --execute '</arg>
<arg>@{commands}</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20250714 15:29:46.051" level="INFO">${cmd} = volume create o3://om:9862/87764-with-del' --execute 'bucket create o3://om:9862/87764-with-del/bfso --layout FILE_SYSTEM_OPTIMIZED' --execute 'key put -t RATIS o3://om:9862/87764-with-del/bfso/key3 /...</msg>
<status status="PASS" starttime="20250714 15:29:46.051" endtime="20250714 15:29:46.051"/>
</kw>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh --execute '${cmd}'</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:29:46.054" level="INFO">Running command 'ozone sh --execute 'volume create o3://om:9862/87764-with-del' --execute 'bucket create o3://om:9862/87764-with-del/bfso --layout FILE_SYSTEM_OPTIMIZED' --execute 'key put -t RATIS o3://om:9862/87764-with-del/bfso/key3 /opt/hadoop/NOTICE.txt' --execute 'key delete o3://om:9862/87764-with-del/bfso/key3' 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:29:47.506" level="INFO">${rc} = 255</msg>
<msg timestamp="20250714 15:29:47.506" level="INFO">${output} = volume create o3://om:9862/87764-with-del
Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:29:46.052" endtime="20250714 15:29:47.506"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250714 15:29:47.507" level="INFO">volume create o3://om:9862/87764-with-del
Cannot resolve OM host om in the URI</msg>
<status status="PASS" starttime="20250714 15:29:47.506" endtime="20250714 15:29:47.507"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250714 15:29:47.507" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250714 15:29:47.507" level="FAIL">255 != 0</msg>
<status status="FAIL" starttime="20250714 15:29:47.507" endtime="20250714 15:29:47.507"/>
</kw>
<status status="FAIL" starttime="20250714 15:29:46.051" endtime="20250714 15:29:47.508"/>
</kw>
<msg timestamp="20250714 15:29:47.508" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:29:46.051" endtime="20250714 15:29:47.508"/>
</kw>
<status status="FAIL" starttime="20250714 15:29:46.050" endtime="20250714 15:29:47.508"/>
</kw>
<kw name="Execute" library="os">
<var>${fsokey}</var>
<arg>ozone sh key list ${protocol}${server}/${volume}/bfso</arg>
<status status="NOT RUN" starttime="20250714 15:29:47.508" endtime="20250714 15:29:47.508"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>echo '${fsokey}' | jq -r '.[] | select(.name | startswith(".Trash")) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:29:47.508" endtime="20250714 15:29:47.508"/>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<arg>${result}</arg>
<arg>.Trash/hadoop</arg>
<arg>.Trash/testuser</arg>
<arg>.Trash/root</arg>
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<status status="NOT RUN" starttime="20250714 15:29:47.508" endtime="20250714 15:29:47.508"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>key3</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:29:47.508" endtime="20250714 15:29:47.508"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>echo '${fsokey}' | jq -r '.[] | select(.name | startswith(".Trash") | not) | .name'</arg>
<status status="NOT RUN" starttime="20250714 15:29:47.508" endtime="20250714 15:29:47.509"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>key3</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:29:47.509" endtime="20250714 15:29:47.509"/>
</kw>
<kw name="Ozone Shell Batch" library="shell">
<arg>bucket create ${protocol}${server}/${volume}/obsbkt --layout OBJECT_STORE</arg>
<arg>key put -t RATIS ${protocol}${server}/${volume}/obsbkt/key2 /opt/hadoop/NOTICE.txt</arg>
<arg>key delete ${protocol}${server}/${volume}/obsbkt/key2</arg>
<status status="NOT RUN" starttime="20250714 15:29:47.509" endtime="20250714 15:29:47.509"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key list ${protocol}${server}/${volume}/obsbkt</arg>
<status status="NOT RUN" starttime="20250714 15:29:47.509" endtime="20250714 15:29:47.509"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>key2</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:29:47.509" endtime="20250714 15:29:47.509"/>
</kw>
<status status="FAIL" starttime="20250714 15:29:46.050" endtime="20250714 15:29:47.509"/>
</kw>
<timeout value="10 minutes"/>
<status status="FAIL" starttime="20250714 15:29:46.049" endtime="20250714 15:29:47.509">255 != 0</status>
</test>
<doc>Test ozone shell CLI usage</doc>
<status status="FAIL" starttime="20250714 15:19:38.552" endtime="20250714 15:29:47.510"/>
</suite>
<suite id="s1-s3-s6" name="Single Node" source="/opt/hadoop/smoketest/basic/single_node.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250714 15:29:47.518" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250714 15:29:47.518" endtime="20250714 15:29:47.518"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250714 15:29:47.518" endtime="20250714 15:29:47.518"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250714 15:29:47.519" endtime="20250714 15:29:47.519"/>
</kw>
<status status="NOT RUN" starttime="20250714 15:29:47.519" endtime="20250714 15:29:47.519"/>
</branch>
<status status="NOT RUN" starttime="20250714 15:29:47.519" endtime="20250714 15:29:47.519"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250714 15:29:47.519" endtime="20250714 15:29:47.519"/>
</kw>
<status status="PASS" starttime="20250714 15:29:47.518" endtime="20250714 15:29:47.519"/>
</kw>
<test id="s1-s3-s6-t1" name="Basic Freon smoketest for one datanode" line="26">
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250714 15:29:47.519" endtime="20250714 15:29:47.520"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>10</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250714 15:29:47.520" level="INFO">${random} = 0rY6JgqseV</msg>
<status status="PASS" starttime="20250714 15:29:47.520" endtime="20250714 15:29:47.520"/>
</kw>
<kw name="Freon OCKG" library="freon">
<arg>prefix=${random}</arg>
<arg>args=--replication ONE --replication-type RATIS</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250714 15:29:47.524" level="INFO">Running command 'ozone freon ockg  -t 1 -n1 -p 0rY6JgqseV --replication ONE --replication-type RATIS 2&gt;&amp;1'.</msg>
<msg timestamp="20250714 15:34:47.519" level="FAIL">Test timeout 5 minutes exceeded.</msg>
<status status="FAIL" starttime="20250714 15:29:47.522" endtime="20250714 15:34:47.519"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<status status="NOT RUN" starttime="20250714 15:34:47.520" endtime="20250714 15:34:47.520"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<status status="NOT RUN" starttime="20250714 15:34:47.520" endtime="20250714 15:34:47.520"/>
</kw>
<status status="FAIL" starttime="20250714 15:29:47.521" endtime="20250714 15:34:47.520"/>
</kw>
<msg timestamp="20250714 15:34:47.520" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="FAIL" starttime="20250714 15:29:47.521" endtime="20250714 15:34:47.520"/>
</kw>
<status status="FAIL" starttime="20250714 15:29:47.521" endtime="20250714 15:34:47.520"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="NOT RUN" starttime="20250714 15:34:47.520" endtime="20250714 15:34:47.520"/>
</kw>
<status status="FAIL" starttime="20250714 15:29:47.520" endtime="20250714 15:34:47.521"/>
</kw>
<kw name="Freon OCKV" library="freon">
<arg>prefix=${random}</arg>
<status status="NOT RUN" starttime="20250714 15:34:47.521" endtime="20250714 15:34:47.521"/>
</kw>
<timeout value="5 minutes"/>
<status status="FAIL" starttime="20250714 15:29:47.519" endtime="20250714 15:34:47.521">Test timeout 5 minutes exceeded.</status>
</test>
<doc>Smoketest for one datanode</doc>
<status status="FAIL" starttime="20250714 15:29:47.512" endtime="20250714 15:34:47.522"/>
</suite>
<status status="FAIL" starttime="20250714 14:54:23.556" endtime="20250714 15:34:47.524"/>
</suite>
<status status="FAIL" starttime="N/A" endtime="N/A" elapsedtime="2466431"/>
</suite>
<statistics>
<total>
<stat pass="51" fail="13" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="51" fail="13" skip="0" id="s1" name="ozone">ozone</stat>
<stat pass="20" fail="0" skip="0" id="s1-s1" name="Lib">ozone.Lib</stat>
<stat pass="9" fail="0" skip="0" id="s1-s1-s1" name="Fs Tests">ozone.Lib.Fs Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1-s2" name="Os Tests">ozone.Lib.Os Tests</stat>
<stat pass="6" fail="0" skip="0" id="s1-s1-s3" name="String Tests">ozone.Lib.String Tests</stat>
<stat pass="9" fail="0" skip="0" id="s1-s2" name="Ozone-Lib">ozone.Ozone-Lib</stat>
<stat pass="9" fail="0" skip="0" id="s1-s2-s1" name="Shell Tests">ozone.Ozone-Lib.Shell Tests</stat>
<stat pass="22" fail="13" skip="0" id="s1-s3" name="Basic">ozone.Basic</stat>
<stat pass="2" fail="0" skip="0" id="s1-s3-s1" name="Basic">ozone.Basic.Basic</stat>
<stat pass="4" fail="0" skip="0" id="s1-s3-s2" name="Getconf">ozone.Basic.Getconf</stat>
<stat pass="15" fail="3" skip="0" id="s1-s3-s3" name="Links">ozone.Basic.Links</stat>
<stat pass="0" fail="1" skip="0" id="s1-s3-s4" name="Ozone-Shell-Single">ozone.Basic.Ozone-Shell-Single</stat>
<stat pass="1" fail="8" skip="0" id="s1-s3-s5" name="Ozone-Shell">ozone.Basic.Ozone-Shell</stat>
<stat pass="0" fail="1" skip="0" id="s1-s3-s6" name="Single Node">ozone.Basic.Single Node</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20250714 15:09:38.529" level="ERROR">Error in file '/opt/hadoop/smoketest/basic/ozone-shell-lib.robot' on line 21: Setting 'Suite Setup' is not allowed in resource file.</msg>
</errors>
</robot>
