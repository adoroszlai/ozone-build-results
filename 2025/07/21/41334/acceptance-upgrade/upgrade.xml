<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250721 07:50:13.498" rpa="false" schemaversion="4">
<suite id="s1" name="upgrade">
<suite id="s1-s1" name="2.0.0-2.1.0-1-original-check-finalization" source="/opt/ozone/smoketest/upgrade/check-finalization.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:48:19.355" endtime="20250721 07:48:19.356"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:19.359" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:20.216" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:20.216" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:48:19.356" endtime="20250721 07:48:20.216"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:20.217" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:48:20.217" endtime="20250721 07:48:20.217"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:20.217" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:20.217" endtime="20250721 07:48:20.218"/>
</kw>
<status status="PASS" starttime="20250721 07:48:19.356" endtime="20250721 07:48:20.218"/>
</kw>
<msg timestamp="20250721 07:48:20.218" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:19.356" endtime="20250721 07:48:20.218"/>
</kw>
<msg timestamp="20250721 07:48:20.218" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:48:19.356" endtime="20250721 07:48:20.218"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:20.218" endtime="20250721 07:48:20.218"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:20.218" endtime="20250721 07:48:20.218"/>
</branch>
<status status="PASS" starttime="20250721 07:48:20.218" endtime="20250721 07:48:20.218"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:48:20.219" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:48:20.219" endtime="20250721 07:48:20.219"/>
</kw>
<status status="PASS" starttime="20250721 07:48:19.355" endtime="20250721 07:48:20.219"/>
</kw>
<test id="s1-s1-t1" name="Check OM Finalized" line="25">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:48:20.221" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:20.221" endtime="20250721 07:48:20.221"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:48:20.221" endtime="20250721 07:48:20.221"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:20.221" endtime="20250721 07:48:20.221"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:20.221" endtime="20250721 07:48:20.221"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:48:20.221" endtime="20250721 07:48:20.221"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:48:20.221" endtime="20250721 07:48:20.221"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.220" endtime="20250721 07:48:20.221"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:20.222" endtime="20250721 07:48:20.222"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:20.225" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:20.229" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:20.229" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:48:20.223" endtime="20250721 07:48:20.229"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:20.229" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:48:20.229" endtime="20250721 07:48:20.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:20.230" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:20.230" endtime="20250721 07:48:20.230"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.223" endtime="20250721 07:48:20.230"/>
</kw>
<msg timestamp="20250721 07:48:20.230" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:20.222" endtime="20250721 07:48:20.230"/>
</kw>
<msg timestamp="20250721 07:48:20.230" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:48:20.222" endtime="20250721 07:48:20.230"/>
</kw>
<msg timestamp="20250721 07:48:20.231" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:20.222" endtime="20250721 07:48:20.231"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:20.231" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:20.231" endtime="20250721 07:48:20.231"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:20.234" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:20.255" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:20.255" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:20.232" endtime="20250721 07:48:20.255"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:20.256" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:20.256" endtime="20250721 07:48:20.256"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:20.256" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:20.256" endtime="20250721 07:48:20.257"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.232" endtime="20250721 07:48:20.257"/>
</kw>
<msg timestamp="20250721 07:48:20.257" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:20.232" endtime="20250721 07:48:20.257"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.231" endtime="20250721 07:48:20.257"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.231" endtime="20250721 07:48:20.257"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.220" endtime="20250721 07:48:20.257"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.220" endtime="20250721 07:48:20.257"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>env</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:20.260" level="INFO">Running command 'env 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:20.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:20.264" level="INFO">${output} = CORE-SITE.XML_hadoop.security.auth_to_local=DEFAULT
OZONE-SITE.XML_ozone.administrators=testuser,recon,om
HTTPFS-SITE.XML_httpfs.hadoop.authentication.type=kerberos
OZONE-SITE.XML_ozone.manager.delega...</msg>
<status status="PASS" starttime="20250721 07:48:20.258" endtime="20250721 07:48:20.264"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:20.264" level="INFO">CORE-SITE.XML_hadoop.security.auth_to_local=DEFAULT
OZONE-SITE.XML_ozone.administrators=testuser,recon,om
HTTPFS-SITE.XML_httpfs.hadoop.authentication.type=kerberos
OZONE-SITE.XML_ozone.manager.delegation.remover.scan.interval=1m
HDFS-SITE.XML_dfs.web.authentication.kerberos.principal=HTTP/ozone@EXAMPLE.COM
HTTPFS-SITE.XML_httpfs.hadoop.authentication.kerberos.keytab=/etc/security/keytabs/httpfs.keytab
OZONE-SITE.XML_ozone.security.http.kerberos.enabled=true
OZONE-SITE.XML_ozone.httpfs.kerberos.keytab.file=/etc/security/keytabs/httpfs.keytab
OZONE-SITE.XML_ozone.security.enabled=true
OZONE-SITE.XML_hdds.scm.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_hdds.secret.key.expiry.duration=1h
OZONE-SITE.XML_ozone.s3.administrators=testuser,s3g
HTTPFS-SITE.XML_hadoop.http.authentication.type=kerberos
CORE-SITE.XML_hadoop.security.authorization=true
OZONE-SITE.XML_hdds.datanode.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.http.basedir=/tmp/ozone_http
HDFS-SITE.XML_dfs.datanode.kerberos.principal=dn/dn@EXAMPLE.COM
OZONE-SITE.XML_ozone.s3g.http.auth.kerberos.principal=HTTP/s3g@EXAMPLE.COM
OZONE-SITE.XML_ozone.server.default.replication=3
CORE-SITE.XML_hadoop.http.authentication.type=kerberos
CORE-SITE.XML_hadoop.proxyuser.httpfs.groups=*
OZONE-SITE.XML_ozone.scm.pipeline.creation.interval=30s
HTTPFS-SITE.XML_hadoop.http.authentication.kerberos.principal=HTTP/httpfs@EXAMPLE.COM
OZONE-SITE.XML_ozone.om.kerberos.principal=om/om@EXAMPLE.COM
OZONE-SITE.XML_ozone.acl.enabled=true
OZONE-SITE.XML_ozone.recon.kerberos.principal=recon/recon@EXAMPLE.COM
OZONE-SITE.XML_hdds.datanode.dir=/data/hdds
OZONE-SITE.XML_ozone.acl.authorizer.class=org.apache.hadoop.ozone.security.acl.OzoneNativeAuthorizer
CORE-SITE.XML_dfs.data.transfer.protection=authentication
OZONE-SITE.XML_ozone.recon.db.dir=/data/metadata/recon
HTTPFS-SITE.XML_hadoop.http.authentication.kerberos.keytab=/etc/security/keytabs/httpfs.keytab
OZONE-SITE.XML_ozone.scm.address.scmservice.scm1=scm1.org
KMS-SITE.XML_hadoop.kms.proxyuser.s3g.users=*
CORE-SITE.XML_hadoop.http.authentication.kerberos.principal=HTTP/ozone@EXAMPLE.COM
OZONE-SITE.XML_ozone.s3g.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_hdds.scm.kerberos.principal=scm/scm@EXAMPLE.COM
OZONE-SITE.XML_hdds.secret.key.rotate.duration=5m
OZONE-SITE.XML_ozone.scm.address.scmservice.scm3=scm3.org
OZONE-SITE.XML_ozone.scm.container.size=1GB
OZONE-SITE.XML_ozone.recon.http.auth.kerberos.principal=HTTP/recon@EXAMPLE.COM
OZONE-SITE.XML_hdds.datanode.volume.min.free.space=100MB
OZONE-SITE.XML_ozone.scm.address.scmservice.scm2=scm2.org
OZONE-SITE.XML_hdds.datanode.http.auth.kerberos.principal=HTTP/db@EXAMPLE.COM
OZONE-SITE.XML_ozone.scm.pipeline.allocated.timeout=2m
OZONE-SITE.XML_ozone.om.kerberos.keytab.file=/etc/security/keytabs/om.keytab
OZONE-SITE.XML_ozone.s3g.secret.http.enabled=true
OZONE-SITE.XML_ozone.om.http.auth.type=kerberos
OZONE-SITE.XML_ozone.httpfs.http.auth.type=kerberos
OZONE-SITE.XML_ozone.scm.datanode.id.dir=/data/metadata
OZONE-SITE.XML_ozone.scm.pipeline.scrub.interval=1m
HADOOP-POLICY.XML_hdds.security.client.scm.certificate.protocol.acl=*
OZONE-SITE.XML_hdds.block.token.enabled=true
OZONE-SITE.XML_hdds.container.token.enabled=true
OZONE-SITE.XML_ozone.client.failover.max.attempts=6
OZONE-SITE.XML_ozone.metadata.dirs=/data/metadata
OZONE-SITE.XML_ozone.recon.address=recon:9891
OZONE-SITE.XML_hdds.scm.http.auth.type=kerberos
HTTPFS-SITE.XML_httpfs.hadoop.authentication.kerberos.principal=httpfs/httpfs@EXAMPLE.COM
HDFS-SITE.XML_dfs.datanode.kerberos.keytab.file=/etc/security/keytabs/dn.keytab
OZONE-SITE.XML_ozone.scm.primordial.node.id=scm1
CORE-SITE.XML_hadoop.http.authentication.signature.secret.file=/etc/security/http_secret
OZONE-SITE.XML_ozone.recon.om.snapshot.task.interval.delay=1m
CORE-SITE.XML_hadoop.security.authentication=kerberos
OZONE-SITE.XML_ozone.httpfs.http.auth.kerberos.principal=HTTP/httpfs@EXAMPLE.COM
OZONE-SITE.XML_hdds.grpc.tls.enabled=true
KMS-SITE.XML_hadoop.kms.proxyuser.s3g.hosts=*
OZONE-SITE.XML_ozone.manager.delegation.token.max-lifetime=30m
OZONE-SITE.XML_ozone.s3g.kerberos.principal=s3g/s3g@EXAMPLE.COM
OZONE-SITE.XML_ozone.scm.service.ids=scmservice
OZONE-SITE.XML_ozone.om.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.http.filter.initializers=org.apache.hadoop.security.AuthenticationFilterInitializer
HADOOP-POLICY.XML_hdds.security.client.scm.container.protocol.acl=*
CORE-SITE.XML_hadoop.proxyuser.httpfs.hosts=*
OZONE-SITE.XML_ozone.om.service.ids=omservice
HADOOP-POLICY.XML_hdds.security.client.scm.block.protocol.acl=*
OZONE-SITE.XML_ozone.recon.http.auth.kerberos.keytab=/etc/security/keytabs/recon.keytab
CORE-SITE.XML_hadoop.http.authentication.simple.anonymous.allowed=false
CORE-SITE.XML_hadoop.http.authentication.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.fs.hsync.enabled=true
OZONE-SITE.XML_ozone.om.nodes.omservice=om1,om2,om3
OZONE-SITE.XML_ozone.om.address.omservice.om1=om1
CORE-SITE.XML_hadoop.security.key.provider.path=kms://http@kms:9600/kms
OZONE-SITE.XML_ozone.om.address.omservice.om2=om2
OZONE-SITE.XML_ozone.om.address.omservice.om3=om3
OZONE-SITE.XML_hdds.secret.key.rotate.check.duration=1m
OZONE-SITE.XML_hdds.datanode.http.auth.type=kerberos
OZONE-SITE.XML_ozone.s3g.http.auth.type=kerberos
KMS-SITE.XML_hadoop.kms.proxyuser.s3g.groups=*
OZONE-SITE.XML_ozone.recon.kerberos.keytab.file=/etc/security/keytabs/recon.keytab
OZONE-SITE.XML_ozone.om.http.auth.kerberos.principal=HTTP/om@EXAMPLE.COM
OZONE-SITE.XML_ozone.client.hbase.enhancements.allowed=true
OZONE-SITE.XML_hdds.scm.wait.time.after.safemode.exit=5s
HADOOP-POLICY.XML_hdds.security.client.datanode.container.protocol.acl=*
OZONE-SITE.XML_hdds.scm.safemode.min.datanode=3
OZONE-SITE.XML_hdds.scm.kerberos.keytab.file=/etc/security/keytabs/scm.keytab
HDFS-SITE.XML_dfs.web.authentication.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.manager.delegation.token.renew-interval=5m
OZONE-SITE.XML_ozone.s3g.secret.http.auth.type=kerberos
OZONE-SITE.XML_hdds.scm.http.auth.kerberos.principal=HTTP/scm@EXAMPLE.COM
OZONE-SITE.XML_ozone.hbase.enhancements.allowed=true
OZONE-SITE.XML_ozone.recon.http.auth.type=kerberos
OZONE-SITE.XML_ozone.s3g.kerberos.keytab.file=/etc/security/keytabs/s3g.keytab
OZONE-SITE.XML_ozone.scm.pipeline.owner.container.count=1
OZONE-SITE.XML_ozone.scm.nodes.scmservice=scm1,scm2,scm3
HADOOP-POLICY.XML_ozone.om.security.client.protocol.acl=*
OZONE-SITE.XML_ozone.httpfs.kerberos.principal=httpfs/httpfs@EXAMPLE.COM
OZONE-SITE.XML_ozone.filesystem.snapshot.enabled=true
OZONE-SITE.XML_ozone.httpfs.http.auth.kerberos.keytab=/etc/security/keytabs/httpfs.keytab
no_proxy=om1,om2,om3,scm1,scm2,scm3,s3g,kdc,localhost,127.0.0.1
HOSTNAME=scm3.org
JAVA_HOME=/usr/local/jdk-21.0.2
OZONE_CONF_DIR=/etc/hadoop
PWD=/opt/hadoop
OZONE_LOG_DIR=/var/log/hadoop
OZONE_UPGRADE_FROM=2.0.0
OM_SERVICE_ID=omservice
HOME=/opt/hadoop
WAITFOR=scm2.org:9894
ENSURE_SCM_BOOTSTRAPPED=/data/metadata/scm/current/VERSION
SHLVL=1
OZONE_UPGRADE_TO=2.1.0
LC_CTYPE=C.UTF-8
OZONE_DATANODE_SECURE_USER=root
PATH=/opt/hadoop/libexec:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/jdk-21.0.2/bin:/opt/hadoop/bin
_=/usr/bin/env</msg>
<status status="PASS" starttime="20250721 07:48:20.264" endtime="20250721 07:48:20.264"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:20.265" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:20.265" endtime="20250721 07:48:20.265"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.258" endtime="20250721 07:48:20.265"/>
</kw>
<msg timestamp="20250721 07:48:20.265" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:20.257" endtime="20250721 07:48:20.265"/>
</kw>
<msg timestamp="20250721 07:48:20.266" level="INFO">${result} = CORE-SITE.XML_hadoop.security.auth_to_local=DEFAULT
OZONE-SITE.XML_ozone.administrators=testuser,recon,om
HTTPFS-SITE.XML_httpfs.hadoop.authentication.type=kerberos
OZONE-SITE.XML_ozone.manager.delega...</msg>
<status status="PASS" starttime="20250721 07:48:20.257" endtime="20250721 07:48:20.266"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:20.266" level="INFO">CORE-SITE.XML_hadoop.security.auth_to_local=DEFAULT
OZONE-SITE.XML_ozone.administrators=testuser,recon,om
HTTPFS-SITE.XML_httpfs.hadoop.authentication.type=kerberos
OZONE-SITE.XML_ozone.manager.delegation.remover.scan.interval=1m
HDFS-SITE.XML_dfs.web.authentication.kerberos.principal=HTTP/ozone@EXAMPLE.COM
HTTPFS-SITE.XML_httpfs.hadoop.authentication.kerberos.keytab=/etc/security/keytabs/httpfs.keytab
OZONE-SITE.XML_ozone.security.http.kerberos.enabled=true
OZONE-SITE.XML_ozone.httpfs.kerberos.keytab.file=/etc/security/keytabs/httpfs.keytab
OZONE-SITE.XML_ozone.security.enabled=true
OZONE-SITE.XML_hdds.scm.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_hdds.secret.key.expiry.duration=1h
OZONE-SITE.XML_ozone.s3.administrators=testuser,s3g
HTTPFS-SITE.XML_hadoop.http.authentication.type=kerberos
CORE-SITE.XML_hadoop.security.authorization=true
OZONE-SITE.XML_hdds.datanode.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.http.basedir=/tmp/ozone_http
HDFS-SITE.XML_dfs.datanode.kerberos.principal=dn/dn@EXAMPLE.COM
OZONE-SITE.XML_ozone.s3g.http.auth.kerberos.principal=HTTP/s3g@EXAMPLE.COM
OZONE-SITE.XML_ozone.server.default.replication=3
CORE-SITE.XML_hadoop.http.authentication.type=kerberos
CORE-SITE.XML_hadoop.proxyuser.httpfs.groups=*
OZONE-SITE.XML_ozone.scm.pipeline.creation.interval=30s
HTTPFS-SITE.XML_hadoop.http.authentication.kerberos.principal=HTTP/httpfs@EXAMPLE.COM
OZONE-SITE.XML_ozone.om.kerberos.principal=om/om@EXAMPLE.COM
OZONE-SITE.XML_ozone.acl.enabled=true
OZONE-SITE.XML_ozone.recon.kerberos.principal=recon/recon@EXAMPLE.COM
OZONE-SITE.XML_hdds.datanode.dir=/data/hdds
OZONE-SITE.XML_ozone.acl.authorizer.class=org.apache.hadoop.ozone.security.acl.OzoneNativeAuthorizer
CORE-SITE.XML_dfs.data.transfer.protection=authentication
OZONE-SITE.XML_ozone.recon.db.dir=/data/metadata/recon
HTTPFS-SITE.XML_hadoop.http.authentication.kerberos.keytab=/etc/security/keytabs/httpfs.keytab
OZONE-SITE.XML_ozone.scm.address.scmservice.scm1=scm1.org
KMS-SITE.XML_hadoop.kms.proxyuser.s3g.users=*
CORE-SITE.XML_hadoop.http.authentication.kerberos.principal=HTTP/ozone@EXAMPLE.COM
OZONE-SITE.XML_ozone.s3g.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_hdds.scm.kerberos.principal=scm/scm@EXAMPLE.COM
OZONE-SITE.XML_hdds.secret.key.rotate.duration=5m
OZONE-SITE.XML_ozone.scm.address.scmservice.scm3=scm3.org
OZONE-SITE.XML_ozone.scm.container.size=1GB
OZONE-SITE.XML_ozone.recon.http.auth.kerberos.principal=HTTP/recon@EXAMPLE.COM
OZONE-SITE.XML_hdds.datanode.volume.min.free.space=100MB
OZONE-SITE.XML_ozone.scm.address.scmservice.scm2=scm2.org
OZONE-SITE.XML_hdds.datanode.http.auth.kerberos.principal=HTTP/db@EXAMPLE.COM
OZONE-SITE.XML_ozone.scm.pipeline.allocated.timeout=2m
OZONE-SITE.XML_ozone.om.kerberos.keytab.file=/etc/security/keytabs/om.keytab
OZONE-SITE.XML_ozone.s3g.secret.http.enabled=true
OZONE-SITE.XML_ozone.om.http.auth.type=kerberos
OZONE-SITE.XML_ozone.httpfs.http.auth.type=kerberos
OZONE-SITE.XML_ozone.scm.datanode.id.dir=/data/metadata
OZONE-SITE.XML_ozone.scm.pipeline.scrub.interval=1m
HADOOP-POLICY.XML_hdds.security.client.scm.certificate.protocol.acl=*
OZONE-SITE.XML_hdds.block.token.enabled=true
OZONE-SITE.XML_hdds.container.token.enabled=true
OZONE-SITE.XML_ozone.client.failover.max.attempts=6
OZONE-SITE.XML_ozone.metadata.dirs=/data/metadata
OZONE-SITE.XML_ozone.recon.address=recon:9891
OZONE-SITE.XML_hdds.scm.http.auth.type=kerberos
HTTPFS-SITE.XML_httpfs.hadoop.authentication.kerberos.principal=httpfs/httpfs@EXAMPLE.COM
HDFS-SITE.XML_dfs.datanode.kerberos.keytab.file=/etc/security/keytabs/dn.keytab
OZONE-SITE.XML_ozone.scm.primordial.node.id=scm1
CORE-SITE.XML_hadoop.http.authentication.signature.secret.file=/etc/security/http_secret
OZONE-SITE.XML_ozone.recon.om.snapshot.task.interval.delay=1m
CORE-SITE.XML_hadoop.security.authentication=kerberos
OZONE-SITE.XML_ozone.httpfs.http.auth.kerberos.principal=HTTP/httpfs@EXAMPLE.COM
OZONE-SITE.XML_hdds.grpc.tls.enabled=true
KMS-SITE.XML_hadoop.kms.proxyuser.s3g.hosts=*
OZONE-SITE.XML_ozone.manager.delegation.token.max-lifetime=30m
OZONE-SITE.XML_ozone.s3g.kerberos.principal=s3g/s3g@EXAMPLE.COM
OZONE-SITE.XML_ozone.scm.service.ids=scmservice
OZONE-SITE.XML_ozone.om.http.auth.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.http.filter.initializers=org.apache.hadoop.security.AuthenticationFilterInitializer
HADOOP-POLICY.XML_hdds.security.client.scm.container.protocol.acl=*
CORE-SITE.XML_hadoop.proxyuser.httpfs.hosts=*
OZONE-SITE.XML_ozone.om.service.ids=omservice
HADOOP-POLICY.XML_hdds.security.client.scm.block.protocol.acl=*
OZONE-SITE.XML_ozone.recon.http.auth.kerberos.keytab=/etc/security/keytabs/recon.keytab
CORE-SITE.XML_hadoop.http.authentication.simple.anonymous.allowed=false
CORE-SITE.XML_hadoop.http.authentication.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.fs.hsync.enabled=true
OZONE-SITE.XML_ozone.om.nodes.omservice=om1,om2,om3
OZONE-SITE.XML_ozone.om.address.omservice.om1=om1
CORE-SITE.XML_hadoop.security.key.provider.path=kms://http@kms:9600/kms
OZONE-SITE.XML_ozone.om.address.omservice.om2=om2
OZONE-SITE.XML_ozone.om.address.omservice.om3=om3
OZONE-SITE.XML_hdds.secret.key.rotate.check.duration=1m
OZONE-SITE.XML_hdds.datanode.http.auth.type=kerberos
OZONE-SITE.XML_ozone.s3g.http.auth.type=kerberos
KMS-SITE.XML_hadoop.kms.proxyuser.s3g.groups=*
OZONE-SITE.XML_ozone.recon.kerberos.keytab.file=/etc/security/keytabs/recon.keytab
OZONE-SITE.XML_ozone.om.http.auth.kerberos.principal=HTTP/om@EXAMPLE.COM
OZONE-SITE.XML_ozone.client.hbase.enhancements.allowed=true
OZONE-SITE.XML_hdds.scm.wait.time.after.safemode.exit=5s
HADOOP-POLICY.XML_hdds.security.client.datanode.container.protocol.acl=*
OZONE-SITE.XML_hdds.scm.safemode.min.datanode=3
OZONE-SITE.XML_hdds.scm.kerberos.keytab.file=/etc/security/keytabs/scm.keytab
HDFS-SITE.XML_dfs.web.authentication.kerberos.keytab=/etc/security/keytabs/HTTP.keytab
OZONE-SITE.XML_ozone.manager.delegation.token.renew-interval=5m
OZONE-SITE.XML_ozone.s3g.secret.http.auth.type=kerberos
OZONE-SITE.XML_hdds.scm.http.auth.kerberos.principal=HTTP/scm@EXAMPLE.COM
OZONE-SITE.XML_ozone.hbase.enhancements.allowed=true
OZONE-SITE.XML_ozone.recon.http.auth.type=kerberos
OZONE-SITE.XML_ozone.s3g.kerberos.keytab.file=/etc/security/keytabs/s3g.keytab
OZONE-SITE.XML_ozone.scm.pipeline.owner.container.count=1
OZONE-SITE.XML_ozone.scm.nodes.scmservice=scm1,scm2,scm3
HADOOP-POLICY.XML_ozone.om.security.client.protocol.acl=*
OZONE-SITE.XML_ozone.httpfs.kerberos.principal=httpfs/httpfs@EXAMPLE.COM
OZONE-SITE.XML_ozone.filesystem.snapshot.enabled=true
OZONE-SITE.XML_ozone.httpfs.http.auth.kerberos.keytab=/etc/security/keytabs/httpfs.keytab
no_proxy=om1,om2,om3,scm1,scm2,scm3,s3g,kdc,localhost,127.0.0.1
HOSTNAME=scm3.org
JAVA_HOME=/usr/local/jdk-21.0.2
OZONE_CONF_DIR=/etc/hadoop
PWD=/opt/hadoop
OZONE_LOG_DIR=/var/log/hadoop
OZONE_UPGRADE_FROM=2.0.0
OM_SERVICE_ID=omservice
HOME=/opt/hadoop
WAITFOR=scm2.org:9894
ENSURE_SCM_BOOTSTRAPPED=/data/metadata/scm/current/VERSION
SHLVL=1
OZONE_UPGRADE_TO=2.1.0
LC_CTYPE=C.UTF-8
OZONE_DATANODE_SECURE_USER=root
PATH=/opt/hadoop/libexec:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/jdk-21.0.2/bin:/opt/hadoop/bin
_=/usr/bin/env</msg>
<status status="PASS" starttime="20250721 07:48:20.266" endtime="20250721 07:48:20.266"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'%{OZONE_UPGRADE_FROM}' == '1.1.0'</arg>
<arg>OM finalization not supported in version %{OZONE_UPGRADE_FROM}</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:20.266" endtime="20250721 07:48:20.266"/>
</kw>
<kw name="OM Finalization Status" library="lib">
<var>${result}</var>
<kw name="Get OM Service Param" library="lib">
<var>${param}</var>
<kw name="Get OM Service ID" library="lib">
<var>${service_id}</var>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${service_id}</var>
<arg>OM_SERVICE_ID</arg>
<arg>${EMPTY}</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20250721 07:48:20.268" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20250721 07:48:20.267" endtime="20250721 07:48:20.268"/>
</kw>
<return>
<value>${service_id}</value>
<status status="PASS" starttime="20250721 07:48:20.268" endtime="20250721 07:48:20.268"/>
</return>
<msg timestamp="20250721 07:48:20.268" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20250721 07:48:20.267" endtime="20250721 07:48:20.268"/>
</kw>
<if>
<branch type="IF" condition="'${service_id}' == ''">
<return>
<value>--service-host om</value>
<status status="NOT RUN" starttime="20250721 07:48:20.269" endtime="20250721 07:48:20.269"/>
</return>
<status status="NOT RUN" starttime="20250721 07:48:20.268" endtime="20250721 07:48:20.269"/>
</branch>
<branch type="ELSE">
<return>
<value>--service-id '${service_id}'</value>
<status status="PASS" starttime="20250721 07:48:20.269" endtime="20250721 07:48:20.269"/>
</return>
<status status="PASS" starttime="20250721 07:48:20.269" endtime="20250721 07:48:20.269"/>
</branch>
<status status="PASS" starttime="20250721 07:48:20.268" endtime="20250721 07:48:20.269"/>
</if>
<msg timestamp="20250721 07:48:20.269" level="INFO">${param} = --service-id 'omservice'</msg>
<status status="PASS" starttime="20250721 07:48:20.267" endtime="20250721 07:48:20.269"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om finalizationstatus ${param}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:20.272" level="INFO">Running command 'ozone admin om finalizationstatus --service-id 'omservice' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:22.232" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:22.232" level="INFO">${output} = ALREADY_FINALIZED</msg>
<status status="PASS" starttime="20250721 07:48:20.270" endtime="20250721 07:48:22.232"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:22.233" level="INFO">ALREADY_FINALIZED</msg>
<status status="PASS" starttime="20250721 07:48:22.232" endtime="20250721 07:48:22.233"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:22.233" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:22.233" endtime="20250721 07:48:22.233"/>
</kw>
<status status="PASS" starttime="20250721 07:48:20.270" endtime="20250721 07:48:22.234"/>
</kw>
<msg timestamp="20250721 07:48:22.234" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:20.269" endtime="20250721 07:48:22.234"/>
</kw>
<msg timestamp="20250721 07:48:22.234" level="INFO">${result} = ALREADY_FINALIZED</msg>
<status status="PASS" starttime="20250721 07:48:20.269" endtime="20250721 07:48:22.234"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:22.234" level="INFO">ALREADY_FINALIZED</msg>
<status status="PASS" starttime="20250721 07:48:22.234" endtime="20250721 07:48:22.234"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20250721 07:48:22.234" endtime="20250721 07:48:22.234"/>
</return>
<msg timestamp="20250721 07:48:22.234" level="INFO">${result} = ALREADY_FINALIZED</msg>
<status status="PASS" starttime="20250721 07:48:20.267" endtime="20250721 07:48:22.235"/>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<arg>${result}</arg>
<arg>ALREADY_FINALIZED</arg>
<arg>FINALIZATION_DONE</arg>
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<status status="PASS" starttime="20250721 07:48:22.235" endtime="20250721 07:48:22.235"/>
</kw>
<tag>finalized</tag>
<tag>om</tag>
<timeout value="10 minutes"/>
<status status="PASS" starttime="20250721 07:48:20.219" endtime="20250721 07:48:22.235"/>
</test>
<test id="s1-s1-t2" name="Check SCM Finalized" line="33">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:48:22.237" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:22.237" endtime="20250721 07:48:22.237"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:48:22.237" endtime="20250721 07:48:22.237"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:22.237" endtime="20250721 07:48:22.238"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:22.237" endtime="20250721 07:48:22.238"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:48:22.237" endtime="20250721 07:48:22.238"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:48:22.238" endtime="20250721 07:48:22.238"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.237" endtime="20250721 07:48:22.238"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:22.238" endtime="20250721 07:48:22.238"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:22.241" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:22.245" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:22.245" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:48:22.239" endtime="20250721 07:48:22.245"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:22.246" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:48:22.245" endtime="20250721 07:48:22.246"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:22.246" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:22.246" endtime="20250721 07:48:22.246"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.239" endtime="20250721 07:48:22.246"/>
</kw>
<msg timestamp="20250721 07:48:22.246" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:22.239" endtime="20250721 07:48:22.247"/>
</kw>
<msg timestamp="20250721 07:48:22.247" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:48:22.238" endtime="20250721 07:48:22.247"/>
</kw>
<msg timestamp="20250721 07:48:22.247" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:22.238" endtime="20250721 07:48:22.247"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:22.247" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:22.247" endtime="20250721 07:48:22.247"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:22.250" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:22.286" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:22.286" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:22.248" endtime="20250721 07:48:22.286"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:22.287" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:22.286" endtime="20250721 07:48:22.287"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:22.287" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:22.287" endtime="20250721 07:48:22.287"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.248" endtime="20250721 07:48:22.287"/>
</kw>
<msg timestamp="20250721 07:48:22.287" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:22.248" endtime="20250721 07:48:22.288"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.248" endtime="20250721 07:48:22.288"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.247" endtime="20250721 07:48:22.288"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.236" endtime="20250721 07:48:22.288"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.236" endtime="20250721 07:48:22.288"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'%{OZONE_UPGRADE_FROM}' == '1.1.0'</arg>
<arg>HDDS finalization not supported in version %{OZONE_UPGRADE_FROM}</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:22.288" endtime="20250721 07:48:22.288"/>
</kw>
<kw name="SCM Finalization Status" library="lib">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm finalizationstatus</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:22.291" level="INFO">Running command 'ozone admin scm finalizationstatus 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:24.103" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:24.103" level="INFO">${output} = FINALIZATION_DONE</msg>
<status status="PASS" starttime="20250721 07:48:22.289" endtime="20250721 07:48:24.103"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:24.104" level="INFO">FINALIZATION_DONE</msg>
<status status="PASS" starttime="20250721 07:48:24.103" endtime="20250721 07:48:24.104"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:24.104" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:24.104" endtime="20250721 07:48:24.104"/>
</kw>
<status status="PASS" starttime="20250721 07:48:22.289" endtime="20250721 07:48:24.105"/>
</kw>
<msg timestamp="20250721 07:48:24.105" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:22.289" endtime="20250721 07:48:24.105"/>
</kw>
<msg timestamp="20250721 07:48:24.105" level="INFO">${result} = FINALIZATION_DONE</msg>
<status status="PASS" starttime="20250721 07:48:22.288" endtime="20250721 07:48:24.105"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:24.105" level="INFO">FINALIZATION_DONE</msg>
<status status="PASS" starttime="20250721 07:48:24.105" endtime="20250721 07:48:24.105"/>
</kw>
<return>
<value>${result}</value>
<status status="PASS" starttime="20250721 07:48:24.105" endtime="20250721 07:48:24.105"/>
</return>
<msg timestamp="20250721 07:48:24.106" level="INFO">${result} = FINALIZATION_DONE</msg>
<status status="PASS" starttime="20250721 07:48:22.288" endtime="20250721 07:48:24.106"/>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<arg>${result}</arg>
<arg>ALREADY_FINALIZED</arg>
<arg>FINALIZATION_DONE</arg>
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<status status="PASS" starttime="20250721 07:48:24.106" endtime="20250721 07:48:24.106"/>
</kw>
<tag>finalized</tag>
<tag>scm</tag>
<timeout value="10 minutes"/>
<status status="PASS" starttime="20250721 07:48:22.235" endtime="20250721 07:48:24.106"/>
</test>
<doc>Finalize Upgrade of the Ozone cluster</doc>
<status status="PASS" starttime="20250721 07:48:19.313" endtime="20250721 07:48:24.107"/>
</suite>
<suite id="s1-s2" name="2.0.0-2.1.0-1-original-generate-old1" source="/opt/ozone/smoketest/upgrade/generate.robot">
<kw name="Kinit test user" library="commonlib" type="SETUP">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:48:24.767" endtime="20250721 07:48:24.767"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:24.771" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:25.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:25.638" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:48:24.768" endtime="20250721 07:48:25.638"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:25.638" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:48:25.638" endtime="20250721 07:48:25.639"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:25.639" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:25.639" endtime="20250721 07:48:25.639"/>
</kw>
<status status="PASS" starttime="20250721 07:48:24.768" endtime="20250721 07:48:25.639"/>
</kw>
<msg timestamp="20250721 07:48:25.639" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:24.768" endtime="20250721 07:48:25.639"/>
</kw>
<msg timestamp="20250721 07:48:25.640" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:48:24.767" endtime="20250721 07:48:25.640"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:25.640" endtime="20250721 07:48:25.640"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:25.640" endtime="20250721 07:48:25.640"/>
</branch>
<status status="PASS" starttime="20250721 07:48:25.640" endtime="20250721 07:48:25.640"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:48:25.641" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:48:25.640" endtime="20250721 07:48:25.641"/>
</kw>
<status status="PASS" starttime="20250721 07:48:24.767" endtime="20250721 07:48:25.641"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:25.641" endtime="20250721 07:48:25.641"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:25.644" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:25.648" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:25.648" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:48:25.642" endtime="20250721 07:48:25.648"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:25.649" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:48:25.648" endtime="20250721 07:48:25.649"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:25.649" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:25.649" endtime="20250721 07:48:25.649"/>
</kw>
<status status="PASS" starttime="20250721 07:48:25.642" endtime="20250721 07:48:25.649"/>
</kw>
<msg timestamp="20250721 07:48:25.649" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:25.642" endtime="20250721 07:48:25.650"/>
</kw>
<msg timestamp="20250721 07:48:25.650" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:48:25.641" endtime="20250721 07:48:25.650"/>
</kw>
<msg timestamp="20250721 07:48:25.650" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:25.641" endtime="20250721 07:48:25.650"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:25.650" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:25.650" endtime="20250721 07:48:25.650"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:25.653" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:25.676" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:25.676" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:25.652" endtime="20250721 07:48:25.676"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:25.677" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:25.676" endtime="20250721 07:48:25.677"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:25.677" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:25.677" endtime="20250721 07:48:25.677"/>
</kw>
<status status="PASS" starttime="20250721 07:48:25.651" endtime="20250721 07:48:25.677"/>
</kw>
<msg timestamp="20250721 07:48:25.677" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:25.651" endtime="20250721 07:48:25.677"/>
</kw>
<status status="PASS" starttime="20250721 07:48:25.651" endtime="20250721 07:48:25.678"/>
</kw>
<status status="PASS" starttime="20250721 07:48:25.650" endtime="20250721 07:48:25.678"/>
</kw>
<status status="PASS" starttime="20250721 07:48:24.766" endtime="20250721 07:48:25.678"/>
</kw>
<test id="s1-s2-t1" name="Create a volume and bucket" line="29">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create ${PREFIX}-volume</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:25.683" level="INFO">Running command 'ozone sh volume create old1-volume 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:28.059" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:28.059" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:25.680" endtime="20250721 07:48:28.059"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:28.060" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:28.059" endtime="20250721 07:48:28.060"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:28.060" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:28.060" endtime="20250721 07:48:28.061"/>
</kw>
<status status="PASS" starttime="20250721 07:48:25.680" endtime="20250721 07:48:28.061"/>
</kw>
<msg timestamp="20250721 07:48:28.061" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:25.679" endtime="20250721 07:48:28.061"/>
</kw>
<msg timestamp="20250721 07:48:28.061" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:25.679" endtime="20250721 07:48:28.061"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:28.061" endtime="20250721 07:48:28.062"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /${PREFIX}-volume/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:28.065" level="INFO">Running command 'ozone sh bucket create /old1-volume/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:30.255" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:30.255" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:28.063" endtime="20250721 07:48:30.255"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:30.256" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:30.256" endtime="20250721 07:48:30.256"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:30.257" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:30.256" endtime="20250721 07:48:30.257"/>
</kw>
<status status="PASS" starttime="20250721 07:48:28.062" endtime="20250721 07:48:30.257"/>
</kw>
<msg timestamp="20250721 07:48:30.257" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:28.062" endtime="20250721 07:48:30.257"/>
</kw>
<msg timestamp="20250721 07:48:30.257" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:28.062" endtime="20250721 07:48:30.257"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:30.257" endtime="20250721 07:48:30.257"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:25.678" endtime="20250721 07:48:30.258"/>
</test>
<test id="s1-s2-t2" name="Create key" line="36">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:30.261" level="INFO">Running command 'echo "old1: key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20250721 07:48:30.263" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:30.263" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:30.259" endtime="20250721 07:48:30.263"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:30.264" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:30.264" endtime="20250721 07:48:30.264"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:30.264" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:30.264" endtime="20250721 07:48:30.264"/>
</kw>
<status status="PASS" starttime="20250721 07:48:30.259" endtime="20250721 07:48:30.265"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:30.268" level="INFO">Running command 'ozone sh key put /old1-volume/old1-bucket/old1-key /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:34.531" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:34.531" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:30.266" endtime="20250721 07:48:34.531"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:34.532" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:34.531" endtime="20250721 07:48:34.532"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:34.532" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:34.532" endtime="20250721 07:48:34.532"/>
</kw>
<status status="PASS" starttime="20250721 07:48:30.265" endtime="20250721 07:48:34.532"/>
</kw>
<msg timestamp="20250721 07:48:34.532" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:30.265" endtime="20250721 07:48:34.532"/>
</kw>
<msg timestamp="20250721 07:48:34.533" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:30.265" endtime="20250721 07:48:34.533"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:34.533" endtime="20250721 07:48:34.533"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:34.536" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:34.540" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:34.540" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:34.533" endtime="20250721 07:48:34.540"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:34.540" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:34.540" endtime="20250721 07:48:34.540"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:34.541" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:34.541" endtime="20250721 07:48:34.541"/>
</kw>
<status status="PASS" starttime="20250721 07:48:34.533" endtime="20250721 07:48:34.541"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:30.258" endtime="20250721 07:48:34.541"/>
</test>
<test id="s1-s2-t3" name="Create a bucket in s3v volume" line="42">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /s3v/${PREFIX}-bucket</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:34.545" level="INFO">Running command 'ozone sh bucket create /s3v/old1-bucket 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:36.808" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:36.808" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:34.543" endtime="20250721 07:48:36.808"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:36.809" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:36.809" endtime="20250721 07:48:36.809"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:36.810" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:36.810" endtime="20250721 07:48:36.810"/>
</kw>
<status status="PASS" starttime="20250721 07:48:34.543" endtime="20250721 07:48:36.810"/>
</kw>
<msg timestamp="20250721 07:48:36.810" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:34.543" endtime="20250721 07:48:36.810"/>
</kw>
<msg timestamp="20250721 07:48:36.810" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:34.542" endtime="20250721 07:48:36.810"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:36.811" endtime="20250721 07:48:36.811"/>
</kw>
<tag>create-volume-and-bucket</tag>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:34.542" endtime="20250721 07:48:36.811"/>
</test>
<test id="s1-s2-t4" name="Create key in the bucket in s3v volume" line="47">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: another key created using Ozone Shell" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:36.815" level="INFO">Running command 'echo "old1: another key created using Ozone Shell" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20250721 07:48:36.817" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:36.817" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:36.813" endtime="20250721 07:48:36.817"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:36.818" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:36.818" endtime="20250721 07:48:36.818"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:36.819" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:36.818" endtime="20250721 07:48:36.819"/>
</kw>
<status status="PASS" starttime="20250721 07:48:36.812" endtime="20250721 07:48:36.819"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /s3v/${PREFIX}-bucket/key1-shell /tmp/sourcekey</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:36.822" level="INFO">Running command 'ozone sh key put /s3v/old1-bucket/key1-shell /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:41.073" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:41.073" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:36.820" endtime="20250721 07:48:41.073"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:41.074" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:41.073" endtime="20250721 07:48:41.074"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:41.074" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:41.074" endtime="20250721 07:48:41.074"/>
</kw>
<status status="PASS" starttime="20250721 07:48:36.820" endtime="20250721 07:48:41.074"/>
</kw>
<msg timestamp="20250721 07:48:41.075" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:36.819" endtime="20250721 07:48:41.075"/>
</kw>
<msg timestamp="20250721 07:48:41.075" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:36.819" endtime="20250721 07:48:41.075"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:41.075" endtime="20250721 07:48:41.075"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:41.078" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:41.082" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:41.082" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:41.076" endtime="20250721 07:48:41.082"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:41.083" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:41.082" endtime="20250721 07:48:41.083"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:41.083" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:41.083" endtime="20250721 07:48:41.083"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.075" endtime="20250721 07:48:41.083"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:36.812" endtime="20250721 07:48:41.083"/>
</test>
<test id="s1-s2-t5" name="Try to create a bucket using S3 API" line="53">
<kw name="Setup v4 headers" library="commonawslib" type="SETUP">
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:48:41.085" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:41.085" endtime="20250721 07:48:41.085"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:48:41.086" endtime="20250721 07:48:41.086"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:41.086" endtime="20250721 07:48:41.086"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:41.086" endtime="20250721 07:48:41.086"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:48:41.086" endtime="20250721 07:48:41.086"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:48:41.086" endtime="20250721 07:48:41.086"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.085" endtime="20250721 07:48:41.086"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:48:41.087" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.087"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.087"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.088"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.088"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.088"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:48:41.088" endtime="20250721 07:48:41.088"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.088"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:41.088" endtime="20250721 07:48:41.088"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:41.091" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:41.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:41.095" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:48:41.089" endtime="20250721 07:48:41.095"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:41.096" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:48:41.095" endtime="20250721 07:48:41.096"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:41.096" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:41.096" endtime="20250721 07:48:41.096"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.089" endtime="20250721 07:48:41.096"/>
</kw>
<msg timestamp="20250721 07:48:41.096" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:41.089" endtime="20250721 07:48:41.096"/>
</kw>
<msg timestamp="20250721 07:48:41.096" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:48:41.088" endtime="20250721 07:48:41.097"/>
</kw>
<msg timestamp="20250721 07:48:41.097" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:41.088" endtime="20250721 07:48:41.097"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:41.097" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:41.097" endtime="20250721 07:48:41.097"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:41.100" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:41.123" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:41.123" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:41.098" endtime="20250721 07:48:41.123"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:41.124" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:41.124" endtime="20250721 07:48:41.124"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:41.125" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:41.124" endtime="20250721 07:48:41.125"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.098" endtime="20250721 07:48:41.125"/>
</kw>
<msg timestamp="20250721 07:48:41.125" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:41.098" endtime="20250721 07:48:41.125"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.098" endtime="20250721 07:48:41.125"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.097" endtime="20250721 07:48:41.125"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.087" endtime="20250721 07:48:41.125"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.086" endtime="20250721 07:48:41.125"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Setup secure v4 headers</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup secure v4 headers" library="commonawslib">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:41.128" level="INFO">Running command 'ozone s3 getsecret --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:43.161" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:43.161" level="INFO">${output} = awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9</msg>
<status status="PASS" starttime="20250721 07:48:41.126" endtime="20250721 07:48:43.161"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:43.162" level="INFO">awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9</msg>
<status status="PASS" starttime="20250721 07:48:43.162" endtime="20250721 07:48:43.163"/>
</kw>
<msg timestamp="20250721 07:48:43.163" level="INFO">${result} = awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9</msg>
<status status="PASS" starttime="20250721 07:48:41.126" endtime="20250721 07:48:43.163"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${exists}</var>
<arg>Should Contain</arg>
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20250721 07:48:43.164" level="FAIL">'awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9' does not contain 'S3_SECRET_ALREADY_EXISTS'</msg>
<status status="FAIL" starttime="20250721 07:48:43.163" endtime="20250721 07:48:43.164"/>
</kw>
<msg timestamp="20250721 07:48:43.164" level="INFO">${exists} = False</msg>
<status status="PASS" starttime="20250721 07:48:43.163" endtime="20250721 07:48:43.164"/>
</kw>
<if>
<branch type="IF" condition="${exists}">
<kw name="Execute" library="os">
<arg>ozone s3 revokesecret -y ${OM_HA_PARAM}</arg>
<status status="NOT RUN" starttime="20250721 07:48:43.164" endtime="20250721 07:48:43.164"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<status status="NOT RUN" starttime="20250721 07:48:43.165" endtime="20250721 07:48:43.165"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:43.164" endtime="20250721 07:48:43.165"/>
</branch>
<status status="PASS" starttime="20250721 07:48:43.164" endtime="20250721 07:48:43.165"/>
</if>
<kw name="Get Regexp Matches" library="String">
<var>${accessKey}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsAccessKey=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250721 07:48:43.165" level="INFO">${accessKey} = ['testuser/scm@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250721 07:48:43.165" endtime="20250721 07:48:43.165"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey}</arg>
<arg>testuser</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20250721 07:48:43.166" level="INFO">${accessKey} = ['testuser/scm@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250721 07:48:43.166" endtime="20250721 07:48:43.166"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${secret}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsSecret=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250721 07:48:43.167" level="INFO">${secret} = ['e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9']</msg>
<status status="PASS" starttime="20250721 07:48:43.166" endtime="20250721 07:48:43.167"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250721 07:48:43.168" level="INFO">${accessKey} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:43.167" endtime="20250721 07:48:43.168"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${secret}</var>
<arg>${secret[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250721 07:48:43.169" level="INFO">${secret} = e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9</msg>
<status status="PASS" starttime="20250721 07:48:43.168" endtime="20250721 07:48:43.169"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.signature_version s3v4</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:43.173" level="INFO">Running command 'aws configure set default.s3.signature_version s3v4 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:43.573" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:43.573" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:43.170" endtime="20250721 07:48:43.573"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:43.574" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:43.573" endtime="20250721 07:48:43.574"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:43.574" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:43.574" endtime="20250721 07:48:43.575"/>
</kw>
<status status="PASS" starttime="20250721 07:48:43.170" endtime="20250721 07:48:43.575"/>
</kw>
<msg timestamp="20250721 07:48:43.575" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:43.169" endtime="20250721 07:48:43.575"/>
</kw>
<status status="PASS" starttime="20250721 07:48:43.169" endtime="20250721 07:48:43.575"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_access_key_id ${accessKey}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:43.579" level="INFO">Running command 'aws configure set aws_access_key_id testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:43.992" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:43.992" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:43.576" endtime="20250721 07:48:43.992"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:43.993" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:43.993" endtime="20250721 07:48:43.993"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:43.994" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:43.993" endtime="20250721 07:48:43.994"/>
</kw>
<status status="PASS" starttime="20250721 07:48:43.576" endtime="20250721 07:48:43.994"/>
</kw>
<msg timestamp="20250721 07:48:43.994" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:43.575" endtime="20250721 07:48:43.994"/>
</kw>
<status status="PASS" starttime="20250721 07:48:43.575" endtime="20250721 07:48:43.994"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key ${secret}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:43.997" level="INFO">Running command 'aws configure set aws_secret_access_key e5e61d8170a9091a27bda0d3f2405ef1cf7cb97c795f7bdeb1ed427cc38466f9 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:44.361" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:44.362" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:43.995" endtime="20250721 07:48:44.362"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:44.363" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:44.362" endtime="20250721 07:48:44.363"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:44.363" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:44.363" endtime="20250721 07:48:44.363"/>
</kw>
<status status="PASS" starttime="20250721 07:48:43.995" endtime="20250721 07:48:44.363"/>
</kw>
<msg timestamp="20250721 07:48:44.363" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:43.995" endtime="20250721 07:48:44.363"/>
</kw>
<status status="PASS" starttime="20250721 07:48:43.994" endtime="20250721 07:48:44.363"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set region us-west-1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:44.367" level="INFO">Running command 'aws configure set region us-west-1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:44.731" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:44.731" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:44.364" endtime="20250721 07:48:44.731"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:44.732" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:44.731" endtime="20250721 07:48:44.732"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:44.732" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:44.732" endtime="20250721 07:48:44.732"/>
</kw>
<status status="PASS" starttime="20250721 07:48:44.364" endtime="20250721 07:48:44.732"/>
</kw>
<msg timestamp="20250721 07:48:44.733" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:44.364" endtime="20250721 07:48:44.733"/>
</kw>
<status status="PASS" starttime="20250721 07:48:44.364" endtime="20250721 07:48:44.733"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.addressing_style ${OZONE_S3_ADDRESS_STYLE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:44.736" level="INFO">Running command 'aws configure set default.s3.addressing_style path 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:45.093" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:45.093" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:44.734" endtime="20250721 07:48:45.093"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:45.094" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:45.093" endtime="20250721 07:48:45.094"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:45.094" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:45.094" endtime="20250721 07:48:45.094"/>
</kw>
<status status="PASS" starttime="20250721 07:48:44.733" endtime="20250721 07:48:45.094"/>
</kw>
<msg timestamp="20250721 07:48:45.095" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:44.733" endtime="20250721 07:48:45.095"/>
</kw>
<status status="PASS" starttime="20250721 07:48:44.733" endtime="20250721 07:48:45.095"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.126" endtime="20250721 07:48:45.095"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.125" endtime="20250721 07:48:45.095"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Setup dummy credentials for S3</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:48:45.095" endtime="20250721 07:48:45.095"/>
</kw>
<status status="PASS" starttime="20250721 07:48:41.084" endtime="20250721 07:48:45.095"/>
</kw>
<kw name="Generate Ozone String" library="commonawslib">
<var>${random}</var>
<kw name="Generate Random String" library="String">
<var>${randStr}</var>
<arg>10</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:48:45.096" level="INFO">${randStr} = 4313655787</msg>
<status status="PASS" starttime="20250721 07:48:45.096" endtime="20250721 07:48:45.096"/>
</kw>
<msg timestamp="20250721 07:48:45.096" level="INFO">${random} = ozone-test-4313655787</msg>
<status status="PASS" starttime="20250721 07:48:45.095" endtime="20250721 07:48:45.096"/>
</kw>
<kw name="Create bucket with name" library="commonawslib">
<var>${output}</var>
<arg>${PREFIX}-bucket-${random}</arg>
<kw name="Execute AWSS3APICli" library="commonawslib">
<var>${result}</var>
<arg>create-bucket --bucket ${bucket}</arg>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${ENDPOINT_URL} ${command}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:45.100" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 create-bucket --bucket old1-bucket-ozone-test-4313655787 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:46.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:46.409" level="INFO">${output} = {
    "Location": "http://s3g:9878/old1-bucket-ozone-test-4313655787"
}</msg>
<status status="PASS" starttime="20250721 07:48:45.098" endtime="20250721 07:48:46.409"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:46.410" level="INFO">{
    "Location": "http://s3g:9878/old1-bucket-ozone-test-4313655787"
}</msg>
<status status="PASS" starttime="20250721 07:48:46.409" endtime="20250721 07:48:46.410"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:46.410" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:46.410" endtime="20250721 07:48:46.410"/>
</kw>
<status status="PASS" starttime="20250721 07:48:45.097" endtime="20250721 07:48:46.410"/>
</kw>
<msg timestamp="20250721 07:48:46.410" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:45.097" endtime="20250721 07:48:46.410"/>
</kw>
<msg timestamp="20250721 07:48:46.411" level="INFO">${output} = {
    "Location": "http://s3g:9878/old1-bucket-ozone-test-4313655787"
}</msg>
<status status="PASS" starttime="20250721 07:48:45.097" endtime="20250721 07:48:46.411"/>
</kw>
<msg timestamp="20250721 07:48:46.411" level="INFO">${result} = {
    "Location": "http://s3g:9878/old1-bucket-ozone-test-4313655787"
}</msg>
<status status="PASS" starttime="20250721 07:48:45.097" endtime="20250721 07:48:46.411"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Location</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:46.411" endtime="20250721 07:48:46.411"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>${bucket}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:46.411" endtime="20250721 07:48:46.411"/>
</kw>
<msg timestamp="20250721 07:48:46.411" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20250721 07:48:45.096" endtime="20250721 07:48:46.412"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${output}</arg>
<arg>${None}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250721 07:48:46.412" endtime="20250721 07:48:46.412"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:41.084" endtime="20250721 07:48:46.412"/>
</test>
<test id="s1-s2-t6" name="Create key using S3 API" line="60">
<kw name="Execute and checkrc" library="os">
<arg>echo "${PREFIX}: key created using S3 API" &gt; /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:46.416" level="INFO">Running command 'echo "old1: key created using S3 API" &gt; /tmp/sourcekey'.</msg>
<msg timestamp="20250721 07:48:46.417" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:46.418" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:46.413" endtime="20250721 07:48:46.418"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:46.418" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:46.418" endtime="20250721 07:48:46.418"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:46.419" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:46.418" endtime="20250721 07:48:46.419"/>
</kw>
<status status="PASS" starttime="20250721 07:48:46.413" endtime="20250721 07:48:46.419"/>
</kw>
<kw name="Execute AWSS3APICli and checkrc" library="commonawslib">
<var>${output}</var>
<arg>put-object --bucket ${PREFIX}-bucket --key key2-s3api --body /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${ENDPOINT_URL} ${command}</arg>
<arg>${expected_error_code}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:46.422" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 put-object --bucket old1-bucket --key key2-s3api --body /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:47.895" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:47.895" level="INFO">${output} = {
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\""
}</msg>
<status status="PASS" starttime="20250721 07:48:46.420" endtime="20250721 07:48:47.895"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:47.896" level="INFO">{
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\""
}</msg>
<status status="PASS" starttime="20250721 07:48:47.896" endtime="20250721 07:48:47.896"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:47.897" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:47.897" endtime="20250721 07:48:47.897"/>
</kw>
<msg timestamp="20250721 07:48:47.897" level="INFO">${output} = {
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\""
}</msg>
<status status="PASS" starttime="20250721 07:48:46.419" endtime="20250721 07:48:47.897"/>
</kw>
<msg timestamp="20250721 07:48:47.897" level="INFO">${output} = {
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\""
}</msg>
<status status="PASS" starttime="20250721 07:48:46.419" endtime="20250721 07:48:47.897"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>error</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:47.897" endtime="20250721 07:48:47.898"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/sourcekey</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:47.900" level="INFO">Running command 'rm /tmp/sourcekey 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:47.904" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:47.904" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:47.898" endtime="20250721 07:48:47.904"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:47.905" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:47.904" endtime="20250721 07:48:47.905"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:47.905" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:47.905" endtime="20250721 07:48:47.905"/>
</kw>
<status status="PASS" starttime="20250721 07:48:47.898" endtime="20250721 07:48:47.905"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:46.412" endtime="20250721 07:48:47.906"/>
</test>
<doc>Generate data</doc>
<status status="PASS" starttime="20250721 07:48:24.704" endtime="20250721 07:48:47.907"/>
</suite>
<suite id="s1-s3" name="2.0.0-2.1.0-1-original-validate-old1" source="/opt/ozone/smoketest/upgrade/validate.robot">
<kw name="Kinit test user" library="commonlib" type="SETUP">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:48:48.573" endtime="20250721 07:48:48.573"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:48.576" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:49.422" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:49.422" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:48:48.574" endtime="20250721 07:48:49.422"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:49.423" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:48:49.422" endtime="20250721 07:48:49.423"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:49.423" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:49.423" endtime="20250721 07:48:49.423"/>
</kw>
<status status="PASS" starttime="20250721 07:48:48.573" endtime="20250721 07:48:49.424"/>
</kw>
<msg timestamp="20250721 07:48:49.424" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:48.573" endtime="20250721 07:48:49.424"/>
</kw>
<msg timestamp="20250721 07:48:49.424" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:48:48.573" endtime="20250721 07:48:49.424"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:49.424" endtime="20250721 07:48:49.424"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:49.424" endtime="20250721 07:48:49.424"/>
</branch>
<status status="PASS" starttime="20250721 07:48:49.424" endtime="20250721 07:48:49.424"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:48:49.425" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:48:49.425" endtime="20250721 07:48:49.425"/>
</kw>
<status status="PASS" starttime="20250721 07:48:48.572" endtime="20250721 07:48:49.425"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:49.425" endtime="20250721 07:48:49.425"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:49.429" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:49.433" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:49.433" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:48:49.427" endtime="20250721 07:48:49.433"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:49.433" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:48:49.433" endtime="20250721 07:48:49.434"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:49.434" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:49.434" endtime="20250721 07:48:49.434"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.426" endtime="20250721 07:48:49.434"/>
</kw>
<msg timestamp="20250721 07:48:49.434" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:49.426" endtime="20250721 07:48:49.434"/>
</kw>
<msg timestamp="20250721 07:48:49.434" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:48:49.426" endtime="20250721 07:48:49.434"/>
</kw>
<msg timestamp="20250721 07:48:49.435" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:49.425" endtime="20250721 07:48:49.435"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:49.435" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:49.435" endtime="20250721 07:48:49.435"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:49.438" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:49.459" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:49.459" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:49.436" endtime="20250721 07:48:49.459"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:49.460" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:49.459" endtime="20250721 07:48:49.460"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:49.460" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:49.460" endtime="20250721 07:48:49.460"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.436" endtime="20250721 07:48:49.460"/>
</kw>
<msg timestamp="20250721 07:48:49.461" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:49.436" endtime="20250721 07:48:49.461"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.435" endtime="20250721 07:48:49.461"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.435" endtime="20250721 07:48:49.461"/>
</kw>
<status status="PASS" starttime="20250721 07:48:48.572" endtime="20250721 07:48:49.461"/>
</kw>
<test id="s1-s3-t1" name="Read data from previously created key" line="29">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:48:49.462" level="INFO">${random} = 11710</msg>
<status status="PASS" starttime="20250721 07:48:49.462" endtime="20250721 07:48:49.462"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /${PREFIX}-volume/${PREFIX}-bucket/${PREFIX}-key /tmp/key-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:49.466" level="INFO">Running command 'ozone sh key get /old1-volume/old1-bucket/old1-key /tmp/key-11710 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:53.204" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:53.204" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:49.463" endtime="20250721 07:48:53.204"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:53.205" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:53.205" endtime="20250721 07:48:53.205"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:53.206" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:53.205" endtime="20250721 07:48:53.206"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.463" endtime="20250721 07:48:53.206"/>
</kw>
<msg timestamp="20250721 07:48:53.206" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:49.463" endtime="20250721 07:48:53.206"/>
</kw>
<msg timestamp="20250721 07:48:53.206" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:49.462" endtime="20250721 07:48:53.206"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:53.206" endtime="20250721 07:48:53.207"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:53.209" level="INFO">Running command 'cat /tmp/key-11710 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:53.213" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:53.213" level="INFO">${output} = old1: key created using Ozone Shell</msg>
<status status="PASS" starttime="20250721 07:48:53.207" endtime="20250721 07:48:53.213"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:53.214" level="INFO">old1: key created using Ozone Shell</msg>
<status status="PASS" starttime="20250721 07:48:53.213" endtime="20250721 07:48:53.214"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:53.214" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:53.214" endtime="20250721 07:48:53.214"/>
</kw>
<msg timestamp="20250721 07:48:53.215" level="INFO">${output} = old1: key created using Ozone Shell</msg>
<status status="PASS" starttime="20250721 07:48:53.207" endtime="20250721 07:48:53.215"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:53.215" endtime="20250721 07:48:53.215"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/key-${random}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:53.218" level="INFO">Running command 'rm /tmp/key-11710 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:53.221" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:53.221" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:53.216" endtime="20250721 07:48:53.221"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:53.222" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:53.221" endtime="20250721 07:48:53.222"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:53.222" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:53.222" endtime="20250721 07:48:53.222"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.215" endtime="20250721 07:48:53.222"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:49.461" endtime="20250721 07:48:53.223"/>
</test>
<test id="s1-s3-t2" name="Read key created with Ozone Shell using S3 API" line="37">
<kw name="Setup v4 headers" library="commonawslib" type="SETUP">
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:48:53.224" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:53.224" endtime="20250721 07:48:53.224"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:48:53.225" endtime="20250721 07:48:53.225"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:53.225" endtime="20250721 07:48:53.225"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:53.225" endtime="20250721 07:48:53.225"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:48:53.225" endtime="20250721 07:48:53.225"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:48:53.225" endtime="20250721 07:48:53.225"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.224" endtime="20250721 07:48:53.225"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:48:53.226" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:53.226" endtime="20250721 07:48:53.226"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.227"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.227"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.227"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.227"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.227"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.226" endtime="20250721 07:48:53.227"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.227"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:53.231" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:53.234" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:53.234" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:48:53.229" endtime="20250721 07:48:53.234"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:53.235" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:48:53.234" endtime="20250721 07:48:53.235"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:53.235" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:53.235" endtime="20250721 07:48:53.235"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.228" endtime="20250721 07:48:53.235"/>
</kw>
<msg timestamp="20250721 07:48:53.235" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:53.228" endtime="20250721 07:48:53.236"/>
</kw>
<msg timestamp="20250721 07:48:53.236" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:48:53.228" endtime="20250721 07:48:53.236"/>
</kw>
<msg timestamp="20250721 07:48:53.236" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:53.227" endtime="20250721 07:48:53.236"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:53.236" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:53.236" endtime="20250721 07:48:53.236"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:53.239" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:53.276" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:53.276" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:53.237" endtime="20250721 07:48:53.276"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:53.277" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:53.276" endtime="20250721 07:48:53.277"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:53.277" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:53.277" endtime="20250721 07:48:53.277"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.237" endtime="20250721 07:48:53.277"/>
</kw>
<msg timestamp="20250721 07:48:53.277" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:53.237" endtime="20250721 07:48:53.277"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.237" endtime="20250721 07:48:53.278"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.236" endtime="20250721 07:48:53.278"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.226" endtime="20250721 07:48:53.278"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.225" endtime="20250721 07:48:53.278"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Setup secure v4 headers</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup secure v4 headers" library="commonawslib">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:53.281" level="INFO">Running command 'ozone s3 getsecret --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:55.190" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:48:55.190" level="INFO">${output} = S3_SECRET_ALREADY_EXISTS Secret for 'testuser/scm@EXAMPLE.COM' already exists</msg>
<status status="PASS" starttime="20250721 07:48:53.279" endtime="20250721 07:48:55.190"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:55.191" level="INFO">S3_SECRET_ALREADY_EXISTS Secret for 'testuser/scm@EXAMPLE.COM' already exists</msg>
<status status="PASS" starttime="20250721 07:48:55.191" endtime="20250721 07:48:55.191"/>
</kw>
<msg timestamp="20250721 07:48:55.192" level="INFO">${result} = S3_SECRET_ALREADY_EXISTS Secret for 'testuser/scm@EXAMPLE.COM' already exists</msg>
<status status="PASS" starttime="20250721 07:48:53.278" endtime="20250721 07:48:55.192"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${exists}</var>
<arg>Should Contain</arg>
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:55.192" endtime="20250721 07:48:55.192"/>
</kw>
<msg timestamp="20250721 07:48:55.192" level="INFO">${exists} = True</msg>
<status status="PASS" starttime="20250721 07:48:55.192" endtime="20250721 07:48:55.192"/>
</kw>
<if>
<branch type="IF" condition="${exists}">
<kw name="Execute" library="os">
<arg>ozone s3 revokesecret -y ${OM_HA_PARAM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:55.196" level="INFO">Running command 'ozone s3 revokesecret -y --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:57.271" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:57.271" level="INFO">${output} = S3 secret revoked.</msg>
<status status="PASS" starttime="20250721 07:48:55.194" endtime="20250721 07:48:57.271"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:57.272" level="INFO">S3 secret revoked.</msg>
<status status="PASS" starttime="20250721 07:48:57.271" endtime="20250721 07:48:57.272"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:57.272" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:57.272" endtime="20250721 07:48:57.272"/>
</kw>
<status status="PASS" starttime="20250721 07:48:55.194" endtime="20250721 07:48:57.272"/>
</kw>
<msg timestamp="20250721 07:48:57.273" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:55.193" endtime="20250721 07:48:57.273"/>
</kw>
<status status="PASS" starttime="20250721 07:48:55.193" endtime="20250721 07:48:57.273"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:57.276" level="INFO">Running command 'ozone s3 getsecret --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:59.218" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:59.218" level="INFO">${output} = awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=495373de5bd79541efc2ad6ac483379d16657e4731912017488431b50c329811</msg>
<status status="PASS" starttime="20250721 07:48:57.274" endtime="20250721 07:48:59.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:59.219" level="INFO">awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=495373de5bd79541efc2ad6ac483379d16657e4731912017488431b50c329811</msg>
<status status="PASS" starttime="20250721 07:48:59.219" endtime="20250721 07:48:59.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:59.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:59.220" endtime="20250721 07:48:59.220"/>
</kw>
<status status="PASS" starttime="20250721 07:48:57.274" endtime="20250721 07:48:59.220"/>
</kw>
<msg timestamp="20250721 07:48:59.220" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:57.273" endtime="20250721 07:48:59.220"/>
</kw>
<msg timestamp="20250721 07:48:59.220" level="INFO">${result} = awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=495373de5bd79541efc2ad6ac483379d16657e4731912017488431b50c329811</msg>
<status status="PASS" starttime="20250721 07:48:57.273" endtime="20250721 07:48:59.220"/>
</kw>
<status status="PASS" starttime="20250721 07:48:55.193" endtime="20250721 07:48:59.220"/>
</branch>
<status status="PASS" starttime="20250721 07:48:55.193" endtime="20250721 07:48:59.221"/>
</if>
<kw name="Get Regexp Matches" library="String">
<var>${accessKey}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsAccessKey=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250721 07:48:59.221" level="INFO">${accessKey} = ['testuser/scm@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250721 07:48:59.221" endtime="20250721 07:48:59.221"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey}</arg>
<arg>testuser</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20250721 07:48:59.222" level="INFO">${accessKey} = ['testuser/scm@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250721 07:48:59.221" endtime="20250721 07:48:59.222"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${secret}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsSecret=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250721 07:48:59.222" level="INFO">${secret} = ['495373de5bd79541efc2ad6ac483379d16657e4731912017488431b50c329811']</msg>
<status status="PASS" starttime="20250721 07:48:59.222" endtime="20250721 07:48:59.222"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250721 07:48:59.223" level="INFO">${accessKey} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:48:59.222" endtime="20250721 07:48:59.223"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${secret}</var>
<arg>${secret[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250721 07:48:59.224" level="INFO">${secret} = 495373de5bd79541efc2ad6ac483379d16657e4731912017488431b50c329811</msg>
<status status="PASS" starttime="20250721 07:48:59.223" endtime="20250721 07:48:59.224"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.signature_version s3v4</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:59.227" level="INFO">Running command 'aws configure set default.s3.signature_version s3v4 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:59.622" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:59.622" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:59.225" endtime="20250721 07:48:59.622"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:59.623" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:59.623" endtime="20250721 07:48:59.623"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:59.624" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:59.624" endtime="20250721 07:48:59.624"/>
</kw>
<status status="PASS" starttime="20250721 07:48:59.225" endtime="20250721 07:48:59.624"/>
</kw>
<msg timestamp="20250721 07:48:59.624" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:59.224" endtime="20250721 07:48:59.624"/>
</kw>
<status status="PASS" starttime="20250721 07:48:59.224" endtime="20250721 07:48:59.624"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_access_key_id ${accessKey}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:59.628" level="INFO">Running command 'aws configure set aws_access_key_id testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:00.002" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:00.003" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:59.626" endtime="20250721 07:49:00.003"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:00.003" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:00.003" endtime="20250721 07:49:00.004"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:00.004" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:00.004" endtime="20250721 07:49:00.004"/>
</kw>
<status status="PASS" starttime="20250721 07:48:59.625" endtime="20250721 07:49:00.004"/>
</kw>
<msg timestamp="20250721 07:49:00.004" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:59.625" endtime="20250721 07:49:00.004"/>
</kw>
<status status="PASS" starttime="20250721 07:48:59.625" endtime="20250721 07:49:00.004"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key ${secret}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:00.008" level="INFO">Running command 'aws configure set aws_secret_access_key 495373de5bd79541efc2ad6ac483379d16657e4731912017488431b50c329811 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:00.372" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:00.372" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:00.006" endtime="20250721 07:49:00.372"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:00.373" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:00.372" endtime="20250721 07:49:00.373"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:00.373" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:00.373" endtime="20250721 07:49:00.373"/>
</kw>
<status status="PASS" starttime="20250721 07:49:00.005" endtime="20250721 07:49:00.373"/>
</kw>
<msg timestamp="20250721 07:49:00.373" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:00.005" endtime="20250721 07:49:00.373"/>
</kw>
<status status="PASS" starttime="20250721 07:49:00.004" endtime="20250721 07:49:00.374"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set region us-west-1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:00.377" level="INFO">Running command 'aws configure set region us-west-1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:00.752" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:00.752" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:00.375" endtime="20250721 07:49:00.753"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:00.754" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:00.753" endtime="20250721 07:49:00.754"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:00.754" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:00.754" endtime="20250721 07:49:00.754"/>
</kw>
<status status="PASS" starttime="20250721 07:49:00.374" endtime="20250721 07:49:00.754"/>
</kw>
<msg timestamp="20250721 07:49:00.754" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:00.374" endtime="20250721 07:49:00.754"/>
</kw>
<status status="PASS" starttime="20250721 07:49:00.374" endtime="20250721 07:49:00.755"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.addressing_style ${OZONE_S3_ADDRESS_STYLE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:00.758" level="INFO">Running command 'aws configure set default.s3.addressing_style path 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:01.121" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:01.121" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:00.756" endtime="20250721 07:49:01.121"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:01.122" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:01.121" endtime="20250721 07:49:01.122"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:01.122" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:01.122" endtime="20250721 07:49:01.122"/>
</kw>
<status status="PASS" starttime="20250721 07:49:00.755" endtime="20250721 07:49:01.122"/>
</kw>
<msg timestamp="20250721 07:49:01.122" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:00.755" endtime="20250721 07:49:01.122"/>
</kw>
<status status="PASS" starttime="20250721 07:49:00.755" endtime="20250721 07:49:01.123"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.278" endtime="20250721 07:49:01.123"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.278" endtime="20250721 07:49:01.123"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Setup dummy credentials for S3</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:01.123" endtime="20250721 07:49:01.123"/>
</kw>
<status status="PASS" starttime="20250721 07:48:53.224" endtime="20250721 07:49:01.123"/>
</kw>
<kw name="Execute AWSS3APICli and checkrc" library="commonawslib">
<var>${output}</var>
<arg>get-object --bucket ${PREFIX}-bucket --key key1-shell /tmp/get-result</arg>
<arg>0</arg>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${ENDPOINT_URL} ${command}</arg>
<arg>${expected_error_code}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:01.126" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 get-object --bucket old1-bucket --key key1-shell /tmp/get-result 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:01.797" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:01.797" level="INFO">${output} = {
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:40 GMT",
    "ContentLength": 44,
    "CacheControl": "no-cache",
    "ContentType": "application/octet-stream",
    "Expires...</msg>
<status status="PASS" starttime="20250721 07:49:01.124" endtime="20250721 07:49:01.797"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:01.798" level="INFO">{
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:40 GMT",
    "ContentLength": 44,
    "CacheControl": "no-cache",
    "ContentType": "application/octet-stream",
    "Expires": "Mon, 21 Jul 2025 07:49:01 GMT",
    "Metadata": {},
    "ExpiresString": "Mon, 21 Jul 2025 07:49:01 GMT"
}</msg>
<status status="PASS" starttime="20250721 07:49:01.798" endtime="20250721 07:49:01.798"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:01.799" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:01.798" endtime="20250721 07:49:01.799"/>
</kw>
<msg timestamp="20250721 07:49:01.799" level="INFO">${output} = {
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:40 GMT",
    "ContentLength": 44,
    "CacheControl": "no-cache",
    "ContentType": "application/octet-stream",
    "Expires...</msg>
<status status="PASS" starttime="20250721 07:49:01.124" endtime="20250721 07:49:01.799"/>
</kw>
<msg timestamp="20250721 07:49:01.799" level="INFO">${output} = {
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:40 GMT",
    "ContentLength": 44,
    "CacheControl": "no-cache",
    "ContentType": "application/octet-stream",
    "Expires...</msg>
<status status="PASS" starttime="20250721 07:49:01.123" endtime="20250721 07:49:01.799"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>"ContentLength"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:01.799" endtime="20250721 07:49:01.799"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/get-result</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:01.802" level="INFO">Running command 'cat /tmp/get-result 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:01.806" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:01.806" level="INFO">${output} = old1: another key created using Ozone Shell</msg>
<status status="PASS" starttime="20250721 07:49:01.800" endtime="20250721 07:49:01.806"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:01.807" level="INFO">old1: another key created using Ozone Shell</msg>
<status status="PASS" starttime="20250721 07:49:01.806" endtime="20250721 07:49:01.807"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:01.807" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:01.807" endtime="20250721 07:49:01.807"/>
</kw>
<msg timestamp="20250721 07:49:01.808" level="INFO">${output} = old1: another key created using Ozone Shell</msg>
<status status="PASS" starttime="20250721 07:49:01.800" endtime="20250721 07:49:01.808"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: another key created using Ozone Shell</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:01.808" endtime="20250721 07:49:01.808"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/get-result</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:01.810" level="INFO">Running command 'rm /tmp/get-result 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:01.814" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:01.814" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:01.808" endtime="20250721 07:49:01.814"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:01.815" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:01.814" endtime="20250721 07:49:01.815"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:01.815" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:01.815" endtime="20250721 07:49:01.815"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.808" endtime="20250721 07:49:01.815"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:53.223" endtime="20250721 07:49:01.815"/>
</test>
<test id="s1-s3-t3" name="Read key created with S3 API using S3 API" line="45">
<kw name="Setup v4 headers" library="commonawslib" type="SETUP">
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:49:01.817" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:01.817" endtime="20250721 07:49:01.817"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:49:01.817" endtime="20250721 07:49:01.817"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:49:01.818" endtime="20250721 07:49:01.818"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:49:01.818" endtime="20250721 07:49:01.818"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:49:01.818" endtime="20250721 07:49:01.818"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:49:01.818" endtime="20250721 07:49:01.818"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.817" endtime="20250721 07:49:01.818"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:49:01.819" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:01.819" endtime="20250721 07:49:01.819"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:49:01.819" endtime="20250721 07:49:01.819"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:49:01.819" endtime="20250721 07:49:01.819"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:49:01.819" endtime="20250721 07:49:01.819"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:49:01.819" endtime="20250721 07:49:01.819"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:49:01.820" endtime="20250721 07:49:01.820"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.819" endtime="20250721 07:49:01.820"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:49:01.820" endtime="20250721 07:49:01.820"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:01.823" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:01.827" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:01.827" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:49:01.821" endtime="20250721 07:49:01.827"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:01.827" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:49:01.827" endtime="20250721 07:49:01.827"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:01.828" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:01.828" endtime="20250721 07:49:01.828"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.821" endtime="20250721 07:49:01.828"/>
</kw>
<msg timestamp="20250721 07:49:01.828" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:01.821" endtime="20250721 07:49:01.828"/>
</kw>
<msg timestamp="20250721 07:49:01.828" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:49:01.820" endtime="20250721 07:49:01.828"/>
</kw>
<msg timestamp="20250721 07:49:01.828" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:49:01.820" endtime="20250721 07:49:01.828"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:49:01.829" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:49:01.829" endtime="20250721 07:49:01.829"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:01.832" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:01.881" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:01.881" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:01.830" endtime="20250721 07:49:01.881"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:01.882" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:01.881" endtime="20250721 07:49:01.882"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:01.882" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:01.882" endtime="20250721 07:49:01.882"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.830" endtime="20250721 07:49:01.883"/>
</kw>
<msg timestamp="20250721 07:49:01.883" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:01.830" endtime="20250721 07:49:01.883"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.829" endtime="20250721 07:49:01.883"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.829" endtime="20250721 07:49:01.883"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.818" endtime="20250721 07:49:01.883"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.818" endtime="20250721 07:49:01.883"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Setup secure v4 headers</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup secure v4 headers" library="commonawslib">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:01.887" level="INFO">Running command 'ozone s3 getsecret --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:03.822" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:49:03.822" level="INFO">${output} = S3_SECRET_ALREADY_EXISTS Secret for 'testuser/scm@EXAMPLE.COM' already exists</msg>
<status status="PASS" starttime="20250721 07:49:01.885" endtime="20250721 07:49:03.822"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:03.823" level="INFO">S3_SECRET_ALREADY_EXISTS Secret for 'testuser/scm@EXAMPLE.COM' already exists</msg>
<status status="PASS" starttime="20250721 07:49:03.823" endtime="20250721 07:49:03.823"/>
</kw>
<msg timestamp="20250721 07:49:03.824" level="INFO">${result} = S3_SECRET_ALREADY_EXISTS Secret for 'testuser/scm@EXAMPLE.COM' already exists</msg>
<status status="PASS" starttime="20250721 07:49:01.884" endtime="20250721 07:49:03.824"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${exists}</var>
<arg>Should Contain</arg>
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>S3_SECRET_ALREADY_EXISTS</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:03.824" endtime="20250721 07:49:03.824"/>
</kw>
<msg timestamp="20250721 07:49:03.824" level="INFO">${exists} = True</msg>
<status status="PASS" starttime="20250721 07:49:03.824" endtime="20250721 07:49:03.824"/>
</kw>
<if>
<branch type="IF" condition="${exists}">
<kw name="Execute" library="os">
<arg>ozone s3 revokesecret -y ${OM_HA_PARAM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:03.828" level="INFO">Running command 'ozone s3 revokesecret -y --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:05.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:05.815" level="INFO">${output} = S3 secret revoked.</msg>
<status status="PASS" starttime="20250721 07:49:03.826" endtime="20250721 07:49:05.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:05.816" level="INFO">S3 secret revoked.</msg>
<status status="PASS" starttime="20250721 07:49:05.815" endtime="20250721 07:49:05.816"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:05.816" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:05.816" endtime="20250721 07:49:05.816"/>
</kw>
<status status="PASS" starttime="20250721 07:49:03.825" endtime="20250721 07:49:05.816"/>
</kw>
<msg timestamp="20250721 07:49:05.816" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:03.825" endtime="20250721 07:49:05.816"/>
</kw>
<status status="PASS" starttime="20250721 07:49:03.825" endtime="20250721 07:49:05.817"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone s3 getsecret ${OM_HA_PARAM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:05.820" level="INFO">Running command 'ozone s3 getsecret --om-service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:07.700" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:07.701" level="INFO">${output} = awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=b4e2f29f151cc9d600d271610a25498bc8e65f0a55ede7c4ed085321d7de2aaa</msg>
<status status="PASS" starttime="20250721 07:49:05.818" endtime="20250721 07:49:07.701"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:07.702" level="INFO">awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=b4e2f29f151cc9d600d271610a25498bc8e65f0a55ede7c4ed085321d7de2aaa</msg>
<status status="PASS" starttime="20250721 07:49:07.701" endtime="20250721 07:49:07.702"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:07.702" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:07.702" endtime="20250721 07:49:07.702"/>
</kw>
<status status="PASS" starttime="20250721 07:49:05.817" endtime="20250721 07:49:07.702"/>
</kw>
<msg timestamp="20250721 07:49:07.702" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:05.817" endtime="20250721 07:49:07.702"/>
</kw>
<msg timestamp="20250721 07:49:07.703" level="INFO">${result} = awsAccessKey=testuser/scm@EXAMPLE.COM
awsSecret=b4e2f29f151cc9d600d271610a25498bc8e65f0a55ede7c4ed085321d7de2aaa</msg>
<status status="PASS" starttime="20250721 07:49:05.817" endtime="20250721 07:49:07.703"/>
</kw>
<status status="PASS" starttime="20250721 07:49:03.825" endtime="20250721 07:49:07.703"/>
</branch>
<status status="PASS" starttime="20250721 07:49:03.825" endtime="20250721 07:49:07.703"/>
</if>
<kw name="Get Regexp Matches" library="String">
<var>${accessKey}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsAccessKey=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250721 07:49:07.703" level="INFO">${accessKey} = ['testuser/scm@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250721 07:49:07.703" endtime="20250721 07:49:07.703"/>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey}</arg>
<arg>testuser</arg>
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<msg timestamp="20250721 07:49:07.704" level="INFO">${accessKey} = ['testuser/scm@EXAMPLE.COM']</msg>
<status status="PASS" starttime="20250721 07:49:07.703" endtime="20250721 07:49:07.704"/>
</kw>
<kw name="Get Regexp Matches" library="String">
<var>${secret}</var>
<arg>${result}</arg>
<arg>(?&lt;=awsSecret=).*</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<msg timestamp="20250721 07:49:07.704" level="INFO">${secret} = ['b4e2f29f151cc9d600d271610a25498bc8e65f0a55ede7c4ed085321d7de2aaa']</msg>
<status status="PASS" starttime="20250721 07:49:07.704" endtime="20250721 07:49:07.704"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${accessKey}</var>
<arg>${accessKey[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250721 07:49:07.705" level="INFO">${accessKey} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:49:07.704" endtime="20250721 07:49:07.705"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${secret}</var>
<arg>${secret[0]}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250721 07:49:07.706" level="INFO">${secret} = b4e2f29f151cc9d600d271610a25498bc8e65f0a55ede7c4ed085321d7de2aaa</msg>
<status status="PASS" starttime="20250721 07:49:07.705" endtime="20250721 07:49:07.706"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.signature_version s3v4</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:07.709" level="INFO">Running command 'aws configure set default.s3.signature_version s3v4 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:08.079" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:08.079" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:07.707" endtime="20250721 07:49:08.079"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:08.080" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:08.079" endtime="20250721 07:49:08.080"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:08.081" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:08.080" endtime="20250721 07:49:08.081"/>
</kw>
<status status="PASS" starttime="20250721 07:49:07.706" endtime="20250721 07:49:08.081"/>
</kw>
<msg timestamp="20250721 07:49:08.081" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:07.706" endtime="20250721 07:49:08.081"/>
</kw>
<status status="PASS" starttime="20250721 07:49:07.706" endtime="20250721 07:49:08.081"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_access_key_id ${accessKey}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:08.085" level="INFO">Running command 'aws configure set aws_access_key_id testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:08.445" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:08.445" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:08.082" endtime="20250721 07:49:08.445"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:08.446" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:08.445" endtime="20250721 07:49:08.446"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:08.446" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:08.446" endtime="20250721 07:49:08.446"/>
</kw>
<status status="PASS" starttime="20250721 07:49:08.082" endtime="20250721 07:49:08.447"/>
</kw>
<msg timestamp="20250721 07:49:08.447" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:08.082" endtime="20250721 07:49:08.447"/>
</kw>
<status status="PASS" starttime="20250721 07:49:08.081" endtime="20250721 07:49:08.447"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set aws_secret_access_key ${secret}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:08.450" level="INFO">Running command 'aws configure set aws_secret_access_key b4e2f29f151cc9d600d271610a25498bc8e65f0a55ede7c4ed085321d7de2aaa 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:08.815" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:08.815" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:08.448" endtime="20250721 07:49:08.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:08.816" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:08.815" endtime="20250721 07:49:08.816"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:08.816" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:08.816" endtime="20250721 07:49:08.816"/>
</kw>
<status status="PASS" starttime="20250721 07:49:08.448" endtime="20250721 07:49:08.817"/>
</kw>
<msg timestamp="20250721 07:49:08.817" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:08.447" endtime="20250721 07:49:08.817"/>
</kw>
<status status="PASS" starttime="20250721 07:49:08.447" endtime="20250721 07:49:08.817"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set region us-west-1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:08.820" level="INFO">Running command 'aws configure set region us-west-1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:09.183" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:09.183" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:08.818" endtime="20250721 07:49:09.183"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:09.184" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:09.183" endtime="20250721 07:49:09.184"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:09.184" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:09.184" endtime="20250721 07:49:09.184"/>
</kw>
<status status="PASS" starttime="20250721 07:49:08.818" endtime="20250721 07:49:09.184"/>
</kw>
<msg timestamp="20250721 07:49:09.184" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:08.817" endtime="20250721 07:49:09.184"/>
</kw>
<status status="PASS" starttime="20250721 07:49:08.817" endtime="20250721 07:49:09.185"/>
</kw>
<kw name="Execute" library="os">
<arg>aws configure set default.s3.addressing_style ${OZONE_S3_ADDRESS_STYLE}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:09.188" level="INFO">Running command 'aws configure set default.s3.addressing_style path 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:09.554" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:09.554" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:09.186" endtime="20250721 07:49:09.554"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:09.555" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:09.555" endtime="20250721 07:49:09.555"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:09.556" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:09.555" endtime="20250721 07:49:09.556"/>
</kw>
<status status="PASS" starttime="20250721 07:49:09.185" endtime="20250721 07:49:09.556"/>
</kw>
<msg timestamp="20250721 07:49:09.556" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:09.185" endtime="20250721 07:49:09.556"/>
</kw>
<status status="PASS" starttime="20250721 07:49:09.185" endtime="20250721 07:49:09.556"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.883" endtime="20250721 07:49:09.556"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.883" endtime="20250721 07:49:09.556"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Setup dummy credentials for S3</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:09.556" endtime="20250721 07:49:09.557"/>
</kw>
<status status="PASS" starttime="20250721 07:49:01.816" endtime="20250721 07:49:09.557"/>
</kw>
<kw name="Execute AWSS3APICli and checkrc" library="commonawslib">
<var>${output}</var>
<arg>get-object --bucket ${PREFIX}-bucket --key key2-s3api /tmp/get-result</arg>
<arg>0</arg>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>aws s3api --endpoint-url ${ENDPOINT_URL} ${command}</arg>
<arg>${expected_error_code}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:09.560" level="INFO">Running command 'aws s3api --endpoint-url http://s3g:9878 get-object --bucket old1-bucket --key key2-s3api /tmp/get-result 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:10.088" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:10.088" level="INFO">${output} = {
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:47 GMT",
    "ContentLength": 31,
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\"",
    "CacheControl": "no-cache",
    "Co...</msg>
<status status="PASS" starttime="20250721 07:49:09.558" endtime="20250721 07:49:10.088"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:10.089" level="INFO">{
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:47 GMT",
    "ContentLength": 31,
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\"",
    "CacheControl": "no-cache",
    "ContentType": "application/octet-stream",
    "Expires": "Mon, 21 Jul 2025 07:49:10 GMT",
    "Metadata": {},
    "ExpiresString": "Mon, 21 Jul 2025 07:49:10 GMT"
}</msg>
<status status="PASS" starttime="20250721 07:49:10.088" endtime="20250721 07:49:10.089"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:10.089" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:10.089" endtime="20250721 07:49:10.090"/>
</kw>
<msg timestamp="20250721 07:49:10.090" level="INFO">${output} = {
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:47 GMT",
    "ContentLength": 31,
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\"",
    "CacheControl": "no-cache",
    "Co...</msg>
<status status="PASS" starttime="20250721 07:49:09.557" endtime="20250721 07:49:10.090"/>
</kw>
<msg timestamp="20250721 07:49:10.090" level="INFO">${output} = {
    "AcceptRanges": "bytes",
    "LastModified": "Mon, 21 Jul 2025 07:48:47 GMT",
    "ContentLength": 31,
    "ETag": "\"ccf270711bab7044e5649ddb2501bfdf\"",
    "CacheControl": "no-cache",
    "Co...</msg>
<status status="PASS" starttime="20250721 07:49:09.557" endtime="20250721 07:49:10.090"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>"ContentLength"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:10.090" endtime="20250721 07:49:10.090"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${output}</var>
<arg>cat /tmp/get-result</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:10.093" level="INFO">Running command 'cat /tmp/get-result 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:10.097" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:10.097" level="INFO">${output} = old1: key created using S3 API</msg>
<status status="PASS" starttime="20250721 07:49:10.091" endtime="20250721 07:49:10.097"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:10.098" level="INFO">old1: key created using S3 API</msg>
<status status="PASS" starttime="20250721 07:49:10.097" endtime="20250721 07:49:10.098"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:10.098" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:10.098" endtime="20250721 07:49:10.099"/>
</kw>
<msg timestamp="20250721 07:49:10.099" level="INFO">${output} = old1: key created using S3 API</msg>
<status status="PASS" starttime="20250721 07:49:10.090" endtime="20250721 07:49:10.099"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>${PREFIX}: key created using S3 API</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:10.099" endtime="20250721 07:49:10.099"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>rm /tmp/get-result</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:10.101" level="INFO">Running command 'rm /tmp/get-result 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:10.105" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:10.105" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:10.099" endtime="20250721 07:49:10.105"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:10.105" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:10.105" endtime="20250721 07:49:10.106"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:10.106" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:10.106" endtime="20250721 07:49:10.106"/>
</kw>
<status status="PASS" starttime="20250721 07:49:10.099" endtime="20250721 07:49:10.106"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:01.816" endtime="20250721 07:49:10.106"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250721 07:48:48.509" endtime="20250721 07:49:10.107"/>
</suite>
<suite id="s1-s4" name="2.0.0-2.1.0-1-original-prepare" source="/opt/ozone/smoketest/upgrade/prepare.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:10.860" endtime="20250721 07:49:10.861"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:10.864" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:11.722" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:11.722" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:49:10.861" endtime="20250721 07:49:11.722"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:11.722" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:49:11.722" endtime="20250721 07:49:11.723"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:11.723" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:11.723" endtime="20250721 07:49:11.723"/>
</kw>
<status status="PASS" starttime="20250721 07:49:10.861" endtime="20250721 07:49:11.723"/>
</kw>
<msg timestamp="20250721 07:49:11.723" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:10.861" endtime="20250721 07:49:11.723"/>
</kw>
<msg timestamp="20250721 07:49:11.723" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:49:10.861" endtime="20250721 07:49:11.724"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:49:11.724" endtime="20250721 07:49:11.724"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:49:11.724" endtime="20250721 07:49:11.724"/>
</branch>
<status status="PASS" starttime="20250721 07:49:11.724" endtime="20250721 07:49:11.724"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:49:11.724" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:49:11.724" endtime="20250721 07:49:11.725"/>
</kw>
<status status="PASS" starttime="20250721 07:49:10.860" endtime="20250721 07:49:11.725"/>
</kw>
<test id="s1-s4-t1" name="Prepare Ozone Manager" line="25">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:49:11.727" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:11.726" endtime="20250721 07:49:11.727"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:49:11.727" endtime="20250721 07:49:11.727"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:49:11.727" endtime="20250721 07:49:11.727"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:49:11.727" endtime="20250721 07:49:11.727"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:49:11.727" endtime="20250721 07:49:11.727"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:49:11.727" endtime="20250721 07:49:11.727"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.726" endtime="20250721 07:49:11.727"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:49:11.727" endtime="20250721 07:49:11.728"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:11.731" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:11.735" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:11.735" level="INFO">${output} = scm</msg>
<status status="PASS" starttime="20250721 07:49:11.729" endtime="20250721 07:49:11.736"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:11.736" level="INFO">scm</msg>
<status status="PASS" starttime="20250721 07:49:11.736" endtime="20250721 07:49:11.736"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:11.737" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:11.736" endtime="20250721 07:49:11.737"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.729" endtime="20250721 07:49:11.737"/>
</kw>
<msg timestamp="20250721 07:49:11.737" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:11.728" endtime="20250721 07:49:11.737"/>
</kw>
<msg timestamp="20250721 07:49:11.737" level="INFO">${instance} = scm</msg>
<status status="PASS" starttime="20250721 07:49:11.728" endtime="20250721 07:49:11.737"/>
</kw>
<msg timestamp="20250721 07:49:11.737" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:49:11.728" endtime="20250721 07:49:11.737"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:49:11.738" level="INFO">${TEST_USER} = testuser/scm@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:49:11.738" endtime="20250721 07:49:11.738"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:11.742" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/scm@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:11.758" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:11.758" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:11.739" endtime="20250721 07:49:11.758"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:11.759" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:11.759" endtime="20250721 07:49:11.759"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:11.760" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:11.759" endtime="20250721 07:49:11.760"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.739" endtime="20250721 07:49:11.760"/>
</kw>
<msg timestamp="20250721 07:49:11.760" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:11.739" endtime="20250721 07:49:11.760"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.738" endtime="20250721 07:49:11.760"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.738" endtime="20250721 07:49:11.760"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.726" endtime="20250721 07:49:11.760"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.725" endtime="20250721 07:49:11.760"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'%{OZONE_UPGRADE_FROM}' == '1.1.0'</arg>
<arg>OM prepare is skipped for version %{OZONE_UPGRADE_FROM}</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:49:11.760" endtime="20250721 07:49:11.761"/>
</kw>
<kw name="Get OM Service ID" library="lib">
<var>${service_id}</var>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${service_id}</var>
<arg>OM_SERVICE_ID</arg>
<arg>${EMPTY}</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20250721 07:49:11.762" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20250721 07:49:11.761" endtime="20250721 07:49:11.762"/>
</kw>
<return>
<value>${service_id}</value>
<status status="PASS" starttime="20250721 07:49:11.762" endtime="20250721 07:49:11.762"/>
</return>
<msg timestamp="20250721 07:49:11.762" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20250721 07:49:11.761" endtime="20250721 07:49:11.762"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${service_id}' == ''</arg>
<arg>OM prepare skipped in non-HA</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:49:11.762" endtime="20250721 07:49:11.762"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Prepare OM</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Prepare OM" library="lib">
<kw name="Get OM Service Param" library="lib">
<var>${param}</var>
<kw name="Get OM Service ID" library="lib">
<var>${service_id}</var>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${service_id}</var>
<arg>OM_SERVICE_ID</arg>
<arg>${EMPTY}</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20250721 07:49:11.764" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20250721 07:49:11.764" endtime="20250721 07:49:11.764"/>
</kw>
<return>
<value>${service_id}</value>
<status status="PASS" starttime="20250721 07:49:11.764" endtime="20250721 07:49:11.764"/>
</return>
<msg timestamp="20250721 07:49:11.765" level="INFO">${service_id} = omservice</msg>
<status status="PASS" starttime="20250721 07:49:11.763" endtime="20250721 07:49:11.765"/>
</kw>
<if>
<branch type="IF" condition="'${service_id}' == ''">
<return>
<value>--service-host om</value>
<status status="NOT RUN" starttime="20250721 07:49:11.765" endtime="20250721 07:49:11.765"/>
</return>
<status status="NOT RUN" starttime="20250721 07:49:11.765" endtime="20250721 07:49:11.765"/>
</branch>
<branch type="ELSE">
<return>
<value>--service-id '${service_id}'</value>
<status status="PASS" starttime="20250721 07:49:11.765" endtime="20250721 07:49:11.765"/>
</return>
<status status="PASS" starttime="20250721 07:49:11.765" endtime="20250721 07:49:11.765"/>
</branch>
<status status="PASS" starttime="20250721 07:49:11.765" endtime="20250721 07:49:11.765"/>
</if>
<msg timestamp="20250721 07:49:11.765" level="INFO">${param} = --service-id 'omservice'</msg>
<status status="PASS" starttime="20250721 07:49:11.763" endtime="20250721 07:49:11.765"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om prepare ${param}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:11.769" level="INFO">Running command 'ozone admin om prepare --service-id 'omservice' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:18.964" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:18.964" level="INFO">${output} = Ozone Manager Prepare Request successfully returned with Transaction Id : [35].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [PREPARE_COMPLETED], Cu...</msg>
<status status="PASS" starttime="20250721 07:49:11.766" endtime="20250721 07:49:18.964"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:18.965" level="INFO">Ozone Manager Prepare Request successfully returned with Transaction Id : [35].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [35]
OM : [om3], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [35]
OM : [om2], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [35]

OM Preparation successful! 
All OMs are prepared
No new write requests will be allowed until preparation is cancelled or upgrade/downgrade is done.</msg>
<status status="PASS" starttime="20250721 07:49:18.964" endtime="20250721 07:49:18.965"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:18.966" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:18.965" endtime="20250721 07:49:18.966"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.766" endtime="20250721 07:49:18.966"/>
</kw>
<msg timestamp="20250721 07:49:18.966" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:11.766" endtime="20250721 07:49:18.966"/>
</kw>
<msg timestamp="20250721 07:49:18.966" level="INFO">${result} = Ozone Manager Prepare Request successfully returned with Transaction Id : [35].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [PREPARE_COMPLETED], Cu...</msg>
<status status="PASS" starttime="20250721 07:49:11.765" endtime="20250721 07:49:18.966"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM Preparation successful!</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:18.966" endtime="20250721 07:49:18.966"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.763" endtime="20250721 07:49:18.966"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.763" endtime="20250721 07:49:18.967"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:11.725" endtime="20250721 07:49:18.967"/>
</test>
<doc>Prepares OMs</doc>
<status status="PASS" starttime="20250721 07:49:10.818" endtime="20250721 07:49:18.967"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="57744"/>
</suite>
<statistics>
<total>
<stat pass="12" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="2" fail="0" skip="0">create-volume-and-bucket</stat>
<stat pass="2" fail="0" skip="0">finalized</stat>
<stat pass="1" fail="0" skip="0">om</stat>
<stat pass="1" fail="0" skip="0">scm</stat>
</tag>
<suite>
<stat pass="12" fail="0" skip="0" id="s1" name="upgrade">upgrade</stat>
<stat pass="2" fail="0" skip="0" id="s1-s1" name="2.0.0-2.1.0-1-original-check-finalization">upgrade.2.0.0-2.1.0-1-original-check-finalization</stat>
<stat pass="6" fail="0" skip="0" id="s1-s2" name="2.0.0-2.1.0-1-original-generate-old1">upgrade.2.0.0-2.1.0-1-original-generate-old1</stat>
<stat pass="3" fail="0" skip="0" id="s1-s3" name="2.0.0-2.1.0-1-original-validate-old1">upgrade.2.0.0-2.1.0-1-original-validate-old1</stat>
<stat pass="1" fail="0" skip="0" id="s1-s4" name="2.0.0-2.1.0-1-original-prepare">upgrade.2.0.0-2.1.0-1-original-prepare</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
