<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250721 07:52:12.651" rpa="false" schemaversion="4">
<suite id="s1" name="ozone-om-prepare">
<suite id="s1-s1" name="Om-Prepare" source="/opt/hadoop/smoketest/omha/om-prepare.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Get Security Enabled From Config</arg>
<arg>AND</arg>
<arg>Create Specific OM data for prepare</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:48:39.706" endtime="20250721 07:48:39.707"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:39.710" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:40.429" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:40.429" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20250721 07:48:39.707" endtime="20250721 07:48:40.429"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:40.430" level="INFO">false</msg>
<status status="PASS" starttime="20250721 07:48:40.429" endtime="20250721 07:48:40.430"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:40.430" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:40.430" endtime="20250721 07:48:40.430"/>
</kw>
<status status="PASS" starttime="20250721 07:48:39.707" endtime="20250721 07:48:40.430"/>
</kw>
<msg timestamp="20250721 07:48:40.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:39.707" endtime="20250721 07:48:40.430"/>
</kw>
<msg timestamp="20250721 07:48:40.431" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20250721 07:48:39.707" endtime="20250721 07:48:40.431"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:48:40.431" endtime="20250721 07:48:40.431"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:48:40.431" endtime="20250721 07:48:40.431"/>
</branch>
<status status="PASS" starttime="20250721 07:48:40.431" endtime="20250721 07:48:40.431"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:48:40.432" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20250721 07:48:40.431" endtime="20250721 07:48:40.432"/>
</kw>
<status status="PASS" starttime="20250721 07:48:39.706" endtime="20250721 07:48:40.432"/>
</kw>
<kw name="Create Specific OM data for prepare">
<kw name="Freon OCKG" library="freon">
<arg>prefix=om-prepare</arg>
<arg>n=100</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:40.436" level="INFO">Running command 'ozone freon ockg --om-service-id=omservice -t 1 -n100 -p om-prepare  2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:47.993" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:47.993" level="INFO">${output} = 2025-07-21 07:48:41,276 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:48:41,436 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250721 07:48:40.433" endtime="20250721 07:48:47.993"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:47.994" level="INFO">2025-07-21 07:48:41,276 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:48:41,436 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-07-21 07:48:41,437 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-07-21 07:48:41,586 [main] INFO freon.BaseFreonGenerator: Executing test with prefix om-prepare and number-of-tests 100
2025-07-21 07:48:41,625 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:48:42,461 [main] INFO rpc.RpcClient: Creating Volume: vol1, with hadoop as owner and space quota set to -1 bytes, counts quota set to -1
2025-07-21 07:48:42,540 [main] INFO rpc.RpcClient: Creating Bucket: vol1/bucket1, with server-side default bucket layout, hadoop as owner, Versioning false, Storage Type set to DISK and Encryption set to false, Replication Type set to server-side default replication type, Namespace Quota set to -1, Space Quota set to -1 
2025-07-21 07:48:42,625 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:48:42,723 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-07-21 07:48:43,627 [Thread-3] INFO freon.ProgressBar: Progress: 1.00 % (1 out of 100)
2025-07-21 07:48:44,628 [Thread-3] INFO freon.ProgressBar: Progress: 15.00 % (15 out of 100)
2025-07-21 07:48:45,628 [Thread-3] INFO freon.ProgressBar: Progress: 42.00 % (42 out of 100)
2025-07-21 07:48:46,629 [Thread-3] INFO freon.ProgressBar: Progress: 73.00 % (73 out of 100)
2025-07-21 07:48:47,629 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-07-21 07:48:47,654 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=100, min=23.53681, max=907.788484, mean=48.02363410892763, stddev=91.28353141266793, median=34.677235, p75=40.905064, p95=56.743204, p98=250.541406, p99=290.155429, p999=907.788484, mean_rate=19.68880519901472, m1=20.0, m5=20.0, m15=20.0, rate_unit=events/second, duration_unit=milliseconds
2025-07-21 07:48:47,654 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 6
2025-07-21 07:48:47,654 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-07-21 07:48:47,654 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20250721 07:48:47.993" endtime="20250721 07:48:47.994"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:47.994" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:47.994" endtime="20250721 07:48:47.994"/>
</kw>
<status status="PASS" starttime="20250721 07:48:40.433" endtime="20250721 07:48:47.994"/>
</kw>
<msg timestamp="20250721 07:48:47.995" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:40.433" endtime="20250721 07:48:47.995"/>
</kw>
<msg timestamp="20250721 07:48:47.995" level="INFO">${result} = 2025-07-21 07:48:41,276 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:48:41,436 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250721 07:48:40.433" endtime="20250721 07:48:47.995"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:48:47.995" endtime="20250721 07:48:47.995"/>
</kw>
<status status="PASS" starttime="20250721 07:48:40.432" endtime="20250721 07:48:47.995"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:48:47.996" level="INFO">${random} = 05404</msg>
<status status="PASS" starttime="20250721 07:48:47.995" endtime="20250721 07:48:47.996"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${volume_name}</arg>
<arg>${random}-volume-for-prepare</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:47.996" level="INFO">${volume_name} = 05404-volume-for-prepare</msg>
<status status="PASS" starttime="20250721 07:48:47.996" endtime="20250721 07:48:47.997"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${bucket_name}</arg>
<arg>${random}-bucket-for-prepare</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:48:47.997" level="INFO">${bucket_name} = 05404-bucket-for-prepare</msg>
<status status="PASS" starttime="20250721 07:48:47.997" endtime="20250721 07:48:47.998"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create /${volume_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:48.000" level="INFO">Running command 'ozone sh volume create /05404-volume-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:49.781" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:49.781" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:47.998" endtime="20250721 07:48:49.782"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:49.782" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:49.782" endtime="20250721 07:48:49.782"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:49.783" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:49.782" endtime="20250721 07:48:49.783"/>
</kw>
<status status="PASS" starttime="20250721 07:48:47.998" endtime="20250721 07:48:49.783"/>
</kw>
<msg timestamp="20250721 07:48:49.783" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:47.998" endtime="20250721 07:48:49.783"/>
</kw>
<status status="PASS" starttime="20250721 07:48:47.998" endtime="20250721 07:48:49.783"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create /${volume_name}/${bucket_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:49.786" level="INFO">Running command 'ozone sh bucket create /05404-volume-for-prepare/05404-bucket-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:51.595" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:51.595" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:49.784" endtime="20250721 07:48:51.595"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:51.596" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:51.596" endtime="20250721 07:48:51.596"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:51.596" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:51.596" endtime="20250721 07:48:51.597"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.784" endtime="20250721 07:48:51.597"/>
</kw>
<msg timestamp="20250721 07:48:51.597" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:49.784" endtime="20250721 07:48:51.597"/>
</kw>
<status status="PASS" starttime="20250721 07:48:49.783" endtime="20250721 07:48:51.597"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put /${volume_name}/${bucket_name}/prepare-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:51.600" level="INFO">Running command 'ozone sh key put /05404-volume-for-prepare/05404-bucket-for-prepare/prepare-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:48:54.572" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:48:54.572" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:48:51.598" endtime="20250721 07:48:54.572"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:48:54.573" level="INFO"/>
<status status="PASS" starttime="20250721 07:48:54.573" endtime="20250721 07:48:54.573"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:48:54.573" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:48:54.573" endtime="20250721 07:48:54.573"/>
</kw>
<status status="PASS" starttime="20250721 07:48:51.598" endtime="20250721 07:48:54.574"/>
</kw>
<msg timestamp="20250721 07:48:54.574" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:51.597" endtime="20250721 07:48:54.574"/>
</kw>
<status status="PASS" starttime="20250721 07:48:51.597" endtime="20250721 07:48:54.574"/>
</kw>
<status status="PASS" starttime="20250721 07:48:40.432" endtime="20250721 07:48:54.574"/>
</kw>
<status status="PASS" starttime="20250721 07:48:39.706" endtime="20250721 07:48:54.574"/>
</kw>
<test id="s1-s1-t1" name="Prepare Ozone Manager" line="40">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:48:54.575" endtime="20250721 07:48:54.575"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om prepare -id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:48:54.578" level="INFO">Running command 'ozone admin om prepare -id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:11.155" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:11.155" level="INFO">${output} = Ozone Manager Prepare Request successfully returned with Transaction Id : [207].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [NOT_PREPARED], Curren...</msg>
<status status="PASS" starttime="20250721 07:48:54.576" endtime="20250721 07:49:11.155"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:11.156" level="INFO">Ozone Manager Prepare Request successfully returned with Transaction Id : [207].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [NOT_PREPARED], Current Transaction Id : [-1]
OM : [om3], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [207]
OM : [om2], Prepare Status : [NOT_PREPARED], Current Transaction Id : [-1]
Waiting for 10 seconds before retrying...
OM : [om1], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [207]
OM : [om2], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [207]

OM Preparation successful! 
All OMs are prepared
No new write requests will be allowed until preparation is cancelled or upgrade/downgrade is done.</msg>
<status status="PASS" starttime="20250721 07:49:11.155" endtime="20250721 07:49:11.156"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:11.157" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:11.156" endtime="20250721 07:49:11.157"/>
</kw>
<status status="PASS" starttime="20250721 07:48:54.576" endtime="20250721 07:49:11.157"/>
</kw>
<msg timestamp="20250721 07:49:11.157" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:48:54.575" endtime="20250721 07:49:11.157"/>
</kw>
<msg timestamp="20250721 07:49:11.157" level="INFO">${result} = Ozone Manager Prepare Request successfully returned with Transaction Id : [207].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [NOT_PREPARED], Curren...</msg>
<status status="PASS" starttime="20250721 07:48:54.575" endtime="20250721 07:49:11.157"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>OM Preparation successful!</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM Preparation successful!</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:11.158" endtime="20250721 07:49:11.158"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.157" endtime="20250721 07:49:11.158"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:48:54.574" endtime="20250721 07:49:11.158"/>
</test>
<test id="s1-s1-t2" name="Checks if the expected data is present in OM" line="44">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:11.159" endtime="20250721 07:49:11.159"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key info /${volume_name}/${bucket_name}/prepare-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:11.162" level="INFO">Running command 'ozone sh key info /05404-volume-for-prepare/05404-bucket-for-prepare/prepare-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:13.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:13.325" level="INFO">${output} = {
  "volumeName" : "05404-volume-for-prepare",
  "bucketName" : "05404-bucket-for-prepare",
  "name" : "prepare-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:48:5...</msg>
<status status="PASS" starttime="20250721 07:49:11.160" endtime="20250721 07:49:13.325"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:13.326" level="INFO">{
  "volumeName" : "05404-volume-for-prepare",
  "bucketName" : "05404-bucket-for-prepare",
  "name" : "prepare-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:48:53.382Z",
  "modificationTime" : "2025-07-21T07:48:54.224Z",
  "replicationConfig" : {
    "replicationFactor" : "ONE",
    "requiredNodes" : 1,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "ozoneKeyLocations" : [ {
    "containerID" : 3,
    "localID" : 115816896921600101,
    "length" : 15892,
    "offset" : 0,
    "keyOffset" : 0
  } ],
  "generation" : 206,
  "file" : true
}</msg>
<status status="PASS" starttime="20250721 07:49:13.325" endtime="20250721 07:49:13.326"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:13.326" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:13.326" endtime="20250721 07:49:13.326"/>
</kw>
<status status="PASS" starttime="20250721 07:49:11.160" endtime="20250721 07:49:13.326"/>
</kw>
<msg timestamp="20250721 07:49:13.326" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:11.160" endtime="20250721 07:49:13.326"/>
</kw>
<msg timestamp="20250721 07:49:13.327" level="INFO">${result} = {
  "volumeName" : "05404-volume-for-prepare",
  "bucketName" : "05404-bucket-for-prepare",
  "name" : "prepare-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:48:5...</msg>
<status status="PASS" starttime="20250721 07:49:11.159" endtime="20250721 07:49:13.327"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"name\" : \"prepare-key\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:13.327" endtime="20250721 07:49:13.327"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:11.158" endtime="20250721 07:49:13.327"/>
</test>
<test id="s1-s1-t3" name="Test write operation fails" line="48">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:13.328" endtime="20250721 07:49:13.328"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh key put /${volume_name}/${bucket_name}/prepare-key2 /opt/hadoop/NOTICE.txt</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:13.331" level="INFO">Running command 'ozone sh key put /05404-volume-for-prepare/05404-bucket-for-prepare/prepare-key2 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:15.143" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:49:15.143" level="INFO">${output} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateKey when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:49:13.329" endtime="20250721 07:49:15.143"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:15.143" level="INFO">NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateKey when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:49:15.143" endtime="20250721 07:49:15.144"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:15.144" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:15.144" endtime="20250721 07:49:15.144"/>
</kw>
<msg timestamp="20250721 07:49:15.144" level="INFO">${result} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateKey when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:49:13.328" endtime="20250721 07:49:15.144"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM is in prepare mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:15.144" endtime="20250721 07:49:15.145"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh key info /${volume_name}/${bucket_name}/prepare-key2</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:15.147" level="INFO">Running command 'ozone sh key info /05404-volume-for-prepare/05404-bucket-for-prepare/prepare-key2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:16.992" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:49:16.992" level="INFO">${output} = KEY_NOT_FOUND Key:prepare-key2 not found</msg>
<status status="PASS" starttime="20250721 07:49:15.145" endtime="20250721 07:49:16.992"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:16.993" level="INFO">KEY_NOT_FOUND Key:prepare-key2 not found</msg>
<status status="PASS" starttime="20250721 07:49:16.992" endtime="20250721 07:49:16.993"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:16.993" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:16.993" endtime="20250721 07:49:16.993"/>
</kw>
<status status="PASS" starttime="20250721 07:49:15.145" endtime="20250721 07:49:16.994"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:13.327" endtime="20250721 07:49:16.994"/>
</test>
<doc>Smoke test to test preparing OMs in an OM HA cluster.</doc>
<status status="PASS" starttime="20250721 07:48:39.666" endtime="20250721 07:49:16.994"/>
</suite>
<suite id="s1-s2" name="Om-Cancel-Prepare" source="/opt/hadoop/smoketest/omha/om-cancel-prepare.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Generate volume and bucket names</arg>
<arg>AND</arg>
<arg>Get Security Enabled From Config</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Generate volume and bucket names">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:49:17.521" level="INFO">${random} = 43489</msg>
<status status="PASS" starttime="20250721 07:49:17.521" endtime="20250721 07:49:17.521"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${volume_name}</arg>
<arg>${random}-volume-for-cancel</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:49:17.522" level="INFO">${volume_name} = 43489-volume-for-cancel</msg>
<status status="PASS" starttime="20250721 07:49:17.521" endtime="20250721 07:49:17.522"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${bucket_name}</arg>
<arg>${random}-bucket-for-cancel</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:49:17.523" level="INFO">${bucket_name} = 43489-bucket-for-cancel</msg>
<status status="PASS" starttime="20250721 07:49:17.522" endtime="20250721 07:49:17.523"/>
</kw>
<status status="PASS" starttime="20250721 07:49:17.521" endtime="20250721 07:49:17.523"/>
</kw>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:17.523" endtime="20250721 07:49:17.523"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:17.526" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:18.234" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:18.234" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20250721 07:49:17.524" endtime="20250721 07:49:18.235"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:18.235" level="INFO">false</msg>
<status status="PASS" starttime="20250721 07:49:18.235" endtime="20250721 07:49:18.235"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:18.236" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:18.235" endtime="20250721 07:49:18.236"/>
</kw>
<status status="PASS" starttime="20250721 07:49:17.523" endtime="20250721 07:49:18.236"/>
</kw>
<msg timestamp="20250721 07:49:18.236" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:17.523" endtime="20250721 07:49:18.236"/>
</kw>
<msg timestamp="20250721 07:49:18.236" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20250721 07:49:17.523" endtime="20250721 07:49:18.236"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:49:18.236" endtime="20250721 07:49:18.236"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:49:18.236" endtime="20250721 07:49:18.236"/>
</branch>
<status status="PASS" starttime="20250721 07:49:18.236" endtime="20250721 07:49:18.236"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:49:18.237" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20250721 07:49:18.237" endtime="20250721 07:49:18.237"/>
</kw>
<status status="PASS" starttime="20250721 07:49:17.523" endtime="20250721 07:49:18.237"/>
</kw>
<status status="PASS" starttime="20250721 07:49:17.520" endtime="20250721 07:49:18.237"/>
</kw>
<test id="s1-s2-t1" name="Cancel Ozone Manager Prepare" line="34">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:18.238" endtime="20250721 07:49:18.238"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om cancelprepare -id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:18.241" level="INFO">Running command 'ozone admin om cancelprepare -id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:19.745" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:19.745" level="INFO">${output} = Cancel prepare succeeded, cluster can now accept write requests.</msg>
<status status="PASS" starttime="20250721 07:49:18.239" endtime="20250721 07:49:19.745"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:19.745" level="INFO">Cancel prepare succeeded, cluster can now accept write requests.</msg>
<status status="PASS" starttime="20250721 07:49:19.745" endtime="20250721 07:49:19.746"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:19.746" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:19.746" endtime="20250721 07:49:19.746"/>
</kw>
<status status="PASS" starttime="20250721 07:49:18.238" endtime="20250721 07:49:19.746"/>
</kw>
<msg timestamp="20250721 07:49:19.746" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:18.238" endtime="20250721 07:49:19.746"/>
</kw>
<msg timestamp="20250721 07:49:19.746" level="INFO">${result} = Cancel prepare succeeded, cluster can now accept write requests.</msg>
<status status="PASS" starttime="20250721 07:49:18.238" endtime="20250721 07:49:19.746"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>5sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>Cancel prepare succeeded</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Cancel prepare succeeded</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:19.747" endtime="20250721 07:49:19.747"/>
</kw>
<status status="PASS" starttime="20250721 07:49:19.746" endtime="20250721 07:49:19.747"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:18.237" endtime="20250721 07:49:19.747"/>
</test>
<test id="s1-s2-t2" name="Test write operations" line="38">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:19.748" endtime="20250721 07:49:19.748"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create /${volume_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:19.751" level="INFO">Running command 'ozone sh volume create /43489-volume-for-cancel 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:21.532" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:21.532" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:19.749" endtime="20250721 07:49:21.532"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:21.533" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:21.532" endtime="20250721 07:49:21.533"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:21.533" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:21.533" endtime="20250721 07:49:21.533"/>
</kw>
<status status="PASS" starttime="20250721 07:49:19.749" endtime="20250721 07:49:21.533"/>
</kw>
<msg timestamp="20250721 07:49:21.533" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:19.749" endtime="20250721 07:49:21.533"/>
</kw>
<status status="PASS" starttime="20250721 07:49:19.748" endtime="20250721 07:49:21.534"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create /${volume_name}/${bucket_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:21.537" level="INFO">Running command 'ozone sh bucket create /43489-volume-for-cancel/43489-bucket-for-cancel 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:23.419" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:23.419" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:21.535" endtime="20250721 07:49:23.419"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:23.420" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:23.419" endtime="20250721 07:49:23.420"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:23.420" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:23.420" endtime="20250721 07:49:23.420"/>
</kw>
<status status="PASS" starttime="20250721 07:49:21.534" endtime="20250721 07:49:23.420"/>
</kw>
<msg timestamp="20250721 07:49:23.421" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:21.534" endtime="20250721 07:49:23.421"/>
</kw>
<status status="PASS" starttime="20250721 07:49:21.534" endtime="20250721 07:49:23.421"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key put /${volume_name}/${bucket_name}/cancel-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:23.424" level="INFO">Running command 'ozone sh key put /43489-volume-for-cancel/43489-bucket-for-cancel/cancel-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:26.385" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:26.385" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:23.422" endtime="20250721 07:49:26.385"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:26.386" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:26.385" endtime="20250721 07:49:26.386"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:26.386" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:26.386" endtime="20250721 07:49:26.386"/>
</kw>
<status status="PASS" starttime="20250721 07:49:23.421" endtime="20250721 07:49:26.386"/>
</kw>
<msg timestamp="20250721 07:49:26.386" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:23.421" endtime="20250721 07:49:26.387"/>
</kw>
<msg timestamp="20250721 07:49:26.387" level="INFO">${result} = </msg>
<status status="PASS" starttime="20250721 07:49:23.421" endtime="20250721 07:49:26.387"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key info /${volume_name}/${bucket_name}/cancel-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:26.390" level="INFO">Running command 'ozone sh key info /43489-volume-for-cancel/43489-bucket-for-cancel/cancel-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:28.510" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:28.510" level="INFO">${output} = {
  "volumeName" : "43489-volume-for-cancel",
  "bucketName" : "43489-bucket-for-cancel",
  "name" : "cancel-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:49:25.2...</msg>
<status status="PASS" starttime="20250721 07:49:26.388" endtime="20250721 07:49:28.510"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:28.511" level="INFO">{
  "volumeName" : "43489-volume-for-cancel",
  "bucketName" : "43489-bucket-for-cancel",
  "name" : "cancel-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:49:25.216Z",
  "modificationTime" : "2025-07-21T07:49:26.036Z",
  "replicationConfig" : {
    "replicationFactor" : "ONE",
    "requiredNodes" : 1,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "ozoneKeyLocations" : [ {
    "containerID" : 4,
    "localID" : 115816896921600103,
    "length" : 15892,
    "offset" : 0,
    "keyOffset" : 0
  } ],
  "generation" : 212,
  "file" : true
}</msg>
<status status="PASS" starttime="20250721 07:49:28.510" endtime="20250721 07:49:28.511"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:28.511" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:28.511" endtime="20250721 07:49:28.511"/>
</kw>
<status status="PASS" starttime="20250721 07:49:26.387" endtime="20250721 07:49:28.511"/>
</kw>
<msg timestamp="20250721 07:49:28.512" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:26.387" endtime="20250721 07:49:28.512"/>
</kw>
<msg timestamp="20250721 07:49:28.512" level="INFO">${result} = {
  "volumeName" : "43489-volume-for-cancel",
  "bucketName" : "43489-bucket-for-cancel",
  "name" : "cancel-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:49:25.2...</msg>
<status status="PASS" starttime="20250721 07:49:26.387" endtime="20250721 07:49:28.512"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"name\" : \"cancel-key\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:28.512" endtime="20250721 07:49:28.512"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:19.748" endtime="20250721 07:49:28.512"/>
</test>
<doc>Smoke test for ozone manager cancel prepare</doc>
<status status="PASS" starttime="20250721 07:49:17.487" endtime="20250721 07:49:28.513"/>
</suite>
<suite id="s1-s3" name="Om-Prepare" source="/opt/hadoop/smoketest/omha/om-prepare.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Get Security Enabled From Config</arg>
<arg>AND</arg>
<arg>Create Specific OM data for prepare</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:29.028" endtime="20250721 07:49:29.028"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:29.031" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:29.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:29.740" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20250721 07:49:29.029" endtime="20250721 07:49:29.740"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:29.741" level="INFO">false</msg>
<status status="PASS" starttime="20250721 07:49:29.741" endtime="20250721 07:49:29.741"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:29.741" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:29.741" endtime="20250721 07:49:29.742"/>
</kw>
<status status="PASS" starttime="20250721 07:49:29.029" endtime="20250721 07:49:29.742"/>
</kw>
<msg timestamp="20250721 07:49:29.742" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:29.029" endtime="20250721 07:49:29.742"/>
</kw>
<msg timestamp="20250721 07:49:29.742" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20250721 07:49:29.028" endtime="20250721 07:49:29.742"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:49:29.742" endtime="20250721 07:49:29.742"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:49:29.742" endtime="20250721 07:49:29.742"/>
</branch>
<status status="PASS" starttime="20250721 07:49:29.742" endtime="20250721 07:49:29.743"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:49:29.743" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20250721 07:49:29.743" endtime="20250721 07:49:29.743"/>
</kw>
<status status="PASS" starttime="20250721 07:49:29.028" endtime="20250721 07:49:29.743"/>
</kw>
<kw name="Create Specific OM data for prepare">
<kw name="Freon OCKG" library="freon">
<arg>prefix=om-prepare</arg>
<arg>n=100</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone freon ockg ${OM_HA_PARAM} -t ${threads} -n${n} -p ${prefix} ${args}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:29.747" level="INFO">Running command 'ozone freon ockg --om-service-id=omservice -t 1 -n100 -p om-prepare  2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:36.382" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:36.382" level="INFO">${output} = 2025-07-21 07:49:30,584 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:49:30,773 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250721 07:49:29.745" endtime="20250721 07:49:36.382"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:36.383" level="INFO">2025-07-21 07:49:30,584 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:49:30,773 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-07-21 07:49:30,773 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-07-21 07:49:30,956 [main] INFO freon.BaseFreonGenerator: Executing test with prefix om-prepare and number-of-tests 100
2025-07-21 07:49:31,009 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:49:31,957 [pool-2-thread-1] WARN impl.MetricsSystemImpl: ozone-freon metrics system already initialized!
2025-07-21 07:49:32,012 [Thread-3] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:49:33,013 [Thread-3] INFO freon.ProgressBar: Progress: 14.00 % (14 out of 100)
2025-07-21 07:49:34,014 [Thread-3] INFO freon.ProgressBar: Progress: 47.00 % (47 out of 100)
2025-07-21 07:49:35,014 [Thread-3] INFO freon.ProgressBar: Progress: 83.00 % (83 out of 100)
2025-07-21 07:49:36,014 [Thread-3] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-07-21 07:49:36,042 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=100, min=20.666617, max=669.719451, mean=35.97756159471178, stddev=63.36026596705387, median=27.534929, p75=32.386934, p95=48.054036, p98=51.293808, p99=52.246269, p999=669.719451, mean_rate=23.945390858055212, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-07-21 07:49:36,042 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2025-07-21 07:49:36,042 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-07-21 07:49:36,042 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20250721 07:49:36.383" endtime="20250721 07:49:36.383"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:36.384" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:36.383" endtime="20250721 07:49:36.384"/>
</kw>
<status status="PASS" starttime="20250721 07:49:29.745" endtime="20250721 07:49:36.384"/>
</kw>
<msg timestamp="20250721 07:49:36.384" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:29.744" endtime="20250721 07:49:36.384"/>
</kw>
<msg timestamp="20250721 07:49:36.384" level="INFO">${result} = 2025-07-21 07:49:30,584 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:49:30,773 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250721 07:49:29.744" endtime="20250721 07:49:36.384"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Successful executions: ${n}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:36.384" endtime="20250721 07:49:36.384"/>
</kw>
<status status="PASS" starttime="20250721 07:49:29.743" endtime="20250721 07:49:36.385"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:49:36.385" level="INFO">${random} = 75196</msg>
<status status="PASS" starttime="20250721 07:49:36.385" endtime="20250721 07:49:36.385"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${volume_name}</arg>
<arg>${random}-volume-for-prepare</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:49:36.386" level="INFO">${volume_name} = 75196-volume-for-prepare</msg>
<status status="PASS" starttime="20250721 07:49:36.385" endtime="20250721 07:49:36.386"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${bucket_name}</arg>
<arg>${random}-bucket-for-prepare</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:49:36.387" level="INFO">${bucket_name} = 75196-bucket-for-prepare</msg>
<status status="PASS" starttime="20250721 07:49:36.386" endtime="20250721 07:49:36.387"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh volume create /${volume_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:36.390" level="INFO">Running command 'ozone sh volume create /75196-volume-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:38.277" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:38.277" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:36.388" endtime="20250721 07:49:38.277"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:38.278" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:38.278" endtime="20250721 07:49:38.278"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:38.279" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:38.278" endtime="20250721 07:49:38.279"/>
</kw>
<status status="PASS" starttime="20250721 07:49:36.387" endtime="20250721 07:49:38.279"/>
</kw>
<msg timestamp="20250721 07:49:38.279" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:36.387" endtime="20250721 07:49:38.279"/>
</kw>
<status status="PASS" starttime="20250721 07:49:36.387" endtime="20250721 07:49:38.279"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh bucket create /${volume_name}/${bucket_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:38.282" level="INFO">Running command 'ozone sh bucket create /75196-volume-for-prepare/75196-bucket-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:40.017" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:40.017" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:38.280" endtime="20250721 07:49:40.017"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:40.017" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:40.017" endtime="20250721 07:49:40.018"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:40.018" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:40.018" endtime="20250721 07:49:40.018"/>
</kw>
<status status="PASS" starttime="20250721 07:49:38.280" endtime="20250721 07:49:40.018"/>
</kw>
<msg timestamp="20250721 07:49:40.018" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:38.279" endtime="20250721 07:49:40.018"/>
</kw>
<status status="PASS" starttime="20250721 07:49:38.279" endtime="20250721 07:49:40.018"/>
</kw>
<kw name="Execute" library="os">
<arg>ozone sh key put /${volume_name}/${bucket_name}/prepare-key /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:40.021" level="INFO">Running command 'ozone sh key put /75196-volume-for-prepare/75196-bucket-for-prepare/prepare-key /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:42.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:42.971" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:49:40.019" endtime="20250721 07:49:42.971"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:42.972" level="INFO"/>
<status status="PASS" starttime="20250721 07:49:42.971" endtime="20250721 07:49:42.972"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:42.972" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:42.972" endtime="20250721 07:49:42.972"/>
</kw>
<status status="PASS" starttime="20250721 07:49:40.019" endtime="20250721 07:49:42.972"/>
</kw>
<msg timestamp="20250721 07:49:42.972" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:40.019" endtime="20250721 07:49:42.972"/>
</kw>
<status status="PASS" starttime="20250721 07:49:40.018" endtime="20250721 07:49:42.972"/>
</kw>
<status status="PASS" starttime="20250721 07:49:29.743" endtime="20250721 07:49:42.973"/>
</kw>
<status status="PASS" starttime="20250721 07:49:29.028" endtime="20250721 07:49:42.973"/>
</kw>
<test id="s1-s3-t1" name="Prepare Ozone Manager" line="40">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:42.973" endtime="20250721 07:49:42.974"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om prepare -id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:42.977" level="INFO">Running command 'ozone admin om prepare -id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:49:59.538" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:49:59.538" level="INFO">${output} = Ozone Manager Prepare Request successfully returned with Transaction Id : [417].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [NOT_PREPARED], Curren...</msg>
<status status="PASS" starttime="20250721 07:49:42.975" endtime="20250721 07:49:59.538"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:49:59.539" level="INFO">Ozone Manager Prepare Request successfully returned with Transaction Id : [417].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [NOT_PREPARED], Current Transaction Id : [-1]
OM : [om3], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [417]
OM : [om2], Prepare Status : [NOT_PREPARED], Current Transaction Id : [-1]
Waiting for 10 seconds before retrying...
OM : [om1], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [417]
OM : [om2], Prepare Status : [PREPARE_COMPLETED], Current Transaction Id : [417]

OM Preparation successful! 
All OMs are prepared
No new write requests will be allowed until preparation is cancelled or upgrade/downgrade is done.</msg>
<status status="PASS" starttime="20250721 07:49:59.538" endtime="20250721 07:49:59.539"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:49:59.539" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:49:59.539" endtime="20250721 07:49:59.539"/>
</kw>
<status status="PASS" starttime="20250721 07:49:42.974" endtime="20250721 07:49:59.539"/>
</kw>
<msg timestamp="20250721 07:49:59.540" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:42.974" endtime="20250721 07:49:59.540"/>
</kw>
<msg timestamp="20250721 07:49:59.540" level="INFO">${result} = Ozone Manager Prepare Request successfully returned with Transaction Id : [417].

Checking individual OM instances for prepare request completion...
OM : [om1], Prepare Status : [NOT_PREPARED], Curren...</msg>
<status status="PASS" starttime="20250721 07:49:42.974" endtime="20250721 07:49:59.540"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>10sec</arg>
<arg>Should contain</arg>
<arg>${result}</arg>
<arg>OM Preparation successful!</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM Preparation successful!</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:49:59.540" endtime="20250721 07:49:59.540"/>
</kw>
<status status="PASS" starttime="20250721 07:49:59.540" endtime="20250721 07:49:59.540"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:42.973" endtime="20250721 07:49:59.541"/>
</test>
<test id="s1-s3-t2" name="Checks if the expected data is present in OM" line="44">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:49:59.542" endtime="20250721 07:49:59.542"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh key info /${volume_name}/${bucket_name}/prepare-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:49:59.545" level="INFO">Running command 'ozone sh key info /75196-volume-for-prepare/75196-bucket-for-prepare/prepare-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:01.529" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:50:01.529" level="INFO">${output} = {
  "volumeName" : "75196-volume-for-prepare",
  "bucketName" : "75196-bucket-for-prepare",
  "name" : "prepare-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:49:4...</msg>
<status status="PASS" starttime="20250721 07:49:59.543" endtime="20250721 07:50:01.529"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:01.530" level="INFO">{
  "volumeName" : "75196-volume-for-prepare",
  "bucketName" : "75196-bucket-for-prepare",
  "name" : "prepare-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:49:41.812Z",
  "modificationTime" : "2025-07-21T07:49:42.624Z",
  "replicationConfig" : {
    "replicationFactor" : "ONE",
    "requiredNodes" : 1,
    "minimumNodes" : 1,
    "replicationType" : "RATIS"
  },
  "metadata" : { },
  "tags" : { },
  "ozoneKeyLocations" : [ {
    "containerID" : 5,
    "localID" : 115816896921600204,
    "length" : 15892,
    "offset" : 0,
    "keyOffset" : 0
  } ],
  "generation" : 416,
  "file" : true
}</msg>
<status status="PASS" starttime="20250721 07:50:01.529" endtime="20250721 07:50:01.530"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:01.530" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:01.530" endtime="20250721 07:50:01.530"/>
</kw>
<status status="PASS" starttime="20250721 07:49:59.542" endtime="20250721 07:50:01.530"/>
</kw>
<msg timestamp="20250721 07:50:01.530" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:49:59.542" endtime="20250721 07:50:01.530"/>
</kw>
<msg timestamp="20250721 07:50:01.531" level="INFO">${result} = {
  "volumeName" : "75196-volume-for-prepare",
  "bucketName" : "75196-bucket-for-prepare",
  "name" : "prepare-key",
  "owner" : "hadoop",
  "dataSize" : 15892,
  "creationTime" : "2025-07-21T07:49:4...</msg>
<status status="PASS" starttime="20250721 07:49:59.542" endtime="20250721 07:50:01.531"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>\"name\" : \"prepare-key\"</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:50:01.531" endtime="20250721 07:50:01.531"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:49:59.541" endtime="20250721 07:50:01.531"/>
</test>
<test id="s1-s3-t3" name="Test write operation fails" line="48">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:50:01.532" endtime="20250721 07:50:01.532"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh key put /${volume_name}/${bucket_name}/prepare-key2 /opt/hadoop/NOTICE.txt</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:50:01.535" level="INFO">Running command 'ozone sh key put /75196-volume-for-prepare/75196-bucket-for-prepare/prepare-key2 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:03.389" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:50:03.389" level="INFO">${output} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateKey when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:50:01.533" endtime="20250721 07:50:03.389"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:03.389" level="INFO">NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateKey when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:50:03.389" endtime="20250721 07:50:03.390"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:03.390" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:03.390" endtime="20250721 07:50:03.390"/>
</kw>
<msg timestamp="20250721 07:50:03.390" level="INFO">${result} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateKey when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:50:01.533" endtime="20250721 07:50:03.390"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM is in prepare mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:50:03.390" endtime="20250721 07:50:03.390"/>
</kw>
<kw name="Execute and checkrc" library="os">
<arg>ozone sh key info /${volume_name}/${bucket_name}/prepare-key2</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:50:03.393" level="INFO">Running command 'ozone sh key info /75196-volume-for-prepare/75196-bucket-for-prepare/prepare-key2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:05.152" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:50:05.153" level="INFO">${output} = KEY_NOT_FOUND Key:prepare-key2 not found</msg>
<status status="PASS" starttime="20250721 07:50:03.391" endtime="20250721 07:50:05.153"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:05.153" level="INFO">KEY_NOT_FOUND Key:prepare-key2 not found</msg>
<status status="PASS" starttime="20250721 07:50:05.153" endtime="20250721 07:50:05.154"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:05.154" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:05.154" endtime="20250721 07:50:05.154"/>
</kw>
<status status="PASS" starttime="20250721 07:50:03.391" endtime="20250721 07:50:05.154"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:50:01.532" endtime="20250721 07:50:05.154"/>
</test>
<doc>Smoke test to test preparing OMs in an OM HA cluster.</doc>
<status status="PASS" starttime="20250721 07:49:28.988" endtime="20250721 07:50:05.155"/>
</suite>
<suite id="s1-s4" name="Om-Prepared" source="/opt/hadoop/smoketest/omha/om-prepared.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:50:05.680" endtime="20250721 07:50:05.681"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:50:05.683" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:06.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:50:06.394" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20250721 07:50:05.681" endtime="20250721 07:50:06.394"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:06.395" level="INFO">false</msg>
<status status="PASS" starttime="20250721 07:50:06.394" endtime="20250721 07:50:06.395"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:06.395" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:06.395" endtime="20250721 07:50:06.395"/>
</kw>
<status status="PASS" starttime="20250721 07:50:05.681" endtime="20250721 07:50:06.395"/>
</kw>
<msg timestamp="20250721 07:50:06.395" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:50:05.681" endtime="20250721 07:50:06.395"/>
</kw>
<msg timestamp="20250721 07:50:06.396" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20250721 07:50:05.681" endtime="20250721 07:50:06.396"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:50:06.396" endtime="20250721 07:50:06.396"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:50:06.396" endtime="20250721 07:50:06.396"/>
</branch>
<status status="PASS" starttime="20250721 07:50:06.396" endtime="20250721 07:50:06.396"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:50:06.397" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20250721 07:50:06.396" endtime="20250721 07:50:06.397"/>
</kw>
<status status="PASS" starttime="20250721 07:50:05.680" endtime="20250721 07:50:06.397"/>
</kw>
<test id="s1-s4-t1" name="Test create volume fails" line="27">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:50:06.397" endtime="20250721 07:50:06.398"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:50:06.398" level="INFO">${random} = 64649</msg>
<status status="PASS" starttime="20250721 07:50:06.398" endtime="20250721 07:50:06.398"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${volume_name}</arg>
<arg>${random}-volume-for-prepare</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:50:06.399" level="INFO">${volume_name} = 64649-volume-for-prepare</msg>
<status status="PASS" starttime="20250721 07:50:06.398" endtime="20250721 07:50:06.399"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume create /${volume_name}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:50:06.401" level="INFO">Running command 'ozone sh volume create /64649-volume-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:08.206" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:50:08.206" level="INFO">${output} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateVolume when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:50:06.399" endtime="20250721 07:50:08.206"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:08.207" level="INFO">NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateVolume when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:50:08.207" endtime="20250721 07:50:08.207"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:08.207" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:08.207" endtime="20250721 07:50:08.208"/>
</kw>
<msg timestamp="20250721 07:50:08.208" level="INFO">${result} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateVolume when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:50:06.399" endtime="20250721 07:50:08.208"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM is in prepare mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:50:08.208" endtime="20250721 07:50:08.208"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume info /${volume_name}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:50:08.211" level="INFO">Running command 'ozone sh volume info /64649-volume-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:09.974" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:50:09.974" level="INFO">${output} = VOLUME_NOT_FOUND Volume 64649-volume-for-prepare is not found</msg>
<status status="PASS" starttime="20250721 07:50:08.209" endtime="20250721 07:50:09.974"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:09.975" level="INFO">VOLUME_NOT_FOUND Volume 64649-volume-for-prepare is not found</msg>
<status status="PASS" starttime="20250721 07:50:09.974" endtime="20250721 07:50:09.975"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:09.975" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:09.975" endtime="20250721 07:50:09.975"/>
</kw>
<msg timestamp="20250721 07:50:09.975" level="INFO">${result} = VOLUME_NOT_FOUND Volume 64649-volume-for-prepare is not found</msg>
<status status="PASS" starttime="20250721 07:50:08.208" endtime="20250721 07:50:09.975"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>VOLUME_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:50:09.975" endtime="20250721 07:50:09.976"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:50:06.397" endtime="20250721 07:50:09.976"/>
</test>
<test id="s1-s4-t2" name="Test list volumes succeeds" line="35">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:50:09.977" endtime="20250721 07:50:09.977"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:50:09.980" level="INFO">Running command 'ozone sh volume list 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:50:11.900" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:50:11.900" level="INFO">${output} = [ {
  "metadata" : { },
  "name" : "43489-volume-for-cancel",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2...</msg>
<status status="PASS" starttime="20250721 07:50:09.978" endtime="20250721 07:50:11.900"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:50:11.900" level="INFO">[ {
  "metadata" : { },
  "name" : "43489-volume-for-cancel",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:49:21.510Z",
  "modificationTime" : "2025-07-21T07:49:21.510Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "s3v",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 0,
  "creationTime" : "2025-07-21T07:48:22.133Z",
  "modificationTime" : "2025-07-21T07:48:22.133Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "vol1",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:48:42.469Z",
  "modificationTime" : "2025-07-21T07:48:42.469Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "75196-volume-for-prepare",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:49:38.248Z",
  "modificationTime" : "2025-07-21T07:49:38.248Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "05404-volume-for-prepare",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:48:49.750Z",
  "modificationTime" : "2025-07-21T07:48:49.750Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
} ]</msg>
<status status="PASS" starttime="20250721 07:50:11.900" endtime="20250721 07:50:11.901"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:50:11.901" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:50:11.901" endtime="20250721 07:50:11.901"/>
</kw>
<status status="PASS" starttime="20250721 07:50:09.978" endtime="20250721 07:50:11.901"/>
</kw>
<msg timestamp="20250721 07:50:11.901" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:50:09.977" endtime="20250721 07:50:11.901"/>
</kw>
<msg timestamp="20250721 07:50:11.901" level="INFO">${result} = [ {
  "metadata" : { },
  "name" : "43489-volume-for-cancel",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2...</msg>
<status status="PASS" starttime="20250721 07:50:09.977" endtime="20250721 07:50:11.901"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:50:09.976" endtime="20250721 07:50:11.902"/>
</test>
<doc>Smoke test to test that OMs are prepared in an OM HA cluster.</doc>
<status status="PASS" starttime="20250721 07:50:05.647" endtime="20250721 07:50:11.902"/>
</suite>
<suite id="s1-s5" name="Om-Prepared" source="/opt/hadoop/smoketest/omha/om-prepared.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:51:01.543" endtime="20250721 07:51:01.544"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:51:01.546" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:51:02.268" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:51:02.268" level="INFO">${output} = false</msg>
<status status="PASS" starttime="20250721 07:51:01.544" endtime="20250721 07:51:02.268"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:51:02.269" level="INFO">false</msg>
<status status="PASS" starttime="20250721 07:51:02.268" endtime="20250721 07:51:02.269"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:51:02.269" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:51:02.269" endtime="20250721 07:51:02.269"/>
</kw>
<status status="PASS" starttime="20250721 07:51:01.544" endtime="20250721 07:51:02.269"/>
</kw>
<msg timestamp="20250721 07:51:02.269" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:51:01.544" endtime="20250721 07:51:02.269"/>
</kw>
<msg timestamp="20250721 07:51:02.269" level="INFO">${value} = false</msg>
<status status="PASS" starttime="20250721 07:51:01.544" endtime="20250721 07:51:02.270"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:51:02.270" endtime="20250721 07:51:02.270"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:51:02.270" endtime="20250721 07:51:02.270"/>
</branch>
<status status="PASS" starttime="20250721 07:51:02.270" endtime="20250721 07:51:02.270"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:51:02.270" level="INFO">${SECURITY_ENABLED} = false</msg>
<status status="PASS" starttime="20250721 07:51:02.270" endtime="20250721 07:51:02.270"/>
</kw>
<status status="PASS" starttime="20250721 07:51:01.543" endtime="20250721 07:51:02.271"/>
</kw>
<test id="s1-s5-t1" name="Test create volume fails" line="27">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:51:02.271" endtime="20250721 07:51:02.271"/>
</kw>
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:51:02.272" level="INFO">${random} = 68396</msg>
<status status="PASS" starttime="20250721 07:51:02.272" endtime="20250721 07:51:02.272"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${volume_name}</arg>
<arg>${random}-volume-for-prepare</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:51:02.273" level="INFO">${volume_name} = 68396-volume-for-prepare</msg>
<status status="PASS" starttime="20250721 07:51:02.272" endtime="20250721 07:51:02.273"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume create /${volume_name}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:51:02.275" level="INFO">Running command 'ozone sh volume create /68396-volume-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:51:04.101" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:51:04.101" level="INFO">${output} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateVolume when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:51:02.273" endtime="20250721 07:51:04.101"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:51:04.102" level="INFO">NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateVolume when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:51:04.101" endtime="20250721 07:51:04.102"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:51:04.102" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:51:04.102" endtime="20250721 07:51:04.102"/>
</kw>
<msg timestamp="20250721 07:51:04.103" level="INFO">${result} = NOT_SUPPORTED_OPERATION_WHEN_PREPARED Cannot apply write request CreateVolume when OM is in prepare mode.</msg>
<status status="PASS" starttime="20250721 07:51:02.273" endtime="20250721 07:51:04.103"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>OM is in prepare mode</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:51:04.103" endtime="20250721 07:51:04.103"/>
</kw>
<kw name="Execute and checkrc" library="os">
<var>${result}</var>
<arg>ozone sh volume info /${volume_name}</arg>
<arg>255</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:51:04.105" level="INFO">Running command 'ozone sh volume info /68396-volume-for-prepare 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:51:05.937" level="INFO">${rc} = 255</msg>
<msg timestamp="20250721 07:51:05.937" level="INFO">${output} = VOLUME_NOT_FOUND Volume 68396-volume-for-prepare is not found</msg>
<status status="PASS" starttime="20250721 07:51:04.103" endtime="20250721 07:51:05.937"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:51:05.938" level="INFO">VOLUME_NOT_FOUND Volume 68396-volume-for-prepare is not found</msg>
<status status="PASS" starttime="20250721 07:51:05.937" endtime="20250721 07:51:05.938"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:51:05.938" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:51:05.938" endtime="20250721 07:51:05.938"/>
</kw>
<msg timestamp="20250721 07:51:05.938" level="INFO">${result} = VOLUME_NOT_FOUND Volume 68396-volume-for-prepare is not found</msg>
<status status="PASS" starttime="20250721 07:51:04.103" endtime="20250721 07:51:05.938"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>VOLUME_NOT_FOUND</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:51:05.938" endtime="20250721 07:51:05.939"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:51:02.271" endtime="20250721 07:51:05.939"/>
</test>
<test id="s1-s5-t2" name="Test list volumes succeeds" line="35">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:51:05.940" endtime="20250721 07:51:05.940"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone sh volume list</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:51:05.943" level="INFO">Running command 'ozone sh volume list 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:51:07.888" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:51:07.888" level="INFO">${output} = [ {
  "metadata" : { },
  "name" : "43489-volume-for-cancel",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2...</msg>
<status status="PASS" starttime="20250721 07:51:05.941" endtime="20250721 07:51:07.888"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:51:07.888" level="INFO">[ {
  "metadata" : { },
  "name" : "43489-volume-for-cancel",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:49:21.510Z",
  "modificationTime" : "2025-07-21T07:49:21.510Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "s3v",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 0,
  "creationTime" : "2025-07-21T07:48:22.133Z",
  "modificationTime" : "2025-07-21T07:48:22.133Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "vol1",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:48:42.469Z",
  "modificationTime" : "2025-07-21T07:48:42.469Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "75196-volume-for-prepare",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:49:38.248Z",
  "modificationTime" : "2025-07-21T07:49:38.248Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
}, {
  "metadata" : { },
  "name" : "05404-volume-for-prepare",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2025-07-21T07:48:49.750Z",
  "modificationTime" : "2025-07-21T07:48:49.750Z",
  "acls" : [ {
    "type" : "USER",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "ALL" ],
    "aclSet" : [ "ALL" ]
  }, {
    "type" : "GROUP",
    "name" : "hadoop",
    "aclScope" : "ACCESS",
    "aclList" : [ "READ", "LIST" ],
    "aclSet" : [ "READ", "LIST" ]
  } ],
  "refCount" : 0
} ]</msg>
<status status="PASS" starttime="20250721 07:51:07.888" endtime="20250721 07:51:07.889"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:51:07.889" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:51:07.889" endtime="20250721 07:51:07.889"/>
</kw>
<status status="PASS" starttime="20250721 07:51:05.940" endtime="20250721 07:51:07.889"/>
</kw>
<msg timestamp="20250721 07:51:07.889" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:51:05.940" endtime="20250721 07:51:07.889"/>
</kw>
<msg timestamp="20250721 07:51:07.889" level="INFO">${result} = [ {
  "metadata" : { },
  "name" : "43489-volume-for-cancel",
  "admin" : "hadoop",
  "owner" : "hadoop",
  "quotaInBytes" : -1,
  "quotaInNamespace" : -1,
  "usedNamespace" : 1,
  "creationTime" : "2...</msg>
<status status="PASS" starttime="20250721 07:51:05.940" endtime="20250721 07:51:07.889"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:51:05.939" endtime="20250721 07:51:07.890"/>
</test>
<doc>Smoke test to test that OMs are prepared in an OM HA cluster.</doc>
<status status="PASS" starttime="20250721 07:51:01.509" endtime="20250721 07:51:07.890"/>
</suite>
<suite id="s1-s6" name="Loaddata" source="/opt/hadoop/smoketest/topology/loaddata.robot">
<test id="s1-s6-t1" name="Create a volume, bucket and key" line="27">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh volume create topvol1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:51:57.427" level="INFO">Running command 'ozone sh volume create topvol1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:51:59.247" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:51:59.247" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:51:57.425" endtime="20250721 07:51:59.247"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:51:59.248" level="INFO"/>
<status status="PASS" starttime="20250721 07:51:59.247" endtime="20250721 07:51:59.248"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:51:59.248" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:51:59.248" endtime="20250721 07:51:59.248"/>
</kw>
<status status="PASS" starttime="20250721 07:51:57.425" endtime="20250721 07:51:59.248"/>
</kw>
<msg timestamp="20250721 07:51:59.248" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:51:57.425" endtime="20250721 07:51:59.249"/>
</kw>
<msg timestamp="20250721 07:51:59.249" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:51:57.424" endtime="20250721 07:51:59.249"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:51:59.249" endtime="20250721 07:51:59.249"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh bucket create /topvol1/bucket1</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:51:59.252" level="INFO">Running command 'ozone sh bucket create /topvol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:52:01.065" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:52:01.066" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:51:59.250" endtime="20250721 07:52:01.066"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:52:01.067" level="INFO"/>
<status status="PASS" starttime="20250721 07:52:01.066" endtime="20250721 07:52:01.067"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:52:01.068" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:52:01.067" endtime="20250721 07:52:01.068"/>
</kw>
<status status="PASS" starttime="20250721 07:51:59.250" endtime="20250721 07:52:01.068"/>
</kw>
<msg timestamp="20250721 07:52:01.068" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:51:59.249" endtime="20250721 07:52:01.068"/>
</kw>
<msg timestamp="20250721 07:52:01.068" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:51:59.249" endtime="20250721 07:52:01.068"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:52:01.068" endtime="20250721 07:52:01.069"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:52:01.073" level="INFO">Running command 'ozone sh key put /topvol1/bucket1/key1 /opt/hadoop/NOTICE.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:52:04.275" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:52:04.275" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:52:01.070" endtime="20250721 07:52:04.275"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:52:04.276" level="INFO"/>
<status status="PASS" starttime="20250721 07:52:04.276" endtime="20250721 07:52:04.276"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:52:04.277" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:52:04.276" endtime="20250721 07:52:04.277"/>
</kw>
<status status="PASS" starttime="20250721 07:52:01.070" endtime="20250721 07:52:04.277"/>
</kw>
<msg timestamp="20250721 07:52:04.277" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:52:01.069" endtime="20250721 07:52:04.277"/>
</kw>
<msg timestamp="20250721 07:52:04.277" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:52:01.069" endtime="20250721 07:52:04.277"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:52:04.277" endtime="20250721 07:52:04.277"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:51:57.424" endtime="20250721 07:52:04.278"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250721 07:51:57.390" endtime="20250721 07:52:04.278"/>
</suite>
<suite id="s1-s7" name="Readdata" source="/opt/hadoop/smoketest/topology/readdata.robot">
<test id="s1-s7-t1" name="Read data from previously created key" line="27">
<kw name="Generate Random String" library="String">
<var>${random}</var>
<arg>5</arg>
<arg>[NUMBERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20250721 07:52:04.785" level="INFO">${random} = 74372</msg>
<status status="PASS" starttime="20250721 07:52:04.784" endtime="20250721 07:52:04.785"/>
</kw>
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone sh key get /topvol1/bucket1/key1 /tmp/key1-${random}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:52:04.787" level="INFO">Running command 'ozone sh key get /topvol1/bucket1/key1 /tmp/key1-74372 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:52:07.823" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:52:07.823" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:52:04.785" endtime="20250721 07:52:07.823"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:52:07.823" level="INFO"/>
<status status="PASS" starttime="20250721 07:52:07.823" endtime="20250721 07:52:07.824"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:52:07.824" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:52:07.824" endtime="20250721 07:52:07.824"/>
</kw>
<status status="PASS" starttime="20250721 07:52:04.785" endtime="20250721 07:52:07.824"/>
</kw>
<msg timestamp="20250721 07:52:07.824" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:52:04.785" endtime="20250721 07:52:07.824"/>
</kw>
<msg timestamp="20250721 07:52:07.824" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:52:04.785" endtime="20250721 07:52:07.824"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${output}</arg>
<arg>Failed</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:52:07.825" endtime="20250721 07:52:07.825"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:52:04.784" endtime="20250721 07:52:07.825"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250721 07:52:04.751" endtime="20250721 07:52:07.826"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="107120"/>
</suite>
<statistics>
<total>
<stat pass="14" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="14" fail="0" skip="0" id="s1" name="ozone-om-prepare">ozone-om-prepare</stat>
<stat pass="3" fail="0" skip="0" id="s1-s1" name="Om-Prepare">ozone-om-prepare.Om-Prepare</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2" name="Om-Cancel-Prepare">ozone-om-prepare.Om-Cancel-Prepare</stat>
<stat pass="3" fail="0" skip="0" id="s1-s3" name="Om-Prepare">ozone-om-prepare.Om-Prepare</stat>
<stat pass="2" fail="0" skip="0" id="s1-s4" name="Om-Prepared">ozone-om-prepare.Om-Prepared</stat>
<stat pass="2" fail="0" skip="0" id="s1-s5" name="Om-Prepared">ozone-om-prepare.Om-Prepared</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Loaddata">ozone-om-prepare.Loaddata</stat>
<stat pass="1" fail="0" skip="0" id="s1-s7" name="Readdata">ozone-om-prepare.Readdata</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
