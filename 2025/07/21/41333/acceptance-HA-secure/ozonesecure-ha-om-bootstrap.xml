<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250721 07:36:55.754" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-om-bootstrap">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:34:57.059" endtime="20250721 07:34:57.059"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:57.062" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:34:58.031" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:34:58.031" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:34:57.060" endtime="20250721 07:34:58.031"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:34:58.032" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:34:58.031" endtime="20250721 07:34:58.032"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:34:58.032" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:34:58.032" endtime="20250721 07:34:58.032"/>
</kw>
<status status="PASS" starttime="20250721 07:34:57.059" endtime="20250721 07:34:58.032"/>
</kw>
<msg timestamp="20250721 07:34:58.032" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:57.059" endtime="20250721 07:34:58.032"/>
</kw>
<msg timestamp="20250721 07:34:58.033" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:34:57.059" endtime="20250721 07:34:58.033"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:34:58.033" endtime="20250721 07:34:58.033"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:34:58.033" endtime="20250721 07:34:58.033"/>
</branch>
<status status="PASS" starttime="20250721 07:34:58.033" endtime="20250721 07:34:58.033"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:34:58.034" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:34:58.033" endtime="20250721 07:34:58.034"/>
</kw>
<status status="PASS" starttime="20250721 07:34:57.058" endtime="20250721 07:34:58.034"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:34:58.034" endtime="20250721 07:34:58.034"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:58.038" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:34:58.042" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:34:58.042" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:34:58.035" endtime="20250721 07:34:58.042"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:34:58.042" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:34:58.042" endtime="20250721 07:34:58.043"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:34:58.043" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:34:58.043" endtime="20250721 07:34:58.043"/>
</kw>
<status status="PASS" starttime="20250721 07:34:58.035" endtime="20250721 07:34:58.043"/>
</kw>
<msg timestamp="20250721 07:34:58.043" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:58.035" endtime="20250721 07:34:58.043"/>
</kw>
<msg timestamp="20250721 07:34:58.043" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:34:58.035" endtime="20250721 07:34:58.043"/>
</kw>
<msg timestamp="20250721 07:34:58.044" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:34:58.034" endtime="20250721 07:34:58.044"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:34:58.044" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:34:58.044" endtime="20250721 07:34:58.044"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:58.048" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:34:58.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:34:58.172" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:34:58.045" endtime="20250721 07:34:58.172"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:34:58.173" level="INFO"/>
<status status="PASS" starttime="20250721 07:34:58.173" endtime="20250721 07:34:58.173"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:34:58.174" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:34:58.173" endtime="20250721 07:34:58.174"/>
</kw>
<status status="PASS" starttime="20250721 07:34:58.045" endtime="20250721 07:34:58.174"/>
</kw>
<msg timestamp="20250721 07:34:58.174" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:58.045" endtime="20250721 07:34:58.174"/>
</kw>
<status status="PASS" starttime="20250721 07:34:58.044" endtime="20250721 07:34:58.174"/>
</kw>
<status status="PASS" starttime="20250721 07:34:58.044" endtime="20250721 07:34:58.174"/>
</kw>
<status status="PASS" starttime="20250721 07:34:57.058" endtime="20250721 07:34:58.174"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20250721 07:34:57.058" endtime="20250721 07:34:58.174"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20250721 07:34:57.021" endtime="20250721 07:34:58.175"/>
</suite>
<suite id="s1-s2" name="Data-Creation-Before-Om-Bootstrap" source="/opt/hadoop/smoketest/omha/data-creation-before-om-bootstrap.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:34:58.873" endtime="20250721 07:34:58.873"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:58.876" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:34:59.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:34:59.885" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:34:58.874" endtime="20250721 07:34:59.885"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:34:59.886" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:34:59.885" endtime="20250721 07:34:59.886"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:34:59.887" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:34:59.886" endtime="20250721 07:34:59.887"/>
</kw>
<status status="PASS" starttime="20250721 07:34:58.874" endtime="20250721 07:34:59.887"/>
</kw>
<msg timestamp="20250721 07:34:59.887" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:58.873" endtime="20250721 07:34:59.887"/>
</kw>
<msg timestamp="20250721 07:34:59.887" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:34:58.873" endtime="20250721 07:34:59.887"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:34:59.888" endtime="20250721 07:34:59.888"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:34:59.888" endtime="20250721 07:34:59.888"/>
</branch>
<status status="PASS" starttime="20250721 07:34:59.888" endtime="20250721 07:34:59.888"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:34:59.889" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:34:59.888" endtime="20250721 07:34:59.889"/>
</kw>
<status status="PASS" starttime="20250721 07:34:58.873" endtime="20250721 07:34:59.889"/>
</kw>
<test id="s1-s2-t1" name="Volume-bucket init" line="65">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:34:59.891" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:59.891" endtime="20250721 07:34:59.891"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:34:59.891" endtime="20250721 07:34:59.892"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:34:59.892" endtime="20250721 07:34:59.892"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:34:59.892" endtime="20250721 07:34:59.892"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:34:59.892" endtime="20250721 07:34:59.892"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:34:59.892" endtime="20250721 07:34:59.892"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.891" endtime="20250721 07:34:59.892"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:34:59.892" endtime="20250721 07:34:59.893"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:59.898" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:34:59.903" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:34:59.903" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:34:59.894" endtime="20250721 07:34:59.903"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:34:59.905" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:34:59.904" endtime="20250721 07:34:59.905"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:34:59.905" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:34:59.905" endtime="20250721 07:34:59.906"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.894" endtime="20250721 07:34:59.906"/>
</kw>
<msg timestamp="20250721 07:34:59.906" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:59.893" endtime="20250721 07:34:59.906"/>
</kw>
<msg timestamp="20250721 07:34:59.906" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:34:59.893" endtime="20250721 07:34:59.906"/>
</kw>
<msg timestamp="20250721 07:34:59.907" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:34:59.893" endtime="20250721 07:34:59.907"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:34:59.907" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:34:59.907" endtime="20250721 07:34:59.908"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:59.913" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:34:59.985" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:34:59.985" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:34:59.910" endtime="20250721 07:34:59.985"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:34:59.986" level="INFO"/>
<status status="PASS" starttime="20250721 07:34:59.986" endtime="20250721 07:34:59.986"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:34:59.987" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:34:59.986" endtime="20250721 07:34:59.987"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.909" endtime="20250721 07:34:59.987"/>
</kw>
<msg timestamp="20250721 07:34:59.987" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:59.909" endtime="20250721 07:34:59.987"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.908" endtime="20250721 07:34:59.987"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.908" endtime="20250721 07:34:59.987"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.890" endtime="20250721 07:34:59.987"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.890" endtime="20250721 07:34:59.987"/>
</kw>
<kw name="Create volume and bucket">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<kw name="Execute" library="os">
<var>${vol_res}</var>
<arg>ozone sh volume create /${volume}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:34:59.991" level="INFO">Running command 'ozone sh volume create /vol1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:03.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:03.613" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:34:59.989" endtime="20250721 07:35:03.613"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:03.614" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:03.613" endtime="20250721 07:35:03.614"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:03.614" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:03.614" endtime="20250721 07:35:03.614"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.989" endtime="20250721 07:35:03.614"/>
</kw>
<msg timestamp="20250721 07:35:03.614" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:34:59.988" endtime="20250721 07:35:03.615"/>
</kw>
<msg timestamp="20250721 07:35:03.615" level="INFO">${vol_res} = </msg>
<status status="PASS" starttime="20250721 07:34:59.988" endtime="20250721 07:35:03.615"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${vol_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20250721 07:35:03.615" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20250721 07:35:03.615" endtime="20250721 07:35:03.615"/>
</kw>
<kw name="Execute" library="os">
<var>${bucket_res}</var>
<arg>ozone sh bucket create /${volume}/${bucket}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:03.618" level="INFO">Running command 'ozone sh bucket create /vol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:07.043" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:07.043" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:03.616" endtime="20250721 07:35:07.043"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:07.044" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:07.044" endtime="20250721 07:35:07.044"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:07.045" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:07.045" endtime="20250721 07:35:07.045"/>
</kw>
<status status="PASS" starttime="20250721 07:35:03.616" endtime="20250721 07:35:07.045"/>
</kw>
<msg timestamp="20250721 07:35:07.045" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:03.616" endtime="20250721 07:35:07.045"/>
</kw>
<msg timestamp="20250721 07:35:07.045" level="INFO">${bucket_res} = </msg>
<status status="PASS" starttime="20250721 07:35:03.615" endtime="20250721 07:35:07.045"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${bucket_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20250721 07:35:07.046" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20250721 07:35:07.046" endtime="20250721 07:35:07.046"/>
</kw>
<status status="PASS" starttime="20250721 07:34:59.988" endtime="20250721 07:35:07.046"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:34:59.889" endtime="20250721 07:35:07.046"/>
</test>
<test id="s1-s2-t2" name="Create 100 metadata keys under /vol1/bucket1" line="68">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:35:07.049" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:07.048" endtime="20250721 07:35:07.049"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:35:07.049" endtime="20250721 07:35:07.049"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:35:07.049" endtime="20250721 07:35:07.049"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:35:07.049" endtime="20250721 07:35:07.049"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:35:07.049" endtime="20250721 07:35:07.049"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:35:07.049" endtime="20250721 07:35:07.049"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.048" endtime="20250721 07:35:07.049"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:35:07.049" endtime="20250721 07:35:07.050"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:07.053" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:07.057" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:07.057" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:35:07.051" endtime="20250721 07:35:07.057"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:07.058" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:35:07.057" endtime="20250721 07:35:07.058"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:07.058" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:07.058" endtime="20250721 07:35:07.058"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.050" endtime="20250721 07:35:07.058"/>
</kw>
<msg timestamp="20250721 07:35:07.058" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:07.050" endtime="20250721 07:35:07.058"/>
</kw>
<msg timestamp="20250721 07:35:07.058" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:35:07.050" endtime="20250721 07:35:07.058"/>
</kw>
<msg timestamp="20250721 07:35:07.059" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:07.050" endtime="20250721 07:35:07.059"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:35:07.059" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:07.059" endtime="20250721 07:35:07.059"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:07.062" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:07.123" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:07.123" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:07.060" endtime="20250721 07:35:07.123"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:07.124" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:07.123" endtime="20250721 07:35:07.124"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:07.124" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:07.124" endtime="20250721 07:35:07.124"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.060" endtime="20250721 07:35:07.124"/>
</kw>
<msg timestamp="20250721 07:35:07.124" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:07.060" endtime="20250721 07:35:07.124"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.059" endtime="20250721 07:35:07.124"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.059" endtime="20250721 07:35:07.125"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.048" endtime="20250721 07:35:07.125"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.047" endtime="20250721 07:35:07.125"/>
</kw>
<kw name="Create metadata keys">
<arg>10</arg>
<arg>100</arg>
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<kw name="Execute" library="os">
<var>${freon_res}</var>
<arg>ozone freon omkg -t ${threads} -n ${key_num} -v ${volume} -b ${bucket}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:07.129" level="INFO">Running command 'ozone freon omkg -t 10 -n 100 -v vol1 -b bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:14.145" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:14.145" level="INFO">${output} = 2025-07-21 07:35:08,570 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:35:08,744 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250721 07:35:07.126" endtime="20250721 07:35:14.145"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:14.146" level="INFO">2025-07-21 07:35:08,570 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:35:08,744 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period at 10 second(s).
2025-07-21 07:35:08,744 [main] INFO impl.MetricsSystemImpl: ozone-freon metrics system started
2025-07-21 07:35:08,984 [main] INFO freon.BaseFreonGenerator: Executing test with prefix isnlusd1bi and number-of-tests 100
2025-07-21 07:35:09,048 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:35:10,048 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:35:11,050 [Thread-5] INFO freon.ProgressBar: Progress: 0.00 % (0 out of 100)
2025-07-21 07:35:12,052 [Thread-5] INFO freon.ProgressBar: Progress: 20.00 % (20 out of 100)
2025-07-21 07:35:13,052 [Thread-5] INFO freon.ProgressBar: Progress: 69.00 % (69 out of 100)
2025-07-21 07:35:14,052 [Thread-5] INFO freon.ProgressBar: Progress: 100.00 % (100 out of 100)
2025-07-21 07:35:14,075 [shutdown-hook-0] INFO metrics: type=TIMER, name=key-create, count=100, min=106.113234, max=764.352684, mean=262.74671631115183, stddev=157.02671611440718, median=216.087821, p75=245.256862, p95=724.974001, p98=745.25898, p99=750.417323, p999=764.352684, mean_rate=31.267315761300317, m1=0.0, m5=0.0, m15=0.0, rate_unit=events/second, duration_unit=milliseconds
2025-07-21 07:35:14,077 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Total execution time (sec): 5
2025-07-21 07:35:14,077 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Failures: 0
2025-07-21 07:35:14,077 [shutdown-hook-0] INFO freon.BaseFreonGenerator: Successful executions: 100</msg>
<status status="PASS" starttime="20250721 07:35:14.146" endtime="20250721 07:35:14.146"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:14.147" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:14.146" endtime="20250721 07:35:14.147"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.126" endtime="20250721 07:35:14.147"/>
</kw>
<msg timestamp="20250721 07:35:14.147" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:07.126" endtime="20250721 07:35:14.147"/>
</kw>
<msg timestamp="20250721 07:35:14.147" level="INFO">${freon_res} = 2025-07-21 07:35:08,570 [main] INFO impl.MetricsConfig: Loaded properties from hadoop-metrics2.properties
2025-07-21 07:35:08,744 [main] INFO impl.MetricsSystemImpl: Scheduled Metric snapshot period a...</msg>
<status status="PASS" starttime="20250721 07:35:07.125" endtime="20250721 07:35:14.147"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${freon_res}</arg>
<arg>Successful executions: ${key_num}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:35:14.147" endtime="20250721 07:35:14.148"/>
</kw>
<status status="PASS" starttime="20250721 07:35:07.125" endtime="20250721 07:35:14.148"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:35:07.047" endtime="20250721 07:35:14.148"/>
</test>
<test id="s1-s2-t3" name="Create snapshot 'snap1'" line="71">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:35:14.150" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:14.150" endtime="20250721 07:35:14.150"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:35:14.150" endtime="20250721 07:35:14.150"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:35:14.150" endtime="20250721 07:35:14.151"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:35:14.150" endtime="20250721 07:35:14.151"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:35:14.150" endtime="20250721 07:35:14.151"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:35:14.151" endtime="20250721 07:35:14.151"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.150" endtime="20250721 07:35:14.151"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:35:14.151" endtime="20250721 07:35:14.151"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:14.154" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:14.158" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:14.158" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:35:14.152" endtime="20250721 07:35:14.158"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:14.159" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:35:14.158" endtime="20250721 07:35:14.159"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:14.159" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:14.159" endtime="20250721 07:35:14.159"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.152" endtime="20250721 07:35:14.159"/>
</kw>
<msg timestamp="20250721 07:35:14.160" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:14.152" endtime="20250721 07:35:14.160"/>
</kw>
<msg timestamp="20250721 07:35:14.160" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:35:14.151" endtime="20250721 07:35:14.160"/>
</kw>
<msg timestamp="20250721 07:35:14.160" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:14.151" endtime="20250721 07:35:14.160"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:35:14.160" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:14.160" endtime="20250721 07:35:14.160"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:14.163" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:14.196" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:14.196" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:14.161" endtime="20250721 07:35:14.196"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:14.197" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:14.197" endtime="20250721 07:35:14.197"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:14.198" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:14.197" endtime="20250721 07:35:14.198"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.161" endtime="20250721 07:35:14.198"/>
</kw>
<msg timestamp="20250721 07:35:14.198" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:14.161" endtime="20250721 07:35:14.198"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.161" endtime="20250721 07:35:14.198"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.160" endtime="20250721 07:35:14.198"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.149" endtime="20250721 07:35:14.198"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.149" endtime="20250721 07:35:14.198"/>
</kw>
<kw name="Create snapshot">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_1}</arg>
<kw name="Execute" library="os">
<var>${snap_res}</var>
<arg>ozone sh snapshot create /${volume}/${bucket} ${snapshot}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:14.202" level="INFO">Running command 'ozone sh snapshot create /vol1/bucket1 snap1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:17.770" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:17.770" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:14.200" endtime="20250721 07:35:17.770"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:17.771" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:17.770" endtime="20250721 07:35:17.771"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:17.771" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:17.771" endtime="20250721 07:35:17.772"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.199" endtime="20250721 07:35:17.772"/>
</kw>
<msg timestamp="20250721 07:35:17.772" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:14.199" endtime="20250721 07:35:17.772"/>
</kw>
<msg timestamp="20250721 07:35:17.772" level="INFO">${snap_res} = </msg>
<status status="PASS" starttime="20250721 07:35:14.199" endtime="20250721 07:35:17.772"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${snap_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20250721 07:35:17.772" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20250721 07:35:17.772" endtime="20250721 07:35:17.772"/>
</kw>
<status status="PASS" starttime="20250721 07:35:14.198" endtime="20250721 07:35:17.772"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:35:14.148" endtime="20250721 07:35:17.773"/>
</test>
<test id="s1-s2-t4" name="Create 2 actual keys with prefix 'sn', key contents the same as the key name" line="74">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:35:17.775" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:17.775" endtime="20250721 07:35:17.775"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:35:17.775" endtime="20250721 07:35:17.775"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:35:17.775" endtime="20250721 07:35:17.775"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:35:17.775" endtime="20250721 07:35:17.775"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:35:17.775" endtime="20250721 07:35:17.775"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:35:17.776" endtime="20250721 07:35:17.776"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.774" endtime="20250721 07:35:17.776"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:35:17.776" endtime="20250721 07:35:17.776"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:17.779" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:17.783" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:17.783" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:35:17.777" endtime="20250721 07:35:17.783"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:17.784" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:35:17.784" endtime="20250721 07:35:17.784"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:17.785" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:17.784" endtime="20250721 07:35:17.785"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.777" endtime="20250721 07:35:17.785"/>
</kw>
<msg timestamp="20250721 07:35:17.785" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:17.777" endtime="20250721 07:35:17.785"/>
</kw>
<msg timestamp="20250721 07:35:17.785" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:35:17.776" endtime="20250721 07:35:17.785"/>
</kw>
<msg timestamp="20250721 07:35:17.785" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:17.776" endtime="20250721 07:35:17.785"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:35:17.786" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:17.785" endtime="20250721 07:35:17.786"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:17.789" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:17.862" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:17.862" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:17.787" endtime="20250721 07:35:17.862"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:17.863" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:17.863" endtime="20250721 07:35:17.863"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:17.864" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:17.863" endtime="20250721 07:35:17.864"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.787" endtime="20250721 07:35:17.864"/>
</kw>
<msg timestamp="20250721 07:35:17.864" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:17.786" endtime="20250721 07:35:17.864"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.786" endtime="20250721 07:35:17.864"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.786" endtime="20250721 07:35:17.864"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.774" endtime="20250721 07:35:17.864"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.774" endtime="20250721 07:35:17.864"/>
</kw>
<kw name="Create actual keys">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${KEY_PREFIX}</arg>
<arg>${KEY_1}</arg>
<arg>${KEY_2}</arg>
<arg>${TMP_FILE}</arg>
<kw name="Create a key and set contents same as the keyName">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${key_prefix}</arg>
<arg>${key_1}</arg>
<arg>${tmp_file}</arg>
<kw name="Execute" library="os">
<arg>echo "${key_prefix}/${key_name}" &gt; ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:17.869" level="INFO">Running command 'echo "sn/key1" &gt; /tmp/tmp.txt'.</msg>
<msg timestamp="20250721 07:35:17.871" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:17.871" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:17.867" endtime="20250721 07:35:17.871"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:17.872" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:17.871" endtime="20250721 07:35:17.872"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:17.872" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:17.872" endtime="20250721 07:35:17.872"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.866" endtime="20250721 07:35:17.872"/>
</kw>
<msg timestamp="20250721 07:35:17.872" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:17.866" endtime="20250721 07:35:17.872"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.866" endtime="20250721 07:35:17.873"/>
</kw>
<kw name="Execute" library="os">
<var>${key_res}</var>
<arg>ozone sh key put /${volume}/${bucket}/${key_prefix}/${key_name} ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:17.876" level="INFO">Running command 'ozone sh key put /vol1/bucket1/sn/key1 /tmp/tmp.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:24.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:24.228" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:17.874" endtime="20250721 07:35:24.228"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:24.229" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:24.228" endtime="20250721 07:35:24.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:24.229" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:24.229" endtime="20250721 07:35:24.229"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.873" endtime="20250721 07:35:24.229"/>
</kw>
<msg timestamp="20250721 07:35:24.229" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:17.873" endtime="20250721 07:35:24.229"/>
</kw>
<msg timestamp="20250721 07:35:24.230" level="INFO">${key_res} = </msg>
<status status="PASS" starttime="20250721 07:35:17.873" endtime="20250721 07:35:24.230"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${key_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20250721 07:35:24.230" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20250721 07:35:24.230" endtime="20250721 07:35:24.230"/>
</kw>
<kw name="Execute" library="os">
<var>${key_cat_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/${key_prefix}/${key_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:24.233" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/sn/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:29.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:29.705" level="INFO">${output} = sn/key1</msg>
<status status="PASS" starttime="20250721 07:35:24.231" endtime="20250721 07:35:29.705"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:29.706" level="INFO">sn/key1</msg>
<status status="PASS" starttime="20250721 07:35:29.705" endtime="20250721 07:35:29.706"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:29.706" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:29.706" endtime="20250721 07:35:29.706"/>
</kw>
<status status="PASS" starttime="20250721 07:35:24.231" endtime="20250721 07:35:29.707"/>
</kw>
<msg timestamp="20250721 07:35:29.707" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:24.231" endtime="20250721 07:35:29.707"/>
</kw>
<msg timestamp="20250721 07:35:29.707" level="INFO">${key_cat_res} = sn/key1</msg>
<status status="PASS" starttime="20250721 07:35:24.230" endtime="20250721 07:35:29.707"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_cat_res}</arg>
<arg>${key_prefix}/${key_name}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:35:29.707" endtime="20250721 07:35:29.707"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.865" endtime="20250721 07:35:29.707"/>
</kw>
<kw name="Create a key and set contents same as the keyName">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${key_prefix}</arg>
<arg>${key_2}</arg>
<arg>${tmp_file}</arg>
<kw name="Execute" library="os">
<arg>echo "${key_prefix}/${key_name}" &gt; ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:29.711" level="INFO">Running command 'echo "sn/key2" &gt; /tmp/tmp.txt'.</msg>
<msg timestamp="20250721 07:35:29.713" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:29.713" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:29.709" endtime="20250721 07:35:29.713"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:29.714" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:29.714" endtime="20250721 07:35:29.714"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:29.714" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:29.714" endtime="20250721 07:35:29.715"/>
</kw>
<status status="PASS" starttime="20250721 07:35:29.709" endtime="20250721 07:35:29.715"/>
</kw>
<msg timestamp="20250721 07:35:29.715" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:29.708" endtime="20250721 07:35:29.715"/>
</kw>
<status status="PASS" starttime="20250721 07:35:29.708" endtime="20250721 07:35:29.715"/>
</kw>
<kw name="Execute" library="os">
<var>${key_res}</var>
<arg>ozone sh key put /${volume}/${bucket}/${key_prefix}/${key_name} ${tmp_file}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:29.718" level="INFO">Running command 'ozone sh key put /vol1/bucket1/sn/key2 /tmp/tmp.txt 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:35.280" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:35.280" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:29.716" endtime="20250721 07:35:35.280"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:35.281" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:35.280" endtime="20250721 07:35:35.281"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:35.281" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:35.281" endtime="20250721 07:35:35.281"/>
</kw>
<status status="PASS" starttime="20250721 07:35:29.716" endtime="20250721 07:35:35.282"/>
</kw>
<msg timestamp="20250721 07:35:35.282" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:29.715" endtime="20250721 07:35:35.282"/>
</kw>
<msg timestamp="20250721 07:35:35.282" level="INFO">${key_res} = </msg>
<status status="PASS" starttime="20250721 07:35:29.715" endtime="20250721 07:35:35.282"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${key_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20250721 07:35:35.282" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20250721 07:35:35.282" endtime="20250721 07:35:35.282"/>
</kw>
<kw name="Execute" library="os">
<var>${key_cat_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/${key_prefix}/${key_name}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:35.286" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/sn/key2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:40.520" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:40.521" level="INFO">${output} = sn/key2</msg>
<status status="PASS" starttime="20250721 07:35:35.283" endtime="20250721 07:35:40.521"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:40.521" level="INFO">sn/key2</msg>
<status status="PASS" starttime="20250721 07:35:40.521" endtime="20250721 07:35:40.522"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:40.522" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:40.522" endtime="20250721 07:35:40.522"/>
</kw>
<status status="PASS" starttime="20250721 07:35:35.283" endtime="20250721 07:35:40.522"/>
</kw>
<msg timestamp="20250721 07:35:40.522" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:35.283" endtime="20250721 07:35:40.522"/>
</kw>
<msg timestamp="20250721 07:35:40.523" level="INFO">${key_cat_res} = sn/key2</msg>
<status status="PASS" starttime="20250721 07:35:35.282" endtime="20250721 07:35:40.523"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key_cat_res}</arg>
<arg>${key_prefix}/${key_name}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:35:40.523" endtime="20250721 07:35:40.523"/>
</kw>
<status status="PASS" starttime="20250721 07:35:29.708" endtime="20250721 07:35:40.523"/>
</kw>
<status status="PASS" starttime="20250721 07:35:17.864" endtime="20250721 07:35:40.523"/>
</kw>
<kw name="Remove File" library="OperatingSystem" type="TEARDOWN">
<arg>${TMP_FILE}</arg>
<doc>Removes a file with the given path.</doc>
<msg timestamp="20250721 07:35:40.524" level="INFO" html="true">Removed file '&lt;a href="file:///tmp/tmp.txt"&gt;/tmp/tmp.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20250721 07:35:40.523" endtime="20250721 07:35:40.524"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:35:17.773" endtime="20250721 07:35:40.524"/>
</test>
<test id="s1-s2-t5" name="Create snapshot 'snap2'" line="78">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:35:40.526" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:40.526" endtime="20250721 07:35:40.526"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:35:40.526" endtime="20250721 07:35:40.526"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:35:40.526" endtime="20250721 07:35:40.526"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:35:40.526" endtime="20250721 07:35:40.526"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:35:40.526" endtime="20250721 07:35:40.527"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:35:40.527" endtime="20250721 07:35:40.527"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.526" endtime="20250721 07:35:40.527"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:35:40.527" endtime="20250721 07:35:40.527"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:40.531" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:40.535" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:40.535" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:35:40.528" endtime="20250721 07:35:40.535"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:40.536" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:35:40.535" endtime="20250721 07:35:40.536"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:40.536" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:40.536" endtime="20250721 07:35:40.536"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.528" endtime="20250721 07:35:40.536"/>
</kw>
<msg timestamp="20250721 07:35:40.536" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:40.528" endtime="20250721 07:35:40.537"/>
</kw>
<msg timestamp="20250721 07:35:40.537" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:35:40.527" endtime="20250721 07:35:40.537"/>
</kw>
<msg timestamp="20250721 07:35:40.537" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:40.527" endtime="20250721 07:35:40.537"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:35:40.537" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:35:40.537" endtime="20250721 07:35:40.537"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:40.541" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:40.613" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:40.613" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:40.539" endtime="20250721 07:35:40.613"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:40.614" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:40.613" endtime="20250721 07:35:40.614"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:40.614" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:40.614" endtime="20250721 07:35:40.615"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.538" endtime="20250721 07:35:40.615"/>
</kw>
<msg timestamp="20250721 07:35:40.615" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:40.538" endtime="20250721 07:35:40.615"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.538" endtime="20250721 07:35:40.615"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.538" endtime="20250721 07:35:40.615"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.525" endtime="20250721 07:35:40.615"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.525" endtime="20250721 07:35:40.615"/>
</kw>
<kw name="Create snapshot">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_2}</arg>
<kw name="Execute" library="os">
<var>${snap_res}</var>
<arg>ozone sh snapshot create /${volume}/${bucket} ${snapshot}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:40.619" level="INFO">Running command 'ozone sh snapshot create /vol1/bucket1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:35:44.014" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:35:44.014" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:35:40.617" endtime="20250721 07:35:44.014"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:35:44.015" level="INFO"/>
<status status="PASS" starttime="20250721 07:35:44.014" endtime="20250721 07:35:44.015"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:35:44.015" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:35:44.015" endtime="20250721 07:35:44.016"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.616" endtime="20250721 07:35:44.016"/>
</kw>
<msg timestamp="20250721 07:35:44.016" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:40.616" endtime="20250721 07:35:44.016"/>
</kw>
<msg timestamp="20250721 07:35:44.016" level="INFO">${snap_res} = </msg>
<status status="PASS" starttime="20250721 07:35:40.616" endtime="20250721 07:35:44.016"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${snap_res}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20250721 07:35:44.016" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20250721 07:35:44.016" endtime="20250721 07:35:44.016"/>
</kw>
<status status="PASS" starttime="20250721 07:35:40.615" endtime="20250721 07:35:44.016"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:35:40.524" endtime="20250721 07:35:44.017"/>
</test>
<doc>Smoke test for creating data needed for om bootstrap load test.</doc>
<status status="PASS" starttime="20250721 07:34:58.834" endtime="20250721 07:35:44.018"/>
</suite>
<suite id="s1-s3" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s3-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${USER}</arg>
<arg>${USER}.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:35:59.363" endtime="20250721 07:35:59.363"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:35:59.367" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:00.383" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:00.383" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:35:59.364" endtime="20250721 07:36:00.383"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:00.384" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:36:00.384" endtime="20250721 07:36:00.384"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:00.385" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:00.384" endtime="20250721 07:36:00.385"/>
</kw>
<status status="PASS" starttime="20250721 07:35:59.364" endtime="20250721 07:36:00.385"/>
</kw>
<msg timestamp="20250721 07:36:00.385" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:35:59.364" endtime="20250721 07:36:00.385"/>
</kw>
<msg timestamp="20250721 07:36:00.385" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:35:59.364" endtime="20250721 07:36:00.385"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:00.385" endtime="20250721 07:36:00.386"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:00.385" endtime="20250721 07:36:00.386"/>
</branch>
<status status="PASS" starttime="20250721 07:36:00.385" endtime="20250721 07:36:00.386"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:36:00.386" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:36:00.386" endtime="20250721 07:36:00.386"/>
</kw>
<status status="PASS" starttime="20250721 07:35:59.363" endtime="20250721 07:36:00.386"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:36:00.386" endtime="20250721 07:36:00.387"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:00.390" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:00.394" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:00.394" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:36:00.388" endtime="20250721 07:36:00.394"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:00.395" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:36:00.395" endtime="20250721 07:36:00.395"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:00.396" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:00.395" endtime="20250721 07:36:00.396"/>
</kw>
<status status="PASS" starttime="20250721 07:36:00.387" endtime="20250721 07:36:00.396"/>
</kw>
<msg timestamp="20250721 07:36:00.396" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:00.387" endtime="20250721 07:36:00.396"/>
</kw>
<msg timestamp="20250721 07:36:00.396" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:36:00.387" endtime="20250721 07:36:00.396"/>
</kw>
<msg timestamp="20250721 07:36:00.396" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:00.387" endtime="20250721 07:36:00.396"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:36:00.397" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:00.396" endtime="20250721 07:36:00.397"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:00.400" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:00.435" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:00.435" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:36:00.398" endtime="20250721 07:36:00.435"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:00.436" level="INFO"/>
<status status="PASS" starttime="20250721 07:36:00.435" endtime="20250721 07:36:00.436"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:00.436" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:00.436" endtime="20250721 07:36:00.436"/>
</kw>
<status status="PASS" starttime="20250721 07:36:00.398" endtime="20250721 07:36:00.436"/>
</kw>
<msg timestamp="20250721 07:36:00.436" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:00.398" endtime="20250721 07:36:00.436"/>
</kw>
<status status="PASS" starttime="20250721 07:36:00.397" endtime="20250721 07:36:00.437"/>
</kw>
<status status="PASS" starttime="20250721 07:36:00.397" endtime="20250721 07:36:00.437"/>
</kw>
<status status="PASS" starttime="20250721 07:35:59.363" endtime="20250721 07:36:00.437"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20250721 07:35:59.362" endtime="20250721 07:36:00.437"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20250721 07:35:59.324" endtime="20250721 07:36:00.438"/>
</suite>
<suite id="s1-s4" name="Data-Validation-After-Om-Bootstrap" source="/opt/hadoop/smoketest/omha/data-validation-after-om-bootstrap.robot">
<kw name="Get Security Enabled From Config" library="commonlib" type="SETUP">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20250721 07:36:01.103" endtime="20250721 07:36:01.103"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:01.106" level="INFO">Running command 'ozone getconf confKey ozone.security.enabled 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:02.093" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:02.093" level="INFO">${output} = true</msg>
<status status="PASS" starttime="20250721 07:36:01.104" endtime="20250721 07:36:02.093"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:02.094" level="INFO">true</msg>
<status status="PASS" starttime="20250721 07:36:02.093" endtime="20250721 07:36:02.094"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:02.094" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:02.094" endtime="20250721 07:36:02.094"/>
</kw>
<status status="PASS" starttime="20250721 07:36:01.104" endtime="20250721 07:36:02.094"/>
</kw>
<msg timestamp="20250721 07:36:02.094" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:01.104" endtime="20250721 07:36:02.095"/>
</kw>
<msg timestamp="20250721 07:36:02.095" level="INFO">${value} = true</msg>
<status status="PASS" starttime="20250721 07:36:01.103" endtime="20250721 07:36:02.095"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:02.095" endtime="20250721 07:36:02.095"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:02.095" endtime="20250721 07:36:02.095"/>
</branch>
<status status="PASS" starttime="20250721 07:36:02.095" endtime="20250721 07:36:02.095"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250721 07:36:02.096" level="INFO">${SECURITY_ENABLED} = true</msg>
<status status="PASS" starttime="20250721 07:36:02.095" endtime="20250721 07:36:02.096"/>
</kw>
<status status="PASS" starttime="20250721 07:36:01.103" endtime="20250721 07:36:02.096"/>
</kw>
<test id="s1-s4-t1" name="Check number of checkpoints made" line="86">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:36:02.098" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:02.097" endtime="20250721 07:36:02.098"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:36:02.098" endtime="20250721 07:36:02.098"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:02.098" endtime="20250721 07:36:02.098"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:02.098" endtime="20250721 07:36:02.098"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:36:02.098" endtime="20250721 07:36:02.098"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:36:02.098" endtime="20250721 07:36:02.098"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.097" endtime="20250721 07:36:02.098"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:36:02.098" endtime="20250721 07:36:02.098"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:02.102" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:02.106" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:02.106" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:36:02.100" endtime="20250721 07:36:02.106"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:02.107" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:36:02.106" endtime="20250721 07:36:02.107"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:02.107" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:02.107" endtime="20250721 07:36:02.107"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.099" endtime="20250721 07:36:02.107"/>
</kw>
<msg timestamp="20250721 07:36:02.107" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:02.099" endtime="20250721 07:36:02.107"/>
</kw>
<msg timestamp="20250721 07:36:02.108" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:36:02.099" endtime="20250721 07:36:02.108"/>
</kw>
<msg timestamp="20250721 07:36:02.108" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:02.099" endtime="20250721 07:36:02.108"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:36:02.108" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:02.108" endtime="20250721 07:36:02.108"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:02.112" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:02.165" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:02.165" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:36:02.110" endtime="20250721 07:36:02.165"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:02.166" level="INFO"/>
<status status="PASS" starttime="20250721 07:36:02.166" endtime="20250721 07:36:02.166"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:02.167" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:02.166" endtime="20250721 07:36:02.167"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.110" endtime="20250721 07:36:02.167"/>
</kw>
<msg timestamp="20250721 07:36:02.167" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:02.109" endtime="20250721 07:36:02.167"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.109" endtime="20250721 07:36:02.167"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.108" endtime="20250721 07:36:02.167"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.097" endtime="20250721 07:36:02.167"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.096" endtime="20250721 07:36:02.167"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>3min</arg>
<arg>5sec</arg>
<arg>Number of checkpoints equals 2</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Number of checkpoints equals 2">
<kw name="Execute" library="os">
<var>${checkpoints}</var>
<arg>ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:02.171" level="INFO">Running command 'ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:02.176" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:02.176" level="INFO">${output} = 0</msg>
<status status="PASS" starttime="20250721 07:36:02.169" endtime="20250721 07:36:02.176"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:02.177" level="INFO">0</msg>
<status status="PASS" starttime="20250721 07:36:02.176" endtime="20250721 07:36:02.177"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:02.177" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:02.177" endtime="20250721 07:36:02.177"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.169" endtime="20250721 07:36:02.177"/>
</kw>
<msg timestamp="20250721 07:36:02.177" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:02.168" endtime="20250721 07:36:02.178"/>
</kw>
<msg timestamp="20250721 07:36:02.178" level="INFO">${checkpoints} = 0</msg>
<status status="PASS" starttime="20250721 07:36:02.168" endtime="20250721 07:36:02.178"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${checkpoints} == 2</arg>
<doc>Fails if the given condition is not true.</doc>
<msg timestamp="20250721 07:36:02.178" level="FAIL">'0 == 2' should be true.</msg>
<status status="FAIL" starttime="20250721 07:36:02.178" endtime="20250721 07:36:02.178"/>
</kw>
<status status="FAIL" starttime="20250721 07:36:02.168" endtime="20250721 07:36:02.178"/>
</kw>
<kw name="Number of checkpoints equals 2">
<kw name="Execute" library="os">
<var>${checkpoints}</var>
<arg>ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:07.183" level="INFO">Running command 'ls -lah /data/metadata/db.snapshots/checkpointState | grep 'om.db-' | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:07.188" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:07.188" level="INFO">${output} = 2</msg>
<status status="PASS" starttime="20250721 07:36:07.180" endtime="20250721 07:36:07.188"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:07.189" level="INFO">2</msg>
<status status="PASS" starttime="20250721 07:36:07.188" endtime="20250721 07:36:07.189"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:07.189" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:07.189" endtime="20250721 07:36:07.189"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.180" endtime="20250721 07:36:07.189"/>
</kw>
<msg timestamp="20250721 07:36:07.190" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:07.180" endtime="20250721 07:36:07.190"/>
</kw>
<msg timestamp="20250721 07:36:07.190" level="INFO">${checkpoints} = 2</msg>
<status status="PASS" starttime="20250721 07:36:07.179" endtime="20250721 07:36:07.190"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${checkpoints} == 2</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250721 07:36:07.190" endtime="20250721 07:36:07.190"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.179" endtime="20250721 07:36:07.190"/>
</kw>
<status status="PASS" starttime="20250721 07:36:02.168" endtime="20250721 07:36:07.191"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:36:02.096" endtime="20250721 07:36:07.191"/>
</test>
<test id="s1-s4-t2" name="Check current leader and transfer leadership to 'om3'" line="89">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:36:07.193" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:07.193" endtime="20250721 07:36:07.193"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:36:07.193" endtime="20250721 07:36:07.193"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:07.194" endtime="20250721 07:36:07.194"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:07.193" endtime="20250721 07:36:07.194"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:36:07.193" endtime="20250721 07:36:07.194"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:36:07.194" endtime="20250721 07:36:07.194"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.193" endtime="20250721 07:36:07.194"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:36:07.194" endtime="20250721 07:36:07.194"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:07.198" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:07.201" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:07.201" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:36:07.195" endtime="20250721 07:36:07.201"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:07.202" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:36:07.202" endtime="20250721 07:36:07.202"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:07.203" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:07.202" endtime="20250721 07:36:07.203"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.195" endtime="20250721 07:36:07.203"/>
</kw>
<msg timestamp="20250721 07:36:07.203" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:07.195" endtime="20250721 07:36:07.203"/>
</kw>
<msg timestamp="20250721 07:36:07.203" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:36:07.195" endtime="20250721 07:36:07.203"/>
</kw>
<msg timestamp="20250721 07:36:07.203" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:07.194" endtime="20250721 07:36:07.203"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:36:07.204" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:07.203" endtime="20250721 07:36:07.204"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:07.207" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:07.223" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:07.223" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:36:07.205" endtime="20250721 07:36:07.223"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:07.224" level="INFO"/>
<status status="PASS" starttime="20250721 07:36:07.223" endtime="20250721 07:36:07.224"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:07.225" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:07.224" endtime="20250721 07:36:07.225"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.205" endtime="20250721 07:36:07.225"/>
</kw>
<msg timestamp="20250721 07:36:07.225" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:07.204" endtime="20250721 07:36:07.225"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.204" endtime="20250721 07:36:07.225"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.204" endtime="20250721 07:36:07.225"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.192" endtime="20250721 07:36:07.225"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.192" endtime="20250721 07:36:07.225"/>
</kw>
<kw name="Check current leader is different than OM">
<arg>${BOOTSTRAPPED_OM}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>ozone admin om roles -id=omservice | grep 'LEADER' | awk -F ':' '{ print $1 }'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:07.230" level="INFO">Running command 'ozone admin om roles -id=omservice | grep 'LEADER' | awk -F ':' '{ print $1 }' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:10.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:10.242" level="INFO">${output} = om1 </msg>
<status status="PASS" starttime="20250721 07:36:07.227" endtime="20250721 07:36:10.242"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:10.243" level="INFO">om1 </msg>
<status status="PASS" starttime="20250721 07:36:10.242" endtime="20250721 07:36:10.243"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:10.243" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:10.243" endtime="20250721 07:36:10.243"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.226" endtime="20250721 07:36:10.243"/>
</kw>
<msg timestamp="20250721 07:36:10.244" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:07.226" endtime="20250721 07:36:10.244"/>
</kw>
<msg timestamp="20250721 07:36:10.244" level="INFO">${leader} = om1 </msg>
<status status="PASS" starttime="20250721 07:36:07.226" endtime="20250721 07:36:10.244"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${leader}</arg>
<arg>${om}</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:10.244" endtime="20250721 07:36:10.244"/>
</kw>
<status status="PASS" starttime="20250721 07:36:07.225" endtime="20250721 07:36:10.244"/>
</kw>
<kw name="Transfer leadership to OM">
<arg>${BOOTSTRAPPED_OM}</arg>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${new_leader}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:10.248" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:20.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:20.391" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250721 07:36:10.246" endtime="20250721 07:36:20.391"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:20.392" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250721 07:36:20.392" endtime="20250721 07:36:20.392"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:20.393" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:20.392" endtime="20250721 07:36:20.393"/>
</kw>
<status status="PASS" starttime="20250721 07:36:10.245" endtime="20250721 07:36:20.393"/>
</kw>
<msg timestamp="20250721 07:36:20.393" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:10.245" endtime="20250721 07:36:20.393"/>
</kw>
<msg timestamp="20250721 07:36:20.393" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250721 07:36:10.245" endtime="20250721 07:36:20.393"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:20.393" endtime="20250721 07:36:20.393"/>
</kw>
<status status="PASS" starttime="20250721 07:36:10.244" endtime="20250721 07:36:20.394"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:36:07.191" endtime="20250721 07:36:20.394"/>
</test>
<test id="s1-s4-t3" name="Snapshots exist on 'om3'" line="93">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:36:20.396" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:20.396" endtime="20250721 07:36:20.396"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:36:20.396" endtime="20250721 07:36:20.396"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:20.396" endtime="20250721 07:36:20.396"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:20.396" endtime="20250721 07:36:20.396"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:36:20.396" endtime="20250721 07:36:20.396"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:36:20.396" endtime="20250721 07:36:20.396"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.395" endtime="20250721 07:36:20.396"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:36:20.397" endtime="20250721 07:36:20.397"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:20.400" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:20.404" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:20.404" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:36:20.398" endtime="20250721 07:36:20.404"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:20.405" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:36:20.404" endtime="20250721 07:36:20.405"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:20.405" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:20.405" endtime="20250721 07:36:20.405"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.398" endtime="20250721 07:36:20.406"/>
</kw>
<msg timestamp="20250721 07:36:20.406" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:20.397" endtime="20250721 07:36:20.406"/>
</kw>
<msg timestamp="20250721 07:36:20.406" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:36:20.397" endtime="20250721 07:36:20.406"/>
</kw>
<msg timestamp="20250721 07:36:20.406" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:20.397" endtime="20250721 07:36:20.406"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:36:20.406" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:20.406" endtime="20250721 07:36:20.406"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:20.410" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:20.535" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:20.535" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:36:20.408" endtime="20250721 07:36:20.535"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:20.536" level="INFO"/>
<status status="PASS" starttime="20250721 07:36:20.536" endtime="20250721 07:36:20.537"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:20.537" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:20.537" endtime="20250721 07:36:20.537"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.407" endtime="20250721 07:36:20.537"/>
</kw>
<msg timestamp="20250721 07:36:20.537" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:20.407" endtime="20250721 07:36:20.537"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.407" endtime="20250721 07:36:20.537"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.407" endtime="20250721 07:36:20.537"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.395" endtime="20250721 07:36:20.537"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.395" endtime="20250721 07:36:20.537"/>
</kw>
<kw name="Check snapshots on OM">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_1}</arg>
<arg>${SNAP_2}</arg>
<kw name="Execute" library="os">
<var>${snap_list}</var>
<arg>ozone sh snapshot list /${volume}/${bucket}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:20.541" level="INFO">Running command 'ozone sh snapshot list /vol1/bucket1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:24.159" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:24.159" level="INFO">${output} = [ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1753083317462,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "03bc19a4-0cf9-4a78-8af0-626a900...</msg>
<status status="PASS" starttime="20250721 07:36:20.539" endtime="20250721 07:36:24.159"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:24.160" level="INFO">[ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1753083317462,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "03bc19a4-0cf9-4a78-8af0-626a900cdb29",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-03bc19a4-0cf9-4a78-8af0-626a900cdb29",
  "referencedSize" : 0,
  "referencedReplicatedSize" : 0,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
}, {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap2",
  "creationTime" : 1753083343880,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "e4e6b6a4-2a7a-4b87-bbbe-7e1decda9558",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-e4e6b6a4-2a7a-4b87-bbbe-7e1decda9558",
  "referencedSize" : 16,
  "referencedReplicatedSize" : 48,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
} ]</msg>
<status status="PASS" starttime="20250721 07:36:24.159" endtime="20250721 07:36:24.160"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:24.160" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:24.160" endtime="20250721 07:36:24.160"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.539" endtime="20250721 07:36:24.160"/>
</kw>
<msg timestamp="20250721 07:36:24.160" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:20.538" endtime="20250721 07:36:24.160"/>
</kw>
<msg timestamp="20250721 07:36:24.161" level="INFO">${snap_list} = [ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1753083317462,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "03bc19a4-0cf9-4a78-8af0-626a900...</msg>
<status status="PASS" starttime="20250721 07:36:20.538" endtime="20250721 07:36:24.161"/>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<arg>${snap_list}</arg>
<arg>[ ]</arg>
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:24.161" endtime="20250721 07:36:24.161"/>
</kw>
<kw name="Execute" library="os">
<var>${snap1_res}</var>
<arg>echo "${snap_list}" | grep ${snap_1}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:24.164" level="INFO">Running command 'echo "[ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1753083317462,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "03bc19a4-0cf9-4a78-8af0-626a900cdb29",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-03bc19a4-0cf9-4a78-8af0-626a900cdb29",
  "referencedSize" : 0,
  "referencedReplicatedSize" : 0,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
}, {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap2",
  "creationTime" : 1753083343880,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "e4e6b6a4-2a7a-4b87-bbbe-7e1decda9558",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-e4e6b6a4-2a7a-4b87-bbbe-7e1decda9558",
  "referencedSize" : 16,
  "referencedReplicatedSize" : 48,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
} ]" | grep snap1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:24.168" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:24.168" level="INFO">${output} =   name : snap1,</msg>
<status status="PASS" starttime="20250721 07:36:24.162" endtime="20250721 07:36:24.168"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:24.168" level="INFO">  name : snap1,</msg>
<status status="PASS" starttime="20250721 07:36:24.168" endtime="20250721 07:36:24.169"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:24.169" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:24.169" endtime="20250721 07:36:24.169"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.162" endtime="20250721 07:36:24.169"/>
</kw>
<msg timestamp="20250721 07:36:24.169" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:24.161" endtime="20250721 07:36:24.169"/>
</kw>
<msg timestamp="20250721 07:36:24.169" level="INFO">${snap1_res} =   name : snap1,</msg>
<status status="PASS" starttime="20250721 07:36:24.161" endtime="20250721 07:36:24.169"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${snap1_res}</arg>
<arg>${snap_1}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:24.170" endtime="20250721 07:36:24.170"/>
</kw>
<kw name="Execute" library="os">
<var>${snap2_res}</var>
<arg>echo "${snap_list}" | grep ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:24.173" level="INFO">Running command 'echo "[ {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap1",
  "creationTime" : 1753083317462,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "03bc19a4-0cf9-4a78-8af0-626a900cdb29",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-03bc19a4-0cf9-4a78-8af0-626a900cdb29",
  "referencedSize" : 0,
  "referencedReplicatedSize" : 0,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
}, {
  "volumeName" : "vol1",
  "bucketName" : "bucket1",
  "name" : "snap2",
  "creationTime" : 1753083343880,
  "snapshotStatus" : "SNAPSHOT_ACTIVE",
  "snapshotId" : "e4e6b6a4-2a7a-4b87-bbbe-7e1decda9558",
  "snapshotPath" : "vol1/bucket1",
  "checkpointDir" : "-e4e6b6a4-2a7a-4b87-bbbe-7e1decda9558",
  "referencedSize" : 16,
  "referencedReplicatedSize" : 48,
  "exclusiveSize" : 0,
  "exclusiveReplicatedSize" : 0
} ]" | grep snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:24.177" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:24.177" level="INFO">${output} =   name : snap2,</msg>
<status status="PASS" starttime="20250721 07:36:24.171" endtime="20250721 07:36:24.177"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:24.177" level="INFO">  name : snap2,</msg>
<status status="PASS" starttime="20250721 07:36:24.177" endtime="20250721 07:36:24.177"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:24.178" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:24.177" endtime="20250721 07:36:24.178"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.171" endtime="20250721 07:36:24.178"/>
</kw>
<msg timestamp="20250721 07:36:24.178" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:24.170" endtime="20250721 07:36:24.178"/>
</kw>
<msg timestamp="20250721 07:36:24.178" level="INFO">${snap2_res} =   name : snap2,</msg>
<status status="PASS" starttime="20250721 07:36:24.170" endtime="20250721 07:36:24.178"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${snap2_res}</arg>
<arg>${snap_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:24.178" endtime="20250721 07:36:24.179"/>
</kw>
<status status="PASS" starttime="20250721 07:36:20.538" endtime="20250721 07:36:24.179"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:36:20.394" endtime="20250721 07:36:24.179"/>
</test>
<test id="s1-s4-t4" name="Run snap diff on 'om3' and check diff keys" line="96">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:36:24.181" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:24.180" endtime="20250721 07:36:24.181"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:36:24.181" endtime="20250721 07:36:24.181"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:24.181" endtime="20250721 07:36:24.181"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:24.181" endtime="20250721 07:36:24.181"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:36:24.181" endtime="20250721 07:36:24.181"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:36:24.181" endtime="20250721 07:36:24.181"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.180" endtime="20250721 07:36:24.181"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:36:24.181" endtime="20250721 07:36:24.182"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:24.185" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:24.189" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:24.189" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:36:24.183" endtime="20250721 07:36:24.189"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:24.190" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:36:24.189" endtime="20250721 07:36:24.190"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:24.190" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:24.190" endtime="20250721 07:36:24.190"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.183" endtime="20250721 07:36:24.190"/>
</kw>
<msg timestamp="20250721 07:36:24.191" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:24.182" endtime="20250721 07:36:24.191"/>
</kw>
<msg timestamp="20250721 07:36:24.191" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:36:24.182" endtime="20250721 07:36:24.191"/>
</kw>
<msg timestamp="20250721 07:36:24.191" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:24.182" endtime="20250721 07:36:24.191"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:36:24.191" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:24.191" endtime="20250721 07:36:24.191"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:24.195" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:24.250" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:24.250" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:36:24.193" endtime="20250721 07:36:24.250"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:24.251" level="INFO"/>
<status status="PASS" starttime="20250721 07:36:24.251" endtime="20250721 07:36:24.251"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:24.252" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:24.252" endtime="20250721 07:36:24.252"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.192" endtime="20250721 07:36:24.252"/>
</kw>
<msg timestamp="20250721 07:36:24.252" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:24.192" endtime="20250721 07:36:24.252"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.192" endtime="20250721 07:36:24.252"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.192" endtime="20250721 07:36:24.252"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.180" endtime="20250721 07:36:24.252"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.180" endtime="20250721 07:36:24.253"/>
</kw>
<kw name="Run snap diff and validate results">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_1}</arg>
<arg>${SNAP_2}</arg>
<arg>${KEY_1}</arg>
<arg>${KEY_2}</arg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>3sec</arg>
<arg>Snap diff finished</arg>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Snap diff finished">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Run snap diff and get response">
<var>${diff_res}</var>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Execute" library="os">
<var>${diff_res}</var>
<arg>ozone sh snapshot diff /${volume}/${bucket} ${snap_1} ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:24.258" level="INFO">Running command 'ozone sh snapshot diff /vol1/bucket1 snap1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:27.704" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:27.704" level="INFO">${output} = Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20250721 07:36:24.256" endtime="20250721 07:36:27.704"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:27.705" level="INFO">Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20250721 07:36:27.704" endtime="20250721 07:36:27.705"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:27.706" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:27.706" endtime="20250721 07:36:27.706"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.255" endtime="20250721 07:36:27.706"/>
</kw>
<msg timestamp="20250721 07:36:27.706" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:24.255" endtime="20250721 07:36:27.706"/>
</kw>
<msg timestamp="20250721 07:36:27.707" level="INFO">${diff_res} = Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20250721 07:36:24.255" endtime="20250721 07:36:27.707"/>
</kw>
<msg timestamp="20250721 07:36:27.707" level="INFO">${diff_res} = Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
</msg>
<status status="PASS" starttime="20250721 07:36:24.254" endtime="20250721 07:36:27.707"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${diff_res}</arg>
<arg>Difference between snapshot: ${snap_1} and snapshot: ${snap_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<msg timestamp="20250721 07:36:27.708" level="FAIL">'Snapshot diff job is IN_PROGRESS. Please retry after 60000 ms.
' does not contain 'Difference between snapshot: snap1 and snapshot: snap2'</msg>
<status status="FAIL" starttime="20250721 07:36:27.707" endtime="20250721 07:36:27.708"/>
</kw>
<status status="FAIL" starttime="20250721 07:36:24.254" endtime="20250721 07:36:27.708"/>
</kw>
<kw name="Snap diff finished">
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Run snap diff and get response">
<var>${diff_res}</var>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Execute" library="os">
<var>${diff_res}</var>
<arg>ozone sh snapshot diff /${volume}/${bucket} ${snap_1} ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:30.713" level="INFO">Running command 'ozone sh snapshot diff /vol1/bucket1 snap1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:34.024" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:34.024" level="INFO">${output} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:30.711" endtime="20250721 07:36:34.024"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:34.025" level="INFO">Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:34.025" endtime="20250721 07:36:34.025"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:34.026" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:34.025" endtime="20250721 07:36:34.026"/>
</kw>
<status status="PASS" starttime="20250721 07:36:30.710" endtime="20250721 07:36:34.026"/>
</kw>
<msg timestamp="20250721 07:36:34.026" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:30.710" endtime="20250721 07:36:34.026"/>
</kw>
<msg timestamp="20250721 07:36:34.026" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:30.710" endtime="20250721 07:36:34.026"/>
</kw>
<msg timestamp="20250721 07:36:34.026" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:30.709" endtime="20250721 07:36:34.027"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${diff_res}</arg>
<arg>Difference between snapshot: ${snap_1} and snapshot: ${snap_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:34.027" endtime="20250721 07:36:34.027"/>
</kw>
<status status="PASS" starttime="20250721 07:36:30.708" endtime="20250721 07:36:34.027"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.253" endtime="20250721 07:36:34.027"/>
</kw>
<kw name="Run snap diff and get response">
<var>${diff_res}</var>
<arg>${volume}</arg>
<arg>${bucket}</arg>
<arg>${snap_1}</arg>
<arg>${snap_2}</arg>
<kw name="Execute" library="os">
<var>${diff_res}</var>
<arg>ozone sh snapshot diff /${volume}/${bucket} ${snap_1} ${snap_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:34.031" level="INFO">Running command 'ozone sh snapshot diff /vol1/bucket1 snap1 snap2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:37.343" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:37.343" level="INFO">${output} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:34.029" endtime="20250721 07:36:37.343"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:37.344" level="INFO">Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:37.344" endtime="20250721 07:36:37.344"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:37.345" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:37.344" endtime="20250721 07:36:37.345"/>
</kw>
<status status="PASS" starttime="20250721 07:36:34.028" endtime="20250721 07:36:37.345"/>
</kw>
<msg timestamp="20250721 07:36:37.345" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:34.028" endtime="20250721 07:36:37.345"/>
</kw>
<msg timestamp="20250721 07:36:37.345" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:34.028" endtime="20250721 07:36:37.345"/>
</kw>
<msg timestamp="20250721 07:36:37.345" level="INFO">${diff_res} = Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
</msg>
<status status="PASS" starttime="20250721 07:36:34.027" endtime="20250721 07:36:37.345"/>
</kw>
<kw name="Execute" library="os">
<var>${key_num}</var>
<arg>echo "${diff_res}" | grep 'key' | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:37.349" level="INFO">Running command 'echo "Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
" | grep 'key' | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:37.353" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:37.353" level="INFO">${output} = 2</msg>
<status status="PASS" starttime="20250721 07:36:37.346" endtime="20250721 07:36:37.353"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:37.354" level="INFO">2</msg>
<status status="PASS" starttime="20250721 07:36:37.353" endtime="20250721 07:36:37.354"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:37.354" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:37.354" endtime="20250721 07:36:37.354"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.346" endtime="20250721 07:36:37.354"/>
</kw>
<msg timestamp="20250721 07:36:37.354" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.346" endtime="20250721 07:36:37.354"/>
</kw>
<msg timestamp="20250721 07:36:37.354" level="INFO">${key_num} = 2</msg>
<status status="PASS" starttime="20250721 07:36:37.345" endtime="20250721 07:36:37.355"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${key_num} == 2</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250721 07:36:37.355" endtime="20250721 07:36:37.355"/>
</kw>
<kw name="Execute" library="os">
<var>${diff_key1}</var>
<arg>echo "${diff_res}" | grep ${key_1} | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:37.358" level="INFO">Running command 'echo "Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
" | grep key1 | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:37.362" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:37.362" level="INFO">${output} = 1</msg>
<status status="PASS" starttime="20250721 07:36:37.356" endtime="20250721 07:36:37.362"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:37.363" level="INFO">1</msg>
<status status="PASS" starttime="20250721 07:36:37.362" endtime="20250721 07:36:37.363"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:37.363" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:37.363" endtime="20250721 07:36:37.363"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.356" endtime="20250721 07:36:37.363"/>
</kw>
<msg timestamp="20250721 07:36:37.364" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.356" endtime="20250721 07:36:37.364"/>
</kw>
<msg timestamp="20250721 07:36:37.364" level="INFO">${diff_key1} = 1</msg>
<status status="PASS" starttime="20250721 07:36:37.355" endtime="20250721 07:36:37.364"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${diff_key1} == 1</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250721 07:36:37.364" endtime="20250721 07:36:37.364"/>
</kw>
<kw name="Execute" library="os">
<var>${diff_key2}</var>
<arg>echo "${diff_res}" | grep ${key_2} | wc -l</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:37.368" level="INFO">Running command 'echo "Difference between snapshot: snap1 and snapshot: snap2
+	./sn
+	./sn/key1
+	./sn/key2
" | grep key2 | wc -l 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:37.372" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:37.372" level="INFO">${output} = 1</msg>
<status status="PASS" starttime="20250721 07:36:37.365" endtime="20250721 07:36:37.372"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:37.373" level="INFO">1</msg>
<status status="PASS" starttime="20250721 07:36:37.372" endtime="20250721 07:36:37.373"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:37.373" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:37.373" endtime="20250721 07:36:37.373"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.365" endtime="20250721 07:36:37.373"/>
</kw>
<msg timestamp="20250721 07:36:37.373" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.365" endtime="20250721 07:36:37.373"/>
</kw>
<msg timestamp="20250721 07:36:37.373" level="INFO">${diff_key2} = 1</msg>
<status status="PASS" starttime="20250721 07:36:37.364" endtime="20250721 07:36:37.373"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${diff_key2} == 1</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20250721 07:36:37.374" endtime="20250721 07:36:37.374"/>
</kw>
<status status="PASS" starttime="20250721 07:36:24.253" endtime="20250721 07:36:37.374"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:36:24.179" endtime="20250721 07:36:37.374"/>
</test>
<test id="s1-s4-t5" name="Cat snapshot keys and validate contents" line="99">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Get Security Enabled From Config" library="commonlib">
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' != ''</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20250721 07:36:37.376" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.376" endtime="20250721 07:36:37.376"/>
</kw>
<kw name="Execute" library="os">
<var>${value}</var>
<arg>ozone getconf confKey ozone.security.enabled</arg>
<status status="NOT RUN" starttime="20250721 07:36:37.376" endtime="20250721 07:36:37.377"/>
</kw>
<if>
<branch type="IF" condition="'${value}' != 'true' and '${value}' != 'false'">
<kw name="Set Variable" library="BuiltIn">
<var>${value}</var>
<arg>false</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20250721 07:36:37.377" endtime="20250721 07:36:37.377"/>
</kw>
<status status="NOT RUN" starttime="20250721 07:36:37.377" endtime="20250721 07:36:37.377"/>
</branch>
<status status="NOT RUN" starttime="20250721 07:36:37.377" endtime="20250721 07:36:37.377"/>
</if>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${SECURITY_ENABLED}</arg>
<arg>${value}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20250721 07:36:37.377" endtime="20250721 07:36:37.377"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.376" endtime="20250721 07:36:37.377"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250721 07:36:37.377" endtime="20250721 07:36:37.377"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:37.381" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:37.384" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:37.385" level="INFO">${output} = om</msg>
<status status="PASS" starttime="20250721 07:36:37.378" endtime="20250721 07:36:37.385"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:37.385" level="INFO">om</msg>
<status status="PASS" starttime="20250721 07:36:37.385" endtime="20250721 07:36:37.385"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:37.386" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:37.385" endtime="20250721 07:36:37.386"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.378" endtime="20250721 07:36:37.386"/>
</kw>
<msg timestamp="20250721 07:36:37.386" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.378" endtime="20250721 07:36:37.386"/>
</kw>
<msg timestamp="20250721 07:36:37.386" level="INFO">${instance} = om</msg>
<status status="PASS" starttime="20250721 07:36:37.378" endtime="20250721 07:36:37.386"/>
</kw>
<msg timestamp="20250721 07:36:37.386" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:37.378" endtime="20250721 07:36:37.386"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250721 07:36:37.387" level="INFO">${TEST_USER} = testuser/om@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250721 07:36:37.386" endtime="20250721 07:36:37.387"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:37.390" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/om@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:37.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:37.406" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250721 07:36:37.388" endtime="20250721 07:36:37.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:37.407" level="INFO"/>
<status status="PASS" starttime="20250721 07:36:37.407" endtime="20250721 07:36:37.407"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:37.408" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:37.407" endtime="20250721 07:36:37.408"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.388" endtime="20250721 07:36:37.408"/>
</kw>
<msg timestamp="20250721 07:36:37.408" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.388" endtime="20250721 07:36:37.408"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.387" endtime="20250721 07:36:37.408"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.387" endtime="20250721 07:36:37.408"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.375" endtime="20250721 07:36:37.408"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.375" endtime="20250721 07:36:37.408"/>
</kw>
<kw name="Validate keys under snapshot">
<arg>${VOLUME}</arg>
<arg>${BUCKET}</arg>
<arg>${SNAP_2}</arg>
<arg>${KEY_PREFIX}</arg>
<arg>${KEY_1}</arg>
<arg>${KEY_2}</arg>
<kw name="Execute" library="os">
<var>${key1_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/.snapshot/${snap}/${key_prefix}/${key_1}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:37.412" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/.snapshot/snap2/sn/key1 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:42.765" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:42.765" level="INFO">${output} = sn/key1</msg>
<status status="PASS" starttime="20250721 07:36:37.410" endtime="20250721 07:36:42.765"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:42.766" level="INFO">sn/key1</msg>
<status status="PASS" starttime="20250721 07:36:42.765" endtime="20250721 07:36:42.766"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:42.766" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:42.766" endtime="20250721 07:36:42.766"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.410" endtime="20250721 07:36:42.766"/>
</kw>
<msg timestamp="20250721 07:36:42.766" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:37.409" endtime="20250721 07:36:42.767"/>
</kw>
<msg timestamp="20250721 07:36:42.767" level="INFO">${key1_res} = sn/key1</msg>
<status status="PASS" starttime="20250721 07:36:37.409" endtime="20250721 07:36:42.767"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key1_res}</arg>
<arg>${key_prefix}/${key_1}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:42.767" endtime="20250721 07:36:42.767"/>
</kw>
<kw name="Execute" library="os">
<var>${key2_res}</var>
<arg>ozone sh key cat /${volume}/${bucket}/.snapshot/${snap}/${key_prefix}/${key_2}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250721 07:36:42.772" level="INFO">Running command 'ozone sh key cat /vol1/bucket1/.snapshot/snap2/sn/key2 2&gt;&amp;1'.</msg>
<msg timestamp="20250721 07:36:48.027" level="INFO">${rc} = 0</msg>
<msg timestamp="20250721 07:36:48.027" level="INFO">${output} = sn/key2</msg>
<status status="PASS" starttime="20250721 07:36:42.769" endtime="20250721 07:36:48.027"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250721 07:36:48.028" level="INFO">sn/key2</msg>
<status status="PASS" starttime="20250721 07:36:48.027" endtime="20250721 07:36:48.028"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250721 07:36:48.028" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250721 07:36:48.028" endtime="20250721 07:36:48.029"/>
</kw>
<status status="PASS" starttime="20250721 07:36:42.768" endtime="20250721 07:36:48.029"/>
</kw>
<msg timestamp="20250721 07:36:48.029" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250721 07:36:42.768" endtime="20250721 07:36:48.029"/>
</kw>
<msg timestamp="20250721 07:36:48.029" level="INFO">${key2_res} = sn/key2</msg>
<status status="PASS" starttime="20250721 07:36:42.767" endtime="20250721 07:36:48.029"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${key2_res}</arg>
<arg>${key_prefix}/${key_2}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250721 07:36:48.029" endtime="20250721 07:36:48.029"/>
</kw>
<status status="PASS" starttime="20250721 07:36:37.408" endtime="20250721 07:36:48.029"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250721 07:36:37.375" endtime="20250721 07:36:48.030"/>
</test>
<doc>Smoke test for validating snapshot data after om bootstrap.</doc>
<status status="PASS" starttime="20250721 07:36:01.066" endtime="20250721 07:36:48.031"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="94417"/>
</suite>
<statistics>
<total>
<stat pass="12" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="12" fail="0" skip="0" id="s1" name="ozonesecure-ha-om-bootstrap">ozonesecure-ha-om-bootstrap</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-om-bootstrap.Kinit</stat>
<stat pass="5" fail="0" skip="0" id="s1-s2" name="Data-Creation-Before-Om-Bootstrap">ozonesecure-ha-om-bootstrap.Data-Creation-Before-Om-Bootstrap</stat>
<stat pass="1" fail="0" skip="0" id="s1-s3" name="Kinit">ozonesecure-ha-om-bootstrap.Kinit</stat>
<stat pass="5" fail="0" skip="0" id="s1-s4" name="Data-Validation-After-Om-Bootstrap">ozonesecure-ha-om-bootstrap.Data-Validation-After-Om-Bootstrap</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
