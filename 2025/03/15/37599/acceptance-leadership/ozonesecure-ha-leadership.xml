<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250315 14:03:26.858" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-leadership">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 13:59:50.183" endtime="20250315 13:59:50.184"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:50.187" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:50.191" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:50.191" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 13:59:50.185" endtime="20250315 13:59:50.191"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:50.192" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 13:59:50.191" endtime="20250315 13:59:50.192"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:50.192" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:50.192" endtime="20250315 13:59:50.192"/>
</kw>
<status status="PASS" starttime="20250315 13:59:50.184" endtime="20250315 13:59:50.193"/>
</kw>
<msg timestamp="20250315 13:59:50.193" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:50.184" endtime="20250315 13:59:50.193"/>
</kw>
<msg timestamp="20250315 13:59:50.193" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 13:59:50.184" endtime="20250315 13:59:50.193"/>
</kw>
<msg timestamp="20250315 13:59:50.193" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 13:59:50.184" endtime="20250315 13:59:50.193"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 13:59:50.193" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 13:59:50.193" endtime="20250315 13:59:50.194"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:50.197" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:50.246" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:50.246" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 13:59:50.195" endtime="20250315 13:59:50.246"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:50.247" level="INFO"/>
<status status="PASS" starttime="20250315 13:59:50.246" endtime="20250315 13:59:50.247"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:50.247" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:50.247" endtime="20250315 13:59:50.247"/>
</kw>
<status status="PASS" starttime="20250315 13:59:50.195" endtime="20250315 13:59:50.248"/>
</kw>
<msg timestamp="20250315 13:59:50.248" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:50.194" endtime="20250315 13:59:50.248"/>
</kw>
<status status="PASS" starttime="20250315 13:59:50.194" endtime="20250315 13:59:50.248"/>
</kw>
<status status="PASS" starttime="20250315 13:59:50.194" endtime="20250315 13:59:50.248"/>
</kw>
<status status="PASS" starttime="20250315 13:59:50.183" endtime="20250315 13:59:50.248"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20250315 13:59:50.183" endtime="20250315 13:59:50.248"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20250315 13:59:50.148" endtime="20250315 13:59:50.249"/>
</suite>
<suite id="s1-s2" name="Scmrole" source="/opt/hadoop/smoketest/admincli/scmrole.robot">
<test id="s1-s2-t1" name="Run scm roles" line="26">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:50.887" level="INFO">Running command 'ozone admin scm roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:53.091" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:53.091" level="INFO">${output} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 13:59:50.885" endtime="20250315 13:59:53.091"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:53.092" level="INFO">scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 13:59:53.091" endtime="20250315 13:59:53.092"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:53.092" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:53.092" endtime="20250315 13:59:53.092"/>
</kw>
<status status="PASS" starttime="20250315 13:59:50.884" endtime="20250315 13:59:53.093"/>
</kw>
<msg timestamp="20250315 13:59:53.093" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:50.884" endtime="20250315 13:59:53.093"/>
</kw>
<msg timestamp="20250315 13:59:53.093" level="INFO">${output} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 13:59:50.884" endtime="20250315 13:59:53.093"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[scm:9894(:LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 13:59:53.093" endtime="20250315 13:59:53.093"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 13:59:50.883" endtime="20250315 13:59:53.094"/>
</test>
<test id="s1-s2-t2" name="List scm roles as JSON" line="30">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:53.098" level="INFO">Running command 'ozone admin scm roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:55.507" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:55.507" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce601c58-2de0-43df-837b-7d52152d3017",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250315 13:59:53.095" endtime="20250315 13:59:55.507"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:55.508" level="INFO">{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce601c58-2de0-43df-837b-7d52152d3017",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "a3ae3c47-5df1-421b-beb8-7cdd60b3f208",
    "InetAddress" : "172.25.0.117"
  }
}</msg>
<status status="PASS" starttime="20250315 13:59:55.508" endtime="20250315 13:59:55.508"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:55.509" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:55.508" endtime="20250315 13:59:55.509"/>
</kw>
<status status="PASS" starttime="20250315 13:59:53.095" endtime="20250315 13:59:55.509"/>
</kw>
<msg timestamp="20250315 13:59:55.509" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:53.095" endtime="20250315 13:59:55.509"/>
</kw>
<msg timestamp="20250315 13:59:55.509" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce601c58-2de0-43df-837b-7d52152d3017",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250315 13:59:53.095" endtime="20250315 13:59:55.509"/>
</kw>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq -r '.[] | select(.raftPeerRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:55.513" level="INFO">Running command 'echo '{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce601c58-2de0-43df-837b-7d52152d3017",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "a3ae3c47-5df1-421b-beb8-7cdd60b3f208",
    "InetAddress" : "172.25.0.117"
  }
}' | jq -r '.[] | select(.raftPeerRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:55.519" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:55.519" level="INFO">${output} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "ce601c58-2de0-43df-837b-7d52152d3017",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250315 13:59:55.511" endtime="20250315 13:59:55.519"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:55.520" level="INFO">{
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "ce601c58-2de0-43df-837b-7d52152d3017",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250315 13:59:55.520" endtime="20250315 13:59:55.520"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:55.521" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:55.520" endtime="20250315 13:59:55.521"/>
</kw>
<status status="PASS" starttime="20250315 13:59:55.510" endtime="20250315 13:59:55.521"/>
</kw>
<msg timestamp="20250315 13:59:55.521" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:55.510" endtime="20250315 13:59:55.521"/>
</kw>
<msg timestamp="20250315 13:59:55.521" level="INFO">${leader} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "ce601c58-2de0-43df-837b-7d52152d3017",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250315 13:59:55.510" endtime="20250315 13:59:55.521"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 13:59:55.521" endtime="20250315 13:59:55.522"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 13:59:53.094" endtime="20250315 13:59:55.522"/>
</test>
<test id="s1-s2-t3" name="List scm roles as TABLE" line="35">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:55.527" level="INFO">Running command 'ozone admin scm roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:57.874" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:57.874" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250315 13:59:55.524" endtime="20250315 13:59:57.874"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:57.875" level="INFO">+-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+------------+----------+--------------------------------------+--------------+
| Host Name | Ratis Port |   Role   |               Node ID                | Host Address |
+-----------+------------+----------+--------------------------------------+--------------+
| scm2.org  |    9894    | FOLLOWER | a3ae3c47-5df1-421b-beb8-7cdd60b3f208 | 172.25.0.117 |
| scm1.org  |    9894    |  LEADER  | ce601c58-2de0-43df-837b-7d52152d3017 | 172.25.0.116 |
| scm3.org  |    9894    | FOLLOWER | 4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0 | 172.25.0.118 |
+-----------+------------+----------+--------------------------------------+--------------+
</msg>
<status status="PASS" starttime="20250315 13:59:57.874" endtime="20250315 13:59:57.875"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:57.875" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:57.875" endtime="20250315 13:59:57.875"/>
</kw>
<status status="PASS" starttime="20250315 13:59:55.524" endtime="20250315 13:59:57.876"/>
</kw>
<msg timestamp="20250315 13:59:57.876" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:55.524" endtime="20250315 13:59:57.876"/>
</kw>
<msg timestamp="20250315 13:59:57.876" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250315 13:59:55.523" endtime="20250315 13:59:57.876"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 13:59:57.876" endtime="20250315 13:59:57.876"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 13:59:55.523" endtime="20250315 13:59:57.877"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250315 13:59:50.848" endtime="20250315 13:59:57.877"/>
</suite>
<suite id="s1-s3" name="Om-Fetch-Key" source="/opt/hadoop/smoketest/omha/om-fetch-key.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 13:59:58.541" endtime="20250315 13:59:58.541"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:58.546" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:58.551" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:58.551" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 13:59:58.542" endtime="20250315 13:59:58.551"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:58.551" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 13:59:58.551" endtime="20250315 13:59:58.551"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:58.552" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:58.552" endtime="20250315 13:59:58.552"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.542" endtime="20250315 13:59:58.552"/>
</kw>
<msg timestamp="20250315 13:59:58.552" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:58.542" endtime="20250315 13:59:58.552"/>
</kw>
<msg timestamp="20250315 13:59:58.552" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 13:59:58.541" endtime="20250315 13:59:58.552"/>
</kw>
<msg timestamp="20250315 13:59:58.552" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 13:59:58.541" endtime="20250315 13:59:58.552"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 13:59:58.553" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 13:59:58.553" endtime="20250315 13:59:58.553"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:58.556" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 13:59:58.611" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 13:59:58.611" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 13:59:58.554" endtime="20250315 13:59:58.611"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 13:59:58.613" level="INFO"/>
<status status="PASS" starttime="20250315 13:59:58.612" endtime="20250315 13:59:58.613"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 13:59:58.614" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 13:59:58.613" endtime="20250315 13:59:58.615"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.554" endtime="20250315 13:59:58.615"/>
</kw>
<msg timestamp="20250315 13:59:58.616" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:58.554" endtime="20250315 13:59:58.616"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.553" endtime="20250315 13:59:58.616"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.553" endtime="20250315 13:59:58.616"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.540" endtime="20250315 13:59:58.616"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.540" endtime="20250315 13:59:58.616"/>
</kw>
<test id="s1-s3-t1" name="Fetch Key with Valid ServiceID Specified" line="31">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 13:59:58.621" level="INFO">Running command 'ozone admin om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:01.514" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:01.514" level="INFO">${output} = Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 13:59:58.618" endtime="20250315 14:00:01.514"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:01.515" level="INFO">Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:01.515" endtime="20250315 14:00:01.515"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:01.516" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:01.516" endtime="20250315 14:00:01.516"/>
</kw>
<status status="PASS" starttime="20250315 13:59:58.618" endtime="20250315 14:00:01.516"/>
</kw>
<msg timestamp="20250315 14:00:01.516" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 13:59:58.618" endtime="20250315 14:00:01.516"/>
</kw>
<msg timestamp="20250315 14:00:01.516" level="INFO">${result} = Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 13:59:58.617" endtime="20250315 14:00:01.516"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:01.517" endtime="20250315 14:00:01.517"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 13:59:58.616" endtime="20250315 14:00:01.517"/>
</test>
<test id="s1-s3-t2" name="Fetch Key with Multiple ServiceIDs, Valid ServiceID Specified" line="35">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:01.521" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:04.325" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:04.325" level="INFO">${output} = Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:01.519" endtime="20250315 14:00:04.325"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:04.326" level="INFO">Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:04.326" endtime="20250315 14:00:04.326"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:04.327" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:04.326" endtime="20250315 14:00:04.327"/>
</kw>
<status status="PASS" starttime="20250315 14:00:01.518" endtime="20250315 14:00:04.327"/>
</kw>
<msg timestamp="20250315 14:00:04.327" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:01.518" endtime="20250315 14:00:04.327"/>
</kw>
<msg timestamp="20250315 14:00:04.327" level="INFO">${result} = Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:01.518" endtime="20250315 14:00:04.327"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:04.327" endtime="20250315 14:00:04.328"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:01.517" endtime="20250315 14:00:04.328"/>
</test>
<test id="s1-s3-t3" name="Fetch Key with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="39">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:04.331" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:06.080" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:00:06.080" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250315 14:00:04.329" endtime="20250315 14:00:06.080"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:06.081" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250315 14:00:06.081" endtime="20250315 14:00:06.081"/>
</kw>
<msg timestamp="20250315 14:00:06.081" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250315 14:00:04.329" endtime="20250315 14:00:06.081"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:06.081" endtime="20250315 14:00:06.082"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:04.328" endtime="20250315 14:00:06.082"/>
</test>
<test id="s1-s3-t4" name="Fetch Key with Multiple ServiceIDs, Invalid ServiceID Specified" line="43">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:06.086" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:08.023" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:00:08.023" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:00:06.083" endtime="20250315 14:00:08.023"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:08.024" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:00:08.023" endtime="20250315 14:00:08.024"/>
</kw>
<msg timestamp="20250315 14:00:08.024" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:00:06.083" endtime="20250315 14:00:08.024"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:08.024" endtime="20250315 14:00:08.025"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:06.082" endtime="20250315 14:00:08.025"/>
</test>
<test id="s1-s3-t5" name="Fetch Key without OM Service ID" line="47">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:08.030" level="INFO">Running command 'ozone admin om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:10.844" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:10.844" level="INFO">${output} = Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:08.027" endtime="20250315 14:00:10.844"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:10.845" level="INFO">Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:10.845" endtime="20250315 14:00:10.846"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:10.846" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:10.846" endtime="20250315 14:00:10.846"/>
</kw>
<status status="PASS" starttime="20250315 14:00:08.027" endtime="20250315 14:00:10.846"/>
</kw>
<msg timestamp="20250315 14:00:10.846" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:08.026" endtime="20250315 14:00:10.846"/>
</kw>
<msg timestamp="20250315 14:00:10.846" level="INFO">${result} = Current Secret Key ID: 07c6e274-0802-4cbe-b114-fa50d50bc9c2</msg>
<status status="PASS" starttime="20250315 14:00:08.026" endtime="20250315 14:00:10.846"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:10.847" endtime="20250315 14:00:10.847"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:08.026" endtime="20250315 14:00:10.847"/>
</test>
<test id="s1-s3-t6" name="Fetch Key with Multiple ServiceIDs, No ServiceID Specified" line="51">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:10.850" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:12.402" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:00:12.402" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:10.848" endtime="20250315 14:00:12.402"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:12.403" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:12.403" endtime="20250315 14:00:12.403"/>
</kw>
<msg timestamp="20250315 14:00:12.404" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:10.848" endtime="20250315 14:00:12.404"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:12.404" endtime="20250315 14:00:12.404"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:10.847" endtime="20250315 14:00:12.404"/>
</test>
<doc>Smoke test for om fetch-key</doc>
<status status="PASS" starttime="20250315 13:59:58.501" endtime="20250315 14:00:12.405"/>
</suite>
<suite id="s1-s4" name="Om-Roles" source="/opt/hadoop/smoketest/omha/om-roles.robot">
<test id="s1-s4-t1" name="List om roles with OM service ID passed" line="36">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 14:00:13.075" endtime="20250315 14:00:13.075"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:13.079" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:13.083" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:13.083" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:13.076" endtime="20250315 14:00:13.083"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:13.084" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 14:00:13.083" endtime="20250315 14:00:13.084"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:13.084" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:13.084" endtime="20250315 14:00:13.084"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.076" endtime="20250315 14:00:13.084"/>
</kw>
<msg timestamp="20250315 14:00:13.084" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:13.076" endtime="20250315 14:00:13.085"/>
</kw>
<msg timestamp="20250315 14:00:13.085" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:13.076" endtime="20250315 14:00:13.085"/>
</kw>
<msg timestamp="20250315 14:00:13.085" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:13.075" endtime="20250315 14:00:13.085"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 14:00:13.085" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:13.085" endtime="20250315 14:00:13.085"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:13.089" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:13.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:13.209" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 14:00:13.087" endtime="20250315 14:00:13.209"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:13.210" level="INFO"/>
<status status="PASS" starttime="20250315 14:00:13.209" endtime="20250315 14:00:13.210"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:13.210" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:13.210" endtime="20250315 14:00:13.210"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.086" endtime="20250315 14:00:13.211"/>
</kw>
<msg timestamp="20250315 14:00:13.211" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:13.086" endtime="20250315 14:00:13.211"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.086" endtime="20250315 14:00:13.211"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.085" endtime="20250315 14:00:13.211"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.075" endtime="20250315 14:00:13.211"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.074" endtime="20250315 14:00:13.211"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:13.214" level="INFO">Running command 'ozone admin om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:16.053" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:16.053" level="INFO">${output} = om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:13.212" endtime="20250315 14:00:16.053"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:16.054" level="INFO">om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:16.054" endtime="20250315 14:00:16.054"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:16.055" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:16.054" endtime="20250315 14:00:16.055"/>
</kw>
<status status="PASS" starttime="20250315 14:00:13.212" endtime="20250315 14:00:16.055"/>
</kw>
<msg timestamp="20250315 14:00:16.055" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:13.212" endtime="20250315 14:00:16.055"/>
</kw>
<msg timestamp="20250315 14:00:16.055" level="INFO">${output_with_id_passed} = om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:13.211" endtime="20250315 14:00:16.055"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 14:00:16.056" endtime="20250315 14:00:16.056"/>
</kw>
<status status="PASS" starttime="20250315 14:00:16.055" endtime="20250315 14:00:16.057"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:16.060" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:18.851" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:18.851" level="INFO">${output} = om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:16.058" endtime="20250315 14:00:18.852"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:18.852" level="INFO">om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:18.852" endtime="20250315 14:00:18.852"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:18.853" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:18.852" endtime="20250315 14:00:18.853"/>
</kw>
<status status="PASS" starttime="20250315 14:00:16.057" endtime="20250315 14:00:18.853"/>
</kw>
<msg timestamp="20250315 14:00:18.853" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:16.057" endtime="20250315 14:00:18.853"/>
</kw>
<msg timestamp="20250315 14:00:18.853" level="INFO">${output_with_id_passed} = om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:16.057" endtime="20250315 14:00:18.853"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 14:00:18.854" endtime="20250315 14:00:18.854"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.854" endtime="20250315 14:00:18.854"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:13.074" endtime="20250315 14:00:18.854"/>
</test>
<test id="s1-s4-t2" name="List om roles without OM service ID passed" line="42">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 14:00:18.856" endtime="20250315 14:00:18.856"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:18.860" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:18.864" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:18.864" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:18.857" endtime="20250315 14:00:18.864"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:18.864" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 14:00:18.864" endtime="20250315 14:00:18.864"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:18.865" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:18.864" endtime="20250315 14:00:18.865"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.857" endtime="20250315 14:00:18.865"/>
</kw>
<msg timestamp="20250315 14:00:18.865" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:18.857" endtime="20250315 14:00:18.865"/>
</kw>
<msg timestamp="20250315 14:00:18.865" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:18.857" endtime="20250315 14:00:18.865"/>
</kw>
<msg timestamp="20250315 14:00:18.865" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:18.856" endtime="20250315 14:00:18.865"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 14:00:18.866" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:18.866" endtime="20250315 14:00:18.866"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:18.869" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:18.919" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:18.919" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 14:00:18.867" endtime="20250315 14:00:18.919"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:18.920" level="INFO"/>
<status status="PASS" starttime="20250315 14:00:18.920" endtime="20250315 14:00:18.920"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:18.921" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:18.920" endtime="20250315 14:00:18.921"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.867" endtime="20250315 14:00:18.921"/>
</kw>
<msg timestamp="20250315 14:00:18.921" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:18.867" endtime="20250315 14:00:18.921"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.866" endtime="20250315 14:00:18.921"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.866" endtime="20250315 14:00:18.921"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.856" endtime="20250315 14:00:18.921"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.855" endtime="20250315 14:00:18.921"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:18.925" level="INFO">Running command 'ozone admin om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:21.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:21.705" level="INFO">${output} = om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:18.923" endtime="20250315 14:00:21.705"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:21.706" level="INFO">om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:21.705" endtime="20250315 14:00:21.706"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:21.706" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:21.706" endtime="20250315 14:00:21.706"/>
</kw>
<status status="PASS" starttime="20250315 14:00:18.922" endtime="20250315 14:00:21.706"/>
</kw>
<msg timestamp="20250315 14:00:21.706" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:18.922" endtime="20250315 14:00:21.707"/>
</kw>
<msg timestamp="20250315 14:00:21.707" level="INFO">${output_without_id_passed} = om3 : FOLLOWER (om3)
om2 : FOLLOWER (om2)
om1 : LEADER (om1)</msg>
<status status="PASS" starttime="20250315 14:00:18.921" endtime="20250315 14:00:21.707"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 14:00:21.707" endtime="20250315 14:00:21.707"/>
</kw>
<status status="PASS" starttime="20250315 14:00:21.707" endtime="20250315 14:00:21.708"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:21.710" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:23.387" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:00:23.387" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:21.708" endtime="20250315 14:00:23.387"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:23.388" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:23.388" endtime="20250315 14:00:23.389"/>
</kw>
<msg timestamp="20250315 14:00:23.389" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:21.708" endtime="20250315 14:00:23.389"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:23.389" endtime="20250315 14:00:23.389"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:18.855" endtime="20250315 14:00:23.389"/>
</test>
<test id="s1-s4-t3" name="List om roles as JSON with OM service ID passed" line="48">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 14:00:23.391" endtime="20250315 14:00:23.391"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:23.395" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:23.399" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:23.399" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:23.393" endtime="20250315 14:00:23.399"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:23.400" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 14:00:23.400" endtime="20250315 14:00:23.400"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:23.400" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:23.400" endtime="20250315 14:00:23.400"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.392" endtime="20250315 14:00:23.401"/>
</kw>
<msg timestamp="20250315 14:00:23.401" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:23.392" endtime="20250315 14:00:23.401"/>
</kw>
<msg timestamp="20250315 14:00:23.401" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:23.392" endtime="20250315 14:00:23.401"/>
</kw>
<msg timestamp="20250315 14:00:23.401" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:23.392" endtime="20250315 14:00:23.401"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 14:00:23.401" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:23.401" endtime="20250315 14:00:23.402"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:23.405" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:23.440" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:23.440" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 14:00:23.403" endtime="20250315 14:00:23.440"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:23.441" level="INFO"/>
<status status="PASS" starttime="20250315 14:00:23.440" endtime="20250315 14:00:23.441"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:23.441" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:23.441" endtime="20250315 14:00:23.441"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.402" endtime="20250315 14:00:23.442"/>
</kw>
<msg timestamp="20250315 14:00:23.442" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:23.402" endtime="20250315 14:00:23.442"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.402" endtime="20250315 14:00:23.442"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.402" endtime="20250315 14:00:23.442"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.391" endtime="20250315 14:00:23.442"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.390" endtime="20250315 14:00:23.442"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:23.445" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:26.687" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:26.687" level="INFO">${output} = [ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250315 14:00:23.443" endtime="20250315 14:00:26.687"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:26.688" level="INFO">[ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "hostname" : "om1"
  }
} ]</msg>
<status status="PASS" starttime="20250315 14:00:26.688" endtime="20250315 14:00:26.688"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:26.689" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:26.688" endtime="20250315 14:00:26.689"/>
</kw>
<status status="PASS" starttime="20250315 14:00:23.443" endtime="20250315 14:00:26.689"/>
</kw>
<msg timestamp="20250315 14:00:26.689" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:23.442" endtime="20250315 14:00:26.689"/>
</kw>
<msg timestamp="20250315 14:00:26.689" level="INFO">${output_with_id_passed} = [ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250315 14:00:23.442" endtime="20250315 14:00:26.689"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:26.693" level="INFO">Running command 'echo '[ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "hostname" : "om1"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:26.699" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:26.699" level="INFO">${output} = {
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:26.691" endtime="20250315 14:00:26.699"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:26.699" level="INFO">{
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:26.699" endtime="20250315 14:00:26.700"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:26.700" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:26.700" endtime="20250315 14:00:26.700"/>
</kw>
<status status="PASS" starttime="20250315 14:00:26.690" endtime="20250315 14:00:26.700"/>
</kw>
<msg timestamp="20250315 14:00:26.700" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:26.690" endtime="20250315 14:00:26.700"/>
</kw>
<msg timestamp="20250315 14:00:26.700" level="INFO">${leader} = {
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:26.690" endtime="20250315 14:00:26.700"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:00:26.701" endtime="20250315 14:00:26.701"/>
</kw>
<status status="PASS" starttime="20250315 14:00:26.689" endtime="20250315 14:00:26.701"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:26.704" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:29.581" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:29.581" level="INFO">${output} = [ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250315 14:00:26.702" endtime="20250315 14:00:29.581"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:29.582" level="INFO">[ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "hostname" : "om1"
  }
} ]</msg>
<status status="PASS" starttime="20250315 14:00:29.581" endtime="20250315 14:00:29.582"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:29.582" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:29.582" endtime="20250315 14:00:29.582"/>
</kw>
<status status="PASS" starttime="20250315 14:00:26.702" endtime="20250315 14:00:29.583"/>
</kw>
<msg timestamp="20250315 14:00:29.583" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:26.702" endtime="20250315 14:00:29.583"/>
</kw>
<msg timestamp="20250315 14:00:29.583" level="INFO">${output_with_id_passed} = [ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250315 14:00:26.701" endtime="20250315 14:00:29.583"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:29.587" level="INFO">Running command 'echo '[ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "hostname" : "om1"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:29.592" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:29.592" level="INFO">${output} = {
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:29.584" endtime="20250315 14:00:29.592"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:29.593" level="INFO">{
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:29.592" endtime="20250315 14:00:29.593"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:29.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:29.593" endtime="20250315 14:00:29.593"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.584" endtime="20250315 14:00:29.594"/>
</kw>
<msg timestamp="20250315 14:00:29.594" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:29.584" endtime="20250315 14:00:29.594"/>
</kw>
<msg timestamp="20250315 14:00:29.594" level="INFO">${leader} = {
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:29.583" endtime="20250315 14:00:29.594"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:00:29.594" endtime="20250315 14:00:29.595"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.583" endtime="20250315 14:00:29.595"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:23.390" endtime="20250315 14:00:29.595"/>
</test>
<test id="s1-s4-t4" name="List om roles as JSON without OM service ID passed" line="54">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 14:00:29.596" endtime="20250315 14:00:29.597"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:29.600" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:29.603" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:29.603" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:29.598" endtime="20250315 14:00:29.603"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:29.604" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 14:00:29.604" endtime="20250315 14:00:29.604"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:29.605" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:29.604" endtime="20250315 14:00:29.605"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.597" endtime="20250315 14:00:29.605"/>
</kw>
<msg timestamp="20250315 14:00:29.605" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:29.597" endtime="20250315 14:00:29.605"/>
</kw>
<msg timestamp="20250315 14:00:29.605" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:29.597" endtime="20250315 14:00:29.605"/>
</kw>
<msg timestamp="20250315 14:00:29.605" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:29.597" endtime="20250315 14:00:29.605"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 14:00:29.606" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:29.605" endtime="20250315 14:00:29.606"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:29.609" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:29.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:29.665" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 14:00:29.607" endtime="20250315 14:00:29.666"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:29.666" level="INFO"/>
<status status="PASS" starttime="20250315 14:00:29.666" endtime="20250315 14:00:29.666"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:29.667" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:29.667" endtime="20250315 14:00:29.667"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.607" endtime="20250315 14:00:29.667"/>
</kw>
<msg timestamp="20250315 14:00:29.667" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:29.606" endtime="20250315 14:00:29.667"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.606" endtime="20250315 14:00:29.667"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.606" endtime="20250315 14:00:29.667"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.596" endtime="20250315 14:00:29.667"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.596" endtime="20250315 14:00:29.667"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:29.671" level="INFO">Running command 'ozone admin om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:32.530" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:32.531" level="INFO">${output} = [ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250315 14:00:29.668" endtime="20250315 14:00:32.531"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:32.531" level="INFO">[ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "hostname" : "om1"
  }
} ]</msg>
<status status="PASS" starttime="20250315 14:00:32.531" endtime="20250315 14:00:32.531"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:32.532" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:32.532" endtime="20250315 14:00:32.532"/>
</kw>
<status status="PASS" starttime="20250315 14:00:29.668" endtime="20250315 14:00:32.532"/>
</kw>
<msg timestamp="20250315 14:00:32.532" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:29.668" endtime="20250315 14:00:32.532"/>
</kw>
<msg timestamp="20250315 14:00:32.532" level="INFO">${output_without_id_passed} = [ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250315 14:00:29.668" endtime="20250315 14:00:32.532"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_without_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:32.536" level="INFO">Running command 'echo '[ {
  "om3" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om3"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om1" : {
    "serverRole" : "LEADER",
    "hostname" : "om1"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:32.541" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:32.542" level="INFO">${output} = {
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:32.534" endtime="20250315 14:00:32.542"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:32.542" level="INFO">{
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:32.542" endtime="20250315 14:00:32.542"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:32.543" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:32.542" endtime="20250315 14:00:32.543"/>
</kw>
<status status="PASS" starttime="20250315 14:00:32.534" endtime="20250315 14:00:32.543"/>
</kw>
<msg timestamp="20250315 14:00:32.543" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:32.533" endtime="20250315 14:00:32.543"/>
</kw>
<msg timestamp="20250315 14:00:32.543" level="INFO">${leader} = {
  "om1": {
    "serverRole": "LEADER",
    "hostname": "om1"
  }
}</msg>
<status status="PASS" starttime="20250315 14:00:32.533" endtime="20250315 14:00:32.543"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:00:32.543" endtime="20250315 14:00:32.544"/>
</kw>
<status status="PASS" starttime="20250315 14:00:32.533" endtime="20250315 14:00:32.544"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:32.546" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:34.192" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:00:34.192" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:32.544" endtime="20250315 14:00:34.192"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:34.193" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:34.193" endtime="20250315 14:00:34.193"/>
</kw>
<msg timestamp="20250315 14:00:34.194" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:32.544" endtime="20250315 14:00:34.194"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:34.194" endtime="20250315 14:00:34.194"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:29.595" endtime="20250315 14:00:34.195"/>
</test>
<test id="s1-s4-t5" name="List om roles as TABLE with OM service ID passed" line="60">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 14:00:34.196" endtime="20250315 14:00:34.196"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:34.200" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:34.204" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:34.204" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:34.197" endtime="20250315 14:00:34.204"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:34.204" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 14:00:34.204" endtime="20250315 14:00:34.204"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:34.205" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:34.205" endtime="20250315 14:00:34.205"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.197" endtime="20250315 14:00:34.205"/>
</kw>
<msg timestamp="20250315 14:00:34.205" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:34.197" endtime="20250315 14:00:34.205"/>
</kw>
<msg timestamp="20250315 14:00:34.205" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:34.197" endtime="20250315 14:00:34.205"/>
</kw>
<msg timestamp="20250315 14:00:34.206" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:34.196" endtime="20250315 14:00:34.206"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 14:00:34.206" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:34.206" endtime="20250315 14:00:34.206"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:34.209" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:34.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:34.261" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 14:00:34.207" endtime="20250315 14:00:34.261"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:34.262" level="INFO"/>
<status status="PASS" starttime="20250315 14:00:34.262" endtime="20250315 14:00:34.262"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:34.263" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:34.262" endtime="20250315 14:00:34.263"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.207" endtime="20250315 14:00:34.263"/>
</kw>
<msg timestamp="20250315 14:00:34.263" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:34.207" endtime="20250315 14:00:34.263"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.206" endtime="20250315 14:00:34.263"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.206" endtime="20250315 14:00:34.263"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.196" endtime="20250315 14:00:34.263"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.195" endtime="20250315 14:00:34.263"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:34.266" level="INFO">Running command 'ozone admin om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:37.260" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:37.260" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | F...</msg>
<status status="PASS" starttime="20250315 14:00:34.264" endtime="20250315 14:00:37.260"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:37.261" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om1    |   om1   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250315 14:00:37.261" endtime="20250315 14:00:37.261"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:37.262" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:37.261" endtime="20250315 14:00:37.262"/>
</kw>
<status status="PASS" starttime="20250315 14:00:34.264" endtime="20250315 14:00:37.262"/>
</kw>
<msg timestamp="20250315 14:00:37.262" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:34.264" endtime="20250315 14:00:37.262"/>
</kw>
<msg timestamp="20250315 14:00:37.262" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | F...</msg>
<status status="PASS" starttime="20250315 14:00:34.263" endtime="20250315 14:00:37.262"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 14:00:37.263" endtime="20250315 14:00:37.263"/>
</kw>
<status status="PASS" starttime="20250315 14:00:37.262" endtime="20250315 14:00:37.263"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:37.267" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:40.455" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:40.456" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | F...</msg>
<status status="PASS" starttime="20250315 14:00:37.264" endtime="20250315 14:00:40.456"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:40.457" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om1    |   om1   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250315 14:00:40.456" endtime="20250315 14:00:40.457"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:40.457" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:40.457" endtime="20250315 14:00:40.457"/>
</kw>
<status status="PASS" starttime="20250315 14:00:37.264" endtime="20250315 14:00:40.457"/>
</kw>
<msg timestamp="20250315 14:00:40.458" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:37.264" endtime="20250315 14:00:40.458"/>
</kw>
<msg timestamp="20250315 14:00:40.458" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | F...</msg>
<status status="PASS" starttime="20250315 14:00:37.263" endtime="20250315 14:00:40.458"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 14:00:40.458" endtime="20250315 14:00:40.459"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.458" endtime="20250315 14:00:40.459"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:34.195" endtime="20250315 14:00:40.459"/>
</test>
<test id="s1-s4-t6" name="List om roles as TABLE without OM service ID passed" line="66">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250315 14:00:40.460" endtime="20250315 14:00:40.461"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:40.464" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:40.468" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:40.469" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:40.462" endtime="20250315 14:00:40.469"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:40.469" level="INFO">s3g</msg>
<status status="PASS" starttime="20250315 14:00:40.469" endtime="20250315 14:00:40.469"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:40.470" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:40.469" endtime="20250315 14:00:40.470"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.462" endtime="20250315 14:00:40.470"/>
</kw>
<msg timestamp="20250315 14:00:40.470" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:40.461" endtime="20250315 14:00:40.470"/>
</kw>
<msg timestamp="20250315 14:00:40.470" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250315 14:00:40.461" endtime="20250315 14:00:40.470"/>
</kw>
<msg timestamp="20250315 14:00:40.470" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:40.461" endtime="20250315 14:00:40.471"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250315 14:00:40.471" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250315 14:00:40.471" endtime="20250315 14:00:40.471"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:40.474" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:40.490" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:40.490" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250315 14:00:40.472" endtime="20250315 14:00:40.490"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:40.491" level="INFO"/>
<status status="PASS" starttime="20250315 14:00:40.490" endtime="20250315 14:00:40.491"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:40.491" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:40.491" endtime="20250315 14:00:40.491"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.472" endtime="20250315 14:00:40.492"/>
</kw>
<msg timestamp="20250315 14:00:40.492" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:40.472" endtime="20250315 14:00:40.492"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.471" endtime="20250315 14:00:40.492"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.471" endtime="20250315 14:00:40.492"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.460" endtime="20250315 14:00:40.492"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.460" endtime="20250315 14:00:40.492"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:40.495" level="INFO">Running command 'ozone admin om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:43.347" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:43.347" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | F...</msg>
<status status="PASS" starttime="20250315 14:00:40.493" endtime="20250315 14:00:43.347"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:43.348" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om1    |   om1   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250315 14:00:43.348" endtime="20250315 14:00:43.348"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:43.349" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:43.349" endtime="20250315 14:00:43.349"/>
</kw>
<status status="PASS" starttime="20250315 14:00:40.493" endtime="20250315 14:00:43.349"/>
</kw>
<msg timestamp="20250315 14:00:43.349" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:40.492" endtime="20250315 14:00:43.349"/>
</kw>
<msg timestamp="20250315 14:00:43.349" level="INFO">${output_without_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om3    |   om3   | F...</msg>
<status status="PASS" starttime="20250315 14:00:40.492" endtime="20250315 14:00:43.349"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250315 14:00:43.350" endtime="20250315 14:00:43.350"/>
</kw>
<status status="PASS" starttime="20250315 14:00:43.349" endtime="20250315 14:00:43.350"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:43.353" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:45.004" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:00:45.004" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:43.351" endtime="20250315 14:00:45.004"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:45.005" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:45.005" endtime="20250315 14:00:45.005"/>
</kw>
<msg timestamp="20250315 14:00:45.005" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:00:43.350" endtime="20250315 14:00:45.005"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:45.006" endtime="20250315 14:00:45.006"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:40.459" endtime="20250315 14:00:45.006"/>
</test>
<doc>Smoke test for listing om roles.</doc>
<status status="PASS" starttime="20250315 14:00:13.038" endtime="20250315 14:00:45.007"/>
</suite>
<suite id="s1-s5" name="Om-Leader-Transfer" source="/opt/hadoop/smoketest/omha/om-leader-transfer.robot">
<test id="s1-s5-t1" name="Transfer Leadership for OM with Valid ServiceID Specified" line="52">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:45.671" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:49.102" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:49.102" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:00:45.669" endtime="20250315 14:00:49.103"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:49.103" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:00:49.103" endtime="20250315 14:00:49.104"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:49.104" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:49.104" endtime="20250315 14:00:49.104"/>
</kw>
<status status="PASS" starttime="20250315 14:00:45.668" endtime="20250315 14:00:49.104"/>
</kw>
<msg timestamp="20250315 14:00:49.104" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:45.668" endtime="20250315 14:00:49.104"/>
</kw>
<msg timestamp="20250315 14:00:49.105" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:00:45.668" endtime="20250315 14:00:49.105"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:00:49.105" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:00:49.105" endtime="20250315 14:00:49.105"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:00:49.105" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:00:49.105" endtime="20250315 14:00:49.105"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:00:49.106" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:00:49.105" endtime="20250315 14:00:49.106"/>
</kw>
<msg timestamp="20250315 14:00:49.106" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:00:45.668" endtime="20250315 14:00:49.106"/>
</kw>
<msg timestamp="20250315 14:00:49.106" level="INFO">${leaderOM} = om1</msg>
<msg timestamp="20250315 14:00:49.106" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250315 14:00:45.668" endtime="20250315 14:00:49.106"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:49.110" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:00:57.392" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:00:57.392" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250315 14:00:49.107" endtime="20250315 14:00:57.392"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:00:57.393" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250315 14:00:57.393" endtime="20250315 14:00:57.393"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:00:57.394" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:00:57.393" endtime="20250315 14:00:57.394"/>
</kw>
<status status="PASS" starttime="20250315 14:00:49.107" endtime="20250315 14:00:57.394"/>
</kw>
<msg timestamp="20250315 14:00:57.394" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:49.107" endtime="20250315 14:00:57.394"/>
</kw>
<msg timestamp="20250315 14:00:57.394" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250315 14:00:49.106" endtime="20250315 14:00:57.394"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:00:57.394" endtime="20250315 14:00:57.395"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:00:57.399" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:00.653" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:00.653" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:00:57.397" endtime="20250315 14:01:00.653"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:00.654" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:00.654" endtime="20250315 14:01:00.654"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:00.655" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:00.654" endtime="20250315 14:01:00.655"/>
</kw>
<status status="PASS" starttime="20250315 14:00:57.396" endtime="20250315 14:01:00.655"/>
</kw>
<msg timestamp="20250315 14:01:00.655" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:00:57.396" endtime="20250315 14:01:00.655"/>
</kw>
<msg timestamp="20250315 14:01:00.655" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:00:57.396" endtime="20250315 14:01:00.655"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:00.656" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:01:00.655" endtime="20250315 14:01:00.656"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:00.656" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:01:00.656" endtime="20250315 14:01:00.656"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:00.656" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:00.656" endtime="20250315 14:01:00.656"/>
</kw>
<msg timestamp="20250315 14:01:00.656" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:00:57.395" endtime="20250315 14:01:00.657"/>
</kw>
<msg timestamp="20250315 14:01:00.657" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250315 14:00:57.395" endtime="20250315 14:01:00.657"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:01:00.657" endtime="20250315 14:01:00.657"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250315 14:01:00.658" endtime="20250315 14:01:00.658"/>
</kw>
<status status="PASS" starttime="20250315 14:01:00.657" endtime="20250315 14:01:00.658"/>
</kw>
<status status="PASS" starttime="20250315 14:00:57.395" endtime="20250315 14:01:00.658"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:00:45.667" endtime="20250315 14:01:00.658"/>
</test>
<test id="s1-s5-t2" name="Transfer Leadership for OM with Multiple ServiceIDs, Valid ServiceID Specified" line="62">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:00.663" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:03.433" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:03.433" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:00.660" endtime="20250315 14:01:03.433"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:03.434" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:03.434" endtime="20250315 14:01:03.434"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:03.435" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:03.435" endtime="20250315 14:01:03.435"/>
</kw>
<status status="PASS" starttime="20250315 14:01:00.660" endtime="20250315 14:01:03.435"/>
</kw>
<msg timestamp="20250315 14:01:03.435" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:00.660" endtime="20250315 14:01:03.435"/>
</kw>
<msg timestamp="20250315 14:01:03.435" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:00.660" endtime="20250315 14:01:03.435"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:03.436" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:01:03.436" endtime="20250315 14:01:03.436"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:03.436" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:01:03.436" endtime="20250315 14:01:03.436"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:03.437" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:03.436" endtime="20250315 14:01:03.437"/>
</kw>
<msg timestamp="20250315 14:01:03.437" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:00.660" endtime="20250315 14:01:03.437"/>
</kw>
<msg timestamp="20250315 14:01:03.437" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250315 14:01:03.437" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250315 14:01:00.659" endtime="20250315 14:01:03.437"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:03.441" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:16.013" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:16.013" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250315 14:01:03.438" endtime="20250315 14:01:16.013"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:16.014" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250315 14:01:16.014" endtime="20250315 14:01:16.014"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:16.015" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:16.014" endtime="20250315 14:01:16.015"/>
</kw>
<status status="PASS" starttime="20250315 14:01:03.438" endtime="20250315 14:01:16.015"/>
</kw>
<msg timestamp="20250315 14:01:16.015" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:03.438" endtime="20250315 14:01:16.015"/>
</kw>
<msg timestamp="20250315 14:01:16.015" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250315 14:01:03.437" endtime="20250315 14:01:16.015"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:01:16.015" endtime="20250315 14:01:16.015"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:16.020" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:18.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:18.953" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:16.018" endtime="20250315 14:01:18.953"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:18.954" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:18.954" endtime="20250315 14:01:18.954"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:18.954" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:18.954" endtime="20250315 14:01:18.955"/>
</kw>
<status status="PASS" starttime="20250315 14:01:16.017" endtime="20250315 14:01:18.955"/>
</kw>
<msg timestamp="20250315 14:01:18.955" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:16.017" endtime="20250315 14:01:18.955"/>
</kw>
<msg timestamp="20250315 14:01:18.955" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:16.017" endtime="20250315 14:01:18.955"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:18.955" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:01:18.955" endtime="20250315 14:01:18.955"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:18.956" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:01:18.956" endtime="20250315 14:01:18.956"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:18.956" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:18.956" endtime="20250315 14:01:18.956"/>
</kw>
<msg timestamp="20250315 14:01:18.956" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:16.017" endtime="20250315 14:01:18.956"/>
</kw>
<msg timestamp="20250315 14:01:18.957" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250315 14:01:16.016" endtime="20250315 14:01:18.957"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:01:18.957" endtime="20250315 14:01:18.957"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250315 14:01:18.957" endtime="20250315 14:01:18.958"/>
</kw>
<status status="PASS" starttime="20250315 14:01:18.957" endtime="20250315 14:01:18.958"/>
</kw>
<status status="PASS" starttime="20250315 14:01:16.016" endtime="20250315 14:01:18.958"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:01:00.659" endtime="20250315 14:01:18.958"/>
</test>
<test id="s1-s5-t3" name="Transfer Leadership for OM with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="72">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:18.963" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:21.685" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:21.685" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:18.960" endtime="20250315 14:01:21.685"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:21.686" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:21.685" endtime="20250315 14:01:21.686"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:21.686" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:21.686" endtime="20250315 14:01:21.686"/>
</kw>
<status status="PASS" starttime="20250315 14:01:18.960" endtime="20250315 14:01:21.686"/>
</kw>
<msg timestamp="20250315 14:01:21.686" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:18.960" endtime="20250315 14:01:21.686"/>
</kw>
<msg timestamp="20250315 14:01:21.687" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:18.960" endtime="20250315 14:01:21.687"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:21.687" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:01:21.687" endtime="20250315 14:01:21.687"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:21.687" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:01:21.687" endtime="20250315 14:01:21.687"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:21.688" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:21.687" endtime="20250315 14:01:21.688"/>
</kw>
<msg timestamp="20250315 14:01:21.688" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:18.959" endtime="20250315 14:01:21.688"/>
</kw>
<msg timestamp="20250315 14:01:21.688" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250315 14:01:18.959" endtime="20250315 14:01:21.688"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:21.691" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:23.272" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:01:23.272" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250315 14:01:21.689" endtime="20250315 14:01:23.272"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:23.273" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250315 14:01:23.272" endtime="20250315 14:01:23.273"/>
</kw>
<msg timestamp="20250315 14:01:23.273" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250315 14:01:21.688" endtime="20250315 14:01:23.273"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:01:23.273" endtime="20250315 14:01:23.273"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:01:18.958" endtime="20250315 14:01:23.274"/>
</test>
<test id="s1-s5-t4" name="Transfer Leadership for OM with Multiple ServiceIDs, Invalid ServiceID Specified" line="80">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:23.279" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:26.242" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:26.243" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:23.277" endtime="20250315 14:01:26.243"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:26.244" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:26.243" endtime="20250315 14:01:26.244"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:26.244" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:26.244" endtime="20250315 14:01:26.244"/>
</kw>
<status status="PASS" starttime="20250315 14:01:23.276" endtime="20250315 14:01:26.244"/>
</kw>
<msg timestamp="20250315 14:01:26.244" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:23.276" endtime="20250315 14:01:26.244"/>
</kw>
<msg timestamp="20250315 14:01:26.245" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:23.276" endtime="20250315 14:01:26.245"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:26.245" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:01:26.245" endtime="20250315 14:01:26.245"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:26.245" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:01:26.245" endtime="20250315 14:01:26.245"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:26.246" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:26.245" endtime="20250315 14:01:26.246"/>
</kw>
<msg timestamp="20250315 14:01:26.246" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:23.275" endtime="20250315 14:01:26.246"/>
</kw>
<msg timestamp="20250315 14:01:26.246" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250315 14:01:23.275" endtime="20250315 14:01:26.246"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:26.249" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:28.079" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:01:28.079" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:01:26.247" endtime="20250315 14:01:28.079"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:28.080" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:01:28.080" endtime="20250315 14:01:28.080"/>
</kw>
<msg timestamp="20250315 14:01:28.080" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:01:26.246" endtime="20250315 14:01:28.080"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:01:28.080" endtime="20250315 14:01:28.081"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:01:23.274" endtime="20250315 14:01:28.081"/>
</test>
<test id="s1-s5-t5" name="Transfer Leadership for OM without ServiceID specified" line="88">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:28.086" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:31.049" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:31.049" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:28.083" endtime="20250315 14:01:31.049"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:31.050" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:31.050" endtime="20250315 14:01:31.050"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:31.051" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:31.050" endtime="20250315 14:01:31.051"/>
</kw>
<status status="PASS" starttime="20250315 14:01:28.083" endtime="20250315 14:01:31.051"/>
</kw>
<msg timestamp="20250315 14:01:31.051" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:28.083" endtime="20250315 14:01:31.051"/>
</kw>
<msg timestamp="20250315 14:01:31.051" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:01:28.082" endtime="20250315 14:01:31.051"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:31.052" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:01:31.051" endtime="20250315 14:01:31.052"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:31.052" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:01:31.052" endtime="20250315 14:01:31.052"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:31.052" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:31.052" endtime="20250315 14:01:31.052"/>
</kw>
<msg timestamp="20250315 14:01:31.053" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:28.082" endtime="20250315 14:01:31.053"/>
</kw>
<msg timestamp="20250315 14:01:31.053" level="INFO">${leaderOM} = om1</msg>
<msg timestamp="20250315 14:01:31.053" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250315 14:01:28.082" endtime="20250315 14:01:31.053"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:31.057" level="INFO">Running command 'ozone admin om transfer -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:43.404" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:43.404" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250315 14:01:31.054" endtime="20250315 14:01:43.404"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:43.405" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250315 14:01:43.405" endtime="20250315 14:01:43.405"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:43.406" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:43.405" endtime="20250315 14:01:43.406"/>
</kw>
<status status="PASS" starttime="20250315 14:01:31.054" endtime="20250315 14:01:43.406"/>
</kw>
<msg timestamp="20250315 14:01:43.406" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:31.054" endtime="20250315 14:01:43.406"/>
</kw>
<msg timestamp="20250315 14:01:43.406" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250315 14:01:31.053" endtime="20250315 14:01:43.406"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:01:43.406" endtime="20250315 14:01:43.407"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:43.410" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:46.393" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:46.393" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:43.408" endtime="20250315 14:01:46.393"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:46.394" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:46.393" endtime="20250315 14:01:46.394"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:46.394" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:46.394" endtime="20250315 14:01:46.394"/>
</kw>
<status status="PASS" starttime="20250315 14:01:43.408" endtime="20250315 14:01:46.395"/>
</kw>
<msg timestamp="20250315 14:01:46.395" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:43.408" endtime="20250315 14:01:46.395"/>
</kw>
<msg timestamp="20250315 14:01:46.395" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:43.407" endtime="20250315 14:01:46.395"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:46.395" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:01:46.395" endtime="20250315 14:01:46.395"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:46.396" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:01:46.395" endtime="20250315 14:01:46.396"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:46.396" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:46.396" endtime="20250315 14:01:46.396"/>
</kw>
<msg timestamp="20250315 14:01:46.396" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:43.407" endtime="20250315 14:01:46.396"/>
</kw>
<msg timestamp="20250315 14:01:46.396" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250315 14:01:43.407" endtime="20250315 14:01:46.396"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:01:46.396" endtime="20250315 14:01:46.397"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250315 14:01:46.397" endtime="20250315 14:01:46.397"/>
</kw>
<status status="PASS" starttime="20250315 14:01:46.397" endtime="20250315 14:01:46.398"/>
</kw>
<status status="PASS" starttime="20250315 14:01:43.407" endtime="20250315 14:01:46.398"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:01:28.081" endtime="20250315 14:01:46.398"/>
</test>
<test id="s1-s5-t6" name="Transfer Leadership for OM with Multiple ServiceIDs, No ServiceID Specified" line="98">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:46.403" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:49.406" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:49.406" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:46.400" endtime="20250315 14:01:49.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:49.407" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:49.407" endtime="20250315 14:01:49.407"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:49.408" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:49.408" endtime="20250315 14:01:49.408"/>
</kw>
<status status="PASS" starttime="20250315 14:01:46.400" endtime="20250315 14:01:49.408"/>
</kw>
<msg timestamp="20250315 14:01:49.408" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:46.400" endtime="20250315 14:01:49.408"/>
</kw>
<msg timestamp="20250315 14:01:49.408" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:46.399" endtime="20250315 14:01:49.408"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:49.409" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:01:49.409" endtime="20250315 14:01:49.409"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:49.409" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:01:49.409" endtime="20250315 14:01:49.409"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:49.410" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:49.409" endtime="20250315 14:01:49.410"/>
</kw>
<msg timestamp="20250315 14:01:49.410" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:46.399" endtime="20250315 14:01:49.410"/>
</kw>
<msg timestamp="20250315 14:01:49.410" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250315 14:01:46.399" endtime="20250315 14:01:49.410"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:49.413" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:50.937" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:01:50.937" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:01:49.410" endtime="20250315 14:01:50.937"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:50.938" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:01:50.938" endtime="20250315 14:01:50.938"/>
</kw>
<msg timestamp="20250315 14:01:50.939" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:01:49.410" endtime="20250315 14:01:50.939"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:01:50.939" endtime="20250315 14:01:50.939"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:01:46.398" endtime="20250315 14:01:50.939"/>
</test>
<test id="s1-s5-t7" name="Transfer Leadership for OM randomly with Valid ServiceID Specified" line="106">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:50.944" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:01:53.811" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:01:53.811" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:50.942" endtime="20250315 14:01:53.812"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:01:53.812" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:53.812" endtime="20250315 14:01:53.812"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:01:53.813" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:01:53.813" endtime="20250315 14:01:53.813"/>
</kw>
<status status="PASS" starttime="20250315 14:01:50.941" endtime="20250315 14:01:53.813"/>
</kw>
<msg timestamp="20250315 14:01:53.813" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:50.941" endtime="20250315 14:01:53.813"/>
</kw>
<msg timestamp="20250315 14:01:53.813" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:01:50.941" endtime="20250315 14:01:53.813"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:53.814" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:01:53.813" endtime="20250315 14:01:53.814"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:53.814" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:01:53.814" endtime="20250315 14:01:53.814"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:01:53.814" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:01:53.814" endtime="20250315 14:01:53.814"/>
</kw>
<msg timestamp="20250315 14:01:53.815" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:01:50.941" endtime="20250315 14:01:53.815"/>
</kw>
<msg timestamp="20250315 14:01:53.815" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" starttime="20250315 14:01:50.940" endtime="20250315 14:01:53.815"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:01:53.818" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:07.070" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:07.070" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:01:53.816" endtime="20250315 14:02:07.070"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:07.071" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:07.070" endtime="20250315 14:02:07.071"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:07.071" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:07.071" endtime="20250315 14:02:07.071"/>
</kw>
<status status="PASS" starttime="20250315 14:01:53.816" endtime="20250315 14:02:07.072"/>
</kw>
<msg timestamp="20250315 14:02:07.072" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:01:53.815" endtime="20250315 14:02:07.072"/>
</kw>
<msg timestamp="20250315 14:02:07.072" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:01:53.815" endtime="20250315 14:02:07.072"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:07.072" endtime="20250315 14:02:07.072"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:07.076" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:10.219" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:10.219" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:07.074" endtime="20250315 14:02:10.219"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:10.220" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:10.219" endtime="20250315 14:02:10.220"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:10.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:10.220" endtime="20250315 14:02:10.221"/>
</kw>
<status status="PASS" starttime="20250315 14:02:07.074" endtime="20250315 14:02:10.221"/>
</kw>
<msg timestamp="20250315 14:02:10.221" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:07.074" endtime="20250315 14:02:10.221"/>
</kw>
<msg timestamp="20250315 14:02:10.221" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:07.074" endtime="20250315 14:02:10.221"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:10.221" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:02:10.221" endtime="20250315 14:02:10.221"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:10.222" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:02:10.222" endtime="20250315 14:02:10.222"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:10.222" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:02:10.222" endtime="20250315 14:02:10.222"/>
</kw>
<msg timestamp="20250315 14:02:10.223" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:02:07.073" endtime="20250315 14:02:10.223"/>
</kw>
<msg timestamp="20250315 14:02:10.223" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250315 14:02:07.073" endtime="20250315 14:02:10.223"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:02:10.223" endtime="20250315 14:02:10.223"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250315 14:02:10.223" endtime="20250315 14:02:10.224"/>
</kw>
<status status="PASS" starttime="20250315 14:02:07.072" endtime="20250315 14:02:10.224"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:01:50.940" endtime="20250315 14:02:10.224"/>
</test>
<test id="s1-s5-t8" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Valid ServiceID Specified" line="115">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:10.229" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:13.249" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:13.249" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:10.226" endtime="20250315 14:02:13.249"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:13.250" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:13.249" endtime="20250315 14:02:13.250"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:13.251" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:13.250" endtime="20250315 14:02:13.251"/>
</kw>
<status status="PASS" starttime="20250315 14:02:10.226" endtime="20250315 14:02:13.251"/>
</kw>
<msg timestamp="20250315 14:02:13.251" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:10.226" endtime="20250315 14:02:13.251"/>
</kw>
<msg timestamp="20250315 14:02:13.251" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:10.225" endtime="20250315 14:02:13.251"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:13.252" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:02:13.251" endtime="20250315 14:02:13.252"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:13.252" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:02:13.252" endtime="20250315 14:02:13.252"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:13.253" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:02:13.252" endtime="20250315 14:02:13.253"/>
</kw>
<msg timestamp="20250315 14:02:13.253" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:02:10.225" endtime="20250315 14:02:13.253"/>
</kw>
<msg timestamp="20250315 14:02:13.253" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250315 14:02:10.225" endtime="20250315 14:02:13.253"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:13.257" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:29.436" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:29.436" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:13.254" endtime="20250315 14:02:29.436"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:29.437" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:29.437" endtime="20250315 14:02:29.437"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:29.438" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:29.437" endtime="20250315 14:02:29.438"/>
</kw>
<status status="PASS" starttime="20250315 14:02:13.254" endtime="20250315 14:02:29.438"/>
</kw>
<msg timestamp="20250315 14:02:29.438" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:13.254" endtime="20250315 14:02:29.438"/>
</kw>
<msg timestamp="20250315 14:02:29.438" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:13.253" endtime="20250315 14:02:29.438"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:29.438" endtime="20250315 14:02:29.439"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:29.443" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:32.384" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:32.384" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:02:29.440" endtime="20250315 14:02:32.384"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:32.385" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:02:32.384" endtime="20250315 14:02:32.385"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:32.385" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:32.385" endtime="20250315 14:02:32.385"/>
</kw>
<status status="PASS" starttime="20250315 14:02:29.440" endtime="20250315 14:02:32.385"/>
</kw>
<msg timestamp="20250315 14:02:32.385" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:29.440" endtime="20250315 14:02:32.385"/>
</kw>
<msg timestamp="20250315 14:02:32.386" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:02:29.440" endtime="20250315 14:02:32.386"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:32.386" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:02:32.386" endtime="20250315 14:02:32.386"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:32.386" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:02:32.386" endtime="20250315 14:02:32.386"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:32.387" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:02:32.387" endtime="20250315 14:02:32.387"/>
</kw>
<msg timestamp="20250315 14:02:32.387" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:02:29.439" endtime="20250315 14:02:32.387"/>
</kw>
<msg timestamp="20250315 14:02:32.387" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250315 14:02:29.439" endtime="20250315 14:02:32.387"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:02:32.387" endtime="20250315 14:02:32.388"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250315 14:02:32.388" endtime="20250315 14:02:32.388"/>
</kw>
<status status="PASS" starttime="20250315 14:02:29.439" endtime="20250315 14:02:32.388"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:02:10.224" endtime="20250315 14:02:32.388"/>
</test>
<test id="s1-s5-t9" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="125">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:32.392" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:34.108" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:02:34.108" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250315 14:02:32.390" endtime="20250315 14:02:34.109"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:34.109" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250315 14:02:34.109" endtime="20250315 14:02:34.109"/>
</kw>
<msg timestamp="20250315 14:02:34.110" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250315 14:02:32.389" endtime="20250315 14:02:34.110"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:34.110" endtime="20250315 14:02:34.110"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:02:32.389" endtime="20250315 14:02:34.110"/>
</test>
<test id="s1-s5-t10" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Invalid ServiceID Specified" line="130">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:34.114" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:35.961" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:02:35.961" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:02:34.112" endtime="20250315 14:02:35.961"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:35.962" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:02:35.962" endtime="20250315 14:02:35.962"/>
</kw>
<msg timestamp="20250315 14:02:35.963" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250315 14:02:34.111" endtime="20250315 14:02:35.963"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:35.963" endtime="20250315 14:02:35.963"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:02:34.111" endtime="20250315 14:02:35.963"/>
</test>
<test id="s1-s5-t11" name="Transfer Leadership for OM randomly without ServiceID specified" line="136">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:35.968" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:39.021" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:39.022" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:02:35.966" endtime="20250315 14:02:39.022"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:39.022" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:02:39.022" endtime="20250315 14:02:39.023"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:39.023" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:39.023" endtime="20250315 14:02:39.023"/>
</kw>
<status status="PASS" starttime="20250315 14:02:35.966" endtime="20250315 14:02:39.023"/>
</kw>
<msg timestamp="20250315 14:02:39.023" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:35.965" endtime="20250315 14:02:39.023"/>
</kw>
<msg timestamp="20250315 14:02:39.024" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250315 14:02:35.965" endtime="20250315 14:02:39.024"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:39.024" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250315 14:02:39.024" endtime="20250315 14:02:39.024"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:39.024" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250315 14:02:39.024" endtime="20250315 14:02:39.024"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:39.025" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:02:39.025" endtime="20250315 14:02:39.025"/>
</kw>
<msg timestamp="20250315 14:02:39.025" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250315 14:02:35.965" endtime="20250315 14:02:39.025"/>
</kw>
<msg timestamp="20250315 14:02:39.025" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" starttime="20250315 14:02:35.964" endtime="20250315 14:02:39.025"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:39.029" level="INFO">Running command 'ozone admin om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:51.098" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:51.098" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:39.026" endtime="20250315 14:02:51.098"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:51.099" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:51.098" endtime="20250315 14:02:51.099"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:51.099" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:51.099" endtime="20250315 14:02:51.099"/>
</kw>
<status status="PASS" starttime="20250315 14:02:39.026" endtime="20250315 14:02:51.099"/>
</kw>
<msg timestamp="20250315 14:02:51.099" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:39.026" endtime="20250315 14:02:51.100"/>
</kw>
<msg timestamp="20250315 14:02:51.100" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250315 14:02:39.025" endtime="20250315 14:02:51.100"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:51.100" endtime="20250315 14:02:51.100"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:51.104" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:53.981" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:53.981" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:51.102" endtime="20250315 14:02:53.981"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:53.982" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:53.982" endtime="20250315 14:02:53.982"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:53.983" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:53.982" endtime="20250315 14:02:53.983"/>
</kw>
<status status="PASS" starttime="20250315 14:02:51.102" endtime="20250315 14:02:53.983"/>
</kw>
<msg timestamp="20250315 14:02:53.983" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:51.101" endtime="20250315 14:02:53.983"/>
</kw>
<msg timestamp="20250315 14:02:53.983" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250315 14:02:51.101" endtime="20250315 14:02:53.983"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:53.984" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250315 14:02:53.983" endtime="20250315 14:02:53.984"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:53.984" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250315 14:02:53.984" endtime="20250315 14:02:53.984"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250315 14:02:53.984" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250315 14:02:53.984" endtime="20250315 14:02:53.984"/>
</kw>
<msg timestamp="20250315 14:02:53.985" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250315 14:02:51.101" endtime="20250315 14:02:53.985"/>
</kw>
<msg timestamp="20250315 14:02:53.985" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250315 14:02:51.101" endtime="20250315 14:02:53.985"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:02:53.985" endtime="20250315 14:02:53.985"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250315 14:02:53.985" endtime="20250315 14:02:53.985"/>
</kw>
<status status="PASS" starttime="20250315 14:02:51.100" endtime="20250315 14:02:53.985"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:02:35.964" endtime="20250315 14:02:53.986"/>
</test>
<test id="s1-s5-t12" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, No ServiceID Specified" line="146">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:53.989" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:55.657" level="INFO">${rc} = 255</msg>
<msg timestamp="20250315 14:02:55.657" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:02:53.987" endtime="20250315 14:02:55.657"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:55.658" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:02:55.658" endtime="20250315 14:02:55.658"/>
</kw>
<msg timestamp="20250315 14:02:55.658" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250315 14:02:53.987" endtime="20250315 14:02:55.658"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:55.659" endtime="20250315 14:02:55.659"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:02:53.986" endtime="20250315 14:02:55.659"/>
</test>
<doc>Smoketest for OM leader transfer</doc>
<status status="PASS" starttime="20250315 14:00:45.631" endtime="20250315 14:02:55.660"/>
</suite>
<suite id="s1-s6" name="Scm-Leader-Transfer" source="/opt/hadoop/smoketest/scmha/scm-leader-transfer.robot">
<test id="s1-s6-t1" name="Transfer Leadership" line="47">
<kw name="Get SCM Leader Node">
<var>${leaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:56.320" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:02:58.678" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:02:58.678" level="INFO">${output} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 14:02:56.317" endtime="20250315 14:02:58.678"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:58.679" level="INFO">scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 14:02:58.679" endtime="20250315 14:02:58.679"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:02:58.680" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:02:58.679" endtime="20250315 14:02:58.680"/>
</kw>
<status status="PASS" starttime="20250315 14:02:56.317" endtime="20250315 14:02:58.680"/>
</kw>
<msg timestamp="20250315 14:02:58.680" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:56.317" endtime="20250315 14:02:58.680"/>
</kw>
<msg timestamp="20250315 14:02:58.680" level="INFO">${result} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 14:02:56.317" endtime="20250315 14:02:58.680"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:58.680" level="INFO">scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 14:02:58.680" endtime="20250315 14:02:58.681"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:58.681" endtime="20250315 14:02:58.681"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:02:58.681" endtime="20250315 14:02:58.681"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250315 14:02:58.682" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250315 14:02:58.682" level="INFO">${scmLine} = scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116</msg>
<status status="PASS" starttime="20250315 14:02:58.681" endtime="20250315 14:02:58.682"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250315 14:02:58.682" level="INFO">${splits} = ['scm1.org', '9894', 'LEADER', 'ce601c58-2de0-43df-837b-7d52152d3017', '172.25.0.116']</msg>
<status status="PASS" starttime="20250315 14:02:58.682" endtime="20250315 14:02:58.682"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250315 14:02:58.683" level="INFO">${leaderSCM} = ce601c58-2de0-43df-837b-7d52152d3017</msg>
<status status="PASS" starttime="20250315 14:02:58.682" endtime="20250315 14:02:58.683"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:58.683" level="INFO">Leader SCM: ce601c58-2de0-43df-837b-7d52152d3017</msg>
<status status="PASS" starttime="20250315 14:02:58.683" endtime="20250315 14:02:58.683"/>
</kw>
<msg timestamp="20250315 14:02:58.683" level="INFO">${leaderSCM} = ce601c58-2de0-43df-837b-7d52152d3017</msg>
<status status="PASS" starttime="20250315 14:02:56.316" endtime="20250315 14:02:58.683"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:02:58.684" level="INFO">Leader SCM: ce601c58-2de0-43df-837b-7d52152d3017</msg>
<status status="PASS" starttime="20250315 14:02:58.683" endtime="20250315 14:02:58.684"/>
</kw>
<kw name="Get SCM UUID">
<var>${target_scm_uuid}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:02:58.687" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:03:01.016" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:03:01.016" level="INFO">${output} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 14:02:58.685" endtime="20250315 14:03:01.016"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:01.017" level="INFO">scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 14:03:01.016" endtime="20250315 14:03:01.017"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:03:01.017" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:03:01.017" endtime="20250315 14:03:01.017"/>
</kw>
<status status="PASS" starttime="20250315 14:02:58.685" endtime="20250315 14:03:01.017"/>
</kw>
<msg timestamp="20250315 14:03:01.018" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:02:58.684" endtime="20250315 14:03:01.018"/>
</kw>
<msg timestamp="20250315 14:03:01.018" level="INFO">${result} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 14:02:58.684" endtime="20250315 14:03:01.018"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:01.018" level="INFO">scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:LEADER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 14:03:01.018" endtime="20250315 14:03:01.018"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scm_line}</var>
<arg>${result}</arg>
<arg>${TARGET_SCM}</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250315 14:03:01.018" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250315 14:03:01.019" level="INFO">${scm_line} = scm2.org:9894:FOLLOWER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117</msg>
<status status="PASS" starttime="20250315 14:03:01.018" endtime="20250315 14:03:01.019"/>
</kw>
<kw name="Split String" library="String">
<var>${scm_split}</var>
<arg>${scm_line}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250315 14:03:01.019" level="INFO">${scm_split} = ['scm2.org', '9894', 'FOLLOWER', 'a3ae3c47-5df1-421b-beb8-7cdd60b3f208', '172.25.0.117']</msg>
<status status="PASS" starttime="20250315 14:03:01.019" endtime="20250315 14:03:01.019"/>
</kw>
<kw name="Strip String" library="String">
<var>${scm_uuid}</var>
<arg>${scm_split[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250315 14:03:01.020" level="INFO">${scm_uuid} = a3ae3c47-5df1-421b-beb8-7cdd60b3f208</msg>
<status status="PASS" starttime="20250315 14:03:01.019" endtime="20250315 14:03:01.020"/>
</kw>
<msg timestamp="20250315 14:03:01.020" level="INFO">${target_scm_uuid} = a3ae3c47-5df1-421b-beb8-7cdd60b3f208</msg>
<status status="PASS" starttime="20250315 14:02:58.684" endtime="20250315 14:03:01.020"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm transfer --service-id=scmservice -n ${target_scm_uuid}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:03:01.023" level="INFO">Running command 'ozone admin scm transfer --service-id=scmservice -n a3ae3c47-5df1-421b-beb8-7cdd60b3f208 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:03:14.103" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:03:14.103" level="INFO">${output} = Transfer leadership successfully to a3ae3c47-5df1-421b-beb8-7cdd60b3f208.</msg>
<status status="PASS" starttime="20250315 14:03:01.021" endtime="20250315 14:03:14.103"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:14.104" level="INFO">Transfer leadership successfully to a3ae3c47-5df1-421b-beb8-7cdd60b3f208.</msg>
<status status="PASS" starttime="20250315 14:03:14.103" endtime="20250315 14:03:14.104"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:03:14.104" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:03:14.104" endtime="20250315 14:03:14.104"/>
</kw>
<status status="PASS" starttime="20250315 14:03:01.021" endtime="20250315 14:03:14.104"/>
</kw>
<msg timestamp="20250315 14:03:14.104" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:03:01.020" endtime="20250315 14:03:14.105"/>
</kw>
<msg timestamp="20250315 14:03:14.105" level="INFO">${result} = Transfer leadership successfully to a3ae3c47-5df1-421b-beb8-7cdd60b3f208.</msg>
<status status="PASS" starttime="20250315 14:03:01.020" endtime="20250315 14:03:14.105"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:14.105" level="INFO">Transfer leadership successfully to a3ae3c47-5df1-421b-beb8-7cdd60b3f208.</msg>
<status status="PASS" starttime="20250315 14:03:14.105" endtime="20250315 14:03:14.105"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:03:14.105" endtime="20250315 14:03:14.105"/>
</kw>
<kw name="Get SCM Leader Node">
<var>${newLeaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250315 14:03:14.109" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250315 14:03:18.705" level="INFO">${rc} = 0</msg>
<msg timestamp="20250315 14:03:18.705" level="INFO">${output} = scm2.org:9894:LEADER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:FOLLOWER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 14:03:14.107" endtime="20250315 14:03:18.705"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:18.706" level="INFO">scm2.org:9894:LEADER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:FOLLOWER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 14:03:18.705" endtime="20250315 14:03:18.706"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250315 14:03:18.706" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250315 14:03:18.706" endtime="20250315 14:03:18.706"/>
</kw>
<status status="PASS" starttime="20250315 14:03:14.106" endtime="20250315 14:03:18.707"/>
</kw>
<msg timestamp="20250315 14:03:18.707" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250315 14:03:14.106" endtime="20250315 14:03:18.707"/>
</kw>
<msg timestamp="20250315 14:03:18.707" level="INFO">${result} = scm2.org:9894:LEADER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:FOLLOWER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6e...</msg>
<status status="PASS" starttime="20250315 14:03:14.106" endtime="20250315 14:03:18.707"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:18.707" level="INFO">scm2.org:9894:LEADER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117
scm1.org:9894:FOLLOWER:ce601c58-2de0-43df-837b-7d52152d3017:172.25.0.116
scm3.org:9894:FOLLOWER:4cc39cf7-5c72-41f7-b0ce-85f1f5e6ebf0:172.25.0.118</msg>
<status status="PASS" starttime="20250315 14:03:18.707" endtime="20250315 14:03:18.707"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:03:18.708" endtime="20250315 14:03:18.708"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250315 14:03:18.708" endtime="20250315 14:03:18.708"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250315 14:03:18.709" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250315 14:03:18.709" level="INFO">${scmLine} = scm2.org:9894:LEADER:a3ae3c47-5df1-421b-beb8-7cdd60b3f208:172.25.0.117</msg>
<status status="PASS" starttime="20250315 14:03:18.709" endtime="20250315 14:03:18.709"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250315 14:03:18.709" level="INFO">${splits} = ['scm2.org', '9894', 'LEADER', 'a3ae3c47-5df1-421b-beb8-7cdd60b3f208', '172.25.0.117']</msg>
<status status="PASS" starttime="20250315 14:03:18.709" endtime="20250315 14:03:18.709"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250315 14:03:18.711" level="INFO">${leaderSCM} = a3ae3c47-5df1-421b-beb8-7cdd60b3f208</msg>
<status status="PASS" starttime="20250315 14:03:18.710" endtime="20250315 14:03:18.711"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250315 14:03:18.711" level="INFO">Leader SCM: a3ae3c47-5df1-421b-beb8-7cdd60b3f208</msg>
<status status="PASS" starttime="20250315 14:03:18.711" endtime="20250315 14:03:18.711"/>
</kw>
<msg timestamp="20250315 14:03:18.711" level="INFO">${newLeaderSCM} = a3ae3c47-5df1-421b-beb8-7cdd60b3f208</msg>
<status status="PASS" starttime="20250315 14:03:14.105" endtime="20250315 14:03:18.711"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderSCM}</arg>
<arg>${newLeaderSCM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250315 14:03:18.711" endtime="20250315 14:03:18.712"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250315 14:02:56.316" endtime="20250315 14:03:18.712"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250315 14:02:56.281" endtime="20250315 14:03:18.713"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="205464"/>
</suite>
<statistics>
<total>
<stat pass="29" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="29" fail="0" skip="0" id="s1" name="ozonesecure-ha-leadership">ozonesecure-ha-leadership</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-leadership.Kinit</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Scmrole">ozonesecure-ha-leadership.Scmrole</stat>
<stat pass="6" fail="0" skip="0" id="s1-s3" name="Om-Fetch-Key">ozonesecure-ha-leadership.Om-Fetch-Key</stat>
<stat pass="6" fail="0" skip="0" id="s1-s4" name="Om-Roles">ozonesecure-ha-leadership.Om-Roles</stat>
<stat pass="12" fail="0" skip="0" id="s1-s5" name="Om-Leader-Transfer">ozonesecure-ha-leadership.Om-Leader-Transfer</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Scm-Leader-Transfer">ozonesecure-ha-leadership.Scm-Leader-Transfer</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
