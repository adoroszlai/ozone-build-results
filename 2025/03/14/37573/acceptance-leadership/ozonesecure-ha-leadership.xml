<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250314 15:56:24.041" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-leadership">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:00.805" endtime="20250314 15:53:00.805"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:00.809" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:00.813" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:00.813" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:00.806" endtime="20250314 15:53:00.813"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:00.814" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:00.813" endtime="20250314 15:53:00.814"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:00.814" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:00.814" endtime="20250314 15:53:00.814"/>
</kw>
<status status="PASS" starttime="20250314 15:53:00.806" endtime="20250314 15:53:00.815"/>
</kw>
<msg timestamp="20250314 15:53:00.815" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:00.806" endtime="20250314 15:53:00.815"/>
</kw>
<msg timestamp="20250314 15:53:00.815" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:00.806" endtime="20250314 15:53:00.815"/>
</kw>
<msg timestamp="20250314 15:53:00.815" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:00.805" endtime="20250314 15:53:00.815"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:00.815" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:00.815" endtime="20250314 15:53:00.815"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:00.819" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:00.855" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:00.855" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:00.817" endtime="20250314 15:53:00.855"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:00.856" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:00.855" endtime="20250314 15:53:00.856"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:00.856" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:00.856" endtime="20250314 15:53:00.856"/>
</kw>
<status status="PASS" starttime="20250314 15:53:00.816" endtime="20250314 15:53:00.856"/>
</kw>
<msg timestamp="20250314 15:53:00.856" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:00.816" endtime="20250314 15:53:00.856"/>
</kw>
<status status="PASS" starttime="20250314 15:53:00.816" endtime="20250314 15:53:00.856"/>
</kw>
<status status="PASS" starttime="20250314 15:53:00.816" endtime="20250314 15:53:00.856"/>
</kw>
<status status="PASS" starttime="20250314 15:53:00.805" endtime="20250314 15:53:00.856"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20250314 15:53:00.804" endtime="20250314 15:53:00.857"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20250314 15:53:00.768" endtime="20250314 15:53:00.857"/>
</suite>
<suite id="s1-s2" name="Scmrole" source="/opt/hadoop/smoketest/admincli/scmrole.robot">
<test id="s1-s2-t1" name="Run scm roles" line="26">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:01.504" level="INFO">Running command 'ozone admin scm roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:03.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:03.892" level="INFO">${output} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:53:01.502" endtime="20250314 15:53:03.892"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:03.893" level="INFO">scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:53:03.892" endtime="20250314 15:53:03.893"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:03.893" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:03.893" endtime="20250314 15:53:03.894"/>
</kw>
<status status="PASS" starttime="20250314 15:53:01.501" endtime="20250314 15:53:03.894"/>
</kw>
<msg timestamp="20250314 15:53:03.894" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:01.501" endtime="20250314 15:53:03.894"/>
</kw>
<msg timestamp="20250314 15:53:03.894" level="INFO">${output} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:53:01.501" endtime="20250314 15:53:03.894"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[scm:9894(:LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:03.894" endtime="20250314 15:53:03.895"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:01.500" endtime="20250314 15:53:03.895"/>
</test>
<test id="s1-s2-t2" name="List scm roles as JSON" line="30">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:03.899" level="INFO">Running command 'ozone admin scm roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:06.604" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:06.604" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250314 15:53:03.897" endtime="20250314 15:53:06.604"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:06.605" level="INFO">{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "d1394a5f-3368-4063-aeba-c09872db92f3",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "afc867e2-a622-4b78-9f11-235e0c3f42c2",
    "InetAddress" : "172.25.0.117"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:06.605" endtime="20250314 15:53:06.605"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:06.606" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:06.605" endtime="20250314 15:53:06.606"/>
</kw>
<status status="PASS" starttime="20250314 15:53:03.896" endtime="20250314 15:53:06.606"/>
</kw>
<msg timestamp="20250314 15:53:06.606" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:03.896" endtime="20250314 15:53:06.606"/>
</kw>
<msg timestamp="20250314 15:53:06.606" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250314 15:53:03.896" endtime="20250314 15:53:06.606"/>
</kw>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq -r '.[] | select(.raftPeerRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:06.609" level="INFO">Running command 'echo '{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "d1394a5f-3368-4063-aeba-c09872db92f3",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "afc867e2-a622-4b78-9f11-235e0c3f42c2",
    "InetAddress" : "172.25.0.117"
  }
}' | jq -r '.[] | select(.raftPeerRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:06.620" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:06.620" level="INFO">${output} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250314 15:53:06.607" endtime="20250314 15:53:06.620"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:06.620" level="INFO">{
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250314 15:53:06.620" endtime="20250314 15:53:06.621"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:06.621" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:06.621" endtime="20250314 15:53:06.621"/>
</kw>
<status status="PASS" starttime="20250314 15:53:06.607" endtime="20250314 15:53:06.621"/>
</kw>
<msg timestamp="20250314 15:53:06.621" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:06.607" endtime="20250314 15:53:06.621"/>
</kw>
<msg timestamp="20250314 15:53:06.621" level="INFO">${leader} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "ce857ab0-9568-40e6-9a1d-22afdbc8aee6",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250314 15:53:06.606" endtime="20250314 15:53:06.621"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:53:06.621" endtime="20250314 15:53:06.622"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:03.895" endtime="20250314 15:53:06.622"/>
</test>
<test id="s1-s2-t3" name="List scm roles as TABLE" line="35">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:06.626" level="INFO">Running command 'ozone admin scm roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:08.957" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:08.957" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250314 15:53:06.624" endtime="20250314 15:53:08.957"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:08.958" level="INFO">+-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+------------+----------+--------------------------------------+--------------+
| Host Name | Ratis Port |   Role   |               Node ID                | Host Address |
+-----------+------------+----------+--------------------------------------+--------------+
| scm1.org  |    9894    |  LEADER  | ce857ab0-9568-40e6-9a1d-22afdbc8aee6 | 172.25.0.116 |
| scm2.org  |    9894    | FOLLOWER | afc867e2-a622-4b78-9f11-235e0c3f42c2 | 172.25.0.117 |
| scm3.org  |    9894    | FOLLOWER | d1394a5f-3368-4063-aeba-c09872db92f3 | 172.25.0.118 |
+-----------+------------+----------+--------------------------------------+--------------+
</msg>
<status status="PASS" starttime="20250314 15:53:08.957" endtime="20250314 15:53:08.958"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:08.958" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:08.958" endtime="20250314 15:53:08.959"/>
</kw>
<status status="PASS" starttime="20250314 15:53:06.624" endtime="20250314 15:53:08.959"/>
</kw>
<msg timestamp="20250314 15:53:08.959" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:06.623" endtime="20250314 15:53:08.959"/>
</kw>
<msg timestamp="20250314 15:53:08.959" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250314 15:53:06.623" endtime="20250314 15:53:08.959"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:08.959" endtime="20250314 15:53:08.960"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:06.623" endtime="20250314 15:53:08.960"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250314 15:53:01.462" endtime="20250314 15:53:08.961"/>
</suite>
<suite id="s1-s3" name="Om-Fetch-Key" source="/opt/hadoop/smoketest/omha/om-fetch-key.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:09.598" endtime="20250314 15:53:09.598"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:09.601" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:09.605" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:09.605" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:09.599" endtime="20250314 15:53:09.605"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:09.605" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:09.605" endtime="20250314 15:53:09.605"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:09.606" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:09.606" endtime="20250314 15:53:09.606"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.599" endtime="20250314 15:53:09.606"/>
</kw>
<msg timestamp="20250314 15:53:09.606" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:09.598" endtime="20250314 15:53:09.606"/>
</kw>
<msg timestamp="20250314 15:53:09.606" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:09.598" endtime="20250314 15:53:09.606"/>
</kw>
<msg timestamp="20250314 15:53:09.606" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:09.598" endtime="20250314 15:53:09.606"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:09.607" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:09.607" endtime="20250314 15:53:09.607"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:09.610" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:09.659" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:09.659" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:09.608" endtime="20250314 15:53:09.659"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:09.660" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:09.659" endtime="20250314 15:53:09.660"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:09.660" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:09.660" endtime="20250314 15:53:09.660"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.608" endtime="20250314 15:53:09.660"/>
</kw>
<msg timestamp="20250314 15:53:09.660" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:09.608" endtime="20250314 15:53:09.660"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.607" endtime="20250314 15:53:09.660"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.607" endtime="20250314 15:53:09.660"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.597" endtime="20250314 15:53:09.660"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.597" endtime="20250314 15:53:09.660"/>
</kw>
<test id="s1-s3-t1" name="Fetch Key with Valid ServiceID Specified" line="31">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:09.664" level="INFO">Running command 'ozone admin om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:12.476" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:12.476" level="INFO">${output} = Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:09.662" endtime="20250314 15:53:12.476"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:12.477" level="INFO">Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:12.476" endtime="20250314 15:53:12.477"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:12.477" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:12.477" endtime="20250314 15:53:12.477"/>
</kw>
<status status="PASS" starttime="20250314 15:53:09.662" endtime="20250314 15:53:12.478"/>
</kw>
<msg timestamp="20250314 15:53:12.478" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:09.662" endtime="20250314 15:53:12.478"/>
</kw>
<msg timestamp="20250314 15:53:12.478" level="INFO">${result} = Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:09.661" endtime="20250314 15:53:12.478"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:12.478" endtime="20250314 15:53:12.478"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:09.661" endtime="20250314 15:53:12.479"/>
</test>
<test id="s1-s3-t2" name="Fetch Key with Multiple ServiceIDs, Valid ServiceID Specified" line="35">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:12.483" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:15.279" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:15.279" level="INFO">${output} = Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:12.480" endtime="20250314 15:53:15.279"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:15.280" level="INFO">Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:15.280" endtime="20250314 15:53:15.280"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:15.281" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:15.280" endtime="20250314 15:53:15.281"/>
</kw>
<status status="PASS" starttime="20250314 15:53:12.480" endtime="20250314 15:53:15.281"/>
</kw>
<msg timestamp="20250314 15:53:15.281" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:12.480" endtime="20250314 15:53:15.281"/>
</kw>
<msg timestamp="20250314 15:53:15.281" level="INFO">${result} = Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:12.479" endtime="20250314 15:53:15.281"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:15.281" endtime="20250314 15:53:15.281"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:12.479" endtime="20250314 15:53:15.282"/>
</test>
<test id="s1-s3-t3" name="Fetch Key with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="39">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:15.285" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:16.875" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:53:16.875" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 15:53:15.283" endtime="20250314 15:53:16.875"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:16.876" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250314 15:53:16.875" endtime="20250314 15:53:16.876"/>
</kw>
<msg timestamp="20250314 15:53:16.876" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 15:53:15.283" endtime="20250314 15:53:16.876"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:16.876" endtime="20250314 15:53:16.876"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:15.282" endtime="20250314 15:53:16.877"/>
</test>
<test id="s1-s3-t4" name="Fetch Key with Multiple ServiceIDs, Invalid ServiceID Specified" line="43">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:16.880" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:18.703" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:53:18.703" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:53:16.878" endtime="20250314 15:53:18.703"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:18.704" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:53:18.704" endtime="20250314 15:53:18.704"/>
</kw>
<msg timestamp="20250314 15:53:18.705" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:53:16.878" endtime="20250314 15:53:18.705"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:18.705" endtime="20250314 15:53:18.705"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:16.877" endtime="20250314 15:53:18.705"/>
</test>
<test id="s1-s3-t5" name="Fetch Key without OM Service ID" line="47">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:18.709" level="INFO">Running command 'ozone admin om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:21.349" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:21.349" level="INFO">${output} = Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:18.707" endtime="20250314 15:53:21.349"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:21.350" level="INFO">Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:21.349" endtime="20250314 15:53:21.350"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:21.350" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:21.350" endtime="20250314 15:53:21.350"/>
</kw>
<status status="PASS" starttime="20250314 15:53:18.707" endtime="20250314 15:53:21.351"/>
</kw>
<msg timestamp="20250314 15:53:21.351" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:18.706" endtime="20250314 15:53:21.351"/>
</kw>
<msg timestamp="20250314 15:53:21.351" level="INFO">${result} = Current Secret Key ID: 60abaeba-61a4-4917-8e5d-7a9bd2e7bde2</msg>
<status status="PASS" starttime="20250314 15:53:18.706" endtime="20250314 15:53:21.351"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:21.351" endtime="20250314 15:53:21.351"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:18.706" endtime="20250314 15:53:21.351"/>
</test>
<test id="s1-s3-t6" name="Fetch Key with Multiple ServiceIDs, No ServiceID Specified" line="51">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:21.355" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:23.112" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:53:23.112" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:21.353" endtime="20250314 15:53:23.112"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:23.113" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:23.113" endtime="20250314 15:53:23.113"/>
</kw>
<msg timestamp="20250314 15:53:23.113" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:21.352" endtime="20250314 15:53:23.113"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:23.114" endtime="20250314 15:53:23.114"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:21.352" endtime="20250314 15:53:23.114"/>
</test>
<doc>Smoke test for om fetch-key</doc>
<status status="PASS" starttime="20250314 15:53:09.561" endtime="20250314 15:53:23.115"/>
</suite>
<suite id="s1-s4" name="Om-Roles" source="/opt/hadoop/smoketest/omha/om-roles.robot">
<test id="s1-s4-t1" name="List om roles with OM service ID passed" line="36">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:23.789" endtime="20250314 15:53:23.790"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:23.793" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:23.797" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:23.797" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:23.791" endtime="20250314 15:53:23.797"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:23.797" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:23.797" endtime="20250314 15:53:23.798"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:23.798" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:23.798" endtime="20250314 15:53:23.798"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.790" endtime="20250314 15:53:23.798"/>
</kw>
<msg timestamp="20250314 15:53:23.798" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:23.790" endtime="20250314 15:53:23.798"/>
</kw>
<msg timestamp="20250314 15:53:23.798" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:23.790" endtime="20250314 15:53:23.798"/>
</kw>
<msg timestamp="20250314 15:53:23.799" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:23.790" endtime="20250314 15:53:23.799"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:23.799" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:23.799" endtime="20250314 15:53:23.799"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:23.802" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:23.829" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:23.829" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:23.800" endtime="20250314 15:53:23.829"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:23.829" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:23.829" endtime="20250314 15:53:23.830"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:23.830" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:23.830" endtime="20250314 15:53:23.830"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.800" endtime="20250314 15:53:23.830"/>
</kw>
<msg timestamp="20250314 15:53:23.830" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:23.800" endtime="20250314 15:53:23.830"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.799" endtime="20250314 15:53:23.830"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.799" endtime="20250314 15:53:23.830"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.789" endtime="20250314 15:53:23.830"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.789" endtime="20250314 15:53:23.830"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:23.833" level="INFO">Running command 'ozone admin om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:27.018" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:27.018" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:23.831" endtime="20250314 15:53:27.018"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:27.019" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:27.019" endtime="20250314 15:53:27.019"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:27.020" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:27.019" endtime="20250314 15:53:27.020"/>
</kw>
<status status="PASS" starttime="20250314 15:53:23.831" endtime="20250314 15:53:27.020"/>
</kw>
<msg timestamp="20250314 15:53:27.020" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:23.831" endtime="20250314 15:53:27.020"/>
</kw>
<msg timestamp="20250314 15:53:27.020" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:23.831" endtime="20250314 15:53:27.020"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:27.021" endtime="20250314 15:53:27.021"/>
</kw>
<status status="PASS" starttime="20250314 15:53:27.020" endtime="20250314 15:53:27.021"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:27.024" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:29.750" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:29.750" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:27.022" endtime="20250314 15:53:29.750"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:29.751" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:29.750" endtime="20250314 15:53:29.751"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:29.751" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:29.751" endtime="20250314 15:53:29.751"/>
</kw>
<status status="PASS" starttime="20250314 15:53:27.022" endtime="20250314 15:53:29.752"/>
</kw>
<msg timestamp="20250314 15:53:29.752" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:27.022" endtime="20250314 15:53:29.752"/>
</kw>
<msg timestamp="20250314 15:53:29.752" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:27.021" endtime="20250314 15:53:29.752"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:29.752" endtime="20250314 15:53:29.753"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.752" endtime="20250314 15:53:29.753"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:23.788" endtime="20250314 15:53:29.753"/>
</test>
<test id="s1-s4-t2" name="List om roles without OM service ID passed" line="42">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:29.754" endtime="20250314 15:53:29.755"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:29.758" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:29.762" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:29.762" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:29.756" endtime="20250314 15:53:29.762"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:29.763" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:29.763" endtime="20250314 15:53:29.763"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:29.763" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:29.763" endtime="20250314 15:53:29.764"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.755" endtime="20250314 15:53:29.764"/>
</kw>
<msg timestamp="20250314 15:53:29.764" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:29.755" endtime="20250314 15:53:29.764"/>
</kw>
<msg timestamp="20250314 15:53:29.764" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:29.755" endtime="20250314 15:53:29.764"/>
</kw>
<msg timestamp="20250314 15:53:29.764" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:29.755" endtime="20250314 15:53:29.764"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:29.765" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:29.764" endtime="20250314 15:53:29.765"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:29.768" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:29.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:29.803" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:29.766" endtime="20250314 15:53:29.803"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:29.804" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:29.803" endtime="20250314 15:53:29.804"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:29.804" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:29.804" endtime="20250314 15:53:29.804"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.766" endtime="20250314 15:53:29.804"/>
</kw>
<msg timestamp="20250314 15:53:29.804" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:29.765" endtime="20250314 15:53:29.804"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.765" endtime="20250314 15:53:29.804"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.765" endtime="20250314 15:53:29.804"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.754" endtime="20250314 15:53:29.805"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.754" endtime="20250314 15:53:29.805"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:29.808" level="INFO">Running command 'ozone admin om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:32.718" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:32.718" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:29.806" endtime="20250314 15:53:32.718"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:32.719" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:32.718" endtime="20250314 15:53:32.719"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:32.719" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:32.719" endtime="20250314 15:53:32.719"/>
</kw>
<status status="PASS" starttime="20250314 15:53:29.805" endtime="20250314 15:53:32.719"/>
</kw>
<msg timestamp="20250314 15:53:32.720" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:29.805" endtime="20250314 15:53:32.720"/>
</kw>
<msg timestamp="20250314 15:53:32.720" level="INFO">${output_without_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 15:53:29.805" endtime="20250314 15:53:32.720"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:32.720" endtime="20250314 15:53:32.721"/>
</kw>
<status status="PASS" starttime="20250314 15:53:32.720" endtime="20250314 15:53:32.721"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:32.723" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:34.315" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:53:34.315" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:32.721" endtime="20250314 15:53:34.315"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:34.316" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:34.316" endtime="20250314 15:53:34.316"/>
</kw>
<msg timestamp="20250314 15:53:34.316" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:32.721" endtime="20250314 15:53:34.316"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:34.317" endtime="20250314 15:53:34.317"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:29.753" endtime="20250314 15:53:34.317"/>
</test>
<test id="s1-s4-t3" name="List om roles as JSON with OM service ID passed" line="48">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:34.319" endtime="20250314 15:53:34.319"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:34.322" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:34.326" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:34.326" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:34.320" endtime="20250314 15:53:34.326"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:34.327" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:34.327" endtime="20250314 15:53:34.327"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:34.327" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:34.327" endtime="20250314 15:53:34.327"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.320" endtime="20250314 15:53:34.328"/>
</kw>
<msg timestamp="20250314 15:53:34.328" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:34.319" endtime="20250314 15:53:34.328"/>
</kw>
<msg timestamp="20250314 15:53:34.328" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:34.319" endtime="20250314 15:53:34.328"/>
</kw>
<msg timestamp="20250314 15:53:34.328" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:34.319" endtime="20250314 15:53:34.328"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:34.328" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:34.328" endtime="20250314 15:53:34.328"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:34.332" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:34.365" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:34.366" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:34.330" endtime="20250314 15:53:34.366"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:34.366" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:34.366" endtime="20250314 15:53:34.367"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:34.367" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:34.367" endtime="20250314 15:53:34.367"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.329" endtime="20250314 15:53:34.367"/>
</kw>
<msg timestamp="20250314 15:53:34.368" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:34.329" endtime="20250314 15:53:34.368"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.329" endtime="20250314 15:53:34.368"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.329" endtime="20250314 15:53:34.368"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.318" endtime="20250314 15:53:34.368"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.318" endtime="20250314 15:53:34.368"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:34.371" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:37.209" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:37.209" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 15:53:34.369" endtime="20250314 15:53:37.209"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:37.210" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250314 15:53:37.209" endtime="20250314 15:53:37.210"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:37.210" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:37.210" endtime="20250314 15:53:37.210"/>
</kw>
<status status="PASS" starttime="20250314 15:53:34.369" endtime="20250314 15:53:37.211"/>
</kw>
<msg timestamp="20250314 15:53:37.211" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:34.368" endtime="20250314 15:53:37.211"/>
</kw>
<msg timestamp="20250314 15:53:37.211" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 15:53:34.368" endtime="20250314 15:53:37.211"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:37.215" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:37.220" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:37.220" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:37.212" endtime="20250314 15:53:37.220"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:37.221" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:37.221" endtime="20250314 15:53:37.221"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:37.221" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:37.221" endtime="20250314 15:53:37.222"/>
</kw>
<status status="PASS" starttime="20250314 15:53:37.212" endtime="20250314 15:53:37.222"/>
</kw>
<msg timestamp="20250314 15:53:37.222" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:37.212" endtime="20250314 15:53:37.222"/>
</kw>
<msg timestamp="20250314 15:53:37.222" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:37.211" endtime="20250314 15:53:37.222"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:53:37.222" endtime="20250314 15:53:37.223"/>
</kw>
<status status="PASS" starttime="20250314 15:53:37.211" endtime="20250314 15:53:37.223"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:37.226" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:40.014" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:40.014" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 15:53:37.224" endtime="20250314 15:53:40.014"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:40.015" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250314 15:53:40.014" endtime="20250314 15:53:40.015"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:40.015" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:40.015" endtime="20250314 15:53:40.016"/>
</kw>
<status status="PASS" starttime="20250314 15:53:37.223" endtime="20250314 15:53:40.016"/>
</kw>
<msg timestamp="20250314 15:53:40.016" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:37.223" endtime="20250314 15:53:40.016"/>
</kw>
<msg timestamp="20250314 15:53:40.016" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 15:53:37.223" endtime="20250314 15:53:40.016"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:40.020" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:40.025" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:40.025" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:40.018" endtime="20250314 15:53:40.025"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:40.026" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:40.026" endtime="20250314 15:53:40.026"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:40.026" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:40.026" endtime="20250314 15:53:40.026"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.017" endtime="20250314 15:53:40.027"/>
</kw>
<msg timestamp="20250314 15:53:40.027" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:40.017" endtime="20250314 15:53:40.027"/>
</kw>
<msg timestamp="20250314 15:53:40.027" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:40.016" endtime="20250314 15:53:40.027"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:53:40.027" endtime="20250314 15:53:40.028"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.016" endtime="20250314 15:53:40.028"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:34.317" endtime="20250314 15:53:40.028"/>
</test>
<test id="s1-s4-t4" name="List om roles as JSON without OM service ID passed" line="54">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:40.029" endtime="20250314 15:53:40.029"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:40.032" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:40.036" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:40.036" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:40.031" endtime="20250314 15:53:40.036"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:40.037" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:40.037" endtime="20250314 15:53:40.037"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:40.037" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:40.037" endtime="20250314 15:53:40.038"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.030" endtime="20250314 15:53:40.038"/>
</kw>
<msg timestamp="20250314 15:53:40.038" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:40.030" endtime="20250314 15:53:40.038"/>
</kw>
<msg timestamp="20250314 15:53:40.038" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:40.030" endtime="20250314 15:53:40.038"/>
</kw>
<msg timestamp="20250314 15:53:40.038" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:40.030" endtime="20250314 15:53:40.038"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:40.039" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:40.038" endtime="20250314 15:53:40.039"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:40.042" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:40.081" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:40.081" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:40.040" endtime="20250314 15:53:40.082"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:40.082" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:40.082" endtime="20250314 15:53:40.082"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:40.083" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:40.082" endtime="20250314 15:53:40.083"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.039" endtime="20250314 15:53:40.083"/>
</kw>
<msg timestamp="20250314 15:53:40.083" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:40.039" endtime="20250314 15:53:40.083"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.039" endtime="20250314 15:53:40.083"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.039" endtime="20250314 15:53:40.083"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.029" endtime="20250314 15:53:40.083"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.029" endtime="20250314 15:53:40.083"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:40.087" level="INFO">Running command 'ozone admin om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:42.735" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:42.735" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 15:53:40.084" endtime="20250314 15:53:42.735"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:42.736" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250314 15:53:42.735" endtime="20250314 15:53:42.736"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:42.736" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:42.736" endtime="20250314 15:53:42.736"/>
</kw>
<status status="PASS" starttime="20250314 15:53:40.084" endtime="20250314 15:53:42.737"/>
</kw>
<msg timestamp="20250314 15:53:42.737" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:40.084" endtime="20250314 15:53:42.737"/>
</kw>
<msg timestamp="20250314 15:53:42.737" level="INFO">${output_without_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 15:53:40.083" endtime="20250314 15:53:42.737"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_without_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:42.741" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:42.746" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:42.746" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:42.738" endtime="20250314 15:53:42.746"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:42.747" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:42.746" endtime="20250314 15:53:42.747"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:42.747" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:42.747" endtime="20250314 15:53:42.747"/>
</kw>
<status status="PASS" starttime="20250314 15:53:42.738" endtime="20250314 15:53:42.748"/>
</kw>
<msg timestamp="20250314 15:53:42.748" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:42.738" endtime="20250314 15:53:42.748"/>
</kw>
<msg timestamp="20250314 15:53:42.748" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 15:53:42.737" endtime="20250314 15:53:42.748"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:53:42.748" endtime="20250314 15:53:42.749"/>
</kw>
<status status="PASS" starttime="20250314 15:53:42.737" endtime="20250314 15:53:42.749"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:42.751" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:44.355" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:53:44.355" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:42.749" endtime="20250314 15:53:44.355"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:44.356" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:44.356" endtime="20250314 15:53:44.356"/>
</kw>
<msg timestamp="20250314 15:53:44.357" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:42.749" endtime="20250314 15:53:44.357"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:44.357" endtime="20250314 15:53:44.357"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:40.028" endtime="20250314 15:53:44.357"/>
</test>
<test id="s1-s4-t5" name="List om roles as TABLE with OM service ID passed" line="60">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:44.359" endtime="20250314 15:53:44.359"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:44.363" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:44.368" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:44.368" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:44.361" endtime="20250314 15:53:44.368"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:44.368" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:44.368" endtime="20250314 15:53:44.368"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:44.369" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:44.369" endtime="20250314 15:53:44.369"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.360" endtime="20250314 15:53:44.369"/>
</kw>
<msg timestamp="20250314 15:53:44.369" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:44.360" endtime="20250314 15:53:44.369"/>
</kw>
<msg timestamp="20250314 15:53:44.370" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:44.360" endtime="20250314 15:53:44.370"/>
</kw>
<msg timestamp="20250314 15:53:44.370" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:44.360" endtime="20250314 15:53:44.370"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:44.370" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:44.370" endtime="20250314 15:53:44.370"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:44.374" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:44.401" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:44.401" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:44.372" endtime="20250314 15:53:44.401"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:44.404" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:44.402" endtime="20250314 15:53:44.404"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:44.404" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:44.404" endtime="20250314 15:53:44.404"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.371" endtime="20250314 15:53:44.405"/>
</kw>
<msg timestamp="20250314 15:53:44.405" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:44.371" endtime="20250314 15:53:44.405"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.371" endtime="20250314 15:53:44.405"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.370" endtime="20250314 15:53:44.405"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.359" endtime="20250314 15:53:44.405"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.359" endtime="20250314 15:53:44.405"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:44.412" level="INFO">Running command 'ozone admin om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:47.064" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:47.064" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 15:53:44.407" endtime="20250314 15:53:47.064"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:47.065" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250314 15:53:47.064" endtime="20250314 15:53:47.065"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:47.065" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:47.065" endtime="20250314 15:53:47.065"/>
</kw>
<status status="PASS" starttime="20250314 15:53:44.406" endtime="20250314 15:53:47.065"/>
</kw>
<msg timestamp="20250314 15:53:47.065" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:44.406" endtime="20250314 15:53:47.065"/>
</kw>
<msg timestamp="20250314 15:53:47.065" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 15:53:44.405" endtime="20250314 15:53:47.066"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:47.066" endtime="20250314 15:53:47.066"/>
</kw>
<status status="PASS" starttime="20250314 15:53:47.066" endtime="20250314 15:53:47.066"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:47.069" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:49.799" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:49.799" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 15:53:47.067" endtime="20250314 15:53:49.799"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:49.800" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250314 15:53:49.800" endtime="20250314 15:53:49.800"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:49.801" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:49.800" endtime="20250314 15:53:49.801"/>
</kw>
<status status="PASS" starttime="20250314 15:53:47.067" endtime="20250314 15:53:49.801"/>
</kw>
<msg timestamp="20250314 15:53:49.801" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:47.067" endtime="20250314 15:53:49.801"/>
</kw>
<msg timestamp="20250314 15:53:49.801" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 15:53:47.067" endtime="20250314 15:53:49.801"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:49.802" endtime="20250314 15:53:49.802"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.801" endtime="20250314 15:53:49.802"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:44.358" endtime="20250314 15:53:49.802"/>
</test>
<test id="s1-s4-t6" name="List om roles as TABLE without OM service ID passed" line="66">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 15:53:49.804" endtime="20250314 15:53:49.804"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:49.807" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:49.811" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:49.811" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:49.805" endtime="20250314 15:53:49.811"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:49.812" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 15:53:49.812" endtime="20250314 15:53:49.812"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:49.812" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:49.812" endtime="20250314 15:53:49.813"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.805" endtime="20250314 15:53:49.813"/>
</kw>
<msg timestamp="20250314 15:53:49.813" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:49.805" endtime="20250314 15:53:49.813"/>
</kw>
<msg timestamp="20250314 15:53:49.813" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 15:53:49.804" endtime="20250314 15:53:49.813"/>
</kw>
<msg timestamp="20250314 15:53:49.813" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:49.804" endtime="20250314 15:53:49.813"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 15:53:49.813" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 15:53:49.813" endtime="20250314 15:53:49.814"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:49.817" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:49.834" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:49.834" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 15:53:49.815" endtime="20250314 15:53:49.834"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:49.834" level="INFO"/>
<status status="PASS" starttime="20250314 15:53:49.834" endtime="20250314 15:53:49.834"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:49.835" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:49.835" endtime="20250314 15:53:49.835"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.815" endtime="20250314 15:53:49.835"/>
</kw>
<msg timestamp="20250314 15:53:49.835" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:49.814" endtime="20250314 15:53:49.835"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.814" endtime="20250314 15:53:49.835"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.814" endtime="20250314 15:53:49.835"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.803" endtime="20250314 15:53:49.835"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.803" endtime="20250314 15:53:49.835"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:49.838" level="INFO">Running command 'ozone admin om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:52.626" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:52.626" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 15:53:49.836" endtime="20250314 15:53:52.626"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:52.627" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250314 15:53:52.627" endtime="20250314 15:53:52.627"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:52.628" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:52.627" endtime="20250314 15:53:52.628"/>
</kw>
<status status="PASS" starttime="20250314 15:53:49.836" endtime="20250314 15:53:52.628"/>
</kw>
<msg timestamp="20250314 15:53:52.628" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:49.836" endtime="20250314 15:53:52.628"/>
</kw>
<msg timestamp="20250314 15:53:52.628" level="INFO">${output_without_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 15:53:49.836" endtime="20250314 15:53:52.628"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 15:53:52.629" endtime="20250314 15:53:52.629"/>
</kw>
<status status="PASS" starttime="20250314 15:53:52.628" endtime="20250314 15:53:52.629"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:52.632" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:54.331" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:53:54.331" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:52.630" endtime="20250314 15:53:54.331"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:54.332" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:54.331" endtime="20250314 15:53:54.332"/>
</kw>
<msg timestamp="20250314 15:53:54.332" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:53:52.629" endtime="20250314 15:53:54.332"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:53:54.332" endtime="20250314 15:53:54.333"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:49.803" endtime="20250314 15:53:54.333"/>
</test>
<doc>Smoke test for listing om roles.</doc>
<status status="PASS" starttime="20250314 15:53:23.752" endtime="20250314 15:53:54.334"/>
</suite>
<suite id="s1-s5" name="Om-Leader-Transfer" source="/opt/hadoop/smoketest/omha/om-leader-transfer.robot">
<test id="s1-s5-t1" name="Transfer Leadership for OM with Valid ServiceID Specified" line="52">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:54.987" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:53:57.787" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:53:57.787" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:53:54.985" endtime="20250314 15:53:57.787"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:53:57.788" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:53:57.787" endtime="20250314 15:53:57.788"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:53:57.788" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:53:57.788" endtime="20250314 15:53:57.789"/>
</kw>
<status status="PASS" starttime="20250314 15:53:54.984" endtime="20250314 15:53:57.789"/>
</kw>
<msg timestamp="20250314 15:53:57.789" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:54.984" endtime="20250314 15:53:57.789"/>
</kw>
<msg timestamp="20250314 15:53:57.789" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:53:54.984" endtime="20250314 15:53:57.789"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:53:57.789" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:53:57.789" endtime="20250314 15:53:57.789"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:53:57.790" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:53:57.790" endtime="20250314 15:53:57.790"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:53:57.790" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:53:57.790" endtime="20250314 15:53:57.790"/>
</kw>
<msg timestamp="20250314 15:53:57.790" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:53:54.984" endtime="20250314 15:53:57.791"/>
</kw>
<msg timestamp="20250314 15:53:57.791" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250314 15:53:57.791" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 15:53:54.983" endtime="20250314 15:53:57.791"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:53:57.794" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:10.003" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:10.003" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 15:53:57.792" endtime="20250314 15:54:10.003"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:10.004" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 15:54:10.003" endtime="20250314 15:54:10.004"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:10.004" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:10.004" endtime="20250314 15:54:10.004"/>
</kw>
<status status="PASS" starttime="20250314 15:53:57.792" endtime="20250314 15:54:10.004"/>
</kw>
<msg timestamp="20250314 15:54:10.005" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:53:57.791" endtime="20250314 15:54:10.005"/>
</kw>
<msg timestamp="20250314 15:54:10.005" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 15:53:57.791" endtime="20250314 15:54:10.005"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:54:10.005" endtime="20250314 15:54:10.005"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:10.009" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:12.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:12.886" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:10.007" endtime="20250314 15:54:12.886"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:12.887" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:12.886" endtime="20250314 15:54:12.887"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:12.888" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:12.887" endtime="20250314 15:54:12.888"/>
</kw>
<status status="PASS" starttime="20250314 15:54:10.007" endtime="20250314 15:54:12.888"/>
</kw>
<msg timestamp="20250314 15:54:12.888" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:10.006" endtime="20250314 15:54:12.888"/>
</kw>
<msg timestamp="20250314 15:54:12.888" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:10.006" endtime="20250314 15:54:12.888"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:12.889" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:54:12.889" endtime="20250314 15:54:12.889"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:12.890" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:54:12.889" endtime="20250314 15:54:12.890"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:12.890" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:12.890" endtime="20250314 15:54:12.890"/>
</kw>
<msg timestamp="20250314 15:54:12.890" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:10.006" endtime="20250314 15:54:12.890"/>
</kw>
<msg timestamp="20250314 15:54:12.891" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250314 15:54:10.006" endtime="20250314 15:54:12.891"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:54:12.891" endtime="20250314 15:54:12.891"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250314 15:54:12.892" endtime="20250314 15:54:12.892"/>
</kw>
<status status="PASS" starttime="20250314 15:54:12.891" endtime="20250314 15:54:12.892"/>
</kw>
<status status="PASS" starttime="20250314 15:54:10.005" endtime="20250314 15:54:12.892"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:53:54.983" endtime="20250314 15:54:12.892"/>
</test>
<test id="s1-s5-t2" name="Transfer Leadership for OM with Multiple ServiceIDs, Valid ServiceID Specified" line="62">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:12.898" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:15.925" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:15.925" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:12.895" endtime="20250314 15:54:15.925"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:15.925" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:15.925" endtime="20250314 15:54:15.926"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:15.926" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:15.926" endtime="20250314 15:54:15.926"/>
</kw>
<status status="PASS" starttime="20250314 15:54:12.895" endtime="20250314 15:54:15.926"/>
</kw>
<msg timestamp="20250314 15:54:15.926" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:12.894" endtime="20250314 15:54:15.926"/>
</kw>
<msg timestamp="20250314 15:54:15.926" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:12.894" endtime="20250314 15:54:15.926"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:15.927" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:54:15.926" endtime="20250314 15:54:15.927"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:15.927" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:54:15.927" endtime="20250314 15:54:15.927"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:15.928" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:15.927" endtime="20250314 15:54:15.928"/>
</kw>
<msg timestamp="20250314 15:54:15.928" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:12.894" endtime="20250314 15:54:15.928"/>
</kw>
<msg timestamp="20250314 15:54:15.928" level="INFO">${leaderOM} = om1</msg>
<msg timestamp="20250314 15:54:15.928" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250314 15:54:12.894" endtime="20250314 15:54:15.928"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:15.931" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:22.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:22.261" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250314 15:54:15.929" endtime="20250314 15:54:22.261"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:22.262" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250314 15:54:22.261" endtime="20250314 15:54:22.262"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:22.262" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:22.262" endtime="20250314 15:54:22.263"/>
</kw>
<status status="PASS" starttime="20250314 15:54:15.929" endtime="20250314 15:54:22.263"/>
</kw>
<msg timestamp="20250314 15:54:22.263" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:15.929" endtime="20250314 15:54:22.263"/>
</kw>
<msg timestamp="20250314 15:54:22.263" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250314 15:54:15.928" endtime="20250314 15:54:22.263"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:54:22.263" endtime="20250314 15:54:22.263"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:22.268" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:25.217" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:25.218" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:22.265" endtime="20250314 15:54:25.218"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:25.219" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:25.218" endtime="20250314 15:54:25.219"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:25.219" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:25.219" endtime="20250314 15:54:25.219"/>
</kw>
<status status="PASS" starttime="20250314 15:54:22.265" endtime="20250314 15:54:25.219"/>
</kw>
<msg timestamp="20250314 15:54:25.219" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:22.265" endtime="20250314 15:54:25.219"/>
</kw>
<msg timestamp="20250314 15:54:25.220" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:22.265" endtime="20250314 15:54:25.220"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:25.220" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:54:25.220" endtime="20250314 15:54:25.220"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:25.220" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:54:25.220" endtime="20250314 15:54:25.220"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:25.221" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:25.220" endtime="20250314 15:54:25.221"/>
</kw>
<msg timestamp="20250314 15:54:25.221" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:22.264" endtime="20250314 15:54:25.221"/>
</kw>
<msg timestamp="20250314 15:54:25.221" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250314 15:54:22.264" endtime="20250314 15:54:25.221"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:54:25.221" endtime="20250314 15:54:25.222"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250314 15:54:25.222" endtime="20250314 15:54:25.222"/>
</kw>
<status status="PASS" starttime="20250314 15:54:25.222" endtime="20250314 15:54:25.222"/>
</kw>
<status status="PASS" starttime="20250314 15:54:22.263" endtime="20250314 15:54:25.222"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:54:12.893" endtime="20250314 15:54:25.223"/>
</test>
<test id="s1-s5-t3" name="Transfer Leadership for OM with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="72">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:25.227" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:28.118" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:28.118" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:25.225" endtime="20250314 15:54:28.118"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:28.119" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:28.118" endtime="20250314 15:54:28.119"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:28.119" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:28.119" endtime="20250314 15:54:28.120"/>
</kw>
<status status="PASS" starttime="20250314 15:54:25.224" endtime="20250314 15:54:28.120"/>
</kw>
<msg timestamp="20250314 15:54:28.120" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:25.224" endtime="20250314 15:54:28.120"/>
</kw>
<msg timestamp="20250314 15:54:28.120" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:25.224" endtime="20250314 15:54:28.120"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:28.120" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:54:28.120" endtime="20250314 15:54:28.120"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:28.121" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:54:28.121" endtime="20250314 15:54:28.121"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:28.121" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:28.121" endtime="20250314 15:54:28.121"/>
</kw>
<msg timestamp="20250314 15:54:28.121" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:25.224" endtime="20250314 15:54:28.121"/>
</kw>
<msg timestamp="20250314 15:54:28.122" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 15:54:25.224" endtime="20250314 15:54:28.122"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:28.124" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:29.815" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:54:29.815" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 15:54:28.122" endtime="20250314 15:54:29.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:29.816" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250314 15:54:29.815" endtime="20250314 15:54:29.816"/>
</kw>
<msg timestamp="20250314 15:54:29.816" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 15:54:28.122" endtime="20250314 15:54:29.816"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:54:29.816" endtime="20250314 15:54:29.816"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:54:25.223" endtime="20250314 15:54:29.816"/>
</test>
<test id="s1-s5-t4" name="Transfer Leadership for OM with Multiple ServiceIDs, Invalid ServiceID Specified" line="80">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:29.821" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:32.556" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:32.556" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:29.819" endtime="20250314 15:54:32.556"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:32.557" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:32.556" endtime="20250314 15:54:32.557"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:32.557" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:32.557" endtime="20250314 15:54:32.557"/>
</kw>
<status status="PASS" starttime="20250314 15:54:29.819" endtime="20250314 15:54:32.557"/>
</kw>
<msg timestamp="20250314 15:54:32.558" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:29.819" endtime="20250314 15:54:32.558"/>
</kw>
<msg timestamp="20250314 15:54:32.558" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:29.818" endtime="20250314 15:54:32.558"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:32.558" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:54:32.558" endtime="20250314 15:54:32.558"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:32.559" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:54:32.558" endtime="20250314 15:54:32.559"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:32.559" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:32.559" endtime="20250314 15:54:32.559"/>
</kw>
<msg timestamp="20250314 15:54:32.559" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:29.818" endtime="20250314 15:54:32.559"/>
</kw>
<msg timestamp="20250314 15:54:32.559" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 15:54:29.818" endtime="20250314 15:54:32.559"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:32.562" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:34.399" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:54:34.399" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:54:32.560" endtime="20250314 15:54:34.399"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:34.400" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:54:34.400" endtime="20250314 15:54:34.400"/>
</kw>
<msg timestamp="20250314 15:54:34.400" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:54:32.559" endtime="20250314 15:54:34.401"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:54:34.401" endtime="20250314 15:54:34.401"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:54:29.817" endtime="20250314 15:54:34.401"/>
</test>
<test id="s1-s5-t5" name="Transfer Leadership for OM without ServiceID specified" line="88">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:34.406" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:37.296" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:37.296" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:34.403" endtime="20250314 15:54:37.296"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:37.297" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:37.296" endtime="20250314 15:54:37.297"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:37.297" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:37.297" endtime="20250314 15:54:37.297"/>
</kw>
<status status="PASS" starttime="20250314 15:54:34.403" endtime="20250314 15:54:37.297"/>
</kw>
<msg timestamp="20250314 15:54:37.297" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:34.403" endtime="20250314 15:54:37.298"/>
</kw>
<msg timestamp="20250314 15:54:37.298" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:54:34.403" endtime="20250314 15:54:37.298"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:37.298" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:54:37.298" endtime="20250314 15:54:37.298"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:37.298" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:54:37.298" endtime="20250314 15:54:37.298"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:37.299" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:37.299" endtime="20250314 15:54:37.299"/>
</kw>
<msg timestamp="20250314 15:54:37.299" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:34.402" endtime="20250314 15:54:37.299"/>
</kw>
<msg timestamp="20250314 15:54:37.299" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250314 15:54:37.299" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 15:54:34.402" endtime="20250314 15:54:37.299"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:37.303" level="INFO">Running command 'ozone admin om transfer -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:51.498" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:51.498" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 15:54:37.301" endtime="20250314 15:54:51.498"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:51.499" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 15:54:51.499" endtime="20250314 15:54:51.499"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:51.500" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:51.499" endtime="20250314 15:54:51.500"/>
</kw>
<status status="PASS" starttime="20250314 15:54:37.300" endtime="20250314 15:54:51.500"/>
</kw>
<msg timestamp="20250314 15:54:51.500" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:37.300" endtime="20250314 15:54:51.500"/>
</kw>
<msg timestamp="20250314 15:54:51.500" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 15:54:37.300" endtime="20250314 15:54:51.500"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:54:51.500" endtime="20250314 15:54:51.501"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:51.504" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:54.662" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:54.662" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:51.502" endtime="20250314 15:54:54.662"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:54.663" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:54.662" endtime="20250314 15:54:54.663"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:54.663" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:54.663" endtime="20250314 15:54:54.663"/>
</kw>
<status status="PASS" starttime="20250314 15:54:51.502" endtime="20250314 15:54:54.663"/>
</kw>
<msg timestamp="20250314 15:54:54.663" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:51.502" endtime="20250314 15:54:54.664"/>
</kw>
<msg timestamp="20250314 15:54:54.664" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:51.502" endtime="20250314 15:54:54.664"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:54.664" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:54:54.664" endtime="20250314 15:54:54.664"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:54.664" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:54:54.664" endtime="20250314 15:54:54.664"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:54.665" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:54.665" endtime="20250314 15:54:54.665"/>
</kw>
<msg timestamp="20250314 15:54:54.665" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:51.501" endtime="20250314 15:54:54.665"/>
</kw>
<msg timestamp="20250314 15:54:54.665" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250314 15:54:51.501" endtime="20250314 15:54:54.665"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:54:54.665" endtime="20250314 15:54:54.666"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250314 15:54:54.666" endtime="20250314 15:54:54.667"/>
</kw>
<status status="PASS" starttime="20250314 15:54:54.666" endtime="20250314 15:54:54.667"/>
</kw>
<status status="PASS" starttime="20250314 15:54:51.501" endtime="20250314 15:54:54.667"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:54:34.402" endtime="20250314 15:54:54.667"/>
</test>
<test id="s1-s5-t6" name="Transfer Leadership for OM with Multiple ServiceIDs, No ServiceID Specified" line="98">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:54.672" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:57.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:54:57.661" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:54.670" endtime="20250314 15:54:57.661"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:57.662" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:57.661" endtime="20250314 15:54:57.662"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:54:57.662" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:54:57.662" endtime="20250314 15:54:57.662"/>
</kw>
<status status="PASS" starttime="20250314 15:54:54.669" endtime="20250314 15:54:57.662"/>
</kw>
<msg timestamp="20250314 15:54:57.662" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:54.669" endtime="20250314 15:54:57.662"/>
</kw>
<msg timestamp="20250314 15:54:57.662" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:54.669" endtime="20250314 15:54:57.662"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:57.663" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:54:57.663" endtime="20250314 15:54:57.663"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:57.663" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:54:57.663" endtime="20250314 15:54:57.663"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:54:57.664" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:54:57.663" endtime="20250314 15:54:57.664"/>
</kw>
<msg timestamp="20250314 15:54:57.664" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:54.669" endtime="20250314 15:54:57.664"/>
</kw>
<msg timestamp="20250314 15:54:57.664" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250314 15:54:54.668" endtime="20250314 15:54:57.664"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:57.667" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:54:59.134" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:54:59.134" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:54:57.665" endtime="20250314 15:54:59.134"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:54:59.135" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:54:59.134" endtime="20250314 15:54:59.135"/>
</kw>
<msg timestamp="20250314 15:54:59.135" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:54:57.664" endtime="20250314 15:54:59.135"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:54:59.135" endtime="20250314 15:54:59.135"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:54:54.668" endtime="20250314 15:54:59.135"/>
</test>
<test id="s1-s5-t7" name="Transfer Leadership for OM randomly with Valid ServiceID Specified" line="106">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:54:59.140" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:01.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:01.923" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:59.138" endtime="20250314 15:55:01.924"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:01.924" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:01.924" endtime="20250314 15:55:01.924"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:01.925" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:01.925" endtime="20250314 15:55:01.925"/>
</kw>
<status status="PASS" starttime="20250314 15:54:59.137" endtime="20250314 15:55:01.925"/>
</kw>
<msg timestamp="20250314 15:55:01.925" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:54:59.137" endtime="20250314 15:55:01.925"/>
</kw>
<msg timestamp="20250314 15:55:01.925" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:54:59.137" endtime="20250314 15:55:01.925"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:01.926" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:55:01.925" endtime="20250314 15:55:01.926"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:01.926" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:55:01.926" endtime="20250314 15:55:01.926"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:01.927" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:55:01.926" endtime="20250314 15:55:01.927"/>
</kw>
<msg timestamp="20250314 15:55:01.927" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:54:59.137" endtime="20250314 15:55:01.927"/>
</kw>
<msg timestamp="20250314 15:55:01.927" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250314 15:54:59.136" endtime="20250314 15:55:01.927"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:01.930" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:12.956" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:12.956" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:01.928" endtime="20250314 15:55:12.956"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:12.957" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:12.956" endtime="20250314 15:55:12.957"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:12.957" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:12.957" endtime="20250314 15:55:12.957"/>
</kw>
<status status="PASS" starttime="20250314 15:55:01.928" endtime="20250314 15:55:12.957"/>
</kw>
<msg timestamp="20250314 15:55:12.957" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:01.927" endtime="20250314 15:55:12.958"/>
</kw>
<msg timestamp="20250314 15:55:12.958" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:01.927" endtime="20250314 15:55:12.958"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:55:12.958" endtime="20250314 15:55:12.958"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:12.962" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:15.917" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:15.917" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:12.960" endtime="20250314 15:55:15.917"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:15.918" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:15.917" endtime="20250314 15:55:15.918"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:15.918" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:15.918" endtime="20250314 15:55:15.918"/>
</kw>
<status status="PASS" starttime="20250314 15:55:12.960" endtime="20250314 15:55:15.919"/>
</kw>
<msg timestamp="20250314 15:55:15.919" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:12.960" endtime="20250314 15:55:15.919"/>
</kw>
<msg timestamp="20250314 15:55:15.919" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:12.959" endtime="20250314 15:55:15.919"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:15.919" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:55:15.919" endtime="20250314 15:55:15.919"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:15.920" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:55:15.919" endtime="20250314 15:55:15.920"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:15.920" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:55:15.920" endtime="20250314 15:55:15.920"/>
</kw>
<msg timestamp="20250314 15:55:15.920" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:55:12.959" endtime="20250314 15:55:15.920"/>
</kw>
<msg timestamp="20250314 15:55:15.920" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250314 15:55:12.959" endtime="20250314 15:55:15.920"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:55:15.920" endtime="20250314 15:55:15.921"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250314 15:55:15.921" endtime="20250314 15:55:15.921"/>
</kw>
<status status="PASS" starttime="20250314 15:55:12.958" endtime="20250314 15:55:15.921"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:54:59.136" endtime="20250314 15:55:15.921"/>
</test>
<test id="s1-s5-t8" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Valid ServiceID Specified" line="115">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:15.926" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:18.760" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:18.760" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:15.924" endtime="20250314 15:55:18.761"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:18.761" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:18.761" endtime="20250314 15:55:18.762"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:18.762" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:18.762" endtime="20250314 15:55:18.762"/>
</kw>
<status status="PASS" starttime="20250314 15:55:15.923" endtime="20250314 15:55:18.762"/>
</kw>
<msg timestamp="20250314 15:55:18.762" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:15.923" endtime="20250314 15:55:18.762"/>
</kw>
<msg timestamp="20250314 15:55:18.762" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:15.923" endtime="20250314 15:55:18.762"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:18.763" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:55:18.763" endtime="20250314 15:55:18.763"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:18.763" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:55:18.763" endtime="20250314 15:55:18.763"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:18.764" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:55:18.763" endtime="20250314 15:55:18.764"/>
</kw>
<msg timestamp="20250314 15:55:18.764" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:55:15.923" endtime="20250314 15:55:18.764"/>
</kw>
<msg timestamp="20250314 15:55:18.764" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" starttime="20250314 15:55:15.922" endtime="20250314 15:55:18.764"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:18.767" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:30.916" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:30.916" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:18.765" endtime="20250314 15:55:30.916"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:30.917" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:30.916" endtime="20250314 15:55:30.917"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:30.917" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:30.917" endtime="20250314 15:55:30.917"/>
</kw>
<status status="PASS" starttime="20250314 15:55:18.765" endtime="20250314 15:55:30.917"/>
</kw>
<msg timestamp="20250314 15:55:30.917" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:18.764" endtime="20250314 15:55:30.918"/>
</kw>
<msg timestamp="20250314 15:55:30.918" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:18.764" endtime="20250314 15:55:30.918"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:55:30.918" endtime="20250314 15:55:30.918"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:30.922" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:33.878" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:33.878" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:30.920" endtime="20250314 15:55:33.878"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:33.879" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:33.878" endtime="20250314 15:55:33.879"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:33.879" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:33.879" endtime="20250314 15:55:33.879"/>
</kw>
<status status="PASS" starttime="20250314 15:55:30.919" endtime="20250314 15:55:33.879"/>
</kw>
<msg timestamp="20250314 15:55:33.880" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:30.919" endtime="20250314 15:55:33.880"/>
</kw>
<msg timestamp="20250314 15:55:33.880" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:30.919" endtime="20250314 15:55:33.880"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:33.880" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:55:33.880" endtime="20250314 15:55:33.880"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:33.881" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:55:33.880" endtime="20250314 15:55:33.881"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:33.881" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:55:33.881" endtime="20250314 15:55:33.881"/>
</kw>
<msg timestamp="20250314 15:55:33.881" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:55:30.919" endtime="20250314 15:55:33.881"/>
</kw>
<msg timestamp="20250314 15:55:33.881" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250314 15:55:30.919" endtime="20250314 15:55:33.881"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:55:33.881" endtime="20250314 15:55:33.882"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250314 15:55:33.882" endtime="20250314 15:55:33.882"/>
</kw>
<status status="PASS" starttime="20250314 15:55:30.918" endtime="20250314 15:55:33.882"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:55:15.922" endtime="20250314 15:55:33.882"/>
</test>
<test id="s1-s5-t9" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="125">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:33.886" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:35.416" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:55:35.416" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 15:55:33.883" endtime="20250314 15:55:35.416"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:35.417" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250314 15:55:35.417" endtime="20250314 15:55:35.417"/>
</kw>
<msg timestamp="20250314 15:55:35.418" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 15:55:33.883" endtime="20250314 15:55:35.418"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:55:35.418" endtime="20250314 15:55:35.418"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:55:33.883" endtime="20250314 15:55:35.418"/>
</test>
<test id="s1-s5-t10" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Invalid ServiceID Specified" line="130">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:35.422" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:37.106" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:55:37.106" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:55:35.420" endtime="20250314 15:55:37.106"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:37.107" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:55:37.106" endtime="20250314 15:55:37.107"/>
</kw>
<msg timestamp="20250314 15:55:37.107" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 15:55:35.419" endtime="20250314 15:55:37.107"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:55:37.107" endtime="20250314 15:55:37.108"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:55:35.419" endtime="20250314 15:55:37.108"/>
</test>
<test id="s1-s5-t11" name="Transfer Leadership for OM randomly without ServiceID specified" line="136">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:37.112" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:39.915" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:39.915" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:37.110" endtime="20250314 15:55:39.915"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:39.916" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:39.915" endtime="20250314 15:55:39.916"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:39.916" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:39.916" endtime="20250314 15:55:39.916"/>
</kw>
<status status="PASS" starttime="20250314 15:55:37.110" endtime="20250314 15:55:39.916"/>
</kw>
<msg timestamp="20250314 15:55:39.916" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:37.110" endtime="20250314 15:55:39.917"/>
</kw>
<msg timestamp="20250314 15:55:39.917" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 15:55:37.109" endtime="20250314 15:55:39.917"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:39.917" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 15:55:39.917" endtime="20250314 15:55:39.917"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:39.917" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 15:55:39.917" endtime="20250314 15:55:39.917"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:39.918" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:55:39.918" endtime="20250314 15:55:39.918"/>
</kw>
<msg timestamp="20250314 15:55:39.918" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 15:55:37.109" endtime="20250314 15:55:39.918"/>
</kw>
<msg timestamp="20250314 15:55:39.918" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250314 15:55:37.109" endtime="20250314 15:55:39.918"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:39.922" level="INFO">Running command 'ozone admin om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:55.228" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:55.228" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:39.919" endtime="20250314 15:55:55.228"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:55.229" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:55.228" endtime="20250314 15:55:55.229"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:55.229" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:55.229" endtime="20250314 15:55:55.229"/>
</kw>
<status status="PASS" starttime="20250314 15:55:39.919" endtime="20250314 15:55:55.229"/>
</kw>
<msg timestamp="20250314 15:55:55.230" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:39.919" endtime="20250314 15:55:55.230"/>
</kw>
<msg timestamp="20250314 15:55:55.230" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 15:55:39.918" endtime="20250314 15:55:55.230"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:55:55.230" endtime="20250314 15:55:55.230"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:55.234" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:57.973" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:55:57.973" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:55.232" endtime="20250314 15:55:57.973"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:57.974" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:57.973" endtime="20250314 15:55:57.974"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:55:57.975" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:55:57.974" endtime="20250314 15:55:57.975"/>
</kw>
<status status="PASS" starttime="20250314 15:55:55.232" endtime="20250314 15:55:57.975"/>
</kw>
<msg timestamp="20250314 15:55:57.975" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:55:55.231" endtime="20250314 15:55:57.975"/>
</kw>
<msg timestamp="20250314 15:55:57.975" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 15:55:55.231" endtime="20250314 15:55:57.975"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:57.976" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 15:55:57.975" endtime="20250314 15:55:57.976"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:57.976" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 15:55:57.976" endtime="20250314 15:55:57.976"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 15:55:57.976" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 15:55:57.976" endtime="20250314 15:55:57.976"/>
</kw>
<msg timestamp="20250314 15:55:57.977" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 15:55:55.231" endtime="20250314 15:55:57.977"/>
</kw>
<msg timestamp="20250314 15:55:57.977" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250314 15:55:55.231" endtime="20250314 15:55:57.977"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:55:57.977" endtime="20250314 15:55:57.977"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250314 15:55:57.977" endtime="20250314 15:55:57.978"/>
</kw>
<status status="PASS" starttime="20250314 15:55:55.230" endtime="20250314 15:55:57.978"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:55:37.108" endtime="20250314 15:55:57.978"/>
</test>
<test id="s1-s5-t12" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, No ServiceID Specified" line="146">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:55:57.982" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:55:59.491" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 15:55:59.491" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:55:57.979" endtime="20250314 15:55:59.491"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:55:59.492" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:55:59.491" endtime="20250314 15:55:59.492"/>
</kw>
<msg timestamp="20250314 15:55:59.492" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 15:55:57.979" endtime="20250314 15:55:59.492"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:55:59.492" endtime="20250314 15:55:59.493"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:55:57.978" endtime="20250314 15:55:59.493"/>
</test>
<doc>Smoketest for OM leader transfer</doc>
<status status="PASS" starttime="20250314 15:53:54.948" endtime="20250314 15:55:59.494"/>
</suite>
<suite id="s1-s6" name="Scm-Leader-Transfer" source="/opt/hadoop/smoketest/scmha/scm-leader-transfer.robot">
<test id="s1-s6-t1" name="Transfer Leadership" line="47">
<kw name="Get SCM Leader Node">
<var>${leaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:56:00.139" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:56:02.324" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:56:02.324" level="INFO">${output} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:56:00.136" endtime="20250314 15:56:02.324"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:02.325" level="INFO">scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:56:02.324" endtime="20250314 15:56:02.325"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:56:02.325" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:56:02.325" endtime="20250314 15:56:02.326"/>
</kw>
<status status="PASS" starttime="20250314 15:56:00.136" endtime="20250314 15:56:02.326"/>
</kw>
<msg timestamp="20250314 15:56:02.326" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:56:00.136" endtime="20250314 15:56:02.326"/>
</kw>
<msg timestamp="20250314 15:56:02.326" level="INFO">${result} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:56:00.136" endtime="20250314 15:56:02.326"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:02.326" level="INFO">scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:56:02.326" endtime="20250314 15:56:02.326"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:56:02.326" endtime="20250314 15:56:02.327"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:56:02.327" endtime="20250314 15:56:02.327"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250314 15:56:02.327" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250314 15:56:02.328" level="INFO">${scmLine} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116</msg>
<status status="PASS" starttime="20250314 15:56:02.327" endtime="20250314 15:56:02.328"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250314 15:56:02.328" level="INFO">${splits} = ['scm1.org', '9894', 'LEADER', 'ce857ab0-9568-40e6-9a1d-22afdbc8aee6', '172.25.0.116']</msg>
<status status="PASS" starttime="20250314 15:56:02.328" endtime="20250314 15:56:02.328"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250314 15:56:02.329" level="INFO">${leaderSCM} = ce857ab0-9568-40e6-9a1d-22afdbc8aee6</msg>
<status status="PASS" starttime="20250314 15:56:02.328" endtime="20250314 15:56:02.329"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:02.329" level="INFO">Leader SCM: ce857ab0-9568-40e6-9a1d-22afdbc8aee6</msg>
<status status="PASS" starttime="20250314 15:56:02.329" endtime="20250314 15:56:02.329"/>
</kw>
<msg timestamp="20250314 15:56:02.330" level="INFO">${leaderSCM} = ce857ab0-9568-40e6-9a1d-22afdbc8aee6</msg>
<status status="PASS" starttime="20250314 15:56:00.135" endtime="20250314 15:56:02.330"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:02.330" level="INFO">Leader SCM: ce857ab0-9568-40e6-9a1d-22afdbc8aee6</msg>
<status status="PASS" starttime="20250314 15:56:02.330" endtime="20250314 15:56:02.330"/>
</kw>
<kw name="Get SCM UUID">
<var>${target_scm_uuid}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:56:02.333" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:56:04.573" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:56:04.573" level="INFO">${output} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:56:02.331" endtime="20250314 15:56:04.573"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:04.574" level="INFO">scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:56:04.574" endtime="20250314 15:56:04.574"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:56:04.575" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:56:04.574" endtime="20250314 15:56:04.575"/>
</kw>
<status status="PASS" starttime="20250314 15:56:02.331" endtime="20250314 15:56:04.575"/>
</kw>
<msg timestamp="20250314 15:56:04.575" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:56:02.331" endtime="20250314 15:56:04.575"/>
</kw>
<msg timestamp="20250314 15:56:04.575" level="INFO">${result} = scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:56:02.330" endtime="20250314 15:56:04.575"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:04.576" level="INFO">scm1.org:9894:LEADER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:56:04.575" endtime="20250314 15:56:04.576"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scm_line}</var>
<arg>${result}</arg>
<arg>${TARGET_SCM}</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250314 15:56:04.576" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250314 15:56:04.576" level="INFO">${scm_line} = scm2.org:9894:FOLLOWER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117</msg>
<status status="PASS" starttime="20250314 15:56:04.576" endtime="20250314 15:56:04.576"/>
</kw>
<kw name="Split String" library="String">
<var>${scm_split}</var>
<arg>${scm_line}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250314 15:56:04.576" level="INFO">${scm_split} = ['scm2.org', '9894', 'FOLLOWER', 'afc867e2-a622-4b78-9f11-235e0c3f42c2', '172.25.0.117']</msg>
<status status="PASS" starttime="20250314 15:56:04.576" endtime="20250314 15:56:04.576"/>
</kw>
<kw name="Strip String" library="String">
<var>${scm_uuid}</var>
<arg>${scm_split[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250314 15:56:04.577" level="INFO">${scm_uuid} = afc867e2-a622-4b78-9f11-235e0c3f42c2</msg>
<status status="PASS" starttime="20250314 15:56:04.577" endtime="20250314 15:56:04.577"/>
</kw>
<msg timestamp="20250314 15:56:04.577" level="INFO">${target_scm_uuid} = afc867e2-a622-4b78-9f11-235e0c3f42c2</msg>
<status status="PASS" starttime="20250314 15:56:02.330" endtime="20250314 15:56:04.577"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm transfer --service-id=scmservice -n ${target_scm_uuid}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:56:04.581" level="INFO">Running command 'ozone admin scm transfer --service-id=scmservice -n afc867e2-a622-4b78-9f11-235e0c3f42c2 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:56:11.193" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:56:11.193" level="INFO">${output} = Transfer leadership successfully to afc867e2-a622-4b78-9f11-235e0c3f42c2.</msg>
<status status="PASS" starttime="20250314 15:56:04.578" endtime="20250314 15:56:11.193"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:11.194" level="INFO">Transfer leadership successfully to afc867e2-a622-4b78-9f11-235e0c3f42c2.</msg>
<status status="PASS" starttime="20250314 15:56:11.193" endtime="20250314 15:56:11.194"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:56:11.194" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:56:11.194" endtime="20250314 15:56:11.194"/>
</kw>
<status status="PASS" starttime="20250314 15:56:04.578" endtime="20250314 15:56:11.195"/>
</kw>
<msg timestamp="20250314 15:56:11.195" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:56:04.578" endtime="20250314 15:56:11.195"/>
</kw>
<msg timestamp="20250314 15:56:11.195" level="INFO">${result} = Transfer leadership successfully to afc867e2-a622-4b78-9f11-235e0c3f42c2.</msg>
<status status="PASS" starttime="20250314 15:56:04.578" endtime="20250314 15:56:11.195"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:11.195" level="INFO">Transfer leadership successfully to afc867e2-a622-4b78-9f11-235e0c3f42c2.</msg>
<status status="PASS" starttime="20250314 15:56:11.195" endtime="20250314 15:56:11.195"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:56:11.195" endtime="20250314 15:56:11.196"/>
</kw>
<kw name="Get SCM Leader Node">
<var>${newLeaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 15:56:11.199" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 15:56:15.697" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 15:56:15.697" level="INFO">${output} = scm1.org:9894:FOLLOWER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:LEADER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:56:11.197" endtime="20250314 15:56:15.697"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:15.698" level="INFO">scm1.org:9894:FOLLOWER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:LEADER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:56:15.698" endtime="20250314 15:56:15.698"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 15:56:15.699" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 15:56:15.699" endtime="20250314 15:56:15.699"/>
</kw>
<status status="PASS" starttime="20250314 15:56:11.196" endtime="20250314 15:56:15.699"/>
</kw>
<msg timestamp="20250314 15:56:15.699" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 15:56:11.196" endtime="20250314 15:56:15.699"/>
</kw>
<msg timestamp="20250314 15:56:15.699" level="INFO">${result} = scm1.org:9894:FOLLOWER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:LEADER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db9...</msg>
<status status="PASS" starttime="20250314 15:56:11.196" endtime="20250314 15:56:15.699"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:15.700" level="INFO">scm1.org:9894:FOLLOWER:ce857ab0-9568-40e6-9a1d-22afdbc8aee6:172.25.0.116
scm2.org:9894:LEADER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117
scm3.org:9894:FOLLOWER:d1394a5f-3368-4063-aeba-c09872db92f3:172.25.0.118</msg>
<status status="PASS" starttime="20250314 15:56:15.700" endtime="20250314 15:56:15.700"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:56:15.700" endtime="20250314 15:56:15.700"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 15:56:15.700" endtime="20250314 15:56:15.701"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250314 15:56:15.701" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250314 15:56:15.701" level="INFO">${scmLine} = scm2.org:9894:LEADER:afc867e2-a622-4b78-9f11-235e0c3f42c2:172.25.0.117</msg>
<status status="PASS" starttime="20250314 15:56:15.701" endtime="20250314 15:56:15.701"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250314 15:56:15.701" level="INFO">${splits} = ['scm2.org', '9894', 'LEADER', 'afc867e2-a622-4b78-9f11-235e0c3f42c2', '172.25.0.117']</msg>
<status status="PASS" starttime="20250314 15:56:15.701" endtime="20250314 15:56:15.701"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250314 15:56:15.702" level="INFO">${leaderSCM} = afc867e2-a622-4b78-9f11-235e0c3f42c2</msg>
<status status="PASS" starttime="20250314 15:56:15.702" endtime="20250314 15:56:15.702"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 15:56:15.703" level="INFO">Leader SCM: afc867e2-a622-4b78-9f11-235e0c3f42c2</msg>
<status status="PASS" starttime="20250314 15:56:15.702" endtime="20250314 15:56:15.703"/>
</kw>
<msg timestamp="20250314 15:56:15.703" level="INFO">${newLeaderSCM} = afc867e2-a622-4b78-9f11-235e0c3f42c2</msg>
<status status="PASS" starttime="20250314 15:56:11.196" endtime="20250314 15:56:15.703"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderSCM}</arg>
<arg>${newLeaderSCM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 15:56:15.703" endtime="20250314 15:56:15.703"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 15:56:00.135" endtime="20250314 15:56:15.703"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250314 15:56:00.100" endtime="20250314 15:56:15.704"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="191874"/>
</suite>
<statistics>
<total>
<stat pass="29" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="29" fail="0" skip="0" id="s1" name="ozonesecure-ha-leadership">ozonesecure-ha-leadership</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-leadership.Kinit</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Scmrole">ozonesecure-ha-leadership.Scmrole</stat>
<stat pass="6" fail="0" skip="0" id="s1-s3" name="Om-Fetch-Key">ozonesecure-ha-leadership.Om-Fetch-Key</stat>
<stat pass="6" fail="0" skip="0" id="s1-s4" name="Om-Roles">ozonesecure-ha-leadership.Om-Roles</stat>
<stat pass="12" fail="0" skip="0" id="s1-s5" name="Om-Leader-Transfer">ozonesecure-ha-leadership.Om-Leader-Transfer</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Scm-Leader-Transfer">ozonesecure-ha-leadership.Scm-Leader-Transfer</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
