<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.1.1 (Python 3.9.21 on linux)" generated="20250314 06:28:13.443" rpa="false" schemaversion="4">
<suite id="s1" name="ozonesecure-ha-leadership">
<suite id="s1-s1" name="Kinit" source="/opt/hadoop/smoketest/kinit.robot">
<test id="s1-s1-t1" name="Kinit" line="27">
<kw name="Kinit test user" library="commonlib">
<arg>${testuser}</arg>
<arg>${testuser}.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:24:49.858" endtime="20250314 06:24:49.858"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:49.862" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:49.866" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:49.866" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:24:49.859" endtime="20250314 06:24:49.866"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:49.866" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:24:49.866" endtime="20250314 06:24:49.866"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:49.867" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:49.866" endtime="20250314 06:24:49.867"/>
</kw>
<status status="PASS" starttime="20250314 06:24:49.859" endtime="20250314 06:24:49.867"/>
</kw>
<msg timestamp="20250314 06:24:49.867" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:49.859" endtime="20250314 06:24:49.867"/>
</kw>
<msg timestamp="20250314 06:24:49.867" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:24:49.859" endtime="20250314 06:24:49.867"/>
</kw>
<msg timestamp="20250314 06:24:49.867" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:24:49.858" endtime="20250314 06:24:49.867"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:24:49.868" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:24:49.868" endtime="20250314 06:24:49.868"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:49.871" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:49.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:49.897" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:24:49.869" endtime="20250314 06:24:49.897"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:49.897" level="INFO"/>
<status status="PASS" starttime="20250314 06:24:49.897" endtime="20250314 06:24:49.897"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:49.898" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:49.897" endtime="20250314 06:24:49.898"/>
</kw>
<status status="PASS" starttime="20250314 06:24:49.869" endtime="20250314 06:24:49.898"/>
</kw>
<msg timestamp="20250314 06:24:49.898" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:49.869" endtime="20250314 06:24:49.898"/>
</kw>
<status status="PASS" starttime="20250314 06:24:49.868" endtime="20250314 06:24:49.898"/>
</kw>
<status status="PASS" starttime="20250314 06:24:49.868" endtime="20250314 06:24:49.898"/>
</kw>
<status status="PASS" starttime="20250314 06:24:49.857" endtime="20250314 06:24:49.898"/>
</kw>
<timeout value="2 minutes"/>
<status status="PASS" starttime="20250314 06:24:49.857" endtime="20250314 06:24:49.898"/>
</test>
<doc>Kinit test user</doc>
<status status="PASS" starttime="20250314 06:24:49.822" endtime="20250314 06:24:49.899"/>
</suite>
<suite id="s1-s2" name="Scmrole" source="/opt/hadoop/smoketest/admincli/scmrole.robot">
<test id="s1-s2-t1" name="Run scm roles" line="26">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:50.558" level="INFO">Running command 'ozone admin scm roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:52.882" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:52.882" level="INFO">${output} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:24:50.556" endtime="20250314 06:24:52.882"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:52.883" level="INFO">scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:24:52.882" endtime="20250314 06:24:52.883"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:52.883" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:52.883" endtime="20250314 06:24:52.884"/>
</kw>
<status status="PASS" starttime="20250314 06:24:50.556" endtime="20250314 06:24:52.884"/>
</kw>
<msg timestamp="20250314 06:24:52.884" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:50.555" endtime="20250314 06:24:52.884"/>
</kw>
<msg timestamp="20250314 06:24:52.884" level="INFO">${output} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:24:50.555" endtime="20250314 06:24:52.884"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[scm:9894(:LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:24:52.884" endtime="20250314 06:24:52.885"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:24:50.555" endtime="20250314 06:24:52.885"/>
</test>
<test id="s1-s2-t2" name="List scm roles as JSON" line="30">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:52.889" level="INFO">Running command 'ozone admin scm roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:55.488" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:55.488" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "1706aaa3-04fd-4b46-8b12-89d83b761083",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250314 06:24:52.886" endtime="20250314 06:24:55.488"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:55.489" level="INFO">{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "1706aaa3-04fd-4b46-8b12-89d83b761083",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "0974e632-9300-44b6-9da1-663af16668c6",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "1309d609-dde0-4799-ad7d-e3b0f792e3e6",
    "InetAddress" : "172.25.0.117"
  }
}</msg>
<status status="PASS" starttime="20250314 06:24:55.488" endtime="20250314 06:24:55.489"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:55.490" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:55.489" endtime="20250314 06:24:55.490"/>
</kw>
<status status="PASS" starttime="20250314 06:24:52.886" endtime="20250314 06:24:55.490"/>
</kw>
<msg timestamp="20250314 06:24:55.490" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:52.886" endtime="20250314 06:24:55.490"/>
</kw>
<msg timestamp="20250314 06:24:55.491" level="INFO">${output} = {
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "1706aaa3-04fd-4b46-8b12-89d83b761083",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "addr...</msg>
<status status="PASS" starttime="20250314 06:24:52.886" endtime="20250314 06:24:55.491"/>
</kw>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq -r '.[] | select(.raftPeerRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:55.495" level="INFO">Running command 'echo '{
  "scm1.org" : {
    "address" : "scm1.org:9894",
    "raftPeerRole" : "LEADER",
    "ID" : "1706aaa3-04fd-4b46-8b12-89d83b761083",
    "InetAddress" : "172.25.0.116"
  },
  "scm3.org" : {
    "address" : "scm3.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "0974e632-9300-44b6-9da1-663af16668c6",
    "InetAddress" : "172.25.0.118"
  },
  "scm2.org" : {
    "address" : "scm2.org:9894",
    "raftPeerRole" : "FOLLOWER",
    "ID" : "1309d609-dde0-4799-ad7d-e3b0f792e3e6",
    "InetAddress" : "172.25.0.117"
  }
}' | jq -r '.[] | select(.raftPeerRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:55.501" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:55.501" level="INFO">${output} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "1706aaa3-04fd-4b46-8b12-89d83b761083",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250314 06:24:55.492" endtime="20250314 06:24:55.501"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:55.502" level="INFO">{
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "1706aaa3-04fd-4b46-8b12-89d83b761083",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250314 06:24:55.501" endtime="20250314 06:24:55.502"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:55.502" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:55.502" endtime="20250314 06:24:55.502"/>
</kw>
<status status="PASS" starttime="20250314 06:24:55.492" endtime="20250314 06:24:55.503"/>
</kw>
<msg timestamp="20250314 06:24:55.503" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:55.491" endtime="20250314 06:24:55.503"/>
</kw>
<msg timestamp="20250314 06:24:55.503" level="INFO">${leader} = {
  "address": "scm1.org:9894",
  "raftPeerRole": "LEADER",
  "ID": "1706aaa3-04fd-4b46-8b12-89d83b761083",
  "InetAddress": "172.25.0.116"
}</msg>
<status status="PASS" starttime="20250314 06:24:55.491" endtime="20250314 06:24:55.503"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:24:55.503" endtime="20250314 06:24:55.504"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:24:52.885" endtime="20250314 06:24:55.504"/>
</test>
<test id="s1-s2-t3" name="List scm roles as TABLE" line="35">
<kw name="Execute" library="os">
<var>${output}</var>
<arg>ozone admin scm roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:55.509" level="INFO">Running command 'ozone admin scm roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:57.772" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:57.772" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250314 06:24:55.507" endtime="20250314 06:24:57.772"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:57.773" level="INFO">+-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+------------+----------+--------------------------------------+--------------+
| Host Name | Ratis Port |   Role   |               Node ID                | Host Address |
+-----------+------------+----------+--------------------------------------+--------------+
| scm1.org  |    9894    |  LEADER  | 1706aaa3-04fd-4b46-8b12-89d83b761083 | 172.25.0.116 |
| scm3.org  |    9894    | FOLLOWER | 0974e632-9300-44b6-9da1-663af16668c6 | 172.25.0.118 |
| scm2.org  |    9894    | FOLLOWER | 1309d609-dde0-4799-ad7d-e3b0f792e3e6 | 172.25.0.117 |
+-----------+------------+----------+--------------------------------------+--------------+
</msg>
<status status="PASS" starttime="20250314 06:24:57.772" endtime="20250314 06:24:57.773"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:57.773" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:57.773" endtime="20250314 06:24:57.773"/>
</kw>
<status status="PASS" starttime="20250314 06:24:55.506" endtime="20250314 06:24:57.774"/>
</kw>
<msg timestamp="20250314 06:24:57.774" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:55.506" endtime="20250314 06:24:57.774"/>
</kw>
<msg timestamp="20250314 06:24:57.774" level="INFO">${output} = +-----------------------------------------------------------------------------------------+
|                             Storage Container Manager Roles                             |
+-----------+---...</msg>
<status status="PASS" starttime="20250314 06:24:55.506" endtime="20250314 06:24:57.774"/>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:24:57.774" endtime="20250314 06:24:57.774"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:24:55.505" endtime="20250314 06:24:57.775"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250314 06:24:50.519" endtime="20250314 06:24:57.775"/>
</suite>
<suite id="s1-s3" name="Om-Fetch-Key" source="/opt/hadoop/smoketest/omha/om-fetch-key.robot">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:24:58.446" endtime="20250314 06:24:58.446"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:58.449" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:58.453" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:58.453" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:24:58.447" endtime="20250314 06:24:58.453"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:58.454" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:24:58.454" endtime="20250314 06:24:58.454"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:58.454" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:58.454" endtime="20250314 06:24:58.454"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.447" endtime="20250314 06:24:58.455"/>
</kw>
<msg timestamp="20250314 06:24:58.455" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:58.447" endtime="20250314 06:24:58.455"/>
</kw>
<msg timestamp="20250314 06:24:58.455" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:24:58.446" endtime="20250314 06:24:58.455"/>
</kw>
<msg timestamp="20250314 06:24:58.455" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:24:58.446" endtime="20250314 06:24:58.455"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:24:58.455" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:24:58.455" endtime="20250314 06:24:58.455"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:58.459" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:24:58.494" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:24:58.495" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:24:58.457" endtime="20250314 06:24:58.495"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:24:58.495" level="INFO"/>
<status status="PASS" starttime="20250314 06:24:58.495" endtime="20250314 06:24:58.495"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:24:58.496" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:24:58.495" endtime="20250314 06:24:58.496"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.456" endtime="20250314 06:24:58.496"/>
</kw>
<msg timestamp="20250314 06:24:58.496" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:58.456" endtime="20250314 06:24:58.496"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.456" endtime="20250314 06:24:58.496"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.456" endtime="20250314 06:24:58.496"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.446" endtime="20250314 06:24:58.496"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.445" endtime="20250314 06:24:58.496"/>
</kw>
<test id="s1-s3-t1" name="Fetch Key with Valid ServiceID Specified" line="31">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:24:58.500" level="INFO">Running command 'ozone admin om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:01.257" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:01.257" level="INFO">${output} = Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:24:58.498" endtime="20250314 06:25:01.258"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:01.258" level="INFO">Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:01.258" endtime="20250314 06:25:01.258"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:01.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:01.259" endtime="20250314 06:25:01.259"/>
</kw>
<status status="PASS" starttime="20250314 06:24:58.497" endtime="20250314 06:25:01.259"/>
</kw>
<msg timestamp="20250314 06:25:01.259" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:24:58.497" endtime="20250314 06:25:01.259"/>
</kw>
<msg timestamp="20250314 06:25:01.259" level="INFO">${result} = Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:24:58.497" endtime="20250314 06:25:01.259"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:01.260" endtime="20250314 06:25:01.260"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:24:58.496" endtime="20250314 06:25:01.260"/>
</test>
<test id="s1-s3-t2" name="Fetch Key with Multiple ServiceIDs, Valid ServiceID Specified" line="35">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:01.264" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:04.007" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:04.007" level="INFO">${output} = Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:01.262" endtime="20250314 06:25:04.007"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:04.008" level="INFO">Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:04.007" endtime="20250314 06:25:04.008"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:04.008" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:04.008" endtime="20250314 06:25:04.008"/>
</kw>
<status status="PASS" starttime="20250314 06:25:01.261" endtime="20250314 06:25:04.008"/>
</kw>
<msg timestamp="20250314 06:25:04.008" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:01.261" endtime="20250314 06:25:04.008"/>
</kw>
<msg timestamp="20250314 06:25:04.009" level="INFO">${result} = Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:01.261" endtime="20250314 06:25:04.009"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:04.009" endtime="20250314 06:25:04.009"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:01.260" endtime="20250314 06:25:04.009"/>
</test>
<test id="s1-s3-t3" name="Fetch Key with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="39">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:04.012" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice3 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:05.599" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:25:05.599" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 06:25:04.010" endtime="20250314 06:25:05.599"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:05.600" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250314 06:25:05.600" endtime="20250314 06:25:05.600"/>
</kw>
<msg timestamp="20250314 06:25:05.601" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 06:25:04.010" endtime="20250314 06:25:05.601"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:05.601" endtime="20250314 06:25:05.601"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:04.009" endtime="20250314 06:25:05.601"/>
</test>
<test id="s1-s3-t4" name="Fetch Key with Multiple ServiceIDs, Invalid ServiceID Specified" line="43">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:05.605" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om fetch-key --service-id=omservice2 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:07.297" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:25:07.297" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:25:05.603" endtime="20250314 06:25:07.297"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:07.298" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:25:07.298" endtime="20250314 06:25:07.298"/>
</kw>
<msg timestamp="20250314 06:25:07.298" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:25:05.602" endtime="20250314 06:25:07.298"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:07.298" endtime="20250314 06:25:07.299"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:05.602" endtime="20250314 06:25:07.299"/>
</test>
<test id="s1-s3-t5" name="Fetch Key without OM Service ID" line="47">
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om fetch-key</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:07.303" level="INFO">Running command 'ozone admin om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:09.986" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:09.986" level="INFO">${output} = Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:07.301" endtime="20250314 06:25:09.986"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:09.987" level="INFO">Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:09.986" endtime="20250314 06:25:09.987"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:09.987" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:09.987" endtime="20250314 06:25:09.987"/>
</kw>
<status status="PASS" starttime="20250314 06:25:07.300" endtime="20250314 06:25:09.987"/>
</kw>
<msg timestamp="20250314 06:25:09.987" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:07.300" endtime="20250314 06:25:09.988"/>
</kw>
<msg timestamp="20250314 06:25:09.988" level="INFO">${result} = Current Secret Key ID: 283ef974-178e-41ca-ad2b-dce461bcdd9c</msg>
<status status="PASS" starttime="20250314 06:25:07.300" endtime="20250314 06:25:09.988"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Current Secret Key ID</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:09.988" endtime="20250314 06:25:09.988"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:07.299" endtime="20250314 06:25:09.988"/>
</test>
<test id="s1-s3-t6" name="Fetch Key with Multiple ServiceIDs, No ServiceID Specified" line="51">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:09.992" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om fetch-key 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:11.679" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:25:11.679" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:09.989" endtime="20250314 06:25:11.679"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:11.680" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:11.679" endtime="20250314 06:25:11.680"/>
</kw>
<msg timestamp="20250314 06:25:11.680" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:09.989" endtime="20250314 06:25:11.680"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:11.680" endtime="20250314 06:25:11.680"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:09.989" endtime="20250314 06:25:11.680"/>
</test>
<doc>Smoke test for om fetch-key</doc>
<status status="PASS" starttime="20250314 06:24:58.410" endtime="20250314 06:25:11.681"/>
</suite>
<suite id="s1-s4" name="Om-Roles" source="/opt/hadoop/smoketest/omha/om-roles.robot">
<test id="s1-s4-t1" name="List om roles with OM service ID passed" line="36">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:25:12.348" endtime="20250314 06:25:12.348"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:12.352" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:12.356" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:12.356" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:12.349" endtime="20250314 06:25:12.356"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:12.357" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:25:12.356" endtime="20250314 06:25:12.357"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:12.357" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:12.357" endtime="20250314 06:25:12.357"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.349" endtime="20250314 06:25:12.357"/>
</kw>
<msg timestamp="20250314 06:25:12.357" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:12.349" endtime="20250314 06:25:12.357"/>
</kw>
<msg timestamp="20250314 06:25:12.358" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:12.349" endtime="20250314 06:25:12.358"/>
</kw>
<msg timestamp="20250314 06:25:12.358" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:12.348" endtime="20250314 06:25:12.358"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:25:12.358" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:12.358" endtime="20250314 06:25:12.358"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:12.361" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:12.417" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:12.417" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:25:12.359" endtime="20250314 06:25:12.417"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:12.418" level="INFO"/>
<status status="PASS" starttime="20250314 06:25:12.417" endtime="20250314 06:25:12.418"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:12.418" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:12.418" endtime="20250314 06:25:12.418"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.359" endtime="20250314 06:25:12.418"/>
</kw>
<msg timestamp="20250314 06:25:12.418" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:12.359" endtime="20250314 06:25:12.418"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.359" endtime="20250314 06:25:12.418"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.358" endtime="20250314 06:25:12.418"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.348" endtime="20250314 06:25:12.418"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.347" endtime="20250314 06:25:12.418"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:12.421" level="INFO">Running command 'ozone admin om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:15.296" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:15.296" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:12.419" endtime="20250314 06:25:15.296"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:15.297" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:15.296" endtime="20250314 06:25:15.297"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:15.297" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:15.297" endtime="20250314 06:25:15.298"/>
</kw>
<status status="PASS" starttime="20250314 06:25:12.419" endtime="20250314 06:25:15.298"/>
</kw>
<msg timestamp="20250314 06:25:15.298" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:12.419" endtime="20250314 06:25:15.298"/>
</kw>
<msg timestamp="20250314 06:25:15.298" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:12.419" endtime="20250314 06:25:15.298"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:25:15.299" endtime="20250314 06:25:15.299"/>
</kw>
<status status="PASS" starttime="20250314 06:25:15.298" endtime="20250314 06:25:15.299"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:15.302" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:18.128" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:18.128" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:15.300" endtime="20250314 06:25:18.128"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:18.129" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:18.128" endtime="20250314 06:25:18.129"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:18.129" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:18.129" endtime="20250314 06:25:18.129"/>
</kw>
<status status="PASS" starttime="20250314 06:25:15.300" endtime="20250314 06:25:18.129"/>
</kw>
<msg timestamp="20250314 06:25:18.130" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:15.299" endtime="20250314 06:25:18.130"/>
</kw>
<msg timestamp="20250314 06:25:18.130" level="INFO">${output_with_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:15.299" endtime="20250314 06:25:18.130"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:25:18.130" endtime="20250314 06:25:18.131"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.130" endtime="20250314 06:25:18.131"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:12.347" endtime="20250314 06:25:18.131"/>
</test>
<test id="s1-s4-t2" name="List om roles without OM service ID passed" line="42">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:25:18.133" endtime="20250314 06:25:18.133"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:18.136" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:18.140" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:18.140" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:18.134" endtime="20250314 06:25:18.140"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:18.141" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:25:18.140" endtime="20250314 06:25:18.141"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:18.141" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:18.141" endtime="20250314 06:25:18.141"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.134" endtime="20250314 06:25:18.141"/>
</kw>
<msg timestamp="20250314 06:25:18.142" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:18.133" endtime="20250314 06:25:18.142"/>
</kw>
<msg timestamp="20250314 06:25:18.142" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:18.133" endtime="20250314 06:25:18.142"/>
</kw>
<msg timestamp="20250314 06:25:18.142" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:18.133" endtime="20250314 06:25:18.142"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:25:18.142" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:18.142" endtime="20250314 06:25:18.142"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:18.146" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:18.172" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:18.172" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:25:18.143" endtime="20250314 06:25:18.172"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:18.173" level="INFO"/>
<status status="PASS" starttime="20250314 06:25:18.172" endtime="20250314 06:25:18.173"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:18.173" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:18.173" endtime="20250314 06:25:18.173"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.143" endtime="20250314 06:25:18.173"/>
</kw>
<msg timestamp="20250314 06:25:18.173" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:18.143" endtime="20250314 06:25:18.174"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.143" endtime="20250314 06:25:18.174"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.142" endtime="20250314 06:25:18.174"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.132" endtime="20250314 06:25:18.174"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.132" endtime="20250314 06:25:18.174"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:18.178" level="INFO">Running command 'ozone admin om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:21.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:21.117" level="INFO">${output} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:18.175" endtime="20250314 06:25:21.117"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:21.117" level="INFO">om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:21.117" endtime="20250314 06:25:21.118"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:21.118" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:21.118" endtime="20250314 06:25:21.118"/>
</kw>
<status status="PASS" starttime="20250314 06:25:18.175" endtime="20250314 06:25:21.118"/>
</kw>
<msg timestamp="20250314 06:25:21.118" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:18.174" endtime="20250314 06:25:21.118"/>
</kw>
<msg timestamp="20250314 06:25:21.118" level="INFO">${output_without_id_passed} = om1 : FOLLOWER (om1)
om2 : FOLLOWER (om2)
om3 : LEADER (om3)</msg>
<status status="PASS" starttime="20250314 06:25:18.174" endtime="20250314 06:25:21.118"/>
</kw>
<kw name="Assert Leader Present">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>[om (: LEADER|)]</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:25:21.119" endtime="20250314 06:25:21.119"/>
</kw>
<status status="PASS" starttime="20250314 06:25:21.119" endtime="20250314 06:25:21.119"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:21.122" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:22.699" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:25:22.699" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:21.120" endtime="20250314 06:25:22.699"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:22.700" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:22.700" endtime="20250314 06:25:22.700"/>
</kw>
<msg timestamp="20250314 06:25:22.700" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:21.119" endtime="20250314 06:25:22.700"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:22.701" endtime="20250314 06:25:22.701"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:18.131" endtime="20250314 06:25:22.701"/>
</test>
<test id="s1-s4-t3" name="List om roles as JSON with OM service ID passed" line="48">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:25:22.703" endtime="20250314 06:25:22.703"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:22.706" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:22.711" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:22.711" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:22.704" endtime="20250314 06:25:22.711"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:22.711" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:25:22.711" endtime="20250314 06:25:22.711"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:22.712" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:22.711" endtime="20250314 06:25:22.712"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.704" endtime="20250314 06:25:22.712"/>
</kw>
<msg timestamp="20250314 06:25:22.712" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:22.704" endtime="20250314 06:25:22.712"/>
</kw>
<msg timestamp="20250314 06:25:22.712" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:22.704" endtime="20250314 06:25:22.712"/>
</kw>
<msg timestamp="20250314 06:25:22.712" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:22.703" endtime="20250314 06:25:22.712"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:25:22.713" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:22.713" endtime="20250314 06:25:22.713"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:22.716" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:22.742" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:22.742" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:25:22.714" endtime="20250314 06:25:22.742"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:22.743" level="INFO"/>
<status status="PASS" starttime="20250314 06:25:22.742" endtime="20250314 06:25:22.743"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:22.744" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:22.743" endtime="20250314 06:25:22.744"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.714" endtime="20250314 06:25:22.744"/>
</kw>
<msg timestamp="20250314 06:25:22.744" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:22.714" endtime="20250314 06:25:22.744"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.713" endtime="20250314 06:25:22.744"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.713" endtime="20250314 06:25:22.744"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.703" endtime="20250314 06:25:22.744"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.702" endtime="20250314 06:25:22.744"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:22.748" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:25.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:25.641" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 06:25:22.745" endtime="20250314 06:25:25.641"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:25.642" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250314 06:25:25.641" endtime="20250314 06:25:25.642"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:25.643" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:25.642" endtime="20250314 06:25:25.643"/>
</kw>
<status status="PASS" starttime="20250314 06:25:22.745" endtime="20250314 06:25:25.643"/>
</kw>
<msg timestamp="20250314 06:25:25.643" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:22.745" endtime="20250314 06:25:25.643"/>
</kw>
<msg timestamp="20250314 06:25:25.643" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 06:25:22.744" endtime="20250314 06:25:25.643"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:25.647" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:25.653" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:25.653" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:25.645" endtime="20250314 06:25:25.653"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:25.653" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:25.653" endtime="20250314 06:25:25.653"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:25.654" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:25.654" endtime="20250314 06:25:25.654"/>
</kw>
<status status="PASS" starttime="20250314 06:25:25.644" endtime="20250314 06:25:25.654"/>
</kw>
<msg timestamp="20250314 06:25:25.654" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:25.644" endtime="20250314 06:25:25.654"/>
</kw>
<msg timestamp="20250314 06:25:25.654" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:25.644" endtime="20250314 06:25:25.654"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:25:25.654" endtime="20250314 06:25:25.655"/>
</kw>
<status status="PASS" starttime="20250314 06:25:25.643" endtime="20250314 06:25:25.655"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:25.658" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:28.740" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:28.740" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 06:25:25.656" endtime="20250314 06:25:28.740"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:28.741" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250314 06:25:28.740" endtime="20250314 06:25:28.741"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:28.741" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:28.741" endtime="20250314 06:25:28.741"/>
</kw>
<status status="PASS" starttime="20250314 06:25:25.656" endtime="20250314 06:25:28.741"/>
</kw>
<msg timestamp="20250314 06:25:28.741" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:25.655" endtime="20250314 06:25:28.741"/>
</kw>
<msg timestamp="20250314 06:25:28.742" level="INFO">${output_with_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 06:25:25.655" endtime="20250314 06:25:28.742"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_with_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:28.746" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:28.751" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:28.751" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:28.743" endtime="20250314 06:25:28.751"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:28.752" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:28.752" endtime="20250314 06:25:28.752"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:28.752" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:28.752" endtime="20250314 06:25:28.753"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.743" endtime="20250314 06:25:28.753"/>
</kw>
<msg timestamp="20250314 06:25:28.753" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:28.743" endtime="20250314 06:25:28.753"/>
</kw>
<msg timestamp="20250314 06:25:28.753" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:28.742" endtime="20250314 06:25:28.753"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:25:28.753" endtime="20250314 06:25:28.754"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.742" endtime="20250314 06:25:28.754"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:22.702" endtime="20250314 06:25:28.754"/>
</test>
<test id="s1-s4-t4" name="List om roles as JSON without OM service ID passed" line="54">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:25:28.756" endtime="20250314 06:25:28.756"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:28.759" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:28.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:28.763" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:28.757" endtime="20250314 06:25:28.763"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:28.763" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:25:28.763" endtime="20250314 06:25:28.764"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:28.764" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:28.764" endtime="20250314 06:25:28.764"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.757" endtime="20250314 06:25:28.764"/>
</kw>
<msg timestamp="20250314 06:25:28.764" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:28.756" endtime="20250314 06:25:28.764"/>
</kw>
<msg timestamp="20250314 06:25:28.764" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:28.756" endtime="20250314 06:25:28.764"/>
</kw>
<msg timestamp="20250314 06:25:28.765" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:28.756" endtime="20250314 06:25:28.765"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:25:28.765" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:28.765" endtime="20250314 06:25:28.765"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:28.768" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:28.785" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:28.785" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:25:28.766" endtime="20250314 06:25:28.785"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:28.786" level="INFO"/>
<status status="PASS" starttime="20250314 06:25:28.785" endtime="20250314 06:25:28.786"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:28.786" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:28.786" endtime="20250314 06:25:28.786"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.766" endtime="20250314 06:25:28.787"/>
</kw>
<msg timestamp="20250314 06:25:28.787" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:28.766" endtime="20250314 06:25:28.787"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.765" endtime="20250314 06:25:28.787"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.765" endtime="20250314 06:25:28.787"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.755" endtime="20250314 06:25:28.787"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.755" endtime="20250314 06:25:28.787"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --json</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:28.791" level="INFO">Running command 'ozone admin om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:31.763" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:31.763" level="INFO">${output} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 06:25:28.788" endtime="20250314 06:25:31.763"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:31.764" level="INFO">[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]</msg>
<status status="PASS" starttime="20250314 06:25:31.764" endtime="20250314 06:25:31.764"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:31.765" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:31.765" endtime="20250314 06:25:31.765"/>
</kw>
<status status="PASS" starttime="20250314 06:25:28.788" endtime="20250314 06:25:31.765"/>
</kw>
<msg timestamp="20250314 06:25:31.765" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:28.788" endtime="20250314 06:25:31.765"/>
</kw>
<msg timestamp="20250314 06:25:31.765" level="INFO">${output_without_id_passed} = [ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "...</msg>
<status status="PASS" starttime="20250314 06:25:28.787" endtime="20250314 06:25:31.765"/>
</kw>
<kw name="Assert Leader Present in JSON">
<arg>${output_without_id_passed}</arg>
<kw name="Execute" library="os">
<var>${leader}</var>
<arg>echo '${output}' | jq '.[] | select(.[] | .serverRole == "LEADER")'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:31.769" level="INFO">Running command 'echo '[ {
  "om1" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om1"
  }
}, {
  "om2" : {
    "serverRole" : "FOLLOWER",
    "hostname" : "om2"
  }
}, {
  "om3" : {
    "serverRole" : "LEADER",
    "hostname" : "om3"
  }
} ]' | jq '.[] | select(.[] | .serverRole == "LEADER")' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:31.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:31.775" level="INFO">${output} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:31.767" endtime="20250314 06:25:31.775"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:31.775" level="INFO">{
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:31.775" endtime="20250314 06:25:31.775"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:31.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:31.775" endtime="20250314 06:25:31.776"/>
</kw>
<status status="PASS" starttime="20250314 06:25:31.766" endtime="20250314 06:25:31.776"/>
</kw>
<msg timestamp="20250314 06:25:31.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:31.766" endtime="20250314 06:25:31.776"/>
</kw>
<msg timestamp="20250314 06:25:31.776" level="INFO">${leader} = {
  "om3": {
    "serverRole": "LEADER",
    "hostname": "om3"
  }
}</msg>
<status status="PASS" starttime="20250314 06:25:31.766" endtime="20250314 06:25:31.776"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leader}</arg>
<arg>${EMPTY}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:25:31.776" endtime="20250314 06:25:31.777"/>
</kw>
<status status="PASS" starttime="20250314 06:25:31.766" endtime="20250314 06:25:31.777"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:31.779" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --json 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:33.369" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:25:33.369" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:31.777" endtime="20250314 06:25:33.369"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:33.370" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:33.370" endtime="20250314 06:25:33.370"/>
</kw>
<msg timestamp="20250314 06:25:33.370" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:31.777" endtime="20250314 06:25:33.370"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:33.371" endtime="20250314 06:25:33.371"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:28.754" endtime="20250314 06:25:33.371"/>
</test>
<test id="s1-s4-t5" name="List om roles as TABLE with OM service ID passed" line="60">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:25:33.373" endtime="20250314 06:25:33.373"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:33.376" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:33.380" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:33.380" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:33.374" endtime="20250314 06:25:33.380"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:33.381" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:25:33.380" endtime="20250314 06:25:33.381"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:33.381" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:33.381" endtime="20250314 06:25:33.381"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.374" endtime="20250314 06:25:33.382"/>
</kw>
<msg timestamp="20250314 06:25:33.382" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:33.373" endtime="20250314 06:25:33.382"/>
</kw>
<msg timestamp="20250314 06:25:33.382" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:33.373" endtime="20250314 06:25:33.382"/>
</kw>
<msg timestamp="20250314 06:25:33.382" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:33.373" endtime="20250314 06:25:33.382"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:25:33.383" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:33.382" endtime="20250314 06:25:33.383"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:33.386" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:33.414" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:33.414" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:25:33.384" endtime="20250314 06:25:33.414"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:33.415" level="INFO"/>
<status status="PASS" starttime="20250314 06:25:33.415" endtime="20250314 06:25:33.415"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:33.415" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:33.415" endtime="20250314 06:25:33.416"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.384" endtime="20250314 06:25:33.416"/>
</kw>
<msg timestamp="20250314 06:25:33.416" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:33.383" endtime="20250314 06:25:33.416"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.383" endtime="20250314 06:25:33.416"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.383" endtime="20250314 06:25:33.416"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.372" endtime="20250314 06:25:33.416"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.372" endtime="20250314 06:25:33.416"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:33.419" level="INFO">Running command 'ozone admin om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:36.190" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:36.190" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 06:25:33.417" endtime="20250314 06:25:36.190"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:36.191" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250314 06:25:36.191" endtime="20250314 06:25:36.191"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:36.192" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:36.191" endtime="20250314 06:25:36.192"/>
</kw>
<status status="PASS" starttime="20250314 06:25:33.417" endtime="20250314 06:25:36.192"/>
</kw>
<msg timestamp="20250314 06:25:36.192" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:33.417" endtime="20250314 06:25:36.192"/>
</kw>
<msg timestamp="20250314 06:25:36.192" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 06:25:33.416" endtime="20250314 06:25:36.192"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:25:36.192" endtime="20250314 06:25:36.193"/>
</kw>
<status status="PASS" starttime="20250314 06:25:36.192" endtime="20250314 06:25:36.193"/>
</kw>
<kw name="Execute" library="os">
<var>${output_with_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:36.196" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --service-id=omservice --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:38.884" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:38.884" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 06:25:36.194" endtime="20250314 06:25:38.885"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:38.886" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250314 06:25:38.885" endtime="20250314 06:25:38.886"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:38.886" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:38.886" endtime="20250314 06:25:38.886"/>
</kw>
<status status="PASS" starttime="20250314 06:25:36.194" endtime="20250314 06:25:38.886"/>
</kw>
<msg timestamp="20250314 06:25:38.887" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:36.193" endtime="20250314 06:25:38.887"/>
</kw>
<msg timestamp="20250314 06:25:38.887" level="INFO">${output_with_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 06:25:36.193" endtime="20250314 06:25:38.887"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_with_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:25:38.887" endtime="20250314 06:25:38.888"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.887" endtime="20250314 06:25:38.888"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:33.371" endtime="20250314 06:25:38.888"/>
</test>
<test id="s1-s4-t6" name="List om roles as TABLE without OM service ID passed" line="66">
<kw name="Run Keyword If" library="BuiltIn" type="SETUP">
<arg>'${SECURITY_ENABLED}' == 'true'</arg>
<arg>Kinit test user</arg>
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Kinit test user" library="commonlib">
<arg>testuser</arg>
<arg>testuser.keytab</arg>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${SECURITY_ENABLED}' == 'false'</arg>
<arg>Skip in unsecure cluster</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20250314 06:25:38.889" endtime="20250314 06:25:38.889"/>
</kw>
<kw name="Get test user principal" library="commonlib">
<var>${TEST_USER}</var>
<arg>${user}</arg>
<kw name="Execute" library="os">
<var>${instance}</var>
<arg>hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:38.893" level="INFO">Running command 'hostname | sed 's/scm[0-9].org/scm/;s/scm[0-9]/scm/;s/om[0-9]/om/' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:38.897" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:38.897" level="INFO">${output} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:38.891" endtime="20250314 06:25:38.897"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:38.897" level="INFO">s3g</msg>
<status status="PASS" starttime="20250314 06:25:38.897" endtime="20250314 06:25:38.898"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:38.898" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:38.898" endtime="20250314 06:25:38.898"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.890" endtime="20250314 06:25:38.898"/>
</kw>
<msg timestamp="20250314 06:25:38.898" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:38.890" endtime="20250314 06:25:38.898"/>
</kw>
<msg timestamp="20250314 06:25:38.898" level="INFO">${instance} = s3g</msg>
<status status="PASS" starttime="20250314 06:25:38.890" endtime="20250314 06:25:38.898"/>
</kw>
<msg timestamp="20250314 06:25:38.899" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:38.889" endtime="20250314 06:25:38.899"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TEST_USER}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250314 06:25:38.899" level="INFO">${TEST_USER} = testuser/s3g@EXAMPLE.COM</msg>
<status status="PASS" starttime="20250314 06:25:38.899" endtime="20250314 06:25:38.899"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>2min</arg>
<arg>10sec</arg>
<arg>Execute</arg>
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Execute" library="os">
<arg>kinit -k -t /etc/security/keytabs/${keytab} ${TEST_USER}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:38.902" level="INFO">Running command 'kinit -k -t /etc/security/keytabs/testuser.keytab testuser/s3g@EXAMPLE.COM 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:38.936" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:38.937" level="INFO">${output} = </msg>
<status status="PASS" starttime="20250314 06:25:38.900" endtime="20250314 06:25:38.937"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:38.937" level="INFO"/>
<status status="PASS" starttime="20250314 06:25:38.937" endtime="20250314 06:25:38.937"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:38.938" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:38.937" endtime="20250314 06:25:38.938"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.900" endtime="20250314 06:25:38.938"/>
</kw>
<msg timestamp="20250314 06:25:38.938" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:38.900" endtime="20250314 06:25:38.938"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.899" endtime="20250314 06:25:38.938"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.899" endtime="20250314 06:25:38.938"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.889" endtime="20250314 06:25:38.938"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.889" endtime="20250314 06:25:38.938"/>
</kw>
<kw name="Execute" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin om roles --table</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:38.941" level="INFO">Running command 'ozone admin om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:41.676" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:41.676" level="INFO">${output} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 06:25:38.939" endtime="20250314 06:25:41.676"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:41.677" level="INFO">+--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | FOLLOWER |
|    om2    |   om2   | FOLLOWER |
|    om3    |   om3   |  LEADER  |
+-----------+---------+----------+
</msg>
<status status="PASS" starttime="20250314 06:25:41.676" endtime="20250314 06:25:41.677"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:41.677" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:41.677" endtime="20250314 06:25:41.677"/>
</kw>
<status status="PASS" starttime="20250314 06:25:38.939" endtime="20250314 06:25:41.678"/>
</kw>
<msg timestamp="20250314 06:25:41.678" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:38.939" endtime="20250314 06:25:41.678"/>
</kw>
<msg timestamp="20250314 06:25:41.678" level="INFO">${output_without_id_passed} = +--------------------------------+
|      Ozone Manager Roles       |
+-----------+---------+----------+
| Host Name | Node ID |   Role   |
+-----------+---------+----------+
|    om1    |   om1   | F...</msg>
<status status="PASS" starttime="20250314 06:25:38.938" endtime="20250314 06:25:41.678"/>
</kw>
<kw name="Assert Leader Present in TABLE">
<arg>${output_without_id_passed}</arg>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${output}</arg>
<arg>\\|.*LEADER.*</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20250314 06:25:41.678" endtime="20250314 06:25:41.679"/>
</kw>
<status status="PASS" starttime="20250314 06:25:41.678" endtime="20250314 06:25:41.679"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${output_without_id_passed}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:41.681" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om roles --table 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:43.205" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:25:43.205" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:41.679" endtime="20250314 06:25:43.205"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:43.206" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:43.206" endtime="20250314 06:25:43.206"/>
</kw>
<msg timestamp="20250314 06:25:43.207" level="INFO">${output_without_id_passed} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:25:41.679" endtime="20250314 06:25:43.207"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${output_without_id_passed}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:43.207" endtime="20250314 06:25:43.207"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:38.888" endtime="20250314 06:25:43.207"/>
</test>
<doc>Smoke test for listing om roles.</doc>
<status status="PASS" starttime="20250314 06:25:12.313" endtime="20250314 06:25:43.208"/>
</suite>
<suite id="s1-s5" name="Om-Leader-Transfer" source="/opt/hadoop/smoketest/omha/om-leader-transfer.robot">
<test id="s1-s5-t1" name="Transfer Leadership for OM with Valid ServiceID Specified" line="52">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:43.870" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:46.753" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:46.753" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:25:43.868" endtime="20250314 06:25:46.753"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:46.754" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:25:46.753" endtime="20250314 06:25:46.754"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:46.754" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:46.754" endtime="20250314 06:25:46.754"/>
</kw>
<status status="PASS" starttime="20250314 06:25:43.867" endtime="20250314 06:25:46.755"/>
</kw>
<msg timestamp="20250314 06:25:46.755" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:43.867" endtime="20250314 06:25:46.755"/>
</kw>
<msg timestamp="20250314 06:25:46.755" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:25:43.867" endtime="20250314 06:25:46.755"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:25:46.755" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:25:46.755" endtime="20250314 06:25:46.755"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:25:46.756" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:25:46.755" endtime="20250314 06:25:46.756"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:25:46.756" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:25:46.756" endtime="20250314 06:25:46.756"/>
</kw>
<msg timestamp="20250314 06:25:46.756" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:25:43.867" endtime="20250314 06:25:46.756"/>
</kw>
<msg timestamp="20250314 06:25:46.757" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250314 06:25:46.757" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 06:25:43.866" endtime="20250314 06:25:46.757"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:46.760" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:25:58.311" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:25:58.311" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 06:25:46.758" endtime="20250314 06:25:58.311"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:25:58.312" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 06:25:58.312" endtime="20250314 06:25:58.312"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:25:58.313" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:25:58.313" endtime="20250314 06:25:58.313"/>
</kw>
<status status="PASS" starttime="20250314 06:25:46.757" endtime="20250314 06:25:58.313"/>
</kw>
<msg timestamp="20250314 06:25:58.313" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:46.757" endtime="20250314 06:25:58.313"/>
</kw>
<msg timestamp="20250314 06:25:58.313" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 06:25:46.757" endtime="20250314 06:25:58.313"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:25:58.314" endtime="20250314 06:25:58.314"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:25:58.319" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:01.357" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:01.357" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:25:58.316" endtime="20250314 06:26:01.357"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:01.358" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:01.357" endtime="20250314 06:26:01.358"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:01.358" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:01.358" endtime="20250314 06:26:01.358"/>
</kw>
<status status="PASS" starttime="20250314 06:25:58.316" endtime="20250314 06:26:01.358"/>
</kw>
<msg timestamp="20250314 06:26:01.358" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:25:58.315" endtime="20250314 06:26:01.359"/>
</kw>
<msg timestamp="20250314 06:26:01.359" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:25:58.315" endtime="20250314 06:26:01.359"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:01.359" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:26:01.359" endtime="20250314 06:26:01.359"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:01.359" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:26:01.359" endtime="20250314 06:26:01.359"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:01.360" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:01.360" endtime="20250314 06:26:01.360"/>
</kw>
<msg timestamp="20250314 06:26:01.360" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:25:58.315" endtime="20250314 06:26:01.360"/>
</kw>
<msg timestamp="20250314 06:26:01.360" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250314 06:25:58.314" endtime="20250314 06:26:01.360"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:26:01.360" endtime="20250314 06:26:01.361"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250314 06:26:01.361" endtime="20250314 06:26:01.361"/>
</kw>
<status status="PASS" starttime="20250314 06:26:01.361" endtime="20250314 06:26:01.361"/>
</kw>
<status status="PASS" starttime="20250314 06:25:58.314" endtime="20250314 06:26:01.361"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:25:43.866" endtime="20250314 06:26:01.362"/>
</test>
<test id="s1-s5-t2" name="Transfer Leadership for OM with Multiple ServiceIDs, Valid ServiceID Specified" line="62">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:01.366" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:04.553" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:04.553" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:01.364" endtime="20250314 06:26:04.553"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:04.554" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:04.554" endtime="20250314 06:26:04.554"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:04.555" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:04.554" endtime="20250314 06:26:04.555"/>
</kw>
<status status="PASS" starttime="20250314 06:26:01.364" endtime="20250314 06:26:04.555"/>
</kw>
<msg timestamp="20250314 06:26:04.555" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:01.363" endtime="20250314 06:26:04.555"/>
</kw>
<msg timestamp="20250314 06:26:04.555" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:01.363" endtime="20250314 06:26:04.555"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:04.556" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:26:04.555" endtime="20250314 06:26:04.556"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:04.556" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:26:04.556" endtime="20250314 06:26:04.556"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:04.556" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:04.556" endtime="20250314 06:26:04.556"/>
</kw>
<msg timestamp="20250314 06:26:04.557" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:01.363" endtime="20250314 06:26:04.557"/>
</kw>
<msg timestamp="20250314 06:26:04.557" level="INFO">${leaderOM} = om1</msg>
<msg timestamp="20250314 06:26:04.557" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250314 06:26:01.363" endtime="20250314 06:26:04.557"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:04.560" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:12.851" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:12.851" level="INFO">${output} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250314 06:26:04.558" endtime="20250314 06:26:12.851"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:12.852" level="INFO">Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250314 06:26:12.851" endtime="20250314 06:26:12.852"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:12.852" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:12.852" endtime="20250314 06:26:12.852"/>
</kw>
<status status="PASS" starttime="20250314 06:26:04.558" endtime="20250314 06:26:12.852"/>
</kw>
<msg timestamp="20250314 06:26:12.852" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:04.557" endtime="20250314 06:26:12.853"/>
</kw>
<msg timestamp="20250314 06:26:12.853" level="INFO">${result} = Transfer leadership successfully to om3.</msg>
<status status="PASS" starttime="20250314 06:26:04.557" endtime="20250314 06:26:12.853"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:26:12.853" endtime="20250314 06:26:12.853"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:12.858" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:15.775" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:15.775" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:12.855" endtime="20250314 06:26:15.775"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:15.776" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:15.775" endtime="20250314 06:26:15.776"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:15.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:15.776" endtime="20250314 06:26:15.777"/>
</kw>
<status status="PASS" starttime="20250314 06:26:12.855" endtime="20250314 06:26:15.777"/>
</kw>
<msg timestamp="20250314 06:26:15.777" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:12.855" endtime="20250314 06:26:15.777"/>
</kw>
<msg timestamp="20250314 06:26:15.777" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:12.854" endtime="20250314 06:26:15.777"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:15.777" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:26:15.777" endtime="20250314 06:26:15.777"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:15.778" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:26:15.778" endtime="20250314 06:26:15.778"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:15.778" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:15.778" endtime="20250314 06:26:15.778"/>
</kw>
<msg timestamp="20250314 06:26:15.778" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:12.854" endtime="20250314 06:26:15.778"/>
</kw>
<msg timestamp="20250314 06:26:15.779" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250314 06:26:12.854" endtime="20250314 06:26:15.779"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:26:15.779" endtime="20250314 06:26:15.779"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250314 06:26:15.779" endtime="20250314 06:26:15.780"/>
</kw>
<status status="PASS" starttime="20250314 06:26:15.779" endtime="20250314 06:26:15.780"/>
</kw>
<status status="PASS" starttime="20250314 06:26:12.853" endtime="20250314 06:26:15.780"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:26:01.362" endtime="20250314 06:26:15.780"/>
</test>
<test id="s1-s5-t3" name="Transfer Leadership for OM with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="72">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:15.785" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:18.880" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:18.880" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:15.782" endtime="20250314 06:26:18.880"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:18.881" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:18.881" endtime="20250314 06:26:18.881"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:18.882" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:18.881" endtime="20250314 06:26:18.882"/>
</kw>
<status status="PASS" starttime="20250314 06:26:15.782" endtime="20250314 06:26:18.882"/>
</kw>
<msg timestamp="20250314 06:26:18.882" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:15.782" endtime="20250314 06:26:18.882"/>
</kw>
<msg timestamp="20250314 06:26:18.882" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:15.782" endtime="20250314 06:26:18.882"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:18.883" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:26:18.882" endtime="20250314 06:26:18.883"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:18.883" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:26:18.883" endtime="20250314 06:26:18.883"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:18.883" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:18.883" endtime="20250314 06:26:18.883"/>
</kw>
<msg timestamp="20250314 06:26:18.884" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:15.781" endtime="20250314 06:26:18.884"/>
</kw>
<msg timestamp="20250314 06:26:18.884" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 06:26:15.781" endtime="20250314 06:26:18.884"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:18.887" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:20.641" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:26:20.641" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 06:26:18.884" endtime="20250314 06:26:20.641"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:20.642" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250314 06:26:20.642" endtime="20250314 06:26:20.642"/>
</kw>
<msg timestamp="20250314 06:26:20.642" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 06:26:18.884" endtime="20250314 06:26:20.642"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:26:20.642" endtime="20250314 06:26:20.643"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:26:15.780" endtime="20250314 06:26:20.643"/>
</test>
<test id="s1-s5-t4" name="Transfer Leadership for OM with Multiple ServiceIDs, Invalid ServiceID Specified" line="80">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:20.648" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:23.551" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:23.551" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:20.646" endtime="20250314 06:26:23.551"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:23.552" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:23.551" endtime="20250314 06:26:23.552"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:23.552" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:23.552" endtime="20250314 06:26:23.552"/>
</kw>
<status status="PASS" starttime="20250314 06:26:20.645" endtime="20250314 06:26:23.552"/>
</kw>
<msg timestamp="20250314 06:26:23.552" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:20.645" endtime="20250314 06:26:23.552"/>
</kw>
<msg timestamp="20250314 06:26:23.553" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:20.645" endtime="20250314 06:26:23.553"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:23.553" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:26:23.553" endtime="20250314 06:26:23.553"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:23.554" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:26:23.553" endtime="20250314 06:26:23.554"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:23.554" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:23.554" endtime="20250314 06:26:23.554"/>
</kw>
<msg timestamp="20250314 06:26:23.554" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:20.645" endtime="20250314 06:26:23.554"/>
</kw>
<msg timestamp="20250314 06:26:23.554" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 06:26:20.644" endtime="20250314 06:26:23.554"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:23.557" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:25.406" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:26:25.406" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:26:23.555" endtime="20250314 06:26:25.406"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:25.407" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:26:25.406" endtime="20250314 06:26:25.407"/>
</kw>
<msg timestamp="20250314 06:26:25.407" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:26:23.554" endtime="20250314 06:26:25.407"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:26:25.407" endtime="20250314 06:26:25.408"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:26:20.643" endtime="20250314 06:26:25.408"/>
</test>
<test id="s1-s5-t5" name="Transfer Leadership for OM without ServiceID specified" line="88">
<kw name="Get OM Leader and One Follower Node">
<var>${leaderOM}</var>
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:25.413" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:28.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:28.448" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:25.410" endtime="20250314 06:26:28.448"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:28.449" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:28.449" endtime="20250314 06:26:28.449"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:28.450" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:28.449" endtime="20250314 06:26:28.450"/>
</kw>
<status status="PASS" starttime="20250314 06:26:25.410" endtime="20250314 06:26:28.450"/>
</kw>
<msg timestamp="20250314 06:26:28.450" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:25.410" endtime="20250314 06:26:28.450"/>
</kw>
<msg timestamp="20250314 06:26:28.450" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:26:25.409" endtime="20250314 06:26:28.450"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:28.451" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:26:28.450" endtime="20250314 06:26:28.451"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:28.451" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:26:28.451" endtime="20250314 06:26:28.451"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:28.452" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:28.451" endtime="20250314 06:26:28.452"/>
</kw>
<msg timestamp="20250314 06:26:28.452" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:25.409" endtime="20250314 06:26:28.452"/>
</kw>
<msg timestamp="20250314 06:26:28.452" level="INFO">${leaderOM} = om3</msg>
<msg timestamp="20250314 06:26:28.452" level="INFO">${followerOM} = om1</msg>
<status status="PASS" starttime="20250314 06:26:25.409" endtime="20250314 06:26:28.452"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -n ${followerOM}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:28.456" level="INFO">Running command 'ozone admin om transfer -n om1 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:39.052" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:39.052" level="INFO">${output} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 06:26:28.453" endtime="20250314 06:26:39.052"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:39.053" level="INFO">Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 06:26:39.053" endtime="20250314 06:26:39.053"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:39.054" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:39.053" endtime="20250314 06:26:39.054"/>
</kw>
<status status="PASS" starttime="20250314 06:26:28.453" endtime="20250314 06:26:39.054"/>
</kw>
<msg timestamp="20250314 06:26:39.054" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:28.452" endtime="20250314 06:26:39.054"/>
</kw>
<msg timestamp="20250314 06:26:39.054" level="INFO">${result} = Transfer leadership successfully to om1.</msg>
<status status="PASS" starttime="20250314 06:26:28.452" endtime="20250314 06:26:39.054"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:26:39.054" endtime="20250314 06:26:39.055"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>${followerOM}</arg>
<arg>true</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:39.059" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:42.161" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:42.161" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:39.056" endtime="20250314 06:26:42.161"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:42.162" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:42.161" endtime="20250314 06:26:42.162"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:42.162" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:42.162" endtime="20250314 06:26:42.162"/>
</kw>
<status status="PASS" starttime="20250314 06:26:39.056" endtime="20250314 06:26:42.163"/>
</kw>
<msg timestamp="20250314 06:26:42.163" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:39.056" endtime="20250314 06:26:42.163"/>
</kw>
<msg timestamp="20250314 06:26:42.163" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:39.056" endtime="20250314 06:26:42.163"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:42.163" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:26:42.163" endtime="20250314 06:26:42.163"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:42.164" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:26:42.163" endtime="20250314 06:26:42.164"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:42.164" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:42.164" endtime="20250314 06:26:42.164"/>
</kw>
<msg timestamp="20250314 06:26:42.164" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:39.055" endtime="20250314 06:26:42.164"/>
</kw>
<msg timestamp="20250314 06:26:42.164" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250314 06:26:39.055" endtime="20250314 06:26:42.164"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:26:42.164" endtime="20250314 06:26:42.165"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20250314 06:26:42.165" endtime="20250314 06:26:42.165"/>
</kw>
<status status="PASS" starttime="20250314 06:26:42.165" endtime="20250314 06:26:42.166"/>
</kw>
<status status="PASS" starttime="20250314 06:26:39.055" endtime="20250314 06:26:42.166"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:26:25.408" endtime="20250314 06:26:42.166"/>
</test>
<test id="s1-s5-t6" name="Transfer Leadership for OM with Multiple ServiceIDs, No ServiceID Specified" line="98">
<kw name="Get One OM Follower Node">
<var>${followerOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:42.170" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:45.116" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:45.116" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:42.168" endtime="20250314 06:26:45.116"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:45.117" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:45.116" endtime="20250314 06:26:45.117"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:45.117" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:45.117" endtime="20250314 06:26:45.117"/>
</kw>
<status status="PASS" starttime="20250314 06:26:42.168" endtime="20250314 06:26:45.117"/>
</kw>
<msg timestamp="20250314 06:26:45.117" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:42.167" endtime="20250314 06:26:45.118"/>
</kw>
<msg timestamp="20250314 06:26:45.118" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:42.167" endtime="20250314 06:26:45.118"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:45.118" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:26:45.118" endtime="20250314 06:26:45.118"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:45.119" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:26:45.118" endtime="20250314 06:26:45.119"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:45.119" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:45.119" endtime="20250314 06:26:45.119"/>
</kw>
<msg timestamp="20250314 06:26:45.119" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:42.167" endtime="20250314 06:26:45.119"/>
</kw>
<msg timestamp="20250314 06:26:45.119" level="INFO">${followerOM} = om3</msg>
<status status="PASS" starttime="20250314 06:26:42.167" endtime="20250314 06:26:45.119"/>
</kw>
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n ${followerOM}</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:45.123" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -n om3 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:46.619" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:26:46.619" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:26:45.120" endtime="20250314 06:26:46.619"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:46.620" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:26:46.619" endtime="20250314 06:26:46.620"/>
</kw>
<msg timestamp="20250314 06:26:46.620" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:26:45.120" endtime="20250314 06:26:46.620"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:26:46.620" endtime="20250314 06:26:46.620"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:26:42.166" endtime="20250314 06:26:46.621"/>
</test>
<test id="s1-s5-t7" name="Transfer Leadership for OM randomly with Valid ServiceID Specified" line="106">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:46.625" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:26:49.641" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:26:49.641" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:46.623" endtime="20250314 06:26:49.641"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:26:49.642" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:49.641" endtime="20250314 06:26:49.642"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:26:49.642" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:26:49.642" endtime="20250314 06:26:49.642"/>
</kw>
<status status="PASS" starttime="20250314 06:26:46.623" endtime="20250314 06:26:49.642"/>
</kw>
<msg timestamp="20250314 06:26:49.642" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:46.622" endtime="20250314 06:26:49.642"/>
</kw>
<msg timestamp="20250314 06:26:49.643" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:26:46.622" endtime="20250314 06:26:49.643"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:49.643" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:26:49.643" endtime="20250314 06:26:49.643"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:49.643" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:26:49.643" endtime="20250314 06:26:49.643"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:26:49.644" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:26:49.644" endtime="20250314 06:26:49.644"/>
</kw>
<msg timestamp="20250314 06:26:49.644" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:26:46.622" endtime="20250314 06:26:49.644"/>
</kw>
<msg timestamp="20250314 06:26:49.644" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250314 06:26:46.622" endtime="20250314 06:26:49.644"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:26:49.648" level="INFO">Running command 'ozone admin om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:03.128" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:03.128" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:26:49.645" endtime="20250314 06:27:03.128"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:03.129" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:03.128" endtime="20250314 06:27:03.129"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:03.130" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:03.129" endtime="20250314 06:27:03.130"/>
</kw>
<status status="PASS" starttime="20250314 06:26:49.645" endtime="20250314 06:27:03.130"/>
</kw>
<msg timestamp="20250314 06:27:03.130" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:26:49.645" endtime="20250314 06:27:03.130"/>
</kw>
<msg timestamp="20250314 06:27:03.130" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:26:49.644" endtime="20250314 06:27:03.130"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:03.130" endtime="20250314 06:27:03.131"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:03.137" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:06.287" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:06.287" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:03.133" endtime="20250314 06:27:06.287"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:06.288" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:06.287" endtime="20250314 06:27:06.288"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:06.288" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:06.288" endtime="20250314 06:27:06.288"/>
</kw>
<status status="PASS" starttime="20250314 06:27:03.133" endtime="20250314 06:27:06.288"/>
</kw>
<msg timestamp="20250314 06:27:06.288" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:03.133" endtime="20250314 06:27:06.289"/>
</kw>
<msg timestamp="20250314 06:27:06.289" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:03.132" endtime="20250314 06:27:06.289"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:06.289" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:27:06.289" endtime="20250314 06:27:06.289"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:06.289" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:27:06.289" endtime="20250314 06:27:06.289"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:06.290" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:27:06.289" endtime="20250314 06:27:06.290"/>
</kw>
<msg timestamp="20250314 06:27:06.290" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:27:03.132" endtime="20250314 06:27:06.290"/>
</kw>
<msg timestamp="20250314 06:27:06.290" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250314 06:27:03.131" endtime="20250314 06:27:06.290"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:27:06.290" endtime="20250314 06:27:06.290"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250314 06:27:06.291" endtime="20250314 06:27:06.291"/>
</kw>
<status status="PASS" starttime="20250314 06:27:03.131" endtime="20250314 06:27:06.291"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:26:46.621" endtime="20250314 06:27:06.291"/>
</test>
<test id="s1-s5-t8" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Valid ServiceID Specified" line="115">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:06.296" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:09.095" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:09.095" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:06.294" endtime="20250314 06:27:09.095"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:09.096" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:09.095" endtime="20250314 06:27:09.096"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:09.096" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:09.096" endtime="20250314 06:27:09.096"/>
</kw>
<status status="PASS" starttime="20250314 06:27:06.293" endtime="20250314 06:27:09.096"/>
</kw>
<msg timestamp="20250314 06:27:09.097" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:06.293" endtime="20250314 06:27:09.097"/>
</kw>
<msg timestamp="20250314 06:27:09.097" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:06.293" endtime="20250314 06:27:09.097"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:09.097" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:27:09.097" endtime="20250314 06:27:09.097"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:09.098" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:27:09.097" endtime="20250314 06:27:09.098"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:09.098" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:27:09.098" endtime="20250314 06:27:09.098"/>
</kw>
<msg timestamp="20250314 06:27:09.098" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:27:06.292" endtime="20250314 06:27:09.098"/>
</kw>
<msg timestamp="20250314 06:27:09.098" level="INFO">${leaderOM} = om3</msg>
<status status="PASS" starttime="20250314 06:27:06.292" endtime="20250314 06:27:09.098"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:09.102" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:21.147" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:21.147" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:09.100" endtime="20250314 06:27:21.147"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:21.148" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:21.147" endtime="20250314 06:27:21.148"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:21.148" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:21.148" endtime="20250314 06:27:21.149"/>
</kw>
<status status="PASS" starttime="20250314 06:27:09.099" endtime="20250314 06:27:21.149"/>
</kw>
<msg timestamp="20250314 06:27:21.149" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:09.099" endtime="20250314 06:27:21.149"/>
</kw>
<msg timestamp="20250314 06:27:21.149" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:09.098" endtime="20250314 06:27:21.149"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:21.149" endtime="20250314 06:27:21.149"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:21.154" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:24.381" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:24.381" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:27:21.151" endtime="20250314 06:27:24.382"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:24.382" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:27:24.382" endtime="20250314 06:27:24.382"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:24.383" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:24.383" endtime="20250314 06:27:24.383"/>
</kw>
<status status="PASS" starttime="20250314 06:27:21.151" endtime="20250314 06:27:24.383"/>
</kw>
<msg timestamp="20250314 06:27:24.383" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:21.151" endtime="20250314 06:27:24.383"/>
</kw>
<msg timestamp="20250314 06:27:24.383" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:27:21.150" endtime="20250314 06:27:24.383"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:24.384" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:27:24.383" endtime="20250314 06:27:24.384"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:24.384" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:27:24.384" endtime="20250314 06:27:24.384"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:24.384" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:27:24.384" endtime="20250314 06:27:24.384"/>
</kw>
<msg timestamp="20250314 06:27:24.385" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:27:21.150" endtime="20250314 06:27:24.385"/>
</kw>
<msg timestamp="20250314 06:27:24.385" level="INFO">${newLeaderOM} = om1</msg>
<status status="PASS" starttime="20250314 06:27:21.150" endtime="20250314 06:27:24.385"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:27:24.385" endtime="20250314 06:27:24.385"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250314 06:27:24.385" endtime="20250314 06:27:24.386"/>
</kw>
<status status="PASS" starttime="20250314 06:27:21.150" endtime="20250314 06:27:24.386"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:27:06.292" endtime="20250314 06:27:24.386"/>
</test>
<test id="s1-s5-t9" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Unconfigured ServiceID Specified" line="125">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:24.389" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice3 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:26.093" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:27:26.093" level="INFO">${output} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 06:27:24.387" endtime="20250314 06:27:26.094"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:26.094" level="INFO">This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservice2]</msg>
<status status="PASS" starttime="20250314 06:27:26.094" endtime="20250314 06:27:26.094"/>
</kw>
<msg timestamp="20250314 06:27:26.095" level="INFO">${result} = This command works only on OzoneManager HA cluster. Service ID specified does not match with ozone.om.service.ids defined in the configuration. Configured ozone.om.service.ids are [omservice, omservic...</msg>
<status status="PASS" starttime="20250314 06:27:24.387" endtime="20250314 06:27:26.095"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Service ID specified does not match</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:26.095" endtime="20250314 06:27:26.095"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:27:24.386" endtime="20250314 06:27:26.095"/>
</test>
<test id="s1-s5-t10" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, Invalid ServiceID Specified" line="130">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:26.099" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,omservice2 om transfer --service-id=omservice2 -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:27.815" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:27:27.815" level="INFO">${output} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:27:26.097" endtime="20250314 06:27:27.815"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:27.816" level="INFO">Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:27:27.816" endtime="20250314 06:27:27.816"/>
</kw>
<msg timestamp="20250314 06:27:27.817" level="INFO">${result} = Could not find any configured addresses for OM. Please configure the system with ozone.om.address</msg>
<status status="PASS" starttime="20250314 06:27:26.096" endtime="20250314 06:27:27.817"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Could not find any configured addresses for OM.</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:27.817" endtime="20250314 06:27:27.817"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:27:26.096" endtime="20250314 06:27:27.817"/>
</test>
<test id="s1-s5-t11" name="Transfer Leadership for OM randomly without ServiceID specified" line="136">
<kw name="Get OM Leader Node">
<var>${leaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:27.822" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:30.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:30.637" level="INFO">${output} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:27:27.820" endtime="20250314 06:27:30.637"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:30.638" level="INFO">om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:27:30.637" endtime="20250314 06:27:30.638"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:30.638" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:30.638" endtime="20250314 06:27:30.638"/>
</kw>
<status status="PASS" starttime="20250314 06:27:27.819" endtime="20250314 06:27:30.639"/>
</kw>
<msg timestamp="20250314 06:27:30.639" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:27.819" endtime="20250314 06:27:30.639"/>
</kw>
<msg timestamp="20250314 06:27:30.639" level="INFO">${result} = om1
om3
om2</msg>
<status status="PASS" starttime="20250314 06:27:27.819" endtime="20250314 06:27:30.639"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:30.639" level="INFO">${leader} = om1</msg>
<status status="PASS" starttime="20250314 06:27:30.639" endtime="20250314 06:27:30.639"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:30.640" level="INFO">${follower1} = om3</msg>
<status status="PASS" starttime="20250314 06:27:30.639" endtime="20250314 06:27:30.640"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:30.640" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:27:30.640" endtime="20250314 06:27:30.640"/>
</kw>
<msg timestamp="20250314 06:27:30.640" level="INFO">${result} = ['om1', 'om3', 'om2']</msg>
<status status="PASS" starttime="20250314 06:27:27.818" endtime="20250314 06:27:30.640"/>
</kw>
<msg timestamp="20250314 06:27:30.640" level="INFO">${leaderOM} = om1</msg>
<status status="PASS" starttime="20250314 06:27:27.818" endtime="20250314 06:27:30.640"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om transfer -r</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:30.644" level="INFO">Running command 'ozone admin om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:43.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:43.637" level="INFO">${output} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:30.641" endtime="20250314 06:27:43.637"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:43.638" level="INFO">Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:43.637" endtime="20250314 06:27:43.638"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:43.638" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:43.638" endtime="20250314 06:27:43.638"/>
</kw>
<status status="PASS" starttime="20250314 06:27:30.641" endtime="20250314 06:27:43.639"/>
</kw>
<msg timestamp="20250314 06:27:43.639" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:30.641" endtime="20250314 06:27:43.639"/>
</kw>
<msg timestamp="20250314 06:27:43.639" level="INFO">${result} = Transfer leadership successfully to random node.</msg>
<status status="PASS" starttime="20250314 06:27:30.640" endtime="20250314 06:27:43.639"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:43.639" endtime="20250314 06:27:43.639"/>
</kw>
<kw name="Assert OM leader Role Transitions">
<arg>${leaderOM}</arg>
<arg>""</arg>
<arg>false</arg>
<kw name="Get OM Leader Node">
<var>${newLeaderOM}</var>
<kw name="Get OM Nodes">
<var>${result}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]'</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:43.643" level="INFO">Running command 'ozone admin om roles --service-id=omservice --json | jq -r '[.[] | .[] | select(.serverRole == "LEADER") | .hostname], [.[] | .[] | select(.serverRole == "FOLLOWER") | .hostname] | .[]' 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:46.605" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:46.605" level="INFO">${output} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:43.641" endtime="20250314 06:27:46.605"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:46.606" level="INFO">om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:46.606" endtime="20250314 06:27:46.606"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:46.606" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:46.606" endtime="20250314 06:27:46.607"/>
</kw>
<status status="PASS" starttime="20250314 06:27:43.641" endtime="20250314 06:27:46.607"/>
</kw>
<msg timestamp="20250314 06:27:46.607" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:43.640" endtime="20250314 06:27:46.607"/>
</kw>
<msg timestamp="20250314 06:27:46.607" level="INFO">${result} = om3
om1
om2</msg>
<status status="PASS" starttime="20250314 06:27:43.640" endtime="20250314 06:27:46.607"/>
</kw>
<kw name="Get Line" library="String">
<var>${leader}</var>
<arg>${result}</arg>
<arg>0</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:46.607" level="INFO">${leader} = om3</msg>
<status status="PASS" starttime="20250314 06:27:46.607" endtime="20250314 06:27:46.607"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower1}</var>
<arg>${result}</arg>
<arg>1</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:46.608" level="INFO">${follower1} = om1</msg>
<status status="PASS" starttime="20250314 06:27:46.607" endtime="20250314 06:27:46.608"/>
</kw>
<kw name="Get Line" library="String">
<var>${follower2}</var>
<arg>${result}</arg>
<arg>2</arg>
<doc>Returns the specified line from the given ``string``.</doc>
<msg timestamp="20250314 06:27:46.608" level="INFO">${follower2} = om2</msg>
<status status="PASS" starttime="20250314 06:27:46.608" endtime="20250314 06:27:46.608"/>
</kw>
<msg timestamp="20250314 06:27:46.608" level="INFO">${result} = ['om3', 'om1', 'om2']</msg>
<status status="PASS" starttime="20250314 06:27:43.640" endtime="20250314 06:27:46.608"/>
</kw>
<msg timestamp="20250314 06:27:46.608" level="INFO">${newLeaderOM} = om3</msg>
<status status="PASS" starttime="20250314 06:27:43.640" endtime="20250314 06:27:46.609"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:27:46.609" endtime="20250314 06:27:46.609"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${isEqualCheck}' == 'true'</arg>
<arg>Should be Equal</arg>
<arg>${followerOM}</arg>
<arg>${newLeaderOM}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20250314 06:27:46.609" endtime="20250314 06:27:46.609"/>
</kw>
<status status="PASS" starttime="20250314 06:27:43.639" endtime="20250314 06:27:46.609"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:27:27.818" endtime="20250314 06:27:46.609"/>
</test>
<test id="s1-s5-t12" name="Transfer Leadership for OM randomly with Multiple ServiceIDs, No ServiceID Specified" line="146">
<kw name="Execute And Ignore Error" library="os">
<var>${result}</var>
<arg>ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:46.613" level="INFO">Running command 'ozone admin --set=ozone.om.service.ids=omservice,ozone1 om transfer -r 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:48.168" level="INFO">${rc} = 255</msg>
<msg timestamp="20250314 06:27:48.168" level="INFO">${output} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:27:46.611" endtime="20250314 06:27:48.168"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:48.169" level="INFO">There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:27:48.168" endtime="20250314 06:27:48.169"/>
</kw>
<msg timestamp="20250314 06:27:48.169" level="INFO">${result} = There is no Ozone Manager service ID specified, but there are either zero, or more than one service IDconfigured.</msg>
<status status="PASS" starttime="20250314 06:27:46.610" endtime="20250314 06:27:48.169"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>no Ozone Manager service ID specified</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:48.169" endtime="20250314 06:27:48.169"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:27:46.610" endtime="20250314 06:27:48.169"/>
</test>
<doc>Smoketest for OM leader transfer</doc>
<status status="PASS" starttime="20250314 06:25:43.825" endtime="20250314 06:27:48.171"/>
</suite>
<suite id="s1-s6" name="Scm-Leader-Transfer" source="/opt/hadoop/smoketest/scmha/scm-leader-transfer.robot">
<test id="s1-s6-t1" name="Transfer Leadership" line="47">
<kw name="Get SCM Leader Node">
<var>${leaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:48.818" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:51.048" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:51.048" level="INFO">${output} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:27:48.815" endtime="20250314 06:27:51.048"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:51.049" level="INFO">scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:27:51.048" endtime="20250314 06:27:51.049"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:51.049" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:51.049" endtime="20250314 06:27:51.049"/>
</kw>
<status status="PASS" starttime="20250314 06:27:48.815" endtime="20250314 06:27:51.049"/>
</kw>
<msg timestamp="20250314 06:27:51.049" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:48.815" endtime="20250314 06:27:51.050"/>
</kw>
<msg timestamp="20250314 06:27:51.050" level="INFO">${result} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:27:48.815" endtime="20250314 06:27:51.050"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:51.050" level="INFO">scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:27:51.050" endtime="20250314 06:27:51.050"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:51.050" endtime="20250314 06:27:51.050"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:27:51.050" endtime="20250314 06:27:51.051"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250314 06:27:51.051" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250314 06:27:51.051" level="INFO">${scmLine} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116</msg>
<status status="PASS" starttime="20250314 06:27:51.051" endtime="20250314 06:27:51.051"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250314 06:27:51.052" level="INFO">${splits} = ['scm1.org', '9894', 'LEADER', '1706aaa3-04fd-4b46-8b12-89d83b761083', '172.25.0.116']</msg>
<status status="PASS" starttime="20250314 06:27:51.051" endtime="20250314 06:27:51.052"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250314 06:27:51.052" level="INFO">${leaderSCM} = 1706aaa3-04fd-4b46-8b12-89d83b761083</msg>
<status status="PASS" starttime="20250314 06:27:51.052" endtime="20250314 06:27:51.052"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:51.053" level="INFO">Leader SCM: 1706aaa3-04fd-4b46-8b12-89d83b761083</msg>
<status status="PASS" starttime="20250314 06:27:51.053" endtime="20250314 06:27:51.053"/>
</kw>
<msg timestamp="20250314 06:27:51.053" level="INFO">${leaderSCM} = 1706aaa3-04fd-4b46-8b12-89d83b761083</msg>
<status status="PASS" starttime="20250314 06:27:48.814" endtime="20250314 06:27:51.053"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:51.053" level="INFO">Leader SCM: 1706aaa3-04fd-4b46-8b12-89d83b761083</msg>
<status status="PASS" starttime="20250314 06:27:51.053" endtime="20250314 06:27:51.053"/>
</kw>
<kw name="Get SCM UUID">
<var>${target_scm_uuid}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:51.057" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:27:53.347" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:27:53.347" level="INFO">${output} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:27:51.054" endtime="20250314 06:27:53.348"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:53.348" level="INFO">scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:27:53.348" endtime="20250314 06:27:53.349"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:27:53.349" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:27:53.349" endtime="20250314 06:27:53.349"/>
</kw>
<status status="PASS" starttime="20250314 06:27:51.054" endtime="20250314 06:27:53.349"/>
</kw>
<msg timestamp="20250314 06:27:53.349" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:51.054" endtime="20250314 06:27:53.349"/>
</kw>
<msg timestamp="20250314 06:27:53.349" level="INFO">${result} = scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:27:51.054" endtime="20250314 06:27:53.350"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:27:53.350" level="INFO">scm1.org:9894:LEADER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:27:53.350" endtime="20250314 06:27:53.350"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scm_line}</var>
<arg>${result}</arg>
<arg>${TARGET_SCM}</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250314 06:27:53.350" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250314 06:27:53.350" level="INFO">${scm_line} = scm2.org:9894:FOLLOWER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:27:53.350" endtime="20250314 06:27:53.350"/>
</kw>
<kw name="Split String" library="String">
<var>${scm_split}</var>
<arg>${scm_line}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250314 06:27:53.351" level="INFO">${scm_split} = ['scm2.org', '9894', 'FOLLOWER', '1309d609-dde0-4799-ad7d-e3b0f792e3e6', '172.25.0.117']</msg>
<status status="PASS" starttime="20250314 06:27:53.350" endtime="20250314 06:27:53.351"/>
</kw>
<kw name="Strip String" library="String">
<var>${scm_uuid}</var>
<arg>${scm_split[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250314 06:27:53.352" level="INFO">${scm_uuid} = 1309d609-dde0-4799-ad7d-e3b0f792e3e6</msg>
<status status="PASS" starttime="20250314 06:27:53.351" endtime="20250314 06:27:53.352"/>
</kw>
<msg timestamp="20250314 06:27:53.352" level="INFO">${target_scm_uuid} = 1309d609-dde0-4799-ad7d-e3b0f792e3e6</msg>
<status status="PASS" starttime="20250314 06:27:51.053" endtime="20250314 06:27:53.352"/>
</kw>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm transfer --service-id=scmservice -n ${target_scm_uuid}</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:27:53.355" level="INFO">Running command 'ozone admin scm transfer --service-id=scmservice -n 1309d609-dde0-4799-ad7d-e3b0f792e3e6 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:28:00.629" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:28:00.629" level="INFO">${output} = Transfer leadership successfully to 1309d609-dde0-4799-ad7d-e3b0f792e3e6.</msg>
<status status="PASS" starttime="20250314 06:27:53.353" endtime="20250314 06:28:00.629"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:28:00.630" level="INFO">Transfer leadership successfully to 1309d609-dde0-4799-ad7d-e3b0f792e3e6.</msg>
<status status="PASS" starttime="20250314 06:28:00.629" endtime="20250314 06:28:00.630"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:28:00.630" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:28:00.630" endtime="20250314 06:28:00.630"/>
</kw>
<status status="PASS" starttime="20250314 06:27:53.353" endtime="20250314 06:28:00.630"/>
</kw>
<msg timestamp="20250314 06:28:00.630" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:27:53.352" endtime="20250314 06:28:00.631"/>
</kw>
<msg timestamp="20250314 06:28:00.631" level="INFO">${result} = Transfer leadership successfully to 1309d609-dde0-4799-ad7d-e3b0f792e3e6.</msg>
<status status="PASS" starttime="20250314 06:27:53.352" endtime="20250314 06:28:00.631"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:28:00.631" level="INFO">Transfer leadership successfully to 1309d609-dde0-4799-ad7d-e3b0f792e3e6.</msg>
<status status="PASS" starttime="20250314 06:28:00.631" endtime="20250314 06:28:00.631"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>Transfer leadership successfully</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:28:00.631" endtime="20250314 06:28:00.631"/>
</kw>
<kw name="Get SCM Leader Node">
<var>${newLeaderSCM}</var>
<kw name="Execute" library="os">
<var>${result}</var>
<arg>ozone admin scm roles --service-id=scmservice</arg>
<kw name="Run Keyword And Return" library="BuiltIn">
<arg>Execute and checkrc</arg>
<arg>${command}</arg>
<arg>0</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Execute and checkrc" library="os">
<arg>${command}</arg>
<arg>0</arg>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<var>${rc}</var>
<var>${output}</var>
<arg>${command}</arg>
<doc>Runs the given command in the system and returns the RC and output.</doc>
<msg timestamp="20250314 06:28:00.635" level="INFO">Running command 'ozone admin scm roles --service-id=scmservice 2&gt;&amp;1'.</msg>
<msg timestamp="20250314 06:28:05.284" level="INFO">${rc} = 0</msg>
<msg timestamp="20250314 06:28:05.284" level="INFO">${output} = scm1.org:9894:FOLLOWER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:LEADER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:28:00.632" endtime="20250314 06:28:05.284"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:28:05.285" level="INFO">scm1.org:9894:FOLLOWER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:LEADER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:28:05.285" endtime="20250314 06:28:05.285"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${rc}</arg>
<arg>${expected_error_code}</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20250314 06:28:05.286" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20250314 06:28:05.285" endtime="20250314 06:28:05.286"/>
</kw>
<status status="PASS" starttime="20250314 06:28:00.632" endtime="20250314 06:28:05.286"/>
</kw>
<msg timestamp="20250314 06:28:05.286" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20250314 06:28:00.632" endtime="20250314 06:28:05.286"/>
</kw>
<msg timestamp="20250314 06:28:05.286" level="INFO">${result} = scm1.org:9894:FOLLOWER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:LEADER:1309d609-dde0-4799-ad7d-e3b0f792e...</msg>
<status status="PASS" starttime="20250314 06:28:00.632" endtime="20250314 06:28:05.286"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:28:05.287" level="INFO">scm1.org:9894:FOLLOWER:1706aaa3-04fd-4b46-8b12-89d83b761083:172.25.0.116
scm3.org:9894:FOLLOWER:0974e632-9300-44b6-9da1-663af16668c6:172.25.0.118
scm2.org:9894:LEADER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:28:05.286" endtime="20250314 06:28:05.287"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>LEADER</arg>
<arg>1</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:28:05.287" endtime="20250314 06:28:05.287"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${result}</arg>
<arg>FOLLOWER</arg>
<arg>2</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20250314 06:28:05.287" endtime="20250314 06:28:05.287"/>
</kw>
<kw name="Get Lines Containing String" library="String">
<var>${scmLine}</var>
<arg>${result}</arg>
<arg>LEADER</arg>
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<msg timestamp="20250314 06:28:05.288" level="INFO">1 out of 3 lines matched</msg>
<msg timestamp="20250314 06:28:05.288" level="INFO">${scmLine} = scm2.org:9894:LEADER:1309d609-dde0-4799-ad7d-e3b0f792e3e6:172.25.0.117</msg>
<status status="PASS" starttime="20250314 06:28:05.287" endtime="20250314 06:28:05.288"/>
</kw>
<kw name="Split String" library="String">
<var>${splits}</var>
<arg>${scmLine}</arg>
<arg>:</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20250314 06:28:05.288" level="INFO">${splits} = ['scm2.org', '9894', 'LEADER', '1309d609-dde0-4799-ad7d-e3b0f792e3e6', '172.25.0.117']</msg>
<status status="PASS" starttime="20250314 06:28:05.288" endtime="20250314 06:28:05.288"/>
</kw>
<kw name="Strip String" library="String">
<var>${leaderSCM}</var>
<arg>${splits[3]}</arg>
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<msg timestamp="20250314 06:28:05.289" level="INFO">${leaderSCM} = 1309d609-dde0-4799-ad7d-e3b0f792e3e6</msg>
<status status="PASS" starttime="20250314 06:28:05.288" endtime="20250314 06:28:05.289"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Leader SCM: ${leaderSCM}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250314 06:28:05.289" level="INFO">Leader SCM: 1309d609-dde0-4799-ad7d-e3b0f792e3e6</msg>
<status status="PASS" starttime="20250314 06:28:05.289" endtime="20250314 06:28:05.289"/>
</kw>
<msg timestamp="20250314 06:28:05.289" level="INFO">${newLeaderSCM} = 1309d609-dde0-4799-ad7d-e3b0f792e3e6</msg>
<status status="PASS" starttime="20250314 06:28:00.631" endtime="20250314 06:28:05.289"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${leaderSCM}</arg>
<arg>${newLeaderSCM}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20250314 06:28:05.290" endtime="20250314 06:28:05.290"/>
</kw>
<timeout value="5 minutes"/>
<status status="PASS" starttime="20250314 06:27:48.814" endtime="20250314 06:28:05.290"/>
</test>
<doc>Smoketest ozone cluster startup</doc>
<status status="PASS" starttime="20250314 06:27:48.777" endtime="20250314 06:28:05.291"/>
</suite>
<status status="PASS" starttime="N/A" endtime="N/A" elapsedtime="192359"/>
</suite>
<statistics>
<total>
<stat pass="29" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="29" fail="0" skip="0" id="s1" name="ozonesecure-ha-leadership">ozonesecure-ha-leadership</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Kinit">ozonesecure-ha-leadership.Kinit</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2" name="Scmrole">ozonesecure-ha-leadership.Scmrole</stat>
<stat pass="6" fail="0" skip="0" id="s1-s3" name="Om-Fetch-Key">ozonesecure-ha-leadership.Om-Fetch-Key</stat>
<stat pass="6" fail="0" skip="0" id="s1-s4" name="Om-Roles">ozonesecure-ha-leadership.Om-Roles</stat>
<stat pass="12" fail="0" skip="0" id="s1-s5" name="Om-Leader-Transfer">ozonesecure-ha-leadership.Om-Leader-Transfer</stat>
<stat pass="1" fail="0" skip="0" id="s1-s6" name="Scm-Leader-Transfer">ozonesecure-ha-leadership.Scm-Leader-Transfer</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
